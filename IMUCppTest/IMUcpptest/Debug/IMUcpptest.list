
IMUcpptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080091a8  080091a8  0000a1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c0  080092c0  0000b098  2**0
                  CONTENTS
  4 .ARM          00000008  080092c0  080092c0  0000a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c8  080092c8  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c8  080092c8  0000a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092cc  080092cc  0000a2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080092d0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000098  08009368  0000b098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  08009368  0000b824  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022104  00000000  00000000  0000b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004251  00000000  00000000  0002d1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  00031428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ba  00000000  00000000  00032de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006be9  00000000  00000000  0003419a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eefe  00000000  00000000  0003ad83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001320af  00000000  00000000  00059c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bd30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  0018bd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00193328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000098 	.word	0x20000098
 8000214:	00000000 	.word	0x00000000
 8000218:	08009190 	.word	0x08009190

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000009c 	.word	0x2000009c
 8000234:	08009190 	.word	0x08009190

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_ZN6MahonyC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Mahony::Mahony()
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
{
	twoKp = twoKpDef;	// 2 * proportional gain (Kp)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a16      	ldr	r2, [pc, #88]	@ (8000f2c <_ZN6MahonyC1Ev+0x64>)
 8000ed4:	601a      	str	r2, [r3, #0]
	twoKi = twoKiDef;	// 2 * integral gain (Ki)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000edc:	605a      	str	r2, [r3, #4]
	q0 = 1.0f;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ee4:	609a      	str	r2, [r3, #8]
	q1 = 0.0f;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
	q2 = 0.0f;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
	q3 = 0.0f;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
	integralFBx = 0.0f;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
	integralFBy = 0.0f;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
	integralFBz = 0.0f;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
	invSampleFreq = 1.0f / DEFAULT_SAMPLE_FREQ;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f04f 526c 	mov.w	r2, #989855744	@ 0x3b000000
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	41f00000 	.word	0x41f00000

08000f30 <_ZN6Mahony9updateIMUEffffff>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Mahony::updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b092      	sub	sp, #72	@ 0x48
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	61f8      	str	r0, [r7, #28]
 8000f38:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f3c:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f40:	ed87 1a04 	vstr	s2, [r7, #16]
 8000f44:	edc7 1a03 	vstr	s3, [r7, #12]
 8000f48:	ed87 2a02 	vstr	s4, [r7, #8]
 8000f4c:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8000f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f54:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80011a8 <_ZN6Mahony9updateIMUEffffff+0x278>
 8000f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5c:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= 0.0174533f;
 8000f60:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f64:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80011a8 <_ZN6Mahony9updateIMUEffffff+0x278>
 8000f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6c:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= 0.0174533f;
 8000f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f74:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80011a8 <_ZN6Mahony9updateIMUEffffff+0x278>
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8c:	d10e      	bne.n	8000fac <_ZN6Mahony9updateIMUEffffff+0x7c>
 8000f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	d107      	bne.n	8000fac <_ZN6Mahony9updateIMUEffffff+0x7c>
 8000f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa8:	f000 8133 	beq.w	8001212 <_ZN6Mahony9updateIMUEffffff+0x2e2>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd0:	f000 faaa 	bl	8001528 <_ZN6Mahony7invSqrtEf>
 8000fd4:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000fd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fdc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe4:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000fe8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff4:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000ff8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ffc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	ed93 7a03 	vldr	s14, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	edd3 7a05 	vldr	s15, [r3, #20]
 8001014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	edd3 6a02 	vldr	s13, [r3, #8]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	edd3 7a04 	vldr	s15, [r3, #16]
 8001024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q0 * q1 + q2 * q3;
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	ed93 7a02 	vldr	s14, [r3, #8]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	edd3 7a03 	vldr	s15, [r3, #12]
 800103c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	edd3 6a04 	vldr	s13, [r3, #16]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	edd3 7a05 	vldr	s15, [r3, #20]
 800104c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	ed93 7a02 	vldr	s14, [r3, #8]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	edd3 7a02 	vldr	s15, [r3, #8]
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800106c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	edd3 6a05 	vldr	s13, [r3, #20]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	edd3 7a05 	vldr	s15, [r3, #20]
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8001088:	ed97 7a02 	vldr	s14, [r7, #8]
 800108c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001094:	edd7 6a01 	vldr	s13, [r7, #4]
 8001098:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 80010a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80010ac:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b4:	edd7 6a03 	vldr	s13, [r7, #12]
 80010b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 80010c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010cc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	edd7 6a02 	vldr	s13, [r7, #8]
 80010d8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd59      	ble.n	80011ac <_ZN6Mahony9updateIMUEffffff+0x27c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	edd3 6a01 	vldr	s13, [r3, #4]
 8001104:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001108:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	edc3 7a06 	vstr	s15, [r3, #24]
			integralFBy += twoKi * halfey * invSampleFreq;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	ed93 7a07 	vldr	s14, [r3, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	edd3 6a01 	vldr	s13, [r3, #4]
 800112c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001130:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	edc3 7a07 	vstr	s15, [r3, #28]
			integralFBz += twoKi * halfez * invSampleFreq;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	ed93 7a08 	vldr	s14, [r3, #32]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	edd3 6a01 	vldr	s13, [r3, #4]
 8001154:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001158:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	edc3 7a08 	vstr	s15, [r3, #32]
			gx += integralFBx;	// apply integral feedback
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	edd3 7a06 	vldr	s15, [r3, #24]
 8001176:	ed97 7a06 	vldr	s14, [r7, #24]
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	edd3 7a07 	vldr	s15, [r3, #28]
 8001188:	ed97 7a05 	vldr	s14, [r7, #20]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	edd3 7a08 	vldr	s15, [r3, #32]
 800119a:	ed97 7a04 	vldr	s14, [r7, #16]
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	edc7 7a04 	vstr	s15, [r7, #16]
 80011a6:	e00d      	b.n	80011c4 <_ZN6Mahony9updateIMUEffffff+0x294>
 80011a8:	3c8efa39 	.word	0x3c8efa39
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
			integralFBy = 0.0f;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
			integralFBz = 0.0f;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	ed93 7a00 	vldr	s14, [r3]
 80011ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	ed97 7a04 	vldr	s14, [r7, #16]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001218:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	ed97 7a06 	vldr	s14, [r7, #24]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * invSampleFreq);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001232:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	ed97 7a05 	vldr	s14, [r7, #20]
 800123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001242:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * invSampleFreq);
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800124c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001254:	ed97 7a04 	vldr	s14, [r7, #16]
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q0;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q1;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q2;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	623b      	str	r3, [r7, #32]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	ed93 7a02 	vldr	s14, [r3, #8]
 8001278:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800127c:	eef1 6a67 	vneg.f32	s13, s15
 8001280:	edd7 7a06 	vldr	s15, [r7, #24]
 8001284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001288:	ed97 6a08 	vldr	s12, [r7, #32]
 800128c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001290:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001294:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	ed93 6a05 	vldr	s12, [r3, #20]
 800129e:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	edc3 7a02 	vstr	s15, [r3, #8]
	q1 += (qa * gx + qc * gz - q3 * gy);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ba:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80012be:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012c6:	ed97 6a08 	vldr	s12, [r7, #32]
 80012ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	ed93 6a05 	vldr	s12, [r3, #20]
 80012dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	edc3 7a03 	vstr	s15, [r3, #12]
	q2 += (qa * gy - qb * gz + q3 * gx);
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80012f8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80012fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001300:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001304:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001308:	edd7 7a04 	vldr	s15, [r7, #16]
 800130c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001310:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	ed93 6a05 	vldr	s12, [r3, #20]
 800131a:	edd7 7a06 	vldr	s15, [r7, #24]
 800131e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	edc3 7a04 	vstr	s15, [r3, #16]
	q3 += (qa * gz + qb * gy - qc * gx);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	ed93 7a05 	vldr	s14, [r3, #20]
 8001336:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001342:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001346:	edd7 7a05 	vldr	s15, [r7, #20]
 800134a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800134e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001352:	ed97 6a08 	vldr	s12, [r7, #32]
 8001356:	edd7 7a06 	vldr	s15, [r7, #24]
 800135a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800135e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	edc3 7a05 	vstr	s15, [r3, #20]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	edd3 7a02 	vldr	s15, [r3, #8]
 8001378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	edd3 7a03 	vldr	s15, [r3, #12]
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	edd3 6a04 	vldr	s13, [r3, #16]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	edd3 7a04 	vldr	s15, [r3, #16]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	edd3 6a05 	vldr	s13, [r3, #20]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	f000 f8b4 	bl	8001528 <_ZN6Mahony7invSqrtEf>
 80013c0:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q0 *= recipNorm;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80013ca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	edc3 7a02 	vstr	s15, [r3, #8]
	q1 *= recipNorm;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	ed93 7a03 	vldr	s14, [r3, #12]
 80013de:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	edc3 7a03 	vstr	s15, [r3, #12]
	q2 *= recipNorm;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80013f2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	edc3 7a04 	vstr	s15, [r3, #16]
	q3 *= recipNorm;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	ed93 7a05 	vldr	s14, [r3, #20]
 8001406:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800140a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	edc3 7a05 	vstr	s15, [r3, #20]

	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	ed93 7a02 	vldr	s14, [r3, #8]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	edd3 6a04 	vldr	s13, [r3, #16]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001434:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	ed93 7a03 	vldr	s14, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	edd3 7a03 	vldr	s15, [r3, #12]
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800144c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edd3 6a04 	vldr	s13, [r3, #16]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	edd3 7a04 	vldr	s15, [r3, #16]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	eef0 0a67 	vmov.f32	s1, s15
 8001468:	eeb0 0a46 	vmov.f32	s0, s12
 800146c:	f006 fd06 	bl	8007e7c <atan2f>
 8001470:	eef0 7a40 	vmov.f32	s15, s0
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	edd3 7a05 	vldr	s15, [r3, #20]
 8001486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	edd3 7a04 	vldr	s15, [r3, #16]
 8001496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	f006 fcbb 	bl	8007e24 <asinf>
 80014ae:	eef0 7a40 	vmov.f32	s15, s0
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	ed93 7a04 	vldr	s14, [r3, #16]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	edd3 6a05 	vldr	s13, [r3, #20]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001508:	eef0 0a67 	vmov.f32	s1, s15
 800150c:	eeb0 0a46 	vmov.f32	s0, s12
 8001510:	f006 fcb4 	bl	8007e7c <atan2f>
 8001514:	eef0 7a40 	vmov.f32	s15, s0
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800151e:	bf00      	nop
 8001520:	3748      	adds	r7, #72	@ 0x48
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <_ZN6Mahony7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root

float Mahony::invSqrt(float x)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001532:	edd7 7a01 	vldr	s15, [r7, #4]
 8001536:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800153a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153e:	edc7 7a05 	vstr	s15, [r7, #20]
	union { float f; long l; } i;
	i.f = x;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]
	i.l = 0x5f3759df - (i.l >> 1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	105a      	asrs	r2, r3, #1
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <_ZN6Mahony7invSqrtEf+0x90>)
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
	float y = i.f;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001554:	ed97 7a05 	vldr	s14, [r7, #20]
 8001558:	edd7 7a04 	vldr	s15, [r7, #16]
 800155c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001560:	edd7 7a04 	vldr	s15, [r7, #16]
 8001564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001568:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	ed97 7a04 	vldr	s14, [r7, #16]
 8001574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001578:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800157c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001580:	edd7 7a04 	vldr	s15, [r7, #16]
 8001584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001588:	edd7 7a04 	vldr	s15, [r7, #16]
 800158c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001590:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	ed97 7a04 	vldr	s14, [r7, #16]
 800159c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	ee07 3a90 	vmov	s15, r3
}
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	5f3759df 	.word	0x5f3759df

080015bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c8:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000

080015ec <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <LL_APB1_GRP2_EnableClock+0x2c>)
 80015f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <LL_APB1_GRP2_EnableClock+0x2c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <_ZN6Mahony7getRollEv>:

public:
	Mahony();
	void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
	void updateIMU(float gx, float gy, float gz, float ax, float ay, float az);
	float getRoll() {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
		return roll * 57.29578f;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800162a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001640 <_ZN6Mahony7getRollEv+0x24>
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	42652ee1 	.word	0x42652ee1

08001644 <_ZN6Mahony8getPitchEv>:
	float getPitch() {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
		return pitch * 57.29578f;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001652:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001668 <_ZN6Mahony8getPitchEv+0x24>
 8001656:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	42652ee1 	.word	0x42652ee1

0800166c <_ZN6Mahony6getYawEv>:
	float getYaw() {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
		return yaw * 57.29578f + 180.0f;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800167a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001698 <_ZN6Mahony6getYawEv+0x2c>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800169c <_ZN6Mahony6getYawEv+0x30>
 8001686:	ee77 7a87 	vadd.f32	s15, s15, s14
	}
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	42652ee1 	.word	0x42652ee1
 800169c:	43340000 	.word	0x43340000

080016a0 <_Z13readRegistershhPh>:
UART_HandleTypeDef huart2;

PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80016a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a4:	b089      	sub	sp, #36	@ 0x24
 80016a6:	af02      	add	r7, sp, #8
 80016a8:	4603      	mov	r3, r0
 80016aa:	603a      	str	r2, [r7, #0]
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	460b      	mov	r3, r1
 80016b0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_SPI_TransmitReceive(&hspi1, dummy_tx, dest, count, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);

	return 1;
}
 80016b2:	466b      	mov	r3, sp
 80016b4:	461e      	mov	r6, r3
	uint8_t tx = subAddress | 0x80; //
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	73bb      	strb	r3, [r7, #14]
	uint8_t dummy_tx[count]; //
 80016c0:	79b9      	ldrb	r1, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	b2cb      	uxtb	r3, r1
 80016ca:	2200      	movs	r2, #0
 80016cc:	4698      	mov	r8, r3
 80016ce:	4691      	mov	r9, r2
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016e4:	b2cb      	uxtb	r3, r1
 80016e6:	2200      	movs	r2, #0
 80016e8:	461c      	mov	r4, r3
 80016ea:	4615      	mov	r5, r2
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	00eb      	lsls	r3, r5, #3
 80016f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016fa:	00e2      	lsls	r2, r4, #3
 80016fc:	460b      	mov	r3, r1
 80016fe:	3307      	adds	r3, #7
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	ebad 0d03 	sub.w	sp, sp, r3
 8001708:	ab02      	add	r3, sp, #8
 800170a:	3300      	adds	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
	memset(dummy_tx, 0, count*sizeof(dummy_tx[0]));
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	461a      	mov	r2, r3
 8001712:	2100      	movs	r1, #0
 8001714:	6938      	ldr	r0, [r7, #16]
 8001716:	f007 fd08 	bl	800912a <memset>
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2110      	movs	r1, #16
 800171e:	4814      	ldr	r0, [pc, #80]	@ (8001770 <_Z13readRegistershhPh+0xd0>)
 8001720:	f002 fe7a 	bl	8004418 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(&hspi1, &tx, &dummy_rx, 1, HAL_MAX_DELAY);
 8001724:	f107 020d 	add.w	r2, r7, #13
 8001728:	f107 010e 	add.w	r1, r7, #14
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	480f      	ldr	r0, [pc, #60]	@ (8001774 <_Z13readRegistershhPh+0xd4>)
 8001736:	f004 ff1a 	bl	800656e <HAL_SPI_TransmitReceive>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_TransmitReceive(&hspi1, dummy_tx, dest, count, HAL_MAX_DELAY);
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	b29b      	uxth	r3, r3
 8001742:	f04f 32ff 	mov.w	r2, #4294967295
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	6939      	ldr	r1, [r7, #16]
 800174c:	4809      	ldr	r0, [pc, #36]	@ (8001774 <_Z13readRegistershhPh+0xd4>)
 800174e:	f004 ff0e 	bl	800656e <HAL_SPI_TransmitReceive>
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	2110      	movs	r1, #16
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <_Z13readRegistershhPh+0xd0>)
 800175c:	f002 fe5c 	bl	8004418 <HAL_GPIO_WritePin>
	return 1;
 8001760:	2301      	movs	r3, #1
 8001762:	46b5      	mov	sp, r6
}
 8001764:	4618      	mov	r0, r3
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800176e:	bf00      	nop
 8001770:	42020000 	.word	0x42020000
 8001774:	20000154 	.word	0x20000154

08001778 <_Z3AGTPh>:
	uint8_t buffer;
	readRegisters(UB0_REG_WHO_AM_I, 1, &buffer);
	return buffer;
}

void AGT(uint8_t *dataBuffer){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	readRegisters(UB0_REG_TEMP_DATA1, 14, dataBuffer);
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	210e      	movs	r1, #14
 8001784:	201d      	movs	r0, #29
 8001786:	f7ff ff8b 	bl	80016a0 <_Z13readRegistershhPh>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <_Z13lowPassFilterfi>:
float filtered_gyro_x = 0;  // Store previous value for X-axis
float filtered_gyro_y = 0;  // Store previous value for Y-axis
float filtered_gyro_z = 0;  // Store previous value for Z-axis

// Low-pass filter function
float lowPassFilter(float raw_value, int select) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	ed87 0a01 	vstr	s0, [r7, #4]
 800179e:	6038      	str	r0, [r7, #0]
	if(select == 0){
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11a      	bne.n	80017dc <_Z13lowPassFilterfi+0x48>
		filtered_gyro_x = alpha * raw_value + (1 - alpha) * filtered_gyro_x;
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <_Z13lowPassFilterfi+0xcc>)
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <_Z13lowPassFilterfi+0xcc>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <_Z13lowPassFilterfi+0xd0>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <_Z13lowPassFilterfi+0xd0>)
 80017d2:	edc3 7a00 	vstr	s15, [r3]
		    return filtered_gyro_x;
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <_Z13lowPassFilterfi+0xd0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e037      	b.n	800184c <_Z13lowPassFilterfi+0xb8>
	}
	if(select == 1){
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d11a      	bne.n	8001818 <_Z13lowPassFilterfi+0x84>
		filtered_gyro_y = alpha * raw_value + (1 - alpha) * filtered_gyro_y;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <_Z13lowPassFilterfi+0xcc>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <_Z13lowPassFilterfi+0xcc>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <_Z13lowPassFilterfi+0xd4>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <_Z13lowPassFilterfi+0xd4>)
 800180e:	edc3 7a00 	vstr	s15, [r3]
		return filtered_gyro_y;
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <_Z13lowPassFilterfi+0xd4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e019      	b.n	800184c <_Z13lowPassFilterfi+0xb8>
	}
	filtered_gyro_z = alpha * raw_value + (1 - alpha) * filtered_gyro_z;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <_Z13lowPassFilterfi+0xcc>)
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <_Z13lowPassFilterfi+0xcc>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001830:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <_Z13lowPassFilterfi+0xd8>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <_Z13lowPassFilterfi+0xd8>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
	return filtered_gyro_z;
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <_Z13lowPassFilterfi+0xd8>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb0 0a67 	vmov.f32	s0, s15
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000
 8001864:	20000528 	.word	0x20000528
 8001868:	2000052c 	.word	0x2000052c
 800186c:	20000530 	.word	0x20000530

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b092      	sub	sp, #72	@ 0x48
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f001 fa7d 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187a:	f000 f9d9 	bl	8001c30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187e:	f000 fc4b 	bl	8002118 <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 8001882:	f000 fad1 	bl	8001e28 <_ZL14MX_ICACHE_Initv>
  MX_ADC1_Init();
 8001886:	f000 fa49 	bl	8001d1c <_ZL12MX_ADC1_Initv>
  MX_RTC_Init();
 800188a:	f000 faeb 	bl	8001e64 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 800188e:	f000 fb3d 	bl	8001f0c <_ZL12MX_SPI1_Initv>
  MX_UCPD1_Init();
 8001892:	f000 fb7d 	bl	8001f90 <_ZL13MX_UCPD1_Initv>
  MX_USART2_UART_Init();
 8001896:	f000 fbb1 	bl	8001ffc <_ZL19MX_USART2_UART_Initv>
  MX_USB_PCD_Init();
 800189a:	f000 fc0f 	bl	80020bc <_ZL15MX_USB_PCD_Initv>
//
//
//	int sample = readRegisters(0x4F, 1, new_buffer);
//	int sample_accel = readRegisters(0x50, 1, new_buffer_accel);

	Mahony ahrs;
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb11 	bl	8000ec8 <_ZN6MahonyC1Ev>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 ffbc 	bl	8002824 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f000 ffb9 	bl	8002824 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80018b2:	2002      	movs	r0, #2
 80018b4:	f000 ffb6 	bl	8002824 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80018b8:	2101      	movs	r1, #1
 80018ba:	2000      	movs	r0, #0
 80018bc:	f001 f810 	bl	80028e0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80018c0:	4b67      	ldr	r3, [pc, #412]	@ (8001a60 <main+0x1f0>)
 80018c2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80018c8:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <main+0x1f0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80018ce:	4b64      	ldr	r3, [pc, #400]	@ (8001a60 <main+0x1f0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80018d4:	4b62      	ldr	r3, [pc, #392]	@ (8001a60 <main+0x1f0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80018da:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <main+0x1f0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80018e0:	495f      	ldr	r1, [pc, #380]	@ (8001a60 <main+0x1f0>)
 80018e2:	2000      	movs	r0, #0
 80018e4:	f001 f8b8 	bl	8002a58 <BSP_COM_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <main+0x8c>
  {
    Error_Handler();
 80018f8:	f000 fc92 	bl	8002220 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AGT(myBuffer);
 80018fc:	4859      	ldr	r0, [pc, #356]	@ (8001a64 <main+0x1f4>)
 80018fe:	f7ff ff3b 	bl	8001778 <_Z3AGTPh>
	  	  for (size_t i=0; i<7; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	647b      	str	r3, [r7, #68]	@ 0x44
 8001906:	e014      	b.n	8001932 <main+0xc2>
	  	      rawMeas[i] = ((int16_t)myBuffer[i*2] << 8) | myBuffer[i*2+1];
 8001908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4a55      	ldr	r2, [pc, #340]	@ (8001a64 <main+0x1f4>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	3301      	adds	r3, #1
 800191a:	4952      	ldr	r1, [pc, #328]	@ (8001a64 <main+0x1f4>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b219      	sxth	r1, r3
 8001924:	4a50      	ldr	r2, [pc, #320]	@ (8001a68 <main+0x1f8>)
 8001926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001928:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  	  for (size_t i=0; i<7; i++) {
 800192c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192e:	3301      	adds	r3, #1
 8001930:	647b      	str	r3, [r7, #68]	@ 0x44
 8001932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001934:	2b06      	cmp	r3, #6
 8001936:	d9e7      	bls.n	8001908 <main+0x98>
	  	   }
	  	  int16_t temperature = rawMeas[0] / 132.48f + 25;
 8001938:	4b4b      	ldr	r3, [pc, #300]	@ (8001a68 <main+0x1f8>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001946:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001a6c <main+0x1fc>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195a:	ee17 3a90 	vmov	r3, s15
 800195e:	877b      	strh	r3, [r7, #58]	@ 0x3a
	  	  for (size_t i=0; i<3; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
 8001964:	e02f      	b.n	80019c6 <main+0x156>
	  		  accel[i] = (float)rawMeas[i+1] / 2048.0 * 9.81 / 2.0;
 8001966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001968:	3301      	adds	r3, #1
 800196a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a68 <main+0x1f8>)
 800196c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fdc0 	bl	8000500 <__aeabi_f2d>
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <main+0x200>)
 8001986:	f7fe ff3d 	bl	8000804 <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	a32f      	add	r3, pc, #188	@ (adr r3, 8001a50 <main+0x1e0>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe0a 	bl	80005b0 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ac:	f7fe ff2a 	bl	8000804 <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	482f      	ldr	r0, [pc, #188]	@ (8001a74 <main+0x204>)
 80019b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80019b8:	00c9      	lsls	r1, r1, #3
 80019ba:	4401      	add	r1, r0
 80019bc:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for (size_t i=0; i<3; i++) {
 80019c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c2:	3301      	adds	r3, #1
 80019c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80019c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d9cc      	bls.n	8001966 <main+0xf6>
	  	  }

	  	  accel[3] = pow(((accel[0]*accel[0]) + (accel[1]*accel[1]) + (accel[2]*accel[2])), 0.5);
 80019cc:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <main+0x204>)
 80019ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d2:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <main+0x204>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fdea 	bl	80005b0 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	461d      	mov	r5, r3
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <main+0x204>)
 80019e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <main+0x204>)
 80019ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019f0:	f7fe fdde 	bl	80005b0 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc22 	bl	8000244 <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	461d      	mov	r5, r3
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <main+0x204>)
 8001a0a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <main+0x204>)
 8001a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a14:	f7fe fdcc 	bl	80005b0 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fc10 	bl	8000244 <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	ec43 2b17 	vmov	d7, r2, r3
 8001a2c:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001a58 <main+0x1e8>
 8001a30:	eeb0 0a47 	vmov.f32	s0, s14
 8001a34:	eef0 0a67 	vmov.f32	s1, s15
 8001a38:	f006 f984 	bl	8007d44 <pow>
 8001a3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a40:	eef0 7a60 	vmov.f32	s15, s1
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <main+0x204>)
 8001a46:	ed83 7b06 	vstr	d7, [r3, #24]

	  	  for (size_t i=0; i<3; i++) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a4e:	e042      	b.n	8001ad6 <main+0x266>
 8001a50:	51eb851f 	.word	0x51eb851f
 8001a54:	40239eb8 	.word	0x40239eb8
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	3fe00000 	.word	0x3fe00000
 8001a60:	200000b4 	.word	0x200000b4
 8001a64:	20000534 	.word	0x20000534
 8001a68:	20000544 	.word	0x20000544
 8001a6c:	43047ae1 	.word	0x43047ae1
 8001a70:	40a00000 	.word	0x40a00000
 8001a74:	20000558 	.word	0x20000558
	  		  gyro[i] = lowPassFilter((float)rawMeas[i+4] / 16.4, i);
 8001a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	4a60      	ldr	r2, [pc, #384]	@ (8001c00 <main+0x390>)
 8001a7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8a:	ee17 0a90 	vmov	r0, s15
 8001a8e:	f7fe fd37 	bl	8000500 <__aeabi_f2d>
 8001a92:	a359      	add	r3, pc, #356	@ (adr r3, 8001bf8 <main+0x388>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe feb4 	bl	8000804 <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f834 	bl	8000b10 <__aeabi_d2f>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aac:	4618      	mov	r0, r3
 8001aae:	ee00 2a10 	vmov	s0, r2
 8001ab2:	f7ff fe6f 	bl	8001794 <_Z13lowPassFilterfi>
 8001ab6:	ee10 3a10 	vmov	r3, s0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd20 	bl	8000500 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	484f      	ldr	r0, [pc, #316]	@ (8001c04 <main+0x394>)
 8001ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ac8:	00c9      	lsls	r1, r1, #3
 8001aca:	4401      	add	r1, r0
 8001acc:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for (size_t i=0; i<3; i++) {
 8001ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d9cd      	bls.n	8001a78 <main+0x208>
	  //	      gx = ((float)-gyro[0]);        // rad/s
	  //	      gy = ((float)-gyro[1]);
	  //	      gz = ((float)gyro[2]);

	  	      // NED
	  	      ax = (float)accel[1];                    // g
 8001adc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <main+0x398>)
 8001ade:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f813 	bl	8000b10 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a47      	ldr	r2, [pc, #284]	@ (8001c0c <main+0x39c>)
 8001aee:	6013      	str	r3, [r2, #0]
	  		  ay = (float)accel[0];
 8001af0:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <main+0x398>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f809 	bl	8000b10 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a43      	ldr	r2, [pc, #268]	@ (8001c10 <main+0x3a0>)
 8001b02:	6013      	str	r3, [r2, #0]
	  		  az = ((float)accel[2]);
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <main+0x398>)
 8001b06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7fe ffff 	bl	8000b10 <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a3f      	ldr	r2, [pc, #252]	@ (8001c14 <main+0x3a4>)
 8001b16:	6013      	str	r3, [r2, #0]
	  		  gx = ((float)-gyro[1]);        // rad/s
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <main+0x394>)
 8001b1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7fe fff5 	bl	8000b10 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef1 7a67 	vneg.f32	s15, s15
 8001b30:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <main+0x3a8>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
	  		  gy = ((float)-gyro[0]);
 8001b36:	4b33      	ldr	r3, [pc, #204]	@ (8001c04 <main+0x394>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ffe6 	bl	8000b10 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef1 7a67 	vneg.f32	s15, s15
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <main+0x3ac>)
 8001b50:	edc3 7a00 	vstr	s15, [r3]
	  		  gz = ((float)-gyro[2]);
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <main+0x394>)
 8001b56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7fe ffd7 	bl	8000b10 <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef1 7a67 	vneg.f32	s15, s15
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <main+0x3b0>)
 8001b6e:	edc3 7a00 	vstr	s15, [r3]

	  		// Update Mahony filter
	  		ahrs.updateIMU(gx, gy, gz, ax, ay, az);
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <main+0x3a8>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <main+0x3ac>)
 8001b7a:	ed93 7a00 	vldr	s14, [r3]
 8001b7e:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <main+0x3b0>)
 8001b80:	edd3 6a00 	vldr	s13, [r3]
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <main+0x39c>)
 8001b86:	ed93 6a00 	vldr	s12, [r3]
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <main+0x3a0>)
 8001b8c:	edd3 5a00 	vldr	s11, [r3]
 8001b90:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <main+0x3a4>)
 8001b92:	ed93 5a00 	vldr	s10, [r3]
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	eef0 2a45 	vmov.f32	s5, s10
 8001b9c:	eeb0 2a65 	vmov.f32	s4, s11
 8001ba0:	eef0 1a46 	vmov.f32	s3, s12
 8001ba4:	eeb0 1a66 	vmov.f32	s2, s13
 8001ba8:	eef0 0a47 	vmov.f32	s1, s14
 8001bac:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f9bd 	bl	8000f30 <_ZN6Mahony9updateIMUEffffff>

	  		// Get Euler angles
	  		test_roll  = ahrs.getRoll();
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fd2f 	bl	800161c <_ZN6Mahony7getRollEv>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <main+0x3b4>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
	  		test_pitch = ahrs.getPitch();
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fd3a 	bl	8001644 <_ZN6Mahony8getPitchEv>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <main+0x3b8>)
 8001bd6:	edc3 7a00 	vstr	s15, [r3]
	  		test_yaw   = ahrs.getYaw();
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fd45 	bl	800166c <_ZN6Mahony6getYawEv>
 8001be2:	eef0 7a40 	vmov.f32	s15, s0
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <main+0x3bc>)
 8001be8:	edc3 7a00 	vstr	s15, [r3]
	  	      HAL_Delay(50);
 8001bec:	2032      	movs	r0, #50	@ 0x32
 8001bee:	f001 f937 	bl	8002e60 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  BSP_LED_Toggle(LED_GREEN);  // Toggle LED state
//	  HAL_Delay(500);
  }
 8001bf2:	e683      	b.n	80018fc <main+0x8c>
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	66666666 	.word	0x66666666
 8001bfc:	40306666 	.word	0x40306666
 8001c00:	20000544 	.word	0x20000544
 8001c04:	20000578 	.word	0x20000578
 8001c08:	20000558 	.word	0x20000558
 8001c0c:	2000059c 	.word	0x2000059c
 8001c10:	200005a0 	.word	0x200005a0
 8001c14:	200005a4 	.word	0x200005a4
 8001c18:	200005a8 	.word	0x200005a8
 8001c1c:	200005ac 	.word	0x200005ac
 8001c20:	200005b0 	.word	0x200005b0
 8001c24:	20000590 	.word	0x20000590
 8001c28:	20000594 	.word	0x20000594
 8001c2c:	20000598 	.word	0x20000598

08001c30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b098      	sub	sp, #96	@ 0x60
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	2248      	movs	r2, #72	@ 0x48
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f007 fa73 	bl	800912a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001c52:	2000      	movs	r0, #0
 8001c54:	f002 fd3e 	bl	80046d4 <HAL_PWREx_ControlVoltageScaling>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001c68:	f000 fada 	bl	8002220 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c6c:	f002 fd14 	bl	8004698 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c70:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <_Z18SystemClock_Configv+0xe8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	4a28      	ldr	r2, [pc, #160]	@ (8001d18 <_Z18SystemClock_Configv+0xe8>)
 8001c78:	f023 0318 	bic.w	r3, r3, #24
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001c80:	2336      	movs	r3, #54	@ 0x36
 8001c82:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c84:	2381      	movs	r3, #129	@ 0x81
 8001c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c92:	2340      	movs	r3, #64	@ 0x40
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c96:	2301      	movs	r3, #1
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c9e:	2360      	movs	r3, #96	@ 0x60
 8001ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001cae:	2337      	movs	r3, #55	@ 0x37
 8001cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fda6 	bl	8004814 <HAL_RCC_OscConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001cd8:	f000 faa2 	bl	8002220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fa63 	bl	80051c0 <HAL_RCC_ClockConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2301      	movne	r3, #1
 8001d02:	2300      	moveq	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8001d0a:	f000 fa89 	bl	8002220 <Error_Handler>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3760      	adds	r7, #96	@ 0x60
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
 8001d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d3e:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d40:	4a37      	ldr	r2, [pc, #220]	@ (8001e20 <_ZL12MX_ADC1_Initv+0x104>)
 8001d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d44:	4b35      	ldr	r3, [pc, #212]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d4a:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d50:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d56:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d5e:	2204      	movs	r2, #4
 8001d60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d68:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d82:	4b26      	ldr	r3, [pc, #152]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d90:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d9e:	481f      	ldr	r0, [pc, #124]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001da0:	f001 fa22 	bl	80031e8 <HAL_ADC_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001db4:	f000 fa34 	bl	8002220 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4816      	ldr	r0, [pc, #88]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001dc4:	f001 ff6c 	bl	8003ca0 <HAL_ADCEx_MultiModeConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001dd8:	f000 fa22 	bl	8002220 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <_ZL12MX_ADC1_Initv+0x108>)
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de0:	2306      	movs	r3, #6
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001de8:	237f      	movs	r3, #127	@ 0x7f
 8001dea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dec:	2304      	movs	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4808      	ldr	r0, [pc, #32]	@ (8001e1c <_ZL12MX_ADC1_Initv+0x100>)
 8001dfa:	f001 fb41 	bl	8003480 <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8001e0e:	f000 fa07 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	@ 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000c4 	.word	0x200000c4
 8001e20:	42028000 	.word	0x42028000
 8001e24:	0c900008 	.word	0x0c900008

08001e28 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f002 fb0b 	bl	8004448 <HAL_ICACHE_ConfigAssociativityMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8001e42:	f000 f9ed 	bl	8002220 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001e46:	f002 fb1f 	bl	8004488 <HAL_ICACHE_Enable>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8001e5a:	f000 f9e1 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001e7c:	4a22      	ldr	r2, [pc, #136]	@ (8001f08 <_ZL11MX_RTC_Initv+0xa4>)
 8001e7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e80:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001e88:	227f      	movs	r2, #127	@ 0x7f
 8001e8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001e8e:	22ff      	movs	r2, #255	@ 0xff
 8001e90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001ea6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eaa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eb2:	4814      	ldr	r0, [pc, #80]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001eb4:	f004 f97e 	bl	80061b4 <HAL_RTC_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8001ec8:	f000 f9aa 	bl	8002220 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4808      	ldr	r0, [pc, #32]	@ (8001f04 <_ZL11MX_RTC_Initv+0xa0>)
 8001ee2:	f004 fa75 	bl	80063d0 <HAL_RTCEx_PrivilegeModeSet>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8001ef6:	f000 f993 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000012c 	.word	0x2000012c
 8001f08:	40002800 	.word	0x40002800

08001f0c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f12:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <_ZL12MX_SPI1_Initv+0x80>)
 8001f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f42:	2218      	movs	r2, #24
 8001f44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f66:	2208      	movs	r2, #8
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f6a:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f6c:	f004 fa5c 	bl	8006428 <HAL_SPI_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001f80:	f000 f94e 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000154 	.word	0x20000154
 8001f8c:	40013000 	.word	0x40013000

08001f90 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	463b      	mov	r3, r7
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001fa6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001faa:	f7ff fb1f 	bl	80015ec <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7ff fb04 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7ff fb01 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fbe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4809      	ldr	r0, [pc, #36]	@ (8001ff4 <_ZL13MX_UCPD1_Initv+0x64>)
 8001fce:	f005 fe12 	bl	8007bf6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fd6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <_ZL13MX_UCPD1_Initv+0x68>)
 8001fe6:	f005 fe06 	bl	8007bf6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	42020400 	.word	0x42020400
 8001ff8:	42020000 	.word	0x42020000

08001ffc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002000:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002002:	4a2d      	ldr	r2, [pc, #180]	@ (80020b8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8002004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002006:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800200c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002038:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800203e:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002040:	2200      	movs	r2, #0
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002044:	481b      	ldr	r0, [pc, #108]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002046:	f004 fe19 	bl	8006c7c <HAL_UART_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800205a:	f000 f8e1 	bl	8002220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205e:	2100      	movs	r1, #0
 8002060:	4814      	ldr	r0, [pc, #80]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002062:	f005 fbb3 	bl	80077cc <HAL_UARTEx_SetTxFifoThreshold>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8002076:	f000 f8d3 	bl	8002220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800207a:	2100      	movs	r1, #0
 800207c:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800207e:	f005 fbe3 	bl	8007848 <HAL_UARTEx_SetRxFifoThreshold>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8002092:	f000 f8c5 	bl	8002220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002096:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002098:	f005 fb5f 	bl	800775a <HAL_UARTEx_DisableFifoMode>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80020ac:	f000 f8b8 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200001b8 	.word	0x200001b8
 80020b8:	40004400 	.word	0x40004400

080020bc <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80020c0:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020c2:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <_ZL15MX_USB_PCD_Initv+0x58>)
 80020c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80020c6:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020c8:	2208      	movs	r2, #8
 80020ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80020cc:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020d4:	2202      	movs	r2, #2
 80020d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80020d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020da:	2200      	movs	r2, #0
 80020dc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <_ZL15MX_USB_PCD_Initv+0x54>)
 80020f2:	f002 f9d9 	bl	80044a8 <HAL_PCD_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8002106:	f000 f88b 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000024c 	.word	0x2000024c
 8002114:	4000d400 	.word	0x4000d400

08002118 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a37      	ldr	r2, [pc, #220]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213a:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b32      	ldr	r3, [pc, #200]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a31      	ldr	r2, [pc, #196]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	4a2b      	ldr	r2, [pc, #172]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216a:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <_ZL12MX_GPIO_Initv+0xf8>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800217c:	4825      	ldr	r0, [pc, #148]	@ (8002214 <_ZL12MX_GPIO_Initv+0xfc>)
 800217e:	f002 f94b 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	4824      	ldr	r0, [pc, #144]	@ (8002218 <_ZL12MX_GPIO_Initv+0x100>)
 8002188:	f002 f946 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	21a0      	movs	r1, #160	@ 0xa0
 8002190:	4822      	ldr	r0, [pc, #136]	@ (800221c <_ZL12MX_GPIO_Initv+0x104>)
 8002192:	f002 f941 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8002196:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800219a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4619      	mov	r1, r3
 80021ae:	4819      	ldr	r0, [pc, #100]	@ (8002214 <_ZL12MX_GPIO_Initv+0xfc>)
 80021b0:	f001 ffb2 	bl	8004118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	4619      	mov	r1, r3
 80021ca:	4814      	ldr	r0, [pc, #80]	@ (800221c <_ZL12MX_GPIO_Initv+0x104>)
 80021cc:	f001 ffa4 	bl	8004118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4619      	mov	r1, r3
 80021e6:	480c      	ldr	r0, [pc, #48]	@ (8002218 <_ZL12MX_GPIO_Initv+0x100>)
 80021e8:	f001 ff96 	bl	8004118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021ec:	23a0      	movs	r3, #160	@ 0xa0
 80021ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	@ (800221c <_ZL12MX_GPIO_Initv+0x104>)
 8002204:	f001 ff88 	bl	8004118 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	42020000 	.word	0x42020000
 8002218:	42020800 	.word	0x42020800
 800221c:	42020400 	.word	0x42020400

08002220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <Error_Handler+0x8>

0800222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_MspInit+0x44>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_MspInit+0x44>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6613      	str	r3, [r2, #96]	@ 0x60
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_MspInit+0x44>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <HAL_MspInit+0x44>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002254:	6593      	str	r3, [r2, #88]	@ 0x58
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_MspInit+0x44>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ae      	sub	sp, #184	@ 0xb8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	2294      	movs	r2, #148	@ 0x94
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f006 ff48 	bl	800912a <memset>
  if(hadc->Instance==ADC1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_ADC_MspInit+0xa8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d137      	bne.n	8002314 <HAL_ADC_MspInit+0xa0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80022aa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80022ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fa66 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80022c2:	f7ff ffad 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_ADC_MspInit+0xac>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <HAL_ADC_MspInit+0xac>)
 80022cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_ADC_MspInit+0xac>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_ADC_MspInit+0xac>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <HAL_ADC_MspInit+0xac>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_ADC_MspInit+0xac>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022f6:	2304      	movs	r3, #4
 80022f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fc:	2303      	movs	r3, #3
 80022fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002308:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800230c:	4619      	mov	r1, r3
 800230e:	4805      	ldr	r0, [pc, #20]	@ (8002324 <HAL_ADC_MspInit+0xb0>)
 8002310:	f001 ff02 	bl	8004118 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002314:	bf00      	nop
 8002316:	37b8      	adds	r7, #184	@ 0xb8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	42028000 	.word	0x42028000
 8002320:	40021000 	.word	0x40021000
 8002324:	42020800 	.word	0x42020800

08002328 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0a8      	sub	sp, #160	@ 0xa0
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2294      	movs	r2, #148	@ 0x94
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f006 fef6 	bl	800912a <memset>
  if(hrtc->Instance==RTC)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a16      	ldr	r2, [pc, #88]	@ (800239c <HAL_RTC_MspInit+0x74>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d124      	bne.n	8002392 <HAL_RTC_MspInit+0x6a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002348:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800234c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800234e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fa14 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002366:	f7ff ff5b 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_RTC_MspInit+0x78>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	4a0b      	ldr	r2, [pc, #44]	@ (80023a0 <HAL_RTC_MspInit+0x78>)
 8002372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <HAL_RTC_MspInit+0x78>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	4a08      	ldr	r2, [pc, #32]	@ (80023a0 <HAL_RTC_MspInit+0x78>)
 8002380:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002384:	6593      	str	r3, [r2, #88]	@ 0x58
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RTC_MspInit+0x78>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002392:	bf00      	nop
 8002394:	37a0      	adds	r7, #160	@ 0xa0
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40002800 	.word	0x40002800
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a17      	ldr	r2, [pc, #92]	@ (8002420 <HAL_SPI_MspInit+0x7c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d127      	bne.n	8002416 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_SPI_MspInit+0x80>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ca:	4a16      	ldr	r2, [pc, #88]	@ (8002424 <HAL_SPI_MspInit+0x80>)
 80023cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_SPI_MspInit+0x80>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_SPI_MspInit+0x80>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <HAL_SPI_MspInit+0x80>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_SPI_MspInit+0x80>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80023f6:	23c2      	movs	r3, #194	@ 0xc2
 80023f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002406:	2305      	movs	r3, #5
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	@ (8002428 <HAL_SPI_MspInit+0x84>)
 8002412:	f001 fe81 	bl	8004118 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002416:	bf00      	nop
 8002418:	3728      	adds	r7, #40	@ 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40013000 	.word	0x40013000
 8002424:	40021000 	.word	0x40021000
 8002428:	42020000 	.word	0x42020000

0800242c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0ae      	sub	sp, #184	@ 0xb8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	2294      	movs	r2, #148	@ 0x94
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f006 fe6c 	bl	800912a <memset>
  if(huart->Instance==USART2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	@ (80024dc <HAL_UART_MspInit+0xb0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d13a      	bne.n	80024d2 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002460:	2300      	movs	r3, #0
 8002462:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	4618      	mov	r0, r3
 800246a:	f003 f98d 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002474:	f7ff fed4 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_UART_MspInit+0xb4>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <HAL_UART_MspInit+0xb4>)
 800247e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002482:	6593      	str	r3, [r2, #88]	@ 0x58
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <HAL_UART_MspInit+0xb4>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <HAL_UART_MspInit+0xb4>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002494:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <HAL_UART_MspInit+0xb4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_UART_MspInit+0xb4>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a8:	230c      	movs	r3, #12
 80024aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024c0:	2307      	movs	r3, #7
 80024c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <HAL_UART_MspInit+0xb8>)
 80024ce:	f001 fe23 	bl	8004118 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80024d2:	bf00      	nop
 80024d4:	37b8      	adds	r7, #184	@ 0xb8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40004400 	.word	0x40004400
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42020000 	.word	0x42020000

080024e8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0b0      	sub	sp, #192	@ 0xc0
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	2294      	movs	r2, #148	@ 0x94
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f006 fe0e 	bl	800912a <memset>
  if(hpcd->Instance==USB)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a31      	ldr	r2, [pc, #196]	@ (80025d8 <HAL_PCD_MspInit+0xf0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d15a      	bne.n	80025ce <HAL_PCD_MspInit+0xe6>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800251c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002524:	f107 0318 	add.w	r3, r7, #24
 8002528:	4618      	mov	r0, r3
 800252a:	f003 f92d 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002534:	f7ff fe74 	bl	8002220 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	4a27      	ldr	r2, [pc, #156]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002550:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800256a:	230a      	movs	r3, #10
 800256c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002574:	4619      	mov	r1, r3
 8002576:	481a      	ldr	r0, [pc, #104]	@ (80025e0 <HAL_PCD_MspInit+0xf8>)
 8002578:	f001 fdce 	bl	8004118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800257c:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002580:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 8002582:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002586:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d114      	bne.n	80025ca <HAL_PCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80025b8:	f002 f8e8 	bl	800478c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a06      	ldr	r2, [pc, #24]	@ (80025dc <HAL_PCD_MspInit+0xf4>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_MspInit 1 */

  }

}
 80025c8:	e001      	b.n	80025ce <HAL_PCD_MspInit+0xe6>
      HAL_PWREx_EnableVddUSB();
 80025ca:	f002 f8df 	bl	800478c <HAL_PWREx_EnableVddUSB>
}
 80025ce:	bf00      	nop
 80025d0:	37c0      	adds	r7, #192	@ 0xc0
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	4000d400 	.word	0x4000d400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	42020000 	.word	0x42020000

080025e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <NMI_Handler+0x4>

080025ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <MemManage_Handler+0x4>

080025fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <UsageFault_Handler+0x4>

0800260c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263a:	f000 fbf1 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}

08002642 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002646:	2000      	movs	r0, #0
 8002648:	f000 f9f0 	bl	8002a2c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <SystemInit+0x20>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <SystemInit+0x20>)
 800265c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800267a:	4b4f      	ldr	r3, [pc, #316]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002686:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 8002688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e005      	b.n	80026a2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002696:	4b48      	ldr	r3, [pc, #288]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80026a2:	4a46      	ldr	r2, [pc, #280]	@ (80027bc <SystemCoreClockUpdate+0x148>)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ac:	4b42      	ldr	r3, [pc, #264]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d866      	bhi.n	8002786 <SystemCoreClockUpdate+0x112>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <SystemCoreClockUpdate+0x4c>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	08002787 	.word	0x08002787
 80026c8:	08002787 	.word	0x08002787
 80026cc:	08002787 	.word	0x08002787
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	08002787 	.word	0x08002787
 80026d8:	08002787 	.word	0x08002787
 80026dc:	08002787 	.word	0x08002787
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002787 	.word	0x08002787
 80026e8:	08002787 	.word	0x08002787
 80026ec:	08002787 	.word	0x08002787
 80026f0:	0800270d 	.word	0x0800270d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80026f4:	4a32      	ldr	r2, [pc, #200]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6013      	str	r3, [r2, #0]
      break;
 80026fa:	e048      	b.n	800278e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80026fc:	4b30      	ldr	r3, [pc, #192]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 80026fe:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <SystemCoreClockUpdate+0x150>)
 8002700:	601a      	str	r2, [r3, #0]
      break;
 8002702:	e044      	b.n	800278e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 8002706:	4a30      	ldr	r2, [pc, #192]	@ (80027c8 <SystemCoreClockUpdate+0x154>)
 8002708:	601a      	str	r2, [r3, #0]
      break;
 800270a:	e040      	b.n	800278e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800270c:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002716:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	3301      	adds	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <SystemCoreClockUpdate+0xbe>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d006      	beq.n	800273e <SystemCoreClockUpdate+0xca>
 8002730:	e00b      	b.n	800274a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002732:	4a24      	ldr	r2, [pc, #144]	@ (80027c4 <SystemCoreClockUpdate+0x150>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	613b      	str	r3, [r7, #16]
          break;
 800273c:	e00b      	b.n	8002756 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800273e:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <SystemCoreClockUpdate+0x154>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	613b      	str	r3, [r7, #16]
          break;
 8002748:	e005      	b.n	8002756 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	613b      	str	r3, [r7, #16]
          break;
 8002754:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002768:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0e5b      	lsrs	r3, r3, #25
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	4a0f      	ldr	r2, [pc, #60]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 8002782:	6013      	str	r3, [r2, #0]
      break;
 8002784:	e003      	b.n	800278e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002786:	4a0e      	ldr	r2, [pc, #56]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	6013      	str	r3, [r2, #0]
      break;
 800278c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <SystemCoreClockUpdate+0x144>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	4a0c      	ldr	r2, [pc, #48]	@ (80027cc <SystemCoreClockUpdate+0x158>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800279e:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <SystemCoreClockUpdate+0x14c>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	080091ec 	.word	0x080091ec
 80027c0:	20000004 	.word	0x20000004
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	007a1200 	.word	0x007a1200
 80027cc:	080091d4 	.word	0x080091d4

080027d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002808 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d4:	f7ff ff3c 	bl	8002650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027da:	e003      	b.n	80027e4 <LoopCopyDataInit>

080027dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027e2:	3104      	adds	r1, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027e4:	480a      	ldr	r0, [pc, #40]	@ (8002810 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027ec:	d3f6      	bcc.n	80027dc <CopyDataInit>
	ldr	r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027f0:	e002      	b.n	80027f8 <LoopFillZerobss>

080027f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027f4:	f842 3b04 	str.w	r3, [r2], #4

080027f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027f8:	4b08      	ldr	r3, [pc, #32]	@ (800281c <LoopForever+0x16>)
	cmp	r2, r3
 80027fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027fc:	d3f9      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027fe:	f006 fca3 	bl	8009148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002802:	f7ff f835 	bl	8001870 <main>

08002806 <LoopForever>:

LoopForever:
    b LoopForever
 8002806:	e7fe      	b.n	8002806 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002808:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800280c:	080092d0 	.word	0x080092d0
	ldr	r0, =_sdata
 8002810:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002814:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 8002818:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 800281c:	20000824 	.word	0x20000824

08002820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC1_2_IRQHandler>
	...

08002824 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <BSP_LED_Init+0xb0>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002838:	4a26      	ldr	r2, [pc, #152]	@ (80028d4 <BSP_LED_Init+0xb0>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002840:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <BSP_LED_Init+0xb0>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	e01b      	b.n	8002886 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8002854:	4b1f      	ldr	r3, [pc, #124]	@ (80028d4 <BSP_LED_Init+0xb0>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002858:	4a1e      	ldr	r2, [pc, #120]	@ (80028d4 <BSP_LED_Init+0xb0>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002860:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <BSP_LED_Init+0xb0>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	e00b      	b.n	8002886 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 800286e:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <BSP_LED_Init+0xb0>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <BSP_LED_Init+0xb0>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <BSP_LED_Init+0xb0>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <BSP_LED_Init+0xb4>)
 800288a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800288e:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8002890:	2301      	movs	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8002894:	2301      	movs	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	4a0f      	ldr	r2, [pc, #60]	@ (80028dc <BSP_LED_Init+0xb8>)
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	f107 0214 	add.w	r2, r7, #20
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fc34 	bl	8004118 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <BSP_LED_Init+0xb8>)
 80028b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <BSP_LED_Init+0xb4>)
 80028bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f001 fda8 	bl	8004418 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3728      	adds	r7, #40	@ 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	20000008 	.word	0x20000008
 80028dc:	20000010 	.word	0x20000010

080028e0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	@ 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	460a      	mov	r2, r1
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 80028f4:	230f      	movs	r3, #15
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 80028f8:	4b3f      	ldr	r3, [pc, #252]	@ (80029f8 <BSP_PB_Init+0x118>)
 80028fa:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 80028fc:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <BSP_PB_Init+0x11c>)
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002900:	4b3f      	ldr	r3, [pc, #252]	@ (8002a00 <BSP_PB_Init+0x120>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002904:	4a3e      	ldr	r2, [pc, #248]	@ (8002a00 <BSP_PB_Init+0x120>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a00 <BSP_PB_Init+0x120>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a04 <BSP_PB_Init+0x124>)
 800291c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002920:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002926:	2302      	movs	r3, #2
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 800292a:	79bb      	ldrb	r3, [r7, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4a34      	ldr	r2, [pc, #208]	@ (8002a08 <BSP_PB_Init+0x128>)
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	f107 0218 	add.w	r2, r7, #24
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fbe8 	bl	8004118 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002948:	79bb      	ldrb	r3, [r7, #6]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d14f      	bne.n	80029ee <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 800294e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4a2c      	ldr	r2, [pc, #176]	@ (8002a08 <BSP_PB_Init+0x128>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	f107 0218 	add.w	r2, r7, #24
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fbd8 	bl	8004118 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8002968:	79fa      	ldrb	r2, [r7, #7]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <BSP_PB_Init+0x12c>)
 8002974:	441a      	add	r2, r3
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	3330      	adds	r3, #48	@ 0x30
 800297c:	443b      	add	r3, r7
 800297e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f001 fb6a 	bl	800405e <HAL_EXTI_GetHandle>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d12b      	bne.n	80029e8 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a0c <BSP_PB_Init+0x12c>)
 800299c:	1898      	adds	r0, r3, r2
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3330      	adds	r3, #48	@ 0x30
 80029a4:	443b      	add	r3, r7
 80029a6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029aa:	461a      	mov	r2, r3
 80029ac:	2101      	movs	r1, #1
 80029ae:	f001 fb2a 	bl	8004006 <HAL_EXTI_RegisterCallback>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4a15      	ldr	r2, [pc, #84]	@ (8002a10 <BSP_PB_Init+0x130>)
 80029bc:	56d0      	ldrsb	r0, [r2, r3]
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	3330      	adds	r3, #48	@ 0x30
 80029c4:	443b      	add	r3, r7
 80029c6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80029ca:	2200      	movs	r2, #0
 80029cc:	4619      	mov	r1, r3
 80029ce:	f001 fae6 	bl	8003f9e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002a10 <BSP_PB_Init+0x130>)
 80029d6:	56d3      	ldrsb	r3, [r2, r3]
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fafa 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
 80029de:	e006      	b.n	80029ee <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80029e0:	f06f 0303 	mvn.w	r3, #3
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029e6:	e002      	b.n	80029ee <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 80029e8:	f06f 0303 	mvn.w	r3, #3
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 80029ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3730      	adds	r7, #48	@ 0x30
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0600000d 	.word	0x0600000d
 80029fc:	08002bc5 	.word	0x08002bc5
 8002a00:	40021000 	.word	0x40021000
 8002a04:	2000001c 	.word	0x2000001c
 8002a08:	20000020 	.word	0x20000020
 8002a0c:	200006dc 	.word	0x200006dc
 8002a10:	20000024 	.word	0x20000024

08002a14 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002a36:	79fa      	ldrb	r2, [r7, #7]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <BSP_PB_IRQHandler+0x28>)
 8002a42:	4413      	add	r3, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fb1f 	bl	8004088 <HAL_EXTI_IRQHandler>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200006dc 	.word	0x200006dc

08002a58 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8002a6e:	f06f 0301 	mvn.w	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e03a      	b.n	8002aec <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8002a76:	79fa      	ldrb	r2, [r7, #7]
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	491f      	ldr	r1, [pc, #124]	@ (8002af8 <BSP_COM_Init+0xa0>)
 8002a7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a80:	491e      	ldr	r1, [pc, #120]	@ (8002afc <BSP_COM_Init+0xa4>)
 8002a82:	2094      	movs	r0, #148	@ 0x94
 8002a84:	fb00 f303 	mul.w	r3, r0, r3
 8002a88:	440b      	add	r3, r1
 8002a8a:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	2294      	movs	r2, #148	@ 0x94
 8002a90:	fb02 f303 	mul.w	r3, r2, r3
 8002a94:	4a19      	ldr	r2, [pc, #100]	@ (8002afc <BSP_COM_Init+0xa4>)
 8002a96:	4413      	add	r3, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f89b 	bl	8002bd4 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d123      	bne.n	8002aec <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d110      	bne.n	8002acc <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2294      	movs	r2, #148	@ 0x94
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <BSP_COM_Init+0xa4>)
 8002ab4:	4413      	add	r3, r2
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f821 	bl	8002b00 <MX_LPUART1_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8002ac4:	f06f 0303 	mvn.w	r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e00f      	b.n	8002aec <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2294      	movs	r2, #148	@ 0x94
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <BSP_COM_Init+0xa4>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f841 	bl	8002b62 <MX_USART3_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8002ae6:	f06f 0303 	mvn.w	r3, #3
 8002aea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8002aec:	68fb      	ldr	r3, [r7, #12]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000028 	.word	0x20000028
 8002afc:	200005b4 	.word	0x200005b4

08002b00 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	891b      	ldrh	r3, [r3, #8]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	895b      	ldrh	r3, [r3, #10]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	220c      	movs	r2, #12
 8002b32:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	899b      	ldrh	r3, [r3, #12]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b44:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f004 f892 	bl	8006c7c <HAL_UART_Init>
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	891b      	ldrh	r3, [r3, #8]
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	895b      	ldrh	r3, [r3, #10]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	899b      	ldrh	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ba6:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f004 f861 	bl	8006c7c <HAL_UART_Init>
 8002bba:	4603      	mov	r3, r0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff ff23 	bl	8002a14 <BSP_PB_Callback>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b098      	sub	sp, #96	@ 0x60
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8002bdc:	4a60      	ldr	r2, [pc, #384]	@ (8002d60 <UART_MspInit+0x18c>)
 8002bde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002be6:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8002bea:	4a5d      	ldr	r2, [pc, #372]	@ (8002d60 <UART_MspInit+0x18c>)
 8002bec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bf4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8002bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d64 <UART_MspInit+0x190>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8002d68 <UART_MspInit+0x194>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8002c04:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8002c08:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8002c0a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8002c0e:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a55      	ldr	r2, [pc, #340]	@ (8002d6c <UART_MspInit+0x198>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8002c24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d132      	bne.n	8002c92 <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b50      	ldr	r3, [pc, #320]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	4a4f      	ldr	r2, [pc, #316]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c38:	4b4d      	ldr	r3, [pc, #308]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8002c44:	f001 fdb2 	bl	80047ac <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8002c48:	4b49      	ldr	r3, [pc, #292]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4c:	4a48      	ldr	r2, [pc, #288]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c54:	4b46      	ldr	r3, [pc, #280]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8002c60:	4b43      	ldr	r3, [pc, #268]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c64:	4a42      	ldr	r2, [pc, #264]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6c:	4b40      	ldr	r3, [pc, #256]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8002c78:	4b3d      	ldr	r3, [pc, #244]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002c84:	4b3a      	ldr	r3, [pc, #232]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	e023      	b.n	8002cda <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8002c92:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a36      	ldr	r2, [pc, #216]	@ (8002d70 <UART_MspInit+0x19c>)
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9e:	4b34      	ldr	r3, [pc, #208]	@ (8002d70 <UART_MspInit+0x19c>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8002caa:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <UART_MspInit+0x19c>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	4a30      	ldr	r2, [pc, #192]	@ (8002d70 <UART_MspInit+0x19c>)
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d70 <UART_MspInit+0x19c>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <UART_MspInit+0x19c>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <UART_MspInit+0x19c>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cce:	4b28      	ldr	r3, [pc, #160]	@ (8002d70 <UART_MspInit+0x19c>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8002cda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	3360      	adds	r3, #96	@ 0x60
 8002ce2:	443b      	add	r3, r7
 8002ce4:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 8002cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002cfa:	3360      	adds	r3, #96	@ 0x60
 8002cfc:	443b      	add	r3, r7
 8002cfe:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002d02:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8002d04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	3360      	adds	r3, #96	@ 0x60
 8002d0c:	443b      	add	r3, r7
 8002d0e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002d12:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f9fd 	bl	8004118 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8002d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	3360      	adds	r3, #96	@ 0x60
 8002d26:	443b      	add	r3, r7
 8002d28:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8002d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d32:	3360      	adds	r3, #96	@ 0x60
 8002d34:	443b      	add	r3, r7
 8002d36:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8002d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3360      	adds	r3, #96	@ 0x60
 8002d44:	443b      	add	r3, r7
 8002d46:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002d4a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 f9e1 	bl	8004118 <HAL_GPIO_Init>
}
 8002d56:	bf00      	nop
 8002d58:	3760      	adds	r7, #96	@ 0x60
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	080091c4 	.word	0x080091c4
 8002d64:	080091cc 	.word	0x080091cc
 8002d68:	080091d0 	.word	0x080091d0
 8002d6c:	40008000 	.word	0x40008000
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002d7e:	2004      	movs	r0, #4
 8002d80:	f001 f902 	bl	8003f88 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002d84:	f7ff fc76 	bl	8002674 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f000 f80d 	bl	8002da8 <HAL_InitTick>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	e001      	b.n	8002d9e <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d9a:	f7ff fa47 	bl	800222c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002db4:	4b17      	ldr	r3, [pc, #92]	@ (8002e14 <HAL_InitTick+0x6c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <HAL_InitTick+0x70>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_InitTick+0x6c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 f90b 	bl	8003fee <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b07      	cmp	r3, #7
 8002de2:	d809      	bhi.n	8002df8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f001 f8d7 	bl	8003f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <HAL_InitTick+0x74>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e007      	b.n	8002e08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e004      	b.n	8002e08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e001      	b.n	8002e08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000034 	.word	0x20000034
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	20000030 	.word	0x20000030

08002e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000034 	.word	0x20000034
 8002e44:	200006e8 	.word	0x200006e8

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200006e8 	.word	0x200006e8

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000034 	.word	0x20000034

08002ea8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3360      	adds	r3, #96	@ 0x60
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <LL_ADC_SetOffset+0x44>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	03fff000 	.word	0x03fff000

08002f58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3360      	adds	r3, #96	@ 0x60
 8002f66:	461a      	mov	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3360      	adds	r3, #96	@ 0x60
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	615a      	str	r2, [r3, #20]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3330      	adds	r3, #48	@ 0x30
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	4413      	add	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	211f      	movs	r1, #31
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	f003 011f 	and.w	r1, r3, #31
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	431a      	orrs	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800302c:	bf00      	nop
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3314      	adds	r3, #20
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0e5b      	lsrs	r3, r3, #25
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	4413      	add	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	0d1b      	lsrs	r3, r3, #20
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2107      	movs	r1, #7
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	401a      	ands	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0d1b      	lsrs	r3, r3, #20
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	431a      	orrs	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	43db      	mvns	r3, r3
 80030aa:	401a      	ands	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0318 	and.w	r3, r3, #24
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030b4:	40d9      	lsrs	r1, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	400b      	ands	r3, r1
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	0007ffff 	.word	0x0007ffff

080030d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6093      	str	r3, [r2, #8]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003110:	d101      	bne.n	8003116 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003138:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003160:	d101      	bne.n	8003166 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <LL_ADC_IsEnabled+0x18>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <LL_ADC_IsEnabled+0x1a>
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b089      	sub	sp, #36	@ 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e12e      	b.n	8003460 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff f82f 	bl	8002274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff67 	bl	80030fc <LL_ADC_IsDeepPowerDownEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff4d 	bl	80030d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff82 	bl	800314c <LL_ADC_IsInternalRegulatorEnabled>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff66 	bl	8003124 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003258:	4b83      	ldr	r3, [pc, #524]	@ (8003468 <HAL_ADC_Init+0x280>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	4a83      	ldr	r2, [pc, #524]	@ (800346c <HAL_ADC_Init+0x284>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800326c:	e002      	b.n	8003274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b01      	subs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff64 	bl	800314c <LL_ADC_IsInternalRegulatorEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff75 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80c7 	bne.w	800344e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 80c3 	bne.w	800344e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff49 	bl	8003174 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d110      	bne.n	800330a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	4861      	ldr	r0, [pc, #388]	@ (8003470 <HAL_ADC_Init+0x288>)
 80032ea:	f7ff ff43 	bl	8003174 <LL_ADC_IsEnabled>
 80032ee:	4604      	mov	r4, r0
 80032f0:	4860      	ldr	r0, [pc, #384]	@ (8003474 <HAL_ADC_Init+0x28c>)
 80032f2:	f7ff ff3f 	bl	8003174 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4323      	orrs	r3, r4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4619      	mov	r1, r3
 8003304:	485c      	ldr	r0, [pc, #368]	@ (8003478 <HAL_ADC_Init+0x290>)
 8003306:	f7ff fdcf 	bl	8002ea8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7e5b      	ldrb	r3, [r3, #25]
 800330e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003314:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800331a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003320:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003328:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	3b01      	subs	r3, #1
 800333e:	045b      	lsls	r3, r3, #17
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	4b44      	ldr	r3, [pc, #272]	@ (800347c <HAL_ADC_Init+0x294>)
 800336a:	4013      	ands	r3, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	69b9      	ldr	r1, [r7, #24]
 8003372:	430b      	orrs	r3, r1
 8003374:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff20 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 8003380:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d140      	bne.n	800340a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d13d      	bne.n	800340a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7e1b      	ldrb	r3, [r3, #24]
 8003396:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003398:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033b0:	f023 0306 	bic.w	r3, r3, #6
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d118      	bne.n	80033fa <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033ea:	430a      	orrs	r2, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	e007      	b.n	800340a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10c      	bne.n	800342c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	f023 010f 	bic.w	r1, r3, #15
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
 800342a:	e007      	b.n	800343c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020f 	bic.w	r2, r2, #15
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	@ 0x58
 800344c:	e007      	b.n	800345e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800345e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3724      	adds	r7, #36	@ 0x24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	20000004 	.word	0x20000004
 800346c:	053e2d63 	.word	0x053e2d63
 8003470:	42028000 	.word	0x42028000
 8003474:	42028100 	.word	0x42028100
 8003478:	42028300 	.word	0x42028300
 800347c:	fff0c007 	.word	0xfff0c007

08003480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b0b7      	sub	sp, #220	@ 0xdc
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x22>
 800349e:	2302      	movs	r3, #2
 80034a0:	e3c1      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x7a6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fe73 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 83a6 	bne.w	8003c08 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f7ff fd89 	bl	8002fe0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fe61 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80034d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fe6d 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 80034e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 81c1 	bne.w	8003876 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 81bc 	bne.w	8003876 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003506:	d10f      	bne.n	8003528 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	4619      	mov	r1, r3
 8003514:	f7ff fd90 	bl	8003038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd4a 	bl	8002fba <LL_ADC_SetSamplingTimeCommonConfig>
 8003526:	e00e      	b.n	8003546 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	461a      	mov	r2, r3
 8003536:	f7ff fd7f 	bl	8003038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fd3a 	bl	8002fba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	08db      	lsrs	r3, r3, #3
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d00a      	beq.n	800357e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6919      	ldr	r1, [r3, #16]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003578:	f7ff fcca 	bl	8002f10 <LL_ADC_SetOffset>
 800357c:	e17b      	b.n	8003876 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fce7 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x12a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fcdc 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	0e9b      	lsrs	r3, r3, #26
 80035a4:	f003 021f 	and.w	r2, r3, #31
 80035a8:	e01e      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x168>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fcd1 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e004      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80035dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x180>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e9b      	lsrs	r3, r3, #26
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	e018      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1b2>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800361c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003624:	2320      	movs	r3, #32
 8003626:	e004      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003632:	429a      	cmp	r2, r3
 8003634:	d106      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fca0 	bl	8002f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fc84 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1f0>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fc79 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	f003 021f 	and.w	r2, r3, #31
 800366e:	e01e      	b.n	80036ae <HAL_ADC_ConfigChannel+0x22e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fc6e 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800368e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800369e:	2320      	movs	r3, #32
 80036a0:	e004      	b.n	80036ac <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80036a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x246>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e9b      	lsrs	r3, r3, #26
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	e018      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x278>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80036da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80036e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e004      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80036ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d106      	bne.n	800370a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fc3d 	bl	8002f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fc21 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x2b6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fc16 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	e01e      	b.n	8003774 <HAL_ADC_ConfigChannel+0x2f4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fc0b 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800375c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003764:	2320      	movs	r3, #32
 8003766:	e004      	b.n	8003772 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d105      	bne.n	800378c <HAL_ADC_ConfigChannel+0x30c>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	e016      	b.n	80037ba <HAL_ADC_ConfigChannel+0x33a>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800379e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80037a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e004      	b.n	80037ba <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80037b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d106      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2102      	movs	r1, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fbdc 	bl	8002f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2103      	movs	r1, #3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fbc0 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x378>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2103      	movs	r1, #3
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fbb5 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	f003 021f 	and.w	r2, r3, #31
 80037f6:	e017      	b.n	8003828 <HAL_ADC_ConfigChannel+0x3a8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2103      	movs	r1, #3
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fbaa 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003812:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800381a:	2320      	movs	r3, #32
 800381c:	e003      	b.n	8003826 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800381e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x3c0>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	e011      	b.n	8003864 <HAL_ADC_ConfigChannel+0x3e4>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800384e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003850:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	e003      	b.n	8003864 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800385c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003864:	429a      	cmp	r2, r3
 8003866:	d106      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	2103      	movs	r1, #3
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fb87 	bl	8002f84 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fc7a 	bl	8003174 <LL_ADC_IsEnabled>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 81c9 	bne.w	8003c1a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	461a      	mov	r2, r3
 8003896:	f7ff fbfb 	bl	8003090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4a8f      	ldr	r2, [pc, #572]	@ (8003adc <HAL_ADC_ConfigChannel+0x65c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	f040 8131 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x44e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0e9b      	lsrs	r3, r3, #26
 80038bc:	3301      	adds	r3, #1
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2b09      	cmp	r3, #9
 80038c4:	bf94      	ite	ls
 80038c6:	2301      	movls	r3, #1
 80038c8:	2300      	movhi	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	e019      	b.n	8003902 <HAL_ADC_ConfigChannel+0x482>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80038dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80038e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e003      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80038ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038ec:	fab3 f383 	clz	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003902:	2b00      	cmp	r3, #0
 8003904:	d079      	beq.n	80039fa <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390e:	2b00      	cmp	r3, #0
 8003910:	d107      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x4a2>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	3301      	adds	r3, #1
 800391a:	069b      	lsls	r3, r3, #26
 800391c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003920:	e015      	b.n	800394e <HAL_ADC_ConfigChannel+0x4ce>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003932:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800393a:	2320      	movs	r3, #32
 800393c:	e003      	b.n	8003946 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	3301      	adds	r3, #1
 8003948:	069b      	lsls	r3, r3, #26
 800394a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_ADC_ConfigChannel+0x4ee>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0e9b      	lsrs	r3, r3, #26
 8003960:	3301      	adds	r3, #1
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	e017      	b.n	800399e <HAL_ADC_ConfigChannel+0x51e>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800397c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003986:	2320      	movs	r3, #32
 8003988:	e003      	b.n	8003992 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800398a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	ea42 0103 	orr.w	r1, r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x544>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	3301      	adds	r3, #1
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	051b      	lsls	r3, r3, #20
 80039c2:	e018      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x576>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80039d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e003      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80039e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f003 021f 	and.w	r2, r3, #31
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f6:	430b      	orrs	r3, r1
 80039f8:	e081      	b.n	8003afe <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x596>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0e9b      	lsrs	r3, r3, #26
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	069b      	lsls	r3, r3, #26
 8003a10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a14:	e015      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x5c2>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003a2e:	2320      	movs	r3, #32
 8003a30:	e003      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	069b      	lsls	r3, r3, #26
 8003a3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x5e2>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	e017      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x612>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	61fb      	str	r3, [r7, #28]
  return result;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	e003      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	ea42 0103 	orr.w	r1, r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x63e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0e9b      	lsrs	r3, r3, #26
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f003 021f 	and.w	r2, r3, #31
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b1e      	subs	r3, #30
 8003ab6:	051b      	lsls	r3, r3, #20
 8003ab8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003abc:	e01e      	b.n	8003afc <HAL_ADC_ConfigChannel+0x67c>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	613b      	str	r3, [r7, #16]
  return result;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003ad6:	2320      	movs	r3, #32
 8003ad8:	e006      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x668>
 8003ada:	bf00      	nop
 8003adc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f003 021f 	and.w	r2, r3, #31
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	3b1e      	subs	r3, #30
 8003af6:	051b      	lsls	r3, r3, #20
 8003af8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003afc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7ff fa98 	bl	8003038 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b48      	ldr	r3, [pc, #288]	@ (8003c30 <HAL_ADC_ConfigChannel+0x7b0>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8082 	beq.w	8003c1a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b16:	4847      	ldr	r0, [pc, #284]	@ (8003c34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003b18:	f7ff f9ec 	bl	8002ef4 <LL_ADC_GetCommonPathInternalCh>
 8003b1c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b20:	4845      	ldr	r0, [pc, #276]	@ (8003c38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003b22:	f7ff fb27 	bl	8003174 <LL_ADC_IsEnabled>
 8003b26:	4604      	mov	r4, r0
 8003b28:	4844      	ldr	r0, [pc, #272]	@ (8003c3c <HAL_ADC_ConfigChannel+0x7bc>)
 8003b2a:	f7ff fb23 	bl	8003174 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4323      	orrs	r3, r4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d15e      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a41      	ldr	r2, [pc, #260]	@ (8003c40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d127      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d121      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a39      	ldr	r2, [pc, #228]	@ (8003c38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d161      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4834      	ldr	r0, [pc, #208]	@ (8003c34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003b62:	f7ff f9b4 	bl	8002ece <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b66:	4b37      	ldr	r3, [pc, #220]	@ (8003c44 <HAL_ADC_ConfigChannel+0x7c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	4a36      	ldr	r2, [pc, #216]	@ (8003c48 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	099b      	lsrs	r3, r3, #6
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003b7e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003b80:	e002      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f9      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b8e:	e044      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	@ (8003c4c <HAL_ADC_ConfigChannel+0x7cc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d113      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a23      	ldr	r2, [pc, #140]	@ (8003c38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d134      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bb8:	4619      	mov	r1, r3
 8003bba:	481e      	ldr	r0, [pc, #120]	@ (8003c34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003bbc:	f7ff f987 	bl	8002ece <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc0:	e02b      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a22      	ldr	r2, [pc, #136]	@ (8003c50 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d126      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d120      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	@ (8003c38 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d11b      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bea:	4619      	mov	r1, r3
 8003bec:	4811      	ldr	r0, [pc, #68]	@ (8003c34 <HAL_ADC_ConfigChannel+0x7b4>)
 8003bee:	f7ff f96e 	bl	8002ece <LL_ADC_SetCommonPathInternalCh>
 8003bf2:	e012      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003c06:	e008      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003c22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	37dc      	adds	r7, #220	@ 0xdc
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	80080000 	.word	0x80080000
 8003c34:	42028300 	.word	0x42028300
 8003c38:	42028000 	.word	0x42028000
 8003c3c:	42028100 	.word	0x42028100
 8003c40:	c7520000 	.word	0xc7520000
 8003c44:	20000004 	.word	0x20000004
 8003c48:	053e2d63 	.word	0x053e2d63
 8003c4c:	cb840000 	.word	0xcb840000
 8003c50:	80000001 	.word	0x80000001

08003c54 <LL_ADC_IsEnabled>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <LL_ADC_IsEnabled+0x18>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <LL_ADC_IsEnabled+0x1a>
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d101      	bne.n	8003c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b0a1      	sub	sp, #132	@ 0x84
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e089      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a42      	ldr	r2, [pc, #264]	@ (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d102      	bne.n	8003cde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cd8:	4b41      	ldr	r3, [pc, #260]	@ (8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e001      	b.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e068      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ffb9 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d08:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ffb3 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d14a      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d147      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d20:	4b30      	ldr	r3, [pc, #192]	@ (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d22:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d027      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d3e:	035b      	lsls	r3, r3, #13
 8003d40:	430b      	orrs	r3, r1
 8003d42:	431a      	orrs	r2, r3
 8003d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d48:	4824      	ldr	r0, [pc, #144]	@ (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d4a:	f7ff ff83 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	4823      	ldr	r0, [pc, #140]	@ (8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d52:	f7ff ff7f 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4323      	orrs	r3, r4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d132      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d66:	f023 030f 	bic.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d78:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7a:	e023      	b.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d88:	4814      	ldr	r0, [pc, #80]	@ (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d8a:	f7ff ff63 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4813      	ldr	r0, [pc, #76]	@ (8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d92:	f7ff ff5f 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4323      	orrs	r3, r4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d112      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003da6:	f023 030f 	bic.w	r3, r3, #15
 8003daa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003dac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dae:	e009      	b.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003dc2:	e000      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003dce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3784      	adds	r7, #132	@ 0x84
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	42028000 	.word	0x42028000
 8003de0:	42028100 	.word	0x42028100
 8003de4:	42028300 	.word	0x42028300

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4907      	ldr	r1, [pc, #28]	@ (8003e84 <__NVIC_EnableIRQ+0x38>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db0a      	blt.n	8003eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	490c      	ldr	r1, [pc, #48]	@ (8003ed4 <__NVIC_SetPriority+0x4c>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	0152      	lsls	r2, r2, #5
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb0:	e00a      	b.n	8003ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4908      	ldr	r1, [pc, #32]	@ (8003ed8 <__NVIC_SetPriority+0x50>)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	0152      	lsls	r2, r2, #5
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	761a      	strb	r2, [r3, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	@ 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	bf28      	it	cs
 8003efa:	2303      	movcs	r3, #3
 8003efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3303      	adds	r3, #3
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d902      	bls.n	8003f0c <NVIC_EncodePriority+0x30>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3b04      	subs	r3, #4
 8003f0a:	e000      	b.n	8003f0e <NVIC_EncodePriority+0x32>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	4313      	orrs	r3, r2
         );
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	@ 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f54:	d301      	bcc.n	8003f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00f      	b.n	8003f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <SysTick_Config+0x40>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f62:	2107      	movs	r1, #7
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f7ff ff8e 	bl	8003e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <SysTick_Config+0x40>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f72:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <SysTick_Config+0x40>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff29 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fac:	f7ff ff40 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f7ff ff90 	bl	8003edc <NVIC_EncodePriority>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff5f 	bl	8003e88 <__NVIC_SetPriority>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff33 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ffa4 	bl	8003f44 <SysTick_Config>
 8003ffc:	4603      	mov	r3, r0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004006:	b480      	push	{r7}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	460b      	mov	r3, r1
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d011      	beq.n	8004042 <HAL_EXTI_RegisterCallback+0x3c>
 800401e:	2b02      	cmp	r3, #2
 8004020:	dc13      	bgt.n	800404a <HAL_EXTI_RegisterCallback+0x44>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_EXTI_RegisterCallback+0x26>
 8004026:	2b01      	cmp	r3, #1
 8004028:	d007      	beq.n	800403a <HAL_EXTI_RegisterCallback+0x34>
 800402a:	e00e      	b.n	800404a <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e00a      	b.n	8004050 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]
      break;
 8004040:	e006      	b.n	8004050 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]
      break;
 8004048:	e002      	b.n	8004050 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
      break;
 800404e:	bf00      	nop
  }

  return status;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e003      	b.n	800407a <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2201      	movs	r2, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	4b17      	ldr	r3, [pc, #92]	@ (8004110 <HAL_EXTI_IRQHandler+0x88>)
 80040b2:	4413      	add	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <HAL_EXTI_IRQHandler+0x8c>)
 80040e0:	4413      	add	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4798      	blx	r3
    }
  }
}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	4002f40c 	.word	0x4002f40c
 8004114:	4002f410 	.word	0x4002f410

08004118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004126:	e158      	b.n	80043da <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 814a 	beq.w	80043d4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d005      	beq.n	8004158 <HAL_GPIO_Init+0x40>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d130      	bne.n	80041ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2203      	movs	r2, #3
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800418e:	2201      	movs	r2, #1
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4013      	ands	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 0201 	and.w	r2, r3, #1
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d017      	beq.n	80041f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	2203      	movs	r2, #3
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d123      	bne.n	800424a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	08da      	lsrs	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	08da      	lsrs	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3208      	adds	r2, #8
 8004244:	6939      	ldr	r1, [r7, #16]
 8004246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4013      	ands	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0203 	and.w	r2, r3, #3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a4 	beq.w	80043d4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800428c:	4a5a      	ldr	r2, [pc, #360]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3318      	adds	r3, #24
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	220f      	movs	r2, #15
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a52      	ldr	r2, [pc, #328]	@ (80043fc <HAL_GPIO_Init+0x2e4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d025      	beq.n	8004304 <HAL_GPIO_Init+0x1ec>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a51      	ldr	r2, [pc, #324]	@ (8004400 <HAL_GPIO_Init+0x2e8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d01f      	beq.n	8004300 <HAL_GPIO_Init+0x1e8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a50      	ldr	r2, [pc, #320]	@ (8004404 <HAL_GPIO_Init+0x2ec>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d019      	beq.n	80042fc <HAL_GPIO_Init+0x1e4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a4f      	ldr	r2, [pc, #316]	@ (8004408 <HAL_GPIO_Init+0x2f0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_GPIO_Init+0x1e0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a4e      	ldr	r2, [pc, #312]	@ (800440c <HAL_GPIO_Init+0x2f4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00d      	beq.n	80042f4 <HAL_GPIO_Init+0x1dc>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a4d      	ldr	r2, [pc, #308]	@ (8004410 <HAL_GPIO_Init+0x2f8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <HAL_GPIO_Init+0x1d8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004414 <HAL_GPIO_Init+0x2fc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <HAL_GPIO_Init+0x1d4>
 80042e8:	2306      	movs	r3, #6
 80042ea:	e00c      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 80042ec:	2307      	movs	r3, #7
 80042ee:	e00a      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 80042f0:	2305      	movs	r3, #5
 80042f2:	e008      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 80042f4:	2304      	movs	r3, #4
 80042f6:	e006      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 80042f8:	2303      	movs	r3, #3
 80042fa:	e004      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e002      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_GPIO_Init+0x1ee>
 8004304:	2300      	movs	r3, #0
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	f002 0203 	and.w	r2, r2, #3
 800430c:	00d2      	lsls	r2, r2, #3
 800430e:	4093      	lsls	r3, r2
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004316:	4938      	ldr	r1, [pc, #224]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	089b      	lsrs	r3, r3, #2
 800431c:	3318      	adds	r3, #24
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004324:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004348:	4a2b      	ldr	r2, [pc, #172]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800434e:	4b2a      	ldr	r3, [pc, #168]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004372:	4a21      	ldr	r2, [pc, #132]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004378:	4b1f      	ldr	r3, [pc, #124]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 800437a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800439e:	4a16      	ldr	r2, [pc, #88]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80043a6:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 80043a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043cc:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <HAL_GPIO_Init+0x2e0>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3301      	adds	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f47f ae9f 	bne.w	8004128 <HAL_GPIO_Init+0x10>
  }
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	4002f400 	.word	0x4002f400
 80043fc:	42020000 	.word	0x42020000
 8004400:	42020400 	.word	0x42020400
 8004404:	42020800 	.word	0x42020800
 8004408:	42020c00 	.word	0x42020c00
 800440c:	42021000 	.word	0x42021000
 8004410:	42021400 	.word	0x42021400
 8004414:	42021800 	.word	0x42021800

08004418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
 8004424:	4613      	mov	r3, r2
 8004426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004428:	787b      	ldrb	r3, [r7, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004434:	e002      	b.n	800443c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e007      	b.n	8004476 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0204 	bic.w	r2, r3, #4
 800446e:	4905      	ldr	r1, [pc, #20]	@ (8004484 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40030400 	.word	0x40030400

08004488 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800448c:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <HAL_ICACHE_Enable+0x1c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <HAL_ICACHE_Enable+0x1c>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40030400 	.word	0x40030400

080044a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0c0      	b.n	800463c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe f80a 	bl	80024e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2203      	movs	r2, #3
 80044d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f003 fbf5 	bl	8007cd0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
 80044ea:	e03e      	b.n	800456a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	3311      	adds	r3, #17
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	3310      	adds	r3, #16
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	440b      	add	r3, r1
 8004522:	3313      	adds	r3, #19
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	3320      	adds	r3, #32
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	3324      	adds	r3, #36	@ 0x24
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	440b      	add	r3, r1
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	3301      	adds	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	791b      	ldrb	r3, [r3, #4]
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	429a      	cmp	r2, r3
 8004572:	d3bb      	bcc.n	80044ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e044      	b.n	8004604 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	440b      	add	r3, r1
 800459e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	440b      	add	r3, r1
 80045e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	3301      	adds	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	429a      	cmp	r2, r3
 800460c:	d3b5      	bcc.n	800457a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	e893 0006 	ldmia.w	r3, {r1, r2}
 800461a:	f003 fb74 	bl	8007d06 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	7a9b      	ldrb	r3, [r3, #10]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f805 	bl	8004644 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004668:	b29b      	uxth	r3, r3
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800467c:	b29b      	uxth	r3, r3
 800467e:	f043 0302 	orr.w	r3, r3, #2
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40007000 	.word	0x40007000

080046b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80046bc:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40007000 	.word	0x40007000

080046d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80046dc:	4b27      	ldr	r3, [pc, #156]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046e4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80046e6:	f000 f871 	bl	80047cc <HAL_PWREx_SMPS_GetEffectiveMode>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f0:	d101      	bne.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e03e      	b.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80046f6:	4b21      	ldr	r3, [pc, #132]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004702:	d101      	bne.n	8004708 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e035      	b.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d101      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e02f      	b.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004714:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800471c:	4917      	ldr	r1, [pc, #92]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	4a16      	ldr	r2, [pc, #88]	@ (8004784 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	09db      	lsrs	r3, r3, #7
 8004732:	2232      	movs	r2, #50	@ 0x32
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	4a13      	ldr	r2, [pc, #76]	@ (8004788 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	08db      	lsrs	r3, r3, #3
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004744:	e002      	b.n	800474c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b01      	subs	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004758:	d102      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f2      	bne.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476c:	d101      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e000      	b.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40007000 	.word	0x40007000
 8004780:	20000004 	.word	0x20000004
 8004784:	0a7c5ac5 	.word	0x0a7c5ac5
 8004788:	cccccccd 	.word	0xcccccccd

0800478c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479a:	6053      	str	r3, [r2, #4]
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40007000 	.word	0x40007000

080047ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ba:	6053      	str	r3, [r2, #4]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40007000 	.word	0x40007000

080047cc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80047d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80047e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	e00a      	b.n	8004800 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80047f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	e001      	b.n	8004800 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80047fc:	2300      	movs	r3, #0
 80047fe:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004800:	687b      	ldr	r3, [r7, #4]
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40007000 	.word	0x40007000

08004814 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f000 bcc2 	b.w	80051ac <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004828:	4b99      	ldr	r3, [pc, #612]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004832:	4b97      	ldr	r3, [pc, #604]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80e9 	beq.w	8004a1c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d006      	beq.n	800485e <HAL_RCC_OscConfig+0x4a>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	f040 8083 	bne.w	800495e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d17f      	bne.n	800495e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800485e:	4b8c      	ldr	r3, [pc, #560]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <HAL_RCC_OscConfig+0x64>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f000 bc9a 	b.w	80051ac <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800487c:	4b84      	ldr	r3, [pc, #528]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_RCC_OscConfig+0x7e>
 8004888:	4b81      	ldr	r3, [pc, #516]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004890:	e005      	b.n	800489e <HAL_RCC_OscConfig+0x8a>
 8004892:	4b7f      	ldr	r3, [pc, #508]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800489e:	4293      	cmp	r3, r2
 80048a0:	d224      	bcs.n	80048ec <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fe9c 	bl	80055e4 <RCC_SetFlashLatencyFromMSIRange>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f000 bc7a 	b.w	80051ac <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b8:	4b75      	ldr	r3, [pc, #468]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a74      	ldr	r2, [pc, #464]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048be:	f043 0308 	orr.w	r3, r3, #8
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b72      	ldr	r3, [pc, #456]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	496f      	ldr	r1, [pc, #444]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	496a      	ldr	r1, [pc, #424]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	604b      	str	r3, [r1, #4]
 80048ea:	e026      	b.n	800493a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ec:	4b68      	ldr	r3, [pc, #416]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a67      	ldr	r2, [pc, #412]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048f2:	f043 0308 	orr.w	r3, r3, #8
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b65      	ldr	r3, [pc, #404]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	4962      	ldr	r1, [pc, #392]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800490a:	4b61      	ldr	r3, [pc, #388]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	495d      	ldr	r1, [pc, #372]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe5b 	bl	80055e4 <RCC_SetFlashLatencyFromMSIRange>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f000 bc39 	b.w	80051ac <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800493a:	f000 fe17 	bl	800556c <HAL_RCC_GetHCLKFreq>
 800493e:	4603      	mov	r3, r0
 8004940:	4a54      	ldr	r2, [pc, #336]	@ (8004a94 <HAL_RCC_OscConfig+0x280>)
 8004942:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004944:	4b54      	ldr	r3, [pc, #336]	@ (8004a98 <HAL_RCC_OscConfig+0x284>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fa2d 	bl	8002da8 <HAL_InitTick>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d060      	beq.n	8004a1a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	f000 bc27 	b.w	80051ac <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d039      	beq.n	80049da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004966:	4b4a      	ldr	r3, [pc, #296]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a49      	ldr	r2, [pc, #292]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004972:	f7fe fa69 	bl	8002e48 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004978:	e00f      	b.n	800499a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800497a:	f7fe fa65 	bl	8002e48 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d908      	bls.n	800499a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004988:	4b41      	ldr	r3, [pc, #260]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	f000 bc09 	b.w	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800499a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0e9      	beq.n	800497a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a39      	ldr	r2, [pc, #228]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049ac:	f043 0308 	orr.w	r3, r3, #8
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b37      	ldr	r3, [pc, #220]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	4934      	ldr	r1, [pc, #208]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c4:	4b32      	ldr	r3, [pc, #200]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	492f      	ldr	r1, [pc, #188]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
 80049d8:	e020      	b.n	8004a1c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049da:	4b2d      	ldr	r3, [pc, #180]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2c      	ldr	r2, [pc, #176]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049e6:	f7fe fa2f 	bl	8002e48 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ec:	e00e      	b.n	8004a0c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ee:	f7fe fa2b 	bl	8002e48 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d907      	bls.n	8004a0c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fc:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e3cf      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a0c:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ea      	bne.n	80049ee <HAL_RCC_OscConfig+0x1da>
 8004a18:	e000      	b.n	8004a1c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d07e      	beq.n	8004b26 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d005      	beq.n	8004a3a <HAL_RCC_OscConfig+0x226>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d10e      	bne.n	8004a52 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d10b      	bne.n	8004a52 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3a:	4b15      	ldr	r3, [pc, #84]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d06e      	beq.n	8004b24 <HAL_RCC_OscConfig+0x310>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d16a      	bne.n	8004b24 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e3ac      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x256>
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0b      	ldr	r2, [pc, #44]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e024      	b.n	8004ab4 <HAL_RCC_OscConfig+0x2a0>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a72:	d113      	bne.n	8004a9c <HAL_RCC_OscConfig+0x288>
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a05      	ldr	r2, [pc, #20]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b03      	ldr	r3, [pc, #12]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a02      	ldr	r2, [pc, #8]	@ (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e012      	b.n	8004ab4 <HAL_RCC_OscConfig+0x2a0>
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	20000004 	.word	0x20000004
 8004a98:	20000030 	.word	0x20000030
 8004a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a8a      	ldr	r2, [pc, #552]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b88      	ldr	r3, [pc, #544]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a87      	ldr	r2, [pc, #540]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d019      	beq.n	8004af0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe f9c4 	bl	8002e48 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac2:	e00e      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fe f9c0 	bl	8002e48 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d907      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e364      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ea      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2b0>
 8004aee:	e01a      	b.n	8004b26 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f9aa 	bl	8002e48 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af6:	e00e      	b.n	8004b16 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe f9a6 	bl	8002e48 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	@ 0x64
 8004b04:	d907      	bls.n	8004b16 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	4b71      	ldr	r3, [pc, #452]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e34a      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ea      	bne.n	8004af8 <HAL_RCC_OscConfig+0x2e4>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d06c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_OscConfig+0x330>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d119      	bne.n	8004b72 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d116      	bne.n	8004b72 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b44:	4b61      	ldr	r3, [pc, #388]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x348>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e327      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	4958      	ldr	r1, [pc, #352]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b70:	e04c      	b.n	8004c0c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d029      	beq.n	8004bce <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7a:	4b54      	ldr	r3, [pc, #336]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a53      	ldr	r2, [pc, #332]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fe f95f 	bl	8002e48 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8c:	e00e      	b.n	8004bac <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fe f95b 	bl	8002e48 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d907      	bls.n	8004bac <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e2ff      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bac:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ea      	beq.n	8004b8e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb8:	4b44      	ldr	r3, [pc, #272]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	4941      	ldr	r1, [pc, #260]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
 8004bcc:	e01e      	b.n	8004c0c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bce:	4b3f      	ldr	r3, [pc, #252]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fe f935 	bl	8002e48 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be0:	e00e      	b.n	8004c00 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be2:	f7fe f931 	bl	8002e48 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d907      	bls.n	8004c00 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bf0:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e2d5      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c00:	4b32      	ldr	r3, [pc, #200]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ea      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d062      	beq.n	8004cde <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d038      	beq.n	8004c92 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d108      	bne.n	8004c3a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004c28:	4b28      	ldr	r3, [pc, #160]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2e:	4a27      	ldr	r2, [pc, #156]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	f023 0310 	bic.w	r3, r3, #16
 8004c34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c38:	e007      	b.n	8004c4a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004c3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c40:	4a22      	ldr	r2, [pc, #136]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f043 0310 	orr.w	r3, r3, #16
 8004c46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fe f8f5 	bl	8002e48 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c60:	e00f      	b.n	8004c82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c62:	f7fe f8f1 	bl	8002e48 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b07      	cmp	r3, #7
 8004c6e:	d908      	bls.n	8004c82 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c70:	4b16      	ldr	r3, [pc, #88]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e294      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0e8      	beq.n	8004c62 <HAL_RCC_OscConfig+0x44e>
 8004c90:	e025      	b.n	8004cde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	4a0c      	ldr	r2, [pc, #48]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fe f8d1 	bl	8002e48 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca8:	e012      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fe f8cd 	bl	8002e48 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b07      	cmp	r3, #7
 8004cb6:	d90b      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <HAL_RCC_OscConfig+0x4b8>)
 8004cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e270      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd0:	4ba8      	ldr	r3, [pc, #672]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e5      	bne.n	8004caa <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 812d 	beq.w	8004f46 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cec:	2300      	movs	r3, #0
 8004cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b9d      	ldr	r3, [pc, #628]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d00:	4a9c      	ldr	r2, [pc, #624]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d08:	4b9a      	ldr	r3, [pc, #616]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d14:	2301      	movs	r3, #1
 8004d16:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4b97      	ldr	r3, [pc, #604]	@ (8004f78 <HAL_RCC_OscConfig+0x764>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11e      	bne.n	8004d62 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d24:	4b94      	ldr	r3, [pc, #592]	@ (8004f78 <HAL_RCC_OscConfig+0x764>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a93      	ldr	r2, [pc, #588]	@ (8004f78 <HAL_RCC_OscConfig+0x764>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d30:	f7fe f88a 	bl	8002e48 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d36:	e00e      	b.n	8004d56 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d38:	f7fe f886 	bl	8002e48 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d907      	bls.n	8004d56 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d46:	4b8c      	ldr	r3, [pc, #560]	@ (8004f78 <HAL_RCC_OscConfig+0x764>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e22a      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d56:	4b88      	ldr	r3, [pc, #544]	@ (8004f78 <HAL_RCC_OscConfig+0x764>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ea      	beq.n	8004d38 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01f      	beq.n	8004dae <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d80:	4a7c      	ldr	r2, [pc, #496]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	4a78      	ldr	r2, [pc, #480]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d9a:	e018      	b.n	8004dce <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d9c:	4b75      	ldr	r3, [pc, #468]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	4a74      	ldr	r2, [pc, #464]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dac:	e00f      	b.n	8004dce <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004dae:	4b71      	ldr	r3, [pc, #452]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	4a6f      	ldr	r2, [pc, #444]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004dc6:	f023 0304 	bic.w	r3, r3, #4
 8004dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d068      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fe f837 	bl	8002e48 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ddc:	e011      	b.n	8004e02 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fe f833 	bl	8002e48 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d908      	bls.n	8004e02 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df0:	4b60      	ldr	r3, [pc, #384]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e1d4      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e02:	4b5c      	ldr	r3, [pc, #368]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0e6      	beq.n	8004dde <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d022      	beq.n	8004e62 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e1c:	4b55      	ldr	r3, [pc, #340]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	4a54      	ldr	r2, [pc, #336]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e2c:	e011      	b.n	8004e52 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fe f80b 	bl	8002e48 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d908      	bls.n	8004e52 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e40:	4b4c      	ldr	r3, [pc, #304]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e1ac      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e52:	4b48      	ldr	r3, [pc, #288]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0e6      	beq.n	8004e2e <HAL_RCC_OscConfig+0x61a>
 8004e60:	e068      	b.n	8004f34 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e62:	4b44      	ldr	r3, [pc, #272]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	4a42      	ldr	r2, [pc, #264]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e72:	e011      	b.n	8004e98 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e74:	f7fd ffe8 	bl	8002e48 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d908      	bls.n	8004e98 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e189      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e98:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <HAL_RCC_OscConfig+0x660>
 8004ea6:	e045      	b.n	8004f34 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fd ffce 	bl	8002e48 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eae:	e011      	b.n	8004ed4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fd ffca 	bl	8002e48 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d908      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e16b      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed4:	4b27      	ldr	r3, [pc, #156]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e6      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004ee2:	4b24      	ldr	r3, [pc, #144]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d021      	beq.n	8004f34 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ef0:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f00:	e011      	b.n	8004f26 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd ffa1 	bl	8002e48 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d908      	bls.n	8004f26 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f14:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e142      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f34:	7ffb      	ldrb	r3, [r7, #31]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d04f      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d028      	beq.n	8004fac <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f5a:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f60:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <HAL_RCC_OscConfig+0x760>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fd ff6d 	bl	8002e48 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f70:	e014      	b.n	8004f9c <HAL_RCC_OscConfig+0x788>
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7c:	f7fd ff64 	bl	8002e48 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d908      	bls.n	8004f9c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e107      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f9c:	4b85      	ldr	r3, [pc, #532]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0e8      	beq.n	8004f7c <HAL_RCC_OscConfig+0x768>
 8004faa:	e022      	b.n	8004ff2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fac:	4b81      	ldr	r3, [pc, #516]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb2:	4a80      	ldr	r2, [pc, #512]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fd ff44 	bl	8002e48 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fc2:	e00f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc4:	f7fd ff40 	bl	8002e48 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d908      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fd2:	4b78      	ldr	r3, [pc, #480]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0e3      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fe4:	4b73      	ldr	r3, [pc, #460]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e8      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80d7 	beq.w	80051aa <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b0c      	cmp	r3, #12
 8005006:	f000 8091 	beq.w	800512c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	2b02      	cmp	r3, #2
 8005010:	d166      	bne.n	80050e0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005012:	4b68      	ldr	r3, [pc, #416]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a67      	ldr	r2, [pc, #412]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005018:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fd ff13 	bl	8002e48 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005024:	e00e      	b.n	8005044 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005026:	f7fd ff0f 	bl	8002e48 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d907      	bls.n	8005044 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005034:	4b5f      	ldr	r3, [pc, #380]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e0b3      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005044:	4b5b      	ldr	r3, [pc, #364]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ea      	bne.n	8005026 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005050:	4b58      	ldr	r3, [pc, #352]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	4b58      	ldr	r3, [pc, #352]	@ (80051b8 <HAL_RCC_OscConfig+0x9a4>)
 8005056:	4013      	ands	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005060:	3a01      	subs	r2, #1
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800506a:	0212      	lsls	r2, r2, #8
 800506c:	4311      	orrs	r1, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005072:	0852      	lsrs	r2, r2, #1
 8005074:	3a01      	subs	r2, #1
 8005076:	0552      	lsls	r2, r2, #21
 8005078:	4311      	orrs	r1, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800507e:	0852      	lsrs	r2, r2, #1
 8005080:	3a01      	subs	r2, #1
 8005082:	0652      	lsls	r2, r2, #25
 8005084:	4311      	orrs	r1, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800508a:	06d2      	lsls	r2, r2, #27
 800508c:	430a      	orrs	r2, r1
 800508e:	4949      	ldr	r1, [pc, #292]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a46      	ldr	r2, [pc, #280]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800509e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050a0:	4b44      	ldr	r3, [pc, #272]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a43      	ldr	r2, [pc, #268]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 80050a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fd fecc 	bl	8002e48 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b2:	e00e      	b.n	80050d2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fd fec8 	bl	8002e48 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d907      	bls.n	80050d2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	4b3c      	ldr	r3, [pc, #240]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e06c      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d2:	4b38      	ldr	r3, [pc, #224]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ea      	beq.n	80050b4 <HAL_RCC_OscConfig+0x8a0>
 80050de:	e064      	b.n	80051aa <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e0:	4b34      	ldr	r3, [pc, #208]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a33      	ldr	r2, [pc, #204]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 80050e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd feac 	bl	8002e48 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f2:	e00e      	b.n	8005112 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fd fea8 	bl	8002e48 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d907      	bls.n	8005112 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005102:	4b2c      	ldr	r3, [pc, #176]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e04c      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005112:	4b28      	ldr	r3, [pc, #160]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1ea      	bne.n	80050f4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800511e:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	4924      	ldr	r1, [pc, #144]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 8005124:	4b25      	ldr	r3, [pc, #148]	@ (80051bc <HAL_RCC_OscConfig+0x9a8>)
 8005126:	4013      	ands	r3, r2
 8005128:	60cb      	str	r3, [r1, #12]
 800512a:	e03e      	b.n	80051aa <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e039      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005138:	4b1e      	ldr	r3, [pc, #120]	@ (80051b4 <HAL_RCC_OscConfig+0x9a0>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005148:	429a      	cmp	r2, r3
 800514a:	d12c      	bne.n	80051a6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005156:	3b01      	subs	r3, #1
 8005158:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d123      	bne.n	80051a6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d11b      	bne.n	80051a6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d113      	bne.n	80051a6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	3b01      	subs	r3, #1
 800518c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	3b01      	subs	r3, #1
 80051a0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	019f800c 	.word	0x019f800c
 80051bc:	feeefffc 	.word	0xfeeefffc

080051c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e11c      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d8:	4b90      	ldr	r3, [pc, #576]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d910      	bls.n	8005208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b8d      	ldr	r3, [pc, #564]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 020f 	bic.w	r2, r3, #15
 80051ee:	498b      	ldr	r1, [pc, #556]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b89      	ldr	r3, [pc, #548]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e104      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	4b81      	ldr	r3, [pc, #516]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005220:	429a      	cmp	r2, r3
 8005222:	d908      	bls.n	8005236 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005224:	4b7e      	ldr	r3, [pc, #504]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	497b      	ldr	r1, [pc, #492]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8085 	beq.w	800534e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d11f      	bne.n	800528c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524c:	4b74      	ldr	r3, [pc, #464]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0da      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800525c:	f000 fa26 	bl	80056ac <RCC_GetSysClockFreqFromPLLSource>
 8005260:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4a6f      	ldr	r2, [pc, #444]	@ (8005424 <HAL_RCC_ClockConfig+0x264>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d947      	bls.n	80052fa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800526a:	4b6d      	ldr	r3, [pc, #436]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d141      	bne.n	80052fa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005276:	4b6a      	ldr	r3, [pc, #424]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800527e:	4a68      	ldr	r2, [pc, #416]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005284:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e036      	b.n	80052fa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d107      	bne.n	80052a4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005294:	4b62      	ldr	r3, [pc, #392]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d115      	bne.n	80052cc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0b6      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0aa      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052bc:	4b58      	ldr	r3, [pc, #352]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0a2      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052cc:	f000 f8b0 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4a53      	ldr	r2, [pc, #332]	@ (8005424 <HAL_RCC_ClockConfig+0x264>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d90f      	bls.n	80052fa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052da:	4b51      	ldr	r3, [pc, #324]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80052f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052fa:	4b49      	ldr	r3, [pc, #292]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 0203 	bic.w	r2, r3, #3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4946      	ldr	r1, [pc, #280]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005308:	4313      	orrs	r3, r2
 800530a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd fd9c 	bl	8002e48 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005312:	e013      	b.n	800533c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005314:	f7fd fd98 	bl	8002e48 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d90a      	bls.n	800533c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	4b3e      	ldr	r3, [pc, #248]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 020c 	and.w	r2, r3, #12
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e06a      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533c:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 020c 	and.w	r2, r3, #12
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	429a      	cmp	r2, r3
 800534c:	d1e2      	bne.n	8005314 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b80      	cmp	r3, #128	@ 0x80
 8005352:	d105      	bne.n	8005360 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005354:	4b32      	ldr	r3, [pc, #200]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a31      	ldr	r2, [pc, #196]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800535a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800535e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	4b2b      	ldr	r3, [pc, #172]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537c:	4b28      	ldr	r3, [pc, #160]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4925      	ldr	r1, [pc, #148]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800538e:	4b23      	ldr	r3, [pc, #140]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d210      	bcs.n	80053be <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539c:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 020f 	bic.w	r2, r3, #15
 80053a4:	491d      	ldr	r1, [pc, #116]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ac:	4b1b      	ldr	r3, [pc, #108]	@ (800541c <HAL_RCC_ClockConfig+0x25c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d001      	beq.n	80053be <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e029      	b.n	8005412 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ca:	4b15      	ldr	r3, [pc, #84]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4912      	ldr	r1, [pc, #72]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	490a      	ldr	r1, [pc, #40]	@ (8005420 <HAL_RCC_ClockConfig+0x260>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053fc:	f000 f8b6 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8005400:	4603      	mov	r3, r0
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <HAL_RCC_ClockConfig+0x268>)
 8005404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <HAL_RCC_ClockConfig+0x26c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fd fccc 	bl	8002da8 <HAL_InitTick>
 8005410:	4603      	mov	r3, r0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40022000 	.word	0x40022000
 8005420:	40021000 	.word	0x40021000
 8005424:	04c4b400 	.word	0x04c4b400
 8005428:	20000004 	.word	0x20000004
 800542c:	20000030 	.word	0x20000030

08005430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	@ 0x24
 8005434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543e:	4b47      	ldr	r3, [pc, #284]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005448:	4b44      	ldr	r3, [pc, #272]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x34>
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b0c      	cmp	r3, #12
 800545c:	d121      	bne.n	80054a2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d11e      	bne.n	80054a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005464:	4b3d      	ldr	r3, [pc, #244]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d107      	bne.n	8005480 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005470:	4b3a      	ldr	r3, [pc, #232]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	e005      	b.n	800548c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005480:	4b36      	ldr	r3, [pc, #216]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800548c:	4a34      	ldr	r2, [pc, #208]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x130>)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005494:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d102      	bne.n	80054ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x134>)
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e004      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x138>)
 80054b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d146      	bne.n	800554c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054be:	4b27      	ldr	r3, [pc, #156]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c8:	4b24      	ldr	r3, [pc, #144]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	3301      	adds	r3, #1
 80054d4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d003      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0xb4>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d00d      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0xce>
 80054e2:	e019      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x134>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 80054ee:	68d2      	ldr	r2, [r2, #12]
 80054f0:	0a12      	lsrs	r2, r2, #8
 80054f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	617b      	str	r3, [r7, #20]
        break;
 80054fc:	e019      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x138>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	4a15      	ldr	r2, [pc, #84]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005508:	68d2      	ldr	r2, [r2, #12]
 800550a:	0a12      	lsrs	r2, r2, #8
 800550c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
        break;
 8005516:	e00c      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	4a0e      	ldr	r2, [pc, #56]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005522:	68d2      	ldr	r2, [r2, #12]
 8005524:	0a12      	lsrs	r2, r2, #8
 8005526:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	617b      	str	r3, [r7, #20]
        break;
 8005530:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	0e5b      	lsrs	r3, r3, #25
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	3301      	adds	r3, #1
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	fbb2 f3f3 	udiv	r3, r2, r3
 800554a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800554c:	69bb      	ldr	r3, [r7, #24]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3724      	adds	r7, #36	@ 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	080091ec 	.word	0x080091ec
 8005564:	00f42400 	.word	0x00f42400
 8005568:	007a1200 	.word	0x007a1200

0800556c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005570:	f7ff ff5e 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_GetHCLKFreq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	4903      	ldr	r1, [pc, #12]	@ (8005590 <HAL_RCC_GetHCLKFreq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	080091d4 	.word	0x080091d4

08005594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005598:	f7ff ffe8 	bl	800556c <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	@ (80055b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40021000 	.word	0x40021000
 80055b8:	080091e4 	.word	0x080091e4

080055bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055c0:	f7ff ffd4 	bl	800556c <HAL_RCC_GetHCLKFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b05      	ldr	r3, [pc, #20]	@ (80055dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	0adb      	lsrs	r3, r3, #11
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	4903      	ldr	r1, [pc, #12]	@ (80055e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	080091e4 	.word	0x080091e4

080055e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055f0:	4b2c      	ldr	r3, [pc, #176]	@ (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055fc:	f7ff f85c 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 8005600:	6138      	str	r0, [r7, #16]
 8005602:	e014      	b.n	800562e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005604:	4b27      	ldr	r3, [pc, #156]	@ (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005608:	4a26      	ldr	r2, [pc, #152]	@ (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800560e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005610:	4b24      	ldr	r3, [pc, #144]	@ (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800561c:	f7ff f84c 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 8005620:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005622:	4b20      	ldr	r3, [pc, #128]	@ (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	4a1f      	ldr	r2, [pc, #124]	@ (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800562c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563a:	d10b      	bne.n	8005654 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b80      	cmp	r3, #128	@ 0x80
 8005640:	d919      	bls.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2ba0      	cmp	r3, #160	@ 0xa0
 8005646:	d902      	bls.n	800564e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005648:	2302      	movs	r3, #2
 800564a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800564c:	e013      	b.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800564e:	2301      	movs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005652:	e010      	b.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b80      	cmp	r3, #128	@ 0x80
 8005658:	d902      	bls.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800565a:	2303      	movs	r3, #3
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e00a      	b.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	d102      	bne.n	800566c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005666:	2302      	movs	r3, #2
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e004      	b.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b70      	cmp	r3, #112	@ 0x70
 8005670:	d101      	bne.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005672:	2301      	movs	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005676:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005686:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	429a      	cmp	r2, r3
 8005692:	d001      	beq.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40022000 	.word	0x40022000

080056ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056b2:	4b31      	ldr	r3, [pc, #196]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	3301      	adds	r3, #1
 80056c8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d015      	beq.n	80056fc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d839      	bhi.n	800574a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d01c      	beq.n	8005716 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d133      	bne.n	800574a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056e2:	4a26      	ldr	r2, [pc, #152]	@ (800577c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	4a23      	ldr	r2, [pc, #140]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	0a12      	lsrs	r2, r2, #8
 80056f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	613b      	str	r3, [r7, #16]
      break;
 80056fa:	e029      	b.n	8005750 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056fc:	4a20      	ldr	r2, [pc, #128]	@ (8005780 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005706:	68d2      	ldr	r2, [r2, #12]
 8005708:	0a12      	lsrs	r2, r2, #8
 800570a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	613b      	str	r3, [r7, #16]
      break;
 8005714:	e01c      	b.n	8005750 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005716:	4b18      	ldr	r3, [pc, #96]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d107      	bne.n	8005732 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005722:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e005      	b.n	800573e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005732:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800573e:	4a11      	ldr	r2, [pc, #68]	@ (8005784 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005746:	613b      	str	r3, [r7, #16]
        break;
 8005748:	e002      	b.n	8005750 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
      break;
 800574e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005750:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	0e5b      	lsrs	r3, r3, #25
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	3301      	adds	r3, #1
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800576a:	683b      	ldr	r3, [r7, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40021000 	.word	0x40021000
 800577c:	00f42400 	.word	0x00f42400
 8005780:	007a1200 	.word	0x007a1200
 8005784:	080091ec 	.word	0x080091ec

08005788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005790:	2300      	movs	r3, #0
 8005792:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005794:	2300      	movs	r3, #0
 8005796:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d040      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a8:	2b80      	cmp	r3, #128	@ 0x80
 80057aa:	d02a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057ac:	2b80      	cmp	r3, #128	@ 0x80
 80057ae:	d825      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057b0:	2b60      	cmp	r3, #96	@ 0x60
 80057b2:	d026      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057b4:	2b60      	cmp	r3, #96	@ 0x60
 80057b6:	d821      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	d006      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80057bc:	2b40      	cmp	r3, #64	@ 0x40
 80057be:	d81d      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d010      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80057c8:	e018      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4a8e      	ldr	r2, [pc, #568]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057d6:	e015      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fb56 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057e8:	e00c      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3320      	adds	r3, #32
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fc33 	bl	800605c <RCCEx_PLLSAI2_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
        break;
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005804:	7ffb      	ldrb	r3, [r7, #31]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800580a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005810:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005818:	497b      	ldr	r1, [pc, #492]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005820:	e001      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	7ffb      	ldrb	r3, [r7, #31]
 8005824:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d047      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800583a:	d030      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005840:	d82a      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005846:	d02a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584c:	d824      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800584e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005852:	d008      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005858:	d81e      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800585e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005862:	d010      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005864:	e018      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005866:	4b68      	ldr	r3, [pc, #416]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4a67      	ldr	r2, [pc, #412]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800586c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005870:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005872:	e015      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fb08 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005884:	e00c      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3320      	adds	r3, #32
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fbe5 	bl	800605c <RCCEx_PLLSAI2_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	77fb      	strb	r3, [r7, #31]
        break;
 800589c:	e000      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800589e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058a6:	4b58      	ldr	r3, [pc, #352]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b4:	4954      	ldr	r1, [pc, #336]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80058bc:	e001      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80ab 	beq.w	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e0:	4b49      	ldr	r3, [pc, #292]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e4:	4a48      	ldr	r2, [pc, #288]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ec:	4b46      	ldr	r3, [pc, #280]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058fc:	4b43      	ldr	r3, [pc, #268]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a42      	ldr	r2, [pc, #264]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005908:	f7fd fa9e 	bl	8002e48 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800590e:	e00f      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005910:	f7fd fa9a 	bl	8002e48 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d908      	bls.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800591e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800592e:	e006      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005930:	4b36      	ldr	r3, [pc, #216]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0e9      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800593c:	e000      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800593e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005940:	7ffb      	ldrb	r3, [r7, #31]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d164      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005946:	4b30      	ldr	r3, [pc, #192]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005950:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01f      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	429a      	cmp	r2, r3
 8005962:	d019      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005964:	4b28      	ldr	r3, [pc, #160]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005970:	4b25      	ldr	r3, [pc, #148]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005980:	4b21      	ldr	r3, [pc, #132]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005986:	4a20      	ldr	r2, [pc, #128]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005990:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01f      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a2:	f7fd fa51 	bl	8002e48 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a8:	e012      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fd fa4d 	bl	8002e48 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d909      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059bc:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80059ce:	e007      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0e5      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x222>
 80059de:	e000      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80059e0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e8:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f8:	4903      	ldr	r1, [pc, #12]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a02:	7ffb      	ldrb	r3, [r7, #31]
 8005a04:	77bb      	strb	r3, [r7, #30]
 8005a06:	e005      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d105      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1e:	4a9b      	ldr	r2, [pc, #620]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a32:	4b96      	ldr	r3, [pc, #600]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a38:	f023 0203 	bic.w	r2, r3, #3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	4992      	ldr	r1, [pc, #584]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a54:	4b8d      	ldr	r3, [pc, #564]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5a:	f023 020c 	bic.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a62:	498a      	ldr	r1, [pc, #552]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a76:	4b85      	ldr	r3, [pc, #532]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	4981      	ldr	r1, [pc, #516]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a98:	4b7c      	ldr	r3, [pc, #496]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	4979      	ldr	r1, [pc, #484]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aba:	4b74      	ldr	r3, [pc, #464]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac8:	4970      	ldr	r1, [pc, #448]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005adc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aea:	4968      	ldr	r1, [pc, #416]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005afe:	4b63      	ldr	r3, [pc, #396]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0c:	495f      	ldr	r1, [pc, #380]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b20:	4b5a      	ldr	r3, [pc, #360]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2e:	4957      	ldr	r1, [pc, #348]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005b42:	4b52      	ldr	r3, [pc, #328]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b50:	494e      	ldr	r1, [pc, #312]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d031      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b6c:	d00e      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b72:	d814      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b7c:	d10f      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7e:	4b43      	ldr	r3, [pc, #268]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a42      	ldr	r2, [pc, #264]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b88:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b8a:	e00c      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f97c 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	77fb      	strb	r3, [r7, #31]
        break;
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bac:	4b37      	ldr	r3, [pc, #220]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bba:	4934      	ldr	r1, [pc, #208]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005bc2:	e001      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7ffb      	ldrb	r3, [r7, #31]
 8005bc6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be2:	492a      	ldr	r1, [pc, #168]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bf6:	4b25      	ldr	r3, [pc, #148]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c04:	4921      	ldr	r1, [pc, #132]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c18:	4b1c      	ldr	r3, [pc, #112]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	4919      	ldr	r1, [pc, #100]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c3a:	4b14      	ldr	r3, [pc, #80]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c40:	f023 0203 	bic.w	r2, r3, #3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c48:	4910      	ldr	r1, [pc, #64]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02b      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	4908      	ldr	r1, [pc, #32]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b03      	ldr	r3, [pc, #12]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a02      	ldr	r2, [pc, #8]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]
 8005c88:	e014      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f8f5 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005cb0:	7ffb      	ldrb	r3, [r7, #31]
 8005cb2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d04a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc8:	d108      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005cca:	4b70      	ldr	r3, [pc, #448]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cd6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005cda:	e012      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cea:	4968      	ldr	r1, [pc, #416]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cf2:	4b66      	ldr	r3, [pc, #408]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cf8:	4a64      	ldr	r2, [pc, #400]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d0a:	d10d      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	2101      	movs	r1, #1
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f8bc 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d1c:	7ffb      	ldrb	r3, [r7, #31]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d019      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005d22:	7ffb      	ldrb	r3, [r7, #31]
 8005d24:	77bb      	strb	r3, [r7, #30]
 8005d26:	e016      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d30:	d106      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d32:	4b56      	ldr	r3, [pc, #344]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	4a55      	ldr	r2, [pc, #340]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d3c:	60d3      	str	r3, [r2, #12]
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d48:	d105      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d4a:	4b50      	ldr	r3, [pc, #320]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d54:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d028      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d62:	4b4a      	ldr	r3, [pc, #296]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d70:	4946      	ldr	r1, [pc, #280]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d80:	d106      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d82:	4b42      	ldr	r3, [pc, #264]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	4a41      	ldr	r2, [pc, #260]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d8c:	60d3      	str	r3, [r2, #12]
 8005d8e:	e011      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	2101      	movs	r1, #1
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 f875 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005daa:	7ffb      	ldrb	r3, [r7, #31]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
 8005db2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01e      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dc0:	4b32      	ldr	r3, [pc, #200]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd0:	492e      	ldr	r1, [pc, #184]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005de2:	d10c      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	2102      	movs	r1, #2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f850 	bl	8005e90 <RCCEx_PLLSAI1_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005df4:	7ffb      	ldrb	r3, [r7, #31]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005dfa:	7ffb      	ldrb	r3, [r7, #31]
 8005dfc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e0a:	4b20      	ldr	r3, [pc, #128]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e10:	f023 0204 	bic.w	r2, r3, #4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e1a:	491c      	ldr	r1, [pc, #112]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e2e:	4b17      	ldr	r3, [pc, #92]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e34:	f023 0218 	bic.w	r2, r3, #24
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3e:	4913      	ldr	r1, [pc, #76]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d017      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e62:	490a      	ldr	r1, [pc, #40]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e74:	d105      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e76:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4a04      	ldr	r2, [pc, #16]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005e82:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40021000 	.word	0x40021000

08005e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d018      	beq.n	8005ed8 <RCCEx_PLLSAI1_Config+0x48>
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d81f      	bhi.n	8005eea <RCCEx_PLLSAI1_Config+0x5a>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d002      	beq.n	8005eb4 <RCCEx_PLLSAI1_Config+0x24>
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d009      	beq.n	8005ec6 <RCCEx_PLLSAI1_Config+0x36>
 8005eb2:	e01a      	b.n	8005eea <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eb4:	4b65      	ldr	r3, [pc, #404]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d117      	bne.n	8005ef0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec4:	e014      	b.n	8005ef0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ec6:	4b61      	ldr	r3, [pc, #388]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed6:	e00d      	b.n	8005ef4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee8:	e006      	b.n	8005ef8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	e004      	b.n	8005efa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ef0:	bf00      	nop
 8005ef2:	e002      	b.n	8005efa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ef4:	bf00      	nop
 8005ef6:	e000      	b.n	8005efa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ef8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 809f 	bne.w	8006040 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f02:	4b52      	ldr	r3, [pc, #328]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a51      	ldr	r2, [pc, #324]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f0e:	f7fc ff9b 	bl	8002e48 <HAL_GetTick>
 8005f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f14:	e00f      	b.n	8005f36 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f16:	f7fc ff97 	bl	8002e48 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d908      	bls.n	8005f36 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f24:	4b49      	ldr	r3, [pc, #292]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f34:	e006      	b.n	8005f44 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f36:	4b45      	ldr	r3, [pc, #276]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e9      	bne.n	8005f16 <RCCEx_PLLSAI1_Config+0x86>
 8005f42:	e000      	b.n	8005f46 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005f44:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d179      	bne.n	8006040 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d116      	bne.n	8005f80 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f52:	4b3e      	ldr	r3, [pc, #248]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	4b3e      	ldr	r3, [pc, #248]	@ (8006050 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6892      	ldr	r2, [r2, #8]
 8005f5e:	0211      	lsls	r1, r2, #8
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	68d2      	ldr	r2, [r2, #12]
 8005f64:	06d2      	lsls	r2, r2, #27
 8005f66:	4311      	orrs	r1, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6852      	ldr	r2, [r2, #4]
 8005f6c:	3a01      	subs	r2, #1
 8005f6e:	0112      	lsls	r2, r2, #4
 8005f70:	4311      	orrs	r1, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	4934      	ldr	r1, [pc, #208]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	610b      	str	r3, [r1, #16]
 8005f7e:	e033      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d118      	bne.n	8005fb8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f86:	4b31      	ldr	r3, [pc, #196]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	4b32      	ldr	r3, [pc, #200]	@ (8006054 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6892      	ldr	r2, [r2, #8]
 8005f92:	0211      	lsls	r1, r2, #8
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6912      	ldr	r2, [r2, #16]
 8005f98:	0852      	lsrs	r2, r2, #1
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	0552      	lsls	r2, r2, #21
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	0112      	lsls	r2, r2, #4
 8005fa8:	4311      	orrs	r1, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	4926      	ldr	r1, [pc, #152]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	610b      	str	r3, [r1, #16]
 8005fb6:	e017      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb8:	4b24      	ldr	r3, [pc, #144]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	4b26      	ldr	r3, [pc, #152]	@ (8006058 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6892      	ldr	r2, [r2, #8]
 8005fc4:	0211      	lsls	r1, r2, #8
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6952      	ldr	r2, [r2, #20]
 8005fca:	0852      	lsrs	r2, r2, #1
 8005fcc:	3a01      	subs	r2, #1
 8005fce:	0652      	lsls	r2, r2, #25
 8005fd0:	4311      	orrs	r1, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6852      	ldr	r2, [r2, #4]
 8005fd6:	3a01      	subs	r2, #1
 8005fd8:	0112      	lsls	r2, r2, #4
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	491a      	ldr	r1, [pc, #104]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fe8:	4b18      	ldr	r3, [pc, #96]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a17      	ldr	r2, [pc, #92]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fc ff28 	bl	8002e48 <HAL_GetTick>
 8005ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ffa:	e00f      	b.n	800601c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffc:	f7fc ff24 	bl	8002e48 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d908      	bls.n	800601c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800600a:	4b10      	ldr	r3, [pc, #64]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800601a:	e006      	b.n	800602a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800601c:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0e9      	beq.n	8005ffc <RCCEx_PLLSAI1_Config+0x16c>
 8006028:	e000      	b.n	800602c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800602a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006032:	4b06      	ldr	r3, [pc, #24]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006034:	691a      	ldr	r2, [r3, #16]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	4904      	ldr	r1, [pc, #16]	@ (800604c <RCCEx_PLLSAI1_Config+0x1bc>)
 800603c:	4313      	orrs	r3, r2
 800603e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	07ff800c 	.word	0x07ff800c
 8006054:	ff9f800c 	.word	0xff9f800c
 8006058:	f9ff800c 	.word	0xf9ff800c

0800605c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d018      	beq.n	80060a4 <RCCEx_PLLSAI2_Config+0x48>
 8006072:	2b03      	cmp	r3, #3
 8006074:	d81f      	bhi.n	80060b6 <RCCEx_PLLSAI2_Config+0x5a>
 8006076:	2b01      	cmp	r3, #1
 8006078:	d002      	beq.n	8006080 <RCCEx_PLLSAI2_Config+0x24>
 800607a:	2b02      	cmp	r3, #2
 800607c:	d009      	beq.n	8006092 <RCCEx_PLLSAI2_Config+0x36>
 800607e:	e01a      	b.n	80060b6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006080:	4b4a      	ldr	r3, [pc, #296]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d117      	bne.n	80060bc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006090:	e014      	b.n	80060bc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006092:	4b46      	ldr	r3, [pc, #280]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800609a:	2b00      	cmp	r3, #0
 800609c:	d110      	bne.n	80060c0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a2:	e00d      	b.n	80060c0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80060a4:	4b41      	ldr	r3, [pc, #260]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b4:	e006      	b.n	80060c4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ba:	e004      	b.n	80060c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80060bc:	bf00      	nop
 80060be:	e002      	b.n	80060c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80060c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d169      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060cc:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a36      	ldr	r2, [pc, #216]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 80060d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d8:	f7fc feb6 	bl	8002e48 <HAL_GetTick>
 80060dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060de:	e00f      	b.n	8006100 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060e0:	f7fc feb2 	bl	8002e48 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d908      	bls.n	8006100 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060ee:	4b2f      	ldr	r3, [pc, #188]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060fe:	e006      	b.n	800610e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006100:	4b2a      	ldr	r3, [pc, #168]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e9      	bne.n	80060e0 <RCCEx_PLLSAI2_Config+0x84>
 800610c:	e000      	b.n	8006110 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800610e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d144      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d115      	bne.n	8006148 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800611c:	4b23      	ldr	r3, [pc, #140]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	4b23      	ldr	r3, [pc, #140]	@ (80061b0 <RCCEx_PLLSAI2_Config+0x154>)
 8006122:	4013      	ands	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6892      	ldr	r2, [r2, #8]
 8006128:	0211      	lsls	r1, r2, #8
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68d2      	ldr	r2, [r2, #12]
 800612e:	06d2      	lsls	r2, r2, #27
 8006130:	4311      	orrs	r1, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6852      	ldr	r2, [r2, #4]
 8006136:	3a01      	subs	r2, #1
 8006138:	0112      	lsls	r2, r2, #4
 800613a:	4311      	orrs	r1, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	491a      	ldr	r1, [pc, #104]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 8006144:	4313      	orrs	r3, r2
 8006146:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006148:	4b18      	ldr	r3, [pc, #96]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a17      	ldr	r2, [pc, #92]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 800614e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006152:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7fc fe78 	bl	8002e48 <HAL_GetTick>
 8006158:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800615a:	e00f      	b.n	800617c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800615c:	f7fc fe74 	bl	8002e48 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d908      	bls.n	800617c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800616a:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800617a:	e006      	b.n	800618a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0e9      	beq.n	800615c <RCCEx_PLLSAI2_Config+0x100>
 8006188:	e000      	b.n	800618c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800618a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	4904      	ldr	r1, [pc, #16]	@ (80061ac <RCCEx_PLLSAI2_Config+0x150>)
 800619c:	4313      	orrs	r3, r2
 800619e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40021000 	.word	0x40021000
 80061b0:	07ff800c 	.word	0x07ff800c

080061b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d066      	beq.n	8006294 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc f8a4 	bl	8002328 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d045      	beq.n	8006282 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <HAL_RTC_Init+0xec>)
 80061f8:	22ca      	movs	r2, #202	@ 0xca
 80061fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80061fc:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <HAL_RTC_Init+0xec>)
 80061fe:	2253      	movs	r2, #83	@ 0x53
 8006200:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f872 	bl	80062ec <RTC_EnterInitMode>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d121      	bne.n	8006256 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006212:	4b23      	ldr	r3, [pc, #140]	@ (80062a0 <HAL_RTC_Init+0xec>)
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	4a22      	ldr	r2, [pc, #136]	@ (80062a0 <HAL_RTC_Init+0xec>)
 8006218:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800621c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006220:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006222:	4b1f      	ldr	r3, [pc, #124]	@ (80062a0 <HAL_RTC_Init+0xec>)
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	4319      	orrs	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	430b      	orrs	r3, r1
 8006236:	491a      	ldr	r1, [pc, #104]	@ (80062a0 <HAL_RTC_Init+0xec>)
 8006238:	4313      	orrs	r3, r2
 800623a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	4916      	ldr	r1, [pc, #88]	@ (80062a0 <HAL_RTC_Init+0xec>)
 8006248:	4313      	orrs	r3, r2
 800624a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f881 	bl	8006354 <RTC_ExitInitMode>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10e      	bne.n	800627a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800625c:	4b10      	ldr	r3, [pc, #64]	@ (80062a0 <HAL_RTC_Init+0xec>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a19      	ldr	r1, [r3, #32]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	4319      	orrs	r1, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	430b      	orrs	r3, r1
 8006274:	490a      	ldr	r1, [pc, #40]	@ (80062a0 <HAL_RTC_Init+0xec>)
 8006276:	4313      	orrs	r3, r2
 8006278:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627a:	4b09      	ldr	r3, [pc, #36]	@ (80062a0 <HAL_RTC_Init+0xec>)
 800627c:	22ff      	movs	r2, #255	@ 0xff
 800627e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006280:	e001      	b.n	8006286 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40002800 	.word	0x40002800

080062a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80062ac:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <HAL_RTC_WaitForSynchro+0x40>)
 80062ae:	4a0e      	ldr	r2, [pc, #56]	@ (80062e8 <HAL_RTC_WaitForSynchro+0x44>)
 80062b0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062b2:	f7fc fdc9 	bl	8002e48 <HAL_GetTick>
 80062b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062b8:	e009      	b.n	80062ce <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062ba:	f7fc fdc5 	bl	8002e48 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062c8:	d901      	bls.n	80062ce <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e006      	b.n	80062dc <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062ce:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <HAL_RTC_WaitForSynchro+0x40>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0ef      	beq.n	80062ba <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40002800 	.word	0x40002800
 80062e8:	0001005c 	.word	0x0001005c

080062ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80062f8:	4b15      	ldr	r3, [pc, #84]	@ (8006350 <RTC_EnterInitMode+0x64>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d120      	bne.n	8006346 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006304:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <RTC_EnterInitMode+0x64>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4a11      	ldr	r2, [pc, #68]	@ (8006350 <RTC_EnterInitMode+0x64>)
 800630a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006310:	f7fc fd9a 	bl	8002e48 <HAL_GetTick>
 8006314:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006316:	e00d      	b.n	8006334 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006318:	f7fc fd96 	bl	8002e48 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006326:	d905      	bls.n	8006334 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2203      	movs	r2, #3
 8006330:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006334:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <RTC_EnterInitMode+0x64>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <RTC_EnterInitMode+0x5a>
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d1e8      	bne.n	8006318 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40002800 	.word	0x40002800

08006354 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006360:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <RTC_ExitInitMode+0x78>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	4a19      	ldr	r2, [pc, #100]	@ (80063cc <RTC_ExitInitMode+0x78>)
 8006366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800636c:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <RTC_ExitInitMode+0x78>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10c      	bne.n	8006392 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ff93 	bl	80062a4 <HAL_RTC_WaitForSynchro>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2203      	movs	r2, #3
 8006388:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	73fb      	strb	r3, [r7, #15]
 8006390:	e017      	b.n	80063c2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006392:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <RTC_ExitInitMode+0x78>)
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	4a0d      	ldr	r2, [pc, #52]	@ (80063cc <RTC_ExitInitMode+0x78>)
 8006398:	f023 0320 	bic.w	r3, r3, #32
 800639c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff ff80 	bl	80062a4 <HAL_RTC_WaitForSynchro>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2203      	movs	r2, #3
 80063ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063b6:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <RTC_ExitInitMode+0x78>)
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <RTC_ExitInitMode+0x78>)
 80063bc:	f043 0320 	orr.w	r3, r3, #32
 80063c0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40002800 	.word	0x40002800

080063d0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	490f      	ldr	r1, [pc, #60]	@ (8006420 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	490c      	ldr	r1, [pc, #48]	@ (8006424 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80063f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6919      	ldr	r1, [r3, #16]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	041b      	lsls	r3, r3, #16
 8006408:	430b      	orrs	r3, r1
 800640a:	4906      	ldr	r1, [pc, #24]	@ (8006424 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800640c:	4313      	orrs	r3, r2
 800640e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40002800 	.word	0x40002800
 8006424:	40003400 	.word	0x40003400

08006428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e095      	b.n	8006566 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d108      	bne.n	8006454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800644a:	d009      	beq.n	8006460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	61da      	str	r2, [r3, #28]
 8006452:	e005      	b.n	8006460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb ff92 	bl	80023a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006496:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064a0:	d902      	bls.n	80064a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e002      	b.n	80064ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80064b6:	d007      	beq.n	80064c8 <HAL_SPI_Init+0xa0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064c0:	d002      	beq.n	80064c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650a:	ea42 0103 	orr.w	r1, r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	0c1b      	lsrs	r3, r3, #16
 8006524:	f003 0204 	and.w	r2, r3, #4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006544:	ea42 0103 	orr.w	r1, r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b08a      	sub	sp, #40	@ 0x28
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800657c:	2301      	movs	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x26>
 8006590:	2302      	movs	r3, #2
 8006592:	e20a      	b.n	80069aa <HAL_SPI_TransmitReceive+0x43c>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800659c:	f7fc fc54 	bl	8002e48 <HAL_GetTick>
 80065a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80065a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80065b0:	887b      	ldrh	r3, [r7, #2]
 80065b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80065b4:	887b      	ldrh	r3, [r7, #2]
 80065b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065b8:	7efb      	ldrb	r3, [r7, #27]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00e      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x6e>
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065c4:	d106      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x66>
 80065ce:	7efb      	ldrb	r3, [r7, #27]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d003      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80065da:	e1e0      	b.n	800699e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_SPI_TransmitReceive+0x80>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_SPI_TransmitReceive+0x80>
 80065e8:	887b      	ldrh	r3, [r7, #2]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d103      	bne.n	80065f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80065f4:	e1d3      	b.n	800699e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d003      	beq.n	800660a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2205      	movs	r2, #5
 8006606:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	887a      	ldrh	r2, [r7, #2]
 800661a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	887a      	ldrh	r2, [r7, #2]
 8006622:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	887a      	ldrh	r2, [r7, #2]
 8006630:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	887a      	ldrh	r2, [r7, #2]
 8006636:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800664c:	d802      	bhi.n	8006654 <HAL_SPI_TransmitReceive+0xe6>
 800664e:	8a3b      	ldrh	r3, [r7, #16]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d908      	bls.n	8006666 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006662:	605a      	str	r2, [r3, #4]
 8006664:	e007      	b.n	8006676 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006674:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	d007      	beq.n	8006694 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800669c:	f240 8081 	bls.w	80067a2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x140>
 80066a8:	8a7b      	ldrh	r3, [r7, #18]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d16d      	bne.n	800678a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	881a      	ldrh	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	1c9a      	adds	r2, r3, #2
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d2:	e05a      	b.n	800678a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d11b      	bne.n	800671a <HAL_SPI_TransmitReceive+0x1ac>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d016      	beq.n	800671a <HAL_SPI_TransmitReceive+0x1ac>
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d113      	bne.n	800671a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	881a      	ldrh	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b01      	cmp	r3, #1
 8006726:	d11c      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x1f4>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d016      	beq.n	8006762 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	b292      	uxth	r2, r2
 8006740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800675e:	2301      	movs	r3, #1
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006762:	f7fc fb71 	bl	8002e48 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676e:	429a      	cmp	r2, r3
 8006770:	d80b      	bhi.n	800678a <HAL_SPI_TransmitReceive+0x21c>
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d007      	beq.n	800678a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006788:	e109      	b.n	800699e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d19f      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x166>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d199      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x166>
 80067a0:	e0e3      	b.n	800696a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x244>
 80067aa:	8a7b      	ldrh	r3, [r7, #18]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	f040 80cf 	bne.w	8006950 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d912      	bls.n	80067e2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	881a      	ldrh	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b02      	subs	r3, #2
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067e0:	e0b6      	b.n	8006950 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006808:	e0a2      	b.n	8006950 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d134      	bne.n	8006882 <HAL_SPI_TransmitReceive+0x314>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d02f      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x314>
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	2b01      	cmp	r3, #1
 8006826:	d12c      	bne.n	8006882 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d912      	bls.n	8006858 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006842:	1c9a      	adds	r2, r3, #2
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b02      	subs	r3, #2
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006856:	e012      	b.n	800687e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	d148      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x3b4>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d042      	beq.n	8006922 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d923      	bls.n	80068f0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	b292      	uxth	r2, r2
 80068b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	1c9a      	adds	r2, r3, #2
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b02      	subs	r3, #2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d81f      	bhi.n	800691e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	e016      	b.n	800691e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f103 020c 	add.w	r2, r3, #12
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	7812      	ldrb	r2, [r2, #0]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800691e:	2301      	movs	r3, #1
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006922:	f7fc fa91 	bl	8002e48 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800692e:	429a      	cmp	r2, r3
 8006930:	d803      	bhi.n	800693a <HAL_SPI_TransmitReceive+0x3cc>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d102      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x3d2>
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800694e:	e026      	b.n	800699e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	f47f af57 	bne.w	800680a <HAL_SPI_TransmitReceive+0x29c>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	f47f af50 	bne.w	800680a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f93e 	bl	8006bf0 <SPI_EndRxTxTransaction>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006994:	e003      	b.n	800699e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80069a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	@ 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069c4:	f7fc fa40 	bl	8002e48 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069d4:	f7fc fa38 	bl	8002e48 <HAL_GetTick>
 80069d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069da:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	015b      	lsls	r3, r3, #5
 80069e0:	0d1b      	lsrs	r3, r3, #20
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ea:	e054      	b.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d050      	beq.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069f4:	f7fc fa28 	bl	8002e48 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d902      	bls.n	8006a0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d13d      	bne.n	8006a86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a22:	d111      	bne.n	8006a48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2c:	d004      	beq.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a36:	d107      	bne.n	8006a48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a50:	d10f      	bne.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e017      	b.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2301      	moveq	r3, #1
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d19b      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000004 	.word	0x20000004

08006ac4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	@ 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ad6:	f7fc f9b7 	bl	8002e48 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006ae6:	f7fc f9af 	bl	8002e48 <HAL_GetTick>
 8006aea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006af4:	4b3d      	ldr	r3, [pc, #244]	@ (8006bec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	00da      	lsls	r2, r3, #3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	0d1b      	lsrs	r3, r3, #20
 8006b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b0c:	e060      	b.n	8006bd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b14:	d107      	bne.n	8006b26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d050      	beq.n	8006bd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b2e:	f7fc f98b 	bl	8002e48 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d902      	bls.n	8006b44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d13d      	bne.n	8006bc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b5c:	d111      	bne.n	8006b82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b66:	d004      	beq.n	8006b72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b70:	d107      	bne.n	8006b82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b8a:	d10f      	bne.n	8006bac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006baa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e010      	b.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d196      	bne.n	8006b0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3728      	adds	r7, #40	@ 0x28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000004 	.word	0x20000004

08006bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff ff5b 	bl	8006ac4 <SPI_WaitFifoStateUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e027      	b.n	8006c74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2180      	movs	r1, #128	@ 0x80
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fec0 	bl	80069b4 <SPI_WaitFlagStateUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3e:	f043 0220 	orr.w	r2, r3, #32
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e014      	b.n	8006c74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff ff34 	bl	8006ac4 <SPI_WaitFifoStateUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c66:	f043 0220 	orr.w	r2, r3, #32
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e000      	b.n	8006c74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e042      	b.n	8006d14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7fb fbc3 	bl	800242c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2224      	movs	r2, #36	@ 0x24
 8006caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fb28 	bl	800731c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f825 	bl	8006d1c <UART_SetConfig>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e01b      	b.n	8006d14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fba7 	bl	8007460 <UART_CheckIdleState>
 8006d12:	4603      	mov	r3, r0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d20:	b08c      	sub	sp, #48	@ 0x30
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4baa      	ldr	r3, [pc, #680]	@ (8006ff4 <UART_SetConfig+0x2d8>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a9f      	ldr	r2, [pc, #636]	@ (8006ff8 <UART_SetConfig+0x2dc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	4313      	orrs	r3, r2
 8006d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	f023 010f 	bic.w	r1, r3, #15
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a90      	ldr	r2, [pc, #576]	@ (8006ffc <UART_SetConfig+0x2e0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d125      	bne.n	8006e0c <UART_SetConfig+0xf0>
 8006dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8007000 <UART_SetConfig+0x2e4>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d81a      	bhi.n	8006e04 <UART_SetConfig+0xe8>
 8006dce:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <UART_SetConfig+0xb8>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006df5 	.word	0x08006df5
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dea:	e116      	b.n	800701a <UART_SetConfig+0x2fe>
 8006dec:	2302      	movs	r3, #2
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df2:	e112      	b.n	800701a <UART_SetConfig+0x2fe>
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfa:	e10e      	b.n	800701a <UART_SetConfig+0x2fe>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e02:	e10a      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0a:	e106      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a7c      	ldr	r2, [pc, #496]	@ (8007004 <UART_SetConfig+0x2e8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d138      	bne.n	8006e88 <UART_SetConfig+0x16c>
 8006e16:	4b7a      	ldr	r3, [pc, #488]	@ (8007000 <UART_SetConfig+0x2e4>)
 8006e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1c:	f003 030c 	and.w	r3, r3, #12
 8006e20:	2b0c      	cmp	r3, #12
 8006e22:	d82d      	bhi.n	8006e80 <UART_SetConfig+0x164>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <UART_SetConfig+0x110>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006e81 	.word	0x08006e81
 8006e34:	08006e81 	.word	0x08006e81
 8006e38:	08006e81 	.word	0x08006e81
 8006e3c:	08006e71 	.word	0x08006e71
 8006e40:	08006e81 	.word	0x08006e81
 8006e44:	08006e81 	.word	0x08006e81
 8006e48:	08006e81 	.word	0x08006e81
 8006e4c:	08006e69 	.word	0x08006e69
 8006e50:	08006e81 	.word	0x08006e81
 8006e54:	08006e81 	.word	0x08006e81
 8006e58:	08006e81 	.word	0x08006e81
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e66:	e0d8      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e0d4      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e0d0      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e0cc      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e86:	e0c8      	b.n	800701a <UART_SetConfig+0x2fe>
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a5e      	ldr	r2, [pc, #376]	@ (8007008 <UART_SetConfig+0x2ec>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d125      	bne.n	8006ede <UART_SetConfig+0x1c2>
 8006e92:	4b5b      	ldr	r3, [pc, #364]	@ (8007000 <UART_SetConfig+0x2e4>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e9c:	2b30      	cmp	r3, #48	@ 0x30
 8006e9e:	d016      	beq.n	8006ece <UART_SetConfig+0x1b2>
 8006ea0:	2b30      	cmp	r3, #48	@ 0x30
 8006ea2:	d818      	bhi.n	8006ed6 <UART_SetConfig+0x1ba>
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d00a      	beq.n	8006ebe <UART_SetConfig+0x1a2>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d814      	bhi.n	8006ed6 <UART_SetConfig+0x1ba>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <UART_SetConfig+0x19a>
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d008      	beq.n	8006ec6 <UART_SetConfig+0x1aa>
 8006eb4:	e00f      	b.n	8006ed6 <UART_SetConfig+0x1ba>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebc:	e0ad      	b.n	800701a <UART_SetConfig+0x2fe>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec4:	e0a9      	b.n	800701a <UART_SetConfig+0x2fe>
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ecc:	e0a5      	b.n	800701a <UART_SetConfig+0x2fe>
 8006ece:	2308      	movs	r3, #8
 8006ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed4:	e0a1      	b.n	800701a <UART_SetConfig+0x2fe>
 8006ed6:	2310      	movs	r3, #16
 8006ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006edc:	e09d      	b.n	800701a <UART_SetConfig+0x2fe>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4a      	ldr	r2, [pc, #296]	@ (800700c <UART_SetConfig+0x2f0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d125      	bne.n	8006f34 <UART_SetConfig+0x218>
 8006ee8:	4b45      	ldr	r3, [pc, #276]	@ (8007000 <UART_SetConfig+0x2e4>)
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ef4:	d016      	beq.n	8006f24 <UART_SetConfig+0x208>
 8006ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ef8:	d818      	bhi.n	8006f2c <UART_SetConfig+0x210>
 8006efa:	2b80      	cmp	r3, #128	@ 0x80
 8006efc:	d00a      	beq.n	8006f14 <UART_SetConfig+0x1f8>
 8006efe:	2b80      	cmp	r3, #128	@ 0x80
 8006f00:	d814      	bhi.n	8006f2c <UART_SetConfig+0x210>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <UART_SetConfig+0x1f0>
 8006f06:	2b40      	cmp	r3, #64	@ 0x40
 8006f08:	d008      	beq.n	8006f1c <UART_SetConfig+0x200>
 8006f0a:	e00f      	b.n	8006f2c <UART_SetConfig+0x210>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e082      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f14:	2302      	movs	r3, #2
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e07e      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e07a      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2a:	e076      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f32:	e072      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a35      	ldr	r2, [pc, #212]	@ (8007010 <UART_SetConfig+0x2f4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d12a      	bne.n	8006f94 <UART_SetConfig+0x278>
 8006f3e:	4b30      	ldr	r3, [pc, #192]	@ (8007000 <UART_SetConfig+0x2e4>)
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f4c:	d01a      	beq.n	8006f84 <UART_SetConfig+0x268>
 8006f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f52:	d81b      	bhi.n	8006f8c <UART_SetConfig+0x270>
 8006f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f58:	d00c      	beq.n	8006f74 <UART_SetConfig+0x258>
 8006f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f5e:	d815      	bhi.n	8006f8c <UART_SetConfig+0x270>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <UART_SetConfig+0x250>
 8006f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f68:	d008      	beq.n	8006f7c <UART_SetConfig+0x260>
 8006f6a:	e00f      	b.n	8006f8c <UART_SetConfig+0x270>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f72:	e052      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f74:	2302      	movs	r3, #2
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e04e      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e04a      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f84:	2308      	movs	r3, #8
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e046      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e042      	b.n	800701a <UART_SetConfig+0x2fe>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a17      	ldr	r2, [pc, #92]	@ (8006ff8 <UART_SetConfig+0x2dc>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d13a      	bne.n	8007014 <UART_SetConfig+0x2f8>
 8006f9e:	4b18      	ldr	r3, [pc, #96]	@ (8007000 <UART_SetConfig+0x2e4>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fac:	d01a      	beq.n	8006fe4 <UART_SetConfig+0x2c8>
 8006fae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fb2:	d81b      	bhi.n	8006fec <UART_SetConfig+0x2d0>
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb8:	d00c      	beq.n	8006fd4 <UART_SetConfig+0x2b8>
 8006fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fbe:	d815      	bhi.n	8006fec <UART_SetConfig+0x2d0>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <UART_SetConfig+0x2b0>
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc8:	d008      	beq.n	8006fdc <UART_SetConfig+0x2c0>
 8006fca:	e00f      	b.n	8006fec <UART_SetConfig+0x2d0>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e022      	b.n	800701a <UART_SetConfig+0x2fe>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e01e      	b.n	800701a <UART_SetConfig+0x2fe>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e01a      	b.n	800701a <UART_SetConfig+0x2fe>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e016      	b.n	800701a <UART_SetConfig+0x2fe>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e012      	b.n	800701a <UART_SetConfig+0x2fe>
 8006ff4:	cfff69f3 	.word	0xcfff69f3
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	40013800 	.word	0x40013800
 8007000:	40021000 	.word	0x40021000
 8007004:	40004400 	.word	0x40004400
 8007008:	40004800 	.word	0x40004800
 800700c:	40004c00 	.word	0x40004c00
 8007010:	40005000 	.word	0x40005000
 8007014:	2310      	movs	r3, #16
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4ab0      	ldr	r2, [pc, #704]	@ (80072e0 <UART_SetConfig+0x5c4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	f040 809b 	bne.w	800715c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007026:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800702a:	2b08      	cmp	r3, #8
 800702c:	d827      	bhi.n	800707e <UART_SetConfig+0x362>
 800702e:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <UART_SetConfig+0x318>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007059 	.word	0x08007059
 8007038:	08007061 	.word	0x08007061
 800703c:	08007069 	.word	0x08007069
 8007040:	0800707f 	.word	0x0800707f
 8007044:	0800706f 	.word	0x0800706f
 8007048:	0800707f 	.word	0x0800707f
 800704c:	0800707f 	.word	0x0800707f
 8007050:	0800707f 	.word	0x0800707f
 8007054:	08007077 	.word	0x08007077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007058:	f7fe fa9c 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800705e:	e014      	b.n	800708a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007060:	f7fe faac 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 8007064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007066:	e010      	b.n	800708a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007068:	4b9e      	ldr	r3, [pc, #632]	@ (80072e4 <UART_SetConfig+0x5c8>)
 800706a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800706c:	e00d      	b.n	800708a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706e:	f7fe f9df 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 8007072:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007074:	e009      	b.n	800708a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800707a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800707c:	e005      	b.n	800708a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8130 	beq.w	80072f2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	4a94      	ldr	r2, [pc, #592]	@ (80072e8 <UART_SetConfig+0x5cc>)
 8007098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800709c:	461a      	mov	r2, r3
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4413      	add	r3, r2
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d305      	bcc.n	80070c2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d903      	bls.n	80070ca <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070c8:	e113      	b.n	80072f2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	2200      	movs	r2, #0
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	60fa      	str	r2, [r7, #12]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	4a84      	ldr	r2, [pc, #528]	@ (80072e8 <UART_SetConfig+0x5cc>)
 80070d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2200      	movs	r2, #0
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ec:	f7f9 fd60 	bl	8000bb0 <__aeabi_uldivmod>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4610      	mov	r0, r2
 80070f6:	4619      	mov	r1, r3
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	020b      	lsls	r3, r1, #8
 8007102:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007106:	0202      	lsls	r2, r0, #8
 8007108:	6979      	ldr	r1, [r7, #20]
 800710a:	6849      	ldr	r1, [r1, #4]
 800710c:	0849      	lsrs	r1, r1, #1
 800710e:	2000      	movs	r0, #0
 8007110:	460c      	mov	r4, r1
 8007112:	4605      	mov	r5, r0
 8007114:	eb12 0804 	adds.w	r8, r2, r4
 8007118:	eb43 0905 	adc.w	r9, r3, r5
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	469a      	mov	sl, r3
 8007124:	4693      	mov	fp, r2
 8007126:	4652      	mov	r2, sl
 8007128:	465b      	mov	r3, fp
 800712a:	4640      	mov	r0, r8
 800712c:	4649      	mov	r1, r9
 800712e:	f7f9 fd3f 	bl	8000bb0 <__aeabi_uldivmod>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4613      	mov	r3, r2
 8007138:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007140:	d308      	bcc.n	8007154 <UART_SetConfig+0x438>
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007148:	d204      	bcs.n	8007154 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a3a      	ldr	r2, [r7, #32]
 8007150:	60da      	str	r2, [r3, #12]
 8007152:	e0ce      	b.n	80072f2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800715a:	e0ca      	b.n	80072f2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007164:	d166      	bne.n	8007234 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007166:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800716a:	2b08      	cmp	r3, #8
 800716c:	d827      	bhi.n	80071be <UART_SetConfig+0x4a2>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x458>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071af 	.word	0x080071af
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fe f9fc 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 800719c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800719e:	e014      	b.n	80071ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe fa0c 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071a6:	e010      	b.n	80071ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b4e      	ldr	r3, [pc, #312]	@ (80072e4 <UART_SetConfig+0x5c8>)
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071ac:	e00d      	b.n	80071ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fe f93f 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80071b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071bc:	e005      	b.n	80071ca <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8090 	beq.w	80072f2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	4a44      	ldr	r2, [pc, #272]	@ (80072e8 <UART_SetConfig+0x5cc>)
 80071d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071dc:	461a      	mov	r2, r3
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071e4:	005a      	lsls	r2, r3, #1
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	441a      	add	r2, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b0f      	cmp	r3, #15
 80071fc:	d916      	bls.n	800722c <UART_SetConfig+0x510>
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007204:	d212      	bcs.n	800722c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	b29b      	uxth	r3, r3
 800720a:	f023 030f 	bic.w	r3, r3, #15
 800720e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	b29b      	uxth	r3, r3
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	b29a      	uxth	r2, r3
 800721c:	8bfb      	ldrh	r3, [r7, #30]
 800721e:	4313      	orrs	r3, r2
 8007220:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	8bfa      	ldrh	r2, [r7, #30]
 8007228:	60da      	str	r2, [r3, #12]
 800722a:	e062      	b.n	80072f2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007232:	e05e      	b.n	80072f2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007234:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007238:	2b08      	cmp	r3, #8
 800723a:	d828      	bhi.n	800728e <UART_SetConfig+0x572>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <UART_SetConfig+0x528>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007269 	.word	0x08007269
 8007248:	08007271 	.word	0x08007271
 800724c:	08007279 	.word	0x08007279
 8007250:	0800728f 	.word	0x0800728f
 8007254:	0800727f 	.word	0x0800727f
 8007258:	0800728f 	.word	0x0800728f
 800725c:	0800728f 	.word	0x0800728f
 8007260:	0800728f 	.word	0x0800728f
 8007264:	08007287 	.word	0x08007287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fe f994 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 800726c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726e:	e014      	b.n	800729a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007270:	f7fe f9a4 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007276:	e010      	b.n	800729a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007278:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <UART_SetConfig+0x5c8>)
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800727c:	e00d      	b.n	800729a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727e:	f7fe f8d7 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 8007282:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007284:	e009      	b.n	800729a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800728c:	e005      	b.n	800729a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007298:	bf00      	nop
    }

    if (pclk != 0U)
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	d028      	beq.n	80072f2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	4a10      	ldr	r2, [pc, #64]	@ (80072e8 <UART_SetConfig+0x5cc>)
 80072a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	085b      	lsrs	r3, r3, #1
 80072b8:	441a      	add	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d910      	bls.n	80072ec <UART_SetConfig+0x5d0>
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d0:	d20c      	bcs.n	80072ec <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60da      	str	r2, [r3, #12]
 80072dc:	e009      	b.n	80072f2 <UART_SetConfig+0x5d6>
 80072de:	bf00      	nop
 80072e0:	40008000 	.word	0x40008000
 80072e4:	00f42400 	.word	0x00f42400
 80072e8:	0800922c 	.word	0x0800922c
      }
      else
      {
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2200      	movs	r2, #0
 8007306:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2200      	movs	r2, #0
 800730c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800730e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007312:	4618      	mov	r0, r3
 8007314:	3730      	adds	r7, #48	@ 0x30
 8007316:	46bd      	mov	sp, r7
 8007318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800731c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01a      	beq.n	8007432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800741a:	d10a      	bne.n	8007432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  }
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b098      	sub	sp, #96	@ 0x60
 8007464:	af02      	add	r7, sp, #8
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007470:	f7fb fcea 	bl	8002e48 <HAL_GetTick>
 8007474:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b08      	cmp	r3, #8
 8007482:	d12f      	bne.n	80074e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007484:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800748c:	2200      	movs	r2, #0
 800748e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f88e 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d022      	beq.n	80074e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e063      	b.n	80075ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d149      	bne.n	8007586 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074fa:	2200      	movs	r2, #0
 80074fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f857 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d03c      	beq.n	8007586 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	623b      	str	r3, [r7, #32]
   return(result);
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752a:	633b      	str	r3, [r7, #48]	@ 0x30
 800752c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	60fb      	str	r3, [r7, #12]
   return(result);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800755e:	61fa      	str	r2, [r7, #28]
 8007560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	69b9      	ldr	r1, [r7, #24]
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	617b      	str	r3, [r7, #20]
   return(result);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e5      	bne.n	800753e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e012      	b.n	80075ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3758      	adds	r7, #88	@ 0x58
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c4:	e04f      	b.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d04b      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ce:	f7fb fc3b 	bl	8002e48 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e04e      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d037      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b80      	cmp	r3, #128	@ 0x80
 80075fa:	d034      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	d031      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b08      	cmp	r3, #8
 800760e:	d110      	bne.n	8007632 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2208      	movs	r2, #8
 8007616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f838 	bl	800768e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2208      	movs	r2, #8
 8007622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e029      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007640:	d111      	bne.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800764a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f81e 	bl	800768e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e00f      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4013      	ands	r3, r2
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	429a      	cmp	r2, r3
 8007674:	bf0c      	ite	eq
 8007676:	2301      	moveq	r3, #1
 8007678:	2300      	movne	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	429a      	cmp	r2, r3
 8007682:	d0a0      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800768e:	b480      	push	{r7}
 8007690:	b095      	sub	sp, #84	@ 0x54
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e6      	bne.n	8007696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e3      	bne.n	80076c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d118      	bne.n	800773a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	60bb      	str	r3, [r7, #8]
   return(result);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f023 0310 	bic.w	r3, r3, #16
 800771c:	647b      	str	r3, [r7, #68]	@ 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	613b      	str	r3, [r7, #16]
   return(result);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800774e:	bf00      	nop
 8007750:	3754      	adds	r7, #84	@ 0x54
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_UARTEx_DisableFifoMode+0x16>
 800776c:	2302      	movs	r3, #2
 800776e:	e027      	b.n	80077c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2224      	movs	r2, #36	@ 0x24
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800779e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e02d      	b.n	8007840 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2224      	movs	r2, #36	@ 0x24
 80077f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f84f 	bl	80078c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e02d      	b.n	80078bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2224      	movs	r2, #36	@ 0x24
 800786c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0201 	bic.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f811 	bl	80078c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078e4:	e031      	b.n	800794a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078e6:	2308      	movs	r3, #8
 80078e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ea:	2308      	movs	r3, #8
 80078ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	0e5b      	lsrs	r3, r3, #25
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	0f5b      	lsrs	r3, r3, #29
 8007906:	b2db      	uxtb	r3, r3
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	7b3a      	ldrb	r2, [r7, #12]
 8007912:	4911      	ldr	r1, [pc, #68]	@ (8007958 <UARTEx_SetNbDataToProcess+0x94>)
 8007914:	5c8a      	ldrb	r2, [r1, r2]
 8007916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800791a:	7b3a      	ldrb	r2, [r7, #12]
 800791c:	490f      	ldr	r1, [pc, #60]	@ (800795c <UARTEx_SetNbDataToProcess+0x98>)
 800791e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007920:	fb93 f3f2 	sdiv	r3, r3, r2
 8007924:	b29a      	uxth	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	7b7a      	ldrb	r2, [r7, #13]
 8007930:	4909      	ldr	r1, [pc, #36]	@ (8007958 <UARTEx_SetNbDataToProcess+0x94>)
 8007932:	5c8a      	ldrb	r2, [r1, r2]
 8007934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007938:	7b7a      	ldrb	r2, [r7, #13]
 800793a:	4908      	ldr	r1, [pc, #32]	@ (800795c <UARTEx_SetNbDataToProcess+0x98>)
 800793c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800793e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	08009244 	.word	0x08009244
 800795c:	0800924c 	.word	0x0800924c

08007960 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007960:	b480      	push	{r7}
 8007962:	b08b      	sub	sp, #44	@ 0x2c
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	fa93 f3a3 	rbit	r3, r3
 800797a:	613b      	str	r3, [r7, #16]
  return result;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007986:	2320      	movs	r3, #32
 8007988:	e003      	b.n	8007992 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	fab3 f383 	clz	r3, r3
 8007990:	b2db      	uxtb	r3, r3
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	2103      	movs	r1, #3
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	43db      	mvns	r3, r3
 800799c:	401a      	ands	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	fa93 f3a3 	rbit	r3, r3
 80079a8:	61fb      	str	r3, [r7, #28]
  return result;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80079b4:	2320      	movs	r3, #32
 80079b6:	e003      	b.n	80079c0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	fab3 f383 	clz	r3, r3
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	fa01 f303 	lsl.w	r3, r1, r3
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]
}
 80079ce:	bf00      	nop
 80079d0:	372c      	adds	r7, #44	@ 0x2c
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	401a      	ands	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	fb01 f303 	mul.w	r3, r1, r3
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	605a      	str	r2, [r3, #4]
}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b08b      	sub	sp, #44	@ 0x2c
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	fa93 f3a3 	rbit	r3, r3
 8007a24:	613b      	str	r3, [r7, #16]
  return result;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007a30:	2320      	movs	r3, #32
 8007a32:	e003      	b.n	8007a3c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	fab3 f383 	clz	r3, r3
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2103      	movs	r1, #3
 8007a40:	fa01 f303 	lsl.w	r3, r1, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	401a      	ands	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	fa93 f3a3 	rbit	r3, r3
 8007a52:	61fb      	str	r3, [r7, #28]
  return result;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007a5e:	2320      	movs	r3, #32
 8007a60:	e003      	b.n	8007a6a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	fab3 f383 	clz	r3, r3
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	431a      	orrs	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007a78:	bf00      	nop
 8007a7a:	372c      	adds	r7, #44	@ 0x2c
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b08b      	sub	sp, #44	@ 0x2c
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	fa93 f3a3 	rbit	r3, r3
 8007a9e:	613b      	str	r3, [r7, #16]
  return result;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007aaa:	2320      	movs	r3, #32
 8007aac:	e003      	b.n	8007ab6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	fab3 f383 	clz	r3, r3
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	2103      	movs	r1, #3
 8007aba:	fa01 f303 	lsl.w	r3, r1, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	401a      	ands	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	fa93 f3a3 	rbit	r3, r3
 8007acc:	61fb      	str	r3, [r7, #28]
  return result;
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007ad8:	2320      	movs	r3, #32
 8007ada:	e003      	b.n	8007ae4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	fab3 f383 	clz	r3, r3
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	431a      	orrs	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	60da      	str	r2, [r3, #12]
}
 8007af2:	bf00      	nop
 8007af4:	372c      	adds	r7, #44	@ 0x2c
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b08b      	sub	sp, #44	@ 0x2c
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	fa93 f3a3 	rbit	r3, r3
 8007b18:	613b      	str	r3, [r7, #16]
  return result;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007b24:	2320      	movs	r3, #32
 8007b26:	e003      	b.n	8007b30 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	fab3 f383 	clz	r3, r3
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	210f      	movs	r1, #15
 8007b34:	fa01 f303 	lsl.w	r3, r1, r3
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	401a      	ands	r2, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	fa93 f3a3 	rbit	r3, r3
 8007b46:	61fb      	str	r3, [r7, #28]
  return result;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007b52:	2320      	movs	r3, #32
 8007b54:	e003      	b.n	8007b5e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	fab3 f383 	clz	r3, r3
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	fa01 f303 	lsl.w	r3, r1, r3
 8007b66:	431a      	orrs	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007b6c:	bf00      	nop
 8007b6e:	372c      	adds	r7, #44	@ 0x2c
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b08b      	sub	sp, #44	@ 0x2c
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	fa93 f3a3 	rbit	r3, r3
 8007b94:	613b      	str	r3, [r7, #16]
  return result;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	e003      	b.n	8007bac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	fab3 f383 	clz	r3, r3
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	210f      	movs	r1, #15
 8007bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb4:	43db      	mvns	r3, r3
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	fa93 f3a3 	rbit	r3, r3
 8007bc4:	61fb      	str	r3, [r7, #28]
  return result;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007bd0:	2320      	movs	r3, #32
 8007bd2:	e003      	b.n	8007bdc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	fab3 f383 	clz	r3, r3
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	fa01 f303 	lsl.w	r3, r1, r3
 8007be4:	431a      	orrs	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007bea:	bf00      	nop
 8007bec:	372c      	adds	r7, #44	@ 0x2c
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	fa93 f3a3 	rbit	r3, r3
 8007c0c:	60fb      	str	r3, [r7, #12]
  return result;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <LL_GPIO_Init+0x26>
    return 32U;
 8007c18:	2320      	movs	r3, #32
 8007c1a:	e003      	b.n	8007c24 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	fab3 f383 	clz	r3, r3
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007c26:	e047      	b.n	8007cb8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	fa01 f303 	lsl.w	r3, r1, r3
 8007c34:	4013      	ands	r3, r2
 8007c36:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d039      	beq.n	8007cb2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d003      	beq.n	8007c4e <LL_GPIO_Init+0x58>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d10d      	bne.n	8007c6a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	461a      	mov	r2, r3
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fed7 	bl	8007a0a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	461a      	mov	r2, r3
 8007c62:	69b9      	ldr	r1, [r7, #24]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff feb8 	bl	80079da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	69b9      	ldr	r1, [r7, #24]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ff06 	bl	8007a84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d111      	bne.n	8007ca4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2bff      	cmp	r3, #255	@ 0xff
 8007c84:	d807      	bhi.n	8007c96 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ff35 	bl	8007afe <LL_GPIO_SetAFPin_0_7>
 8007c94:	e006      	b.n	8007ca4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	69b9      	ldr	r1, [r7, #24]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff ff6a 	bl	8007b78 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	69b9      	ldr	r1, [r7, #24]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fe57 	bl	8007960 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1b0      	bne.n	8007c28 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007cd8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007cdc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	43db      	mvns	r3, r3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4013      	ands	r3, r2
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	1d3b      	adds	r3, r7, #4
 8007d10:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <pow>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	ec55 4b11 	vmov	r4, r5, d1
 8007d4a:	ed2d 8b02 	vpush	{d8}
 8007d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d52:	eef0 8a60 	vmov.f32	s17, s1
 8007d56:	f000 f8ab 	bl	8007eb0 <__ieee754_pow>
 8007d5a:	4622      	mov	r2, r4
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	ec57 6b10 	vmov	r6, r7, d0
 8007d66:	f7f8 febd 	bl	8000ae4 <__aeabi_dcmpun>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d13b      	bne.n	8007de6 <pow+0xa2>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	ec51 0b18 	vmov	r0, r1, d8
 8007d76:	f7f8 fe83 	bl	8000a80 <__aeabi_dcmpeq>
 8007d7a:	b1b8      	cbz	r0, 8007dac <pow+0x68>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4620      	mov	r0, r4
 8007d82:	4629      	mov	r1, r5
 8007d84:	f7f8 fe7c 	bl	8000a80 <__aeabi_dcmpeq>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d146      	bne.n	8007e1a <pow+0xd6>
 8007d8c:	ec45 4b10 	vmov	d0, r4, r5
 8007d90:	f000 f87d 	bl	8007e8e <finite>
 8007d94:	b338      	cbz	r0, 8007de6 <pow+0xa2>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 fe79 	bl	8000a94 <__aeabi_dcmplt>
 8007da2:	b300      	cbz	r0, 8007de6 <pow+0xa2>
 8007da4:	f001 f9ca 	bl	800913c <__errno>
 8007da8:	2322      	movs	r3, #34	@ 0x22
 8007daa:	e01b      	b.n	8007de4 <pow+0xa0>
 8007dac:	ec47 6b10 	vmov	d0, r6, r7
 8007db0:	f000 f86d 	bl	8007e8e <finite>
 8007db4:	b9e0      	cbnz	r0, 8007df0 <pow+0xac>
 8007db6:	eeb0 0a48 	vmov.f32	s0, s16
 8007dba:	eef0 0a68 	vmov.f32	s1, s17
 8007dbe:	f000 f866 	bl	8007e8e <finite>
 8007dc2:	b1a8      	cbz	r0, 8007df0 <pow+0xac>
 8007dc4:	ec45 4b10 	vmov	d0, r4, r5
 8007dc8:	f000 f861 	bl	8007e8e <finite>
 8007dcc:	b180      	cbz	r0, 8007df0 <pow+0xac>
 8007dce:	4632      	mov	r2, r6
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fe85 	bl	8000ae4 <__aeabi_dcmpun>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0e2      	beq.n	8007da4 <pow+0x60>
 8007dde:	f001 f9ad 	bl	800913c <__errno>
 8007de2:	2321      	movs	r3, #33	@ 0x21
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	ecbd 8b02 	vpop	{d8}
 8007dea:	ec47 6b10 	vmov	d0, r6, r7
 8007dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fe42 	bl	8000a80 <__aeabi_dcmpeq>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d0f2      	beq.n	8007de6 <pow+0xa2>
 8007e00:	eeb0 0a48 	vmov.f32	s0, s16
 8007e04:	eef0 0a68 	vmov.f32	s1, s17
 8007e08:	f000 f841 	bl	8007e8e <finite>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d0ea      	beq.n	8007de6 <pow+0xa2>
 8007e10:	ec45 4b10 	vmov	d0, r4, r5
 8007e14:	f000 f83b 	bl	8007e8e <finite>
 8007e18:	e7c3      	b.n	8007da2 <pow+0x5e>
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	4f00      	ldr	r7, [pc, #0]	@ (8007e20 <pow+0xdc>)
 8007e1e:	e7e2      	b.n	8007de6 <pow+0xa2>
 8007e20:	3ff00000 	.word	0x3ff00000

08007e24 <asinf>:
 8007e24:	b508      	push	{r3, lr}
 8007e26:	ed2d 8b02 	vpush	{d8}
 8007e2a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e2e:	f000 fd87 	bl	8008940 <__ieee754_asinf>
 8007e32:	eef0 8a40 	vmov.f32	s17, s0
 8007e36:	eeb4 8a48 	vcmp.f32	s16, s16
 8007e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3e:	d615      	bvs.n	8007e6c <asinf+0x48>
 8007e40:	eeb0 0a48 	vmov.f32	s0, s16
 8007e44:	f000 f81c 	bl	8007e80 <fabsf>
 8007e48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007e4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e54:	dd0a      	ble.n	8007e6c <asinf+0x48>
 8007e56:	f001 f971 	bl	800913c <__errno>
 8007e5a:	2321      	movs	r3, #33	@ 0x21
 8007e5c:	ecbd 8b02 	vpop	{d8}
 8007e60:	6003      	str	r3, [r0, #0]
 8007e62:	4805      	ldr	r0, [pc, #20]	@ (8007e78 <asinf+0x54>)
 8007e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e68:	f000 b81c 	b.w	8007ea4 <nanf>
 8007e6c:	eeb0 0a68 	vmov.f32	s0, s17
 8007e70:	ecbd 8b02 	vpop	{d8}
 8007e74:	bd08      	pop	{r3, pc}
 8007e76:	bf00      	nop
 8007e78:	08009254 	.word	0x08009254

08007e7c <atan2f>:
 8007e7c:	f000 be46 	b.w	8008b0c <__ieee754_atan2f>

08007e80 <fabsf>:
 8007e80:	ee10 3a10 	vmov	r3, s0
 8007e84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e88:	ee00 3a10 	vmov	s0, r3
 8007e8c:	4770      	bx	lr

08007e8e <finite>:
 8007e8e:	b082      	sub	sp, #8
 8007e90:	ed8d 0b00 	vstr	d0, [sp]
 8007e94:	9801      	ldr	r0, [sp, #4]
 8007e96:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007e9a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007e9e:	0fc0      	lsrs	r0, r0, #31
 8007ea0:	b002      	add	sp, #8
 8007ea2:	4770      	bx	lr

08007ea4 <nanf>:
 8007ea4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007eac <nanf+0x8>
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	7fc00000 	.word	0x7fc00000

08007eb0 <__ieee754_pow>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	b091      	sub	sp, #68	@ 0x44
 8007eb6:	ed8d 1b00 	vstr	d1, [sp]
 8007eba:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007ebe:	ec57 6b10 	vmov	r6, r7, d0
 8007ec2:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007ec6:	ea5a 0001 	orrs.w	r0, sl, r1
 8007eca:	d113      	bne.n	8007ef4 <__ieee754_pow+0x44>
 8007ecc:	19b3      	adds	r3, r6, r6
 8007ece:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007ed2:	4152      	adcs	r2, r2
 8007ed4:	4298      	cmp	r0, r3
 8007ed6:	4b96      	ldr	r3, [pc, #600]	@ (8008130 <__ieee754_pow+0x280>)
 8007ed8:	4193      	sbcs	r3, r2
 8007eda:	f080 84e7 	bcs.w	80088ac <__ieee754_pow+0x9fc>
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ee6:	f7f8 f9ad 	bl	8000244 <__adddf3>
 8007eea:	ec41 0b10 	vmov	d0, r0, r1
 8007eee:	b011      	add	sp, #68	@ 0x44
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8008134 <__ieee754_pow+0x284>)
 8007efa:	463d      	mov	r5, r7
 8007efc:	4633      	mov	r3, r6
 8007efe:	4590      	cmp	r8, r2
 8007f00:	d806      	bhi.n	8007f10 <__ieee754_pow+0x60>
 8007f02:	d101      	bne.n	8007f08 <__ieee754_pow+0x58>
 8007f04:	2e00      	cmp	r6, #0
 8007f06:	d1ea      	bne.n	8007ede <__ieee754_pow+0x2e>
 8007f08:	4592      	cmp	sl, r2
 8007f0a:	d801      	bhi.n	8007f10 <__ieee754_pow+0x60>
 8007f0c:	d10e      	bne.n	8007f2c <__ieee754_pow+0x7c>
 8007f0e:	b169      	cbz	r1, 8007f2c <__ieee754_pow+0x7c>
 8007f10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007f14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007f18:	431d      	orrs	r5, r3
 8007f1a:	d1e0      	bne.n	8007ede <__ieee754_pow+0x2e>
 8007f1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f20:	18db      	adds	r3, r3, r3
 8007f22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007f26:	4152      	adcs	r2, r2
 8007f28:	429d      	cmp	r5, r3
 8007f2a:	e7d4      	b.n	8007ed6 <__ieee754_pow+0x26>
 8007f2c:	2d00      	cmp	r5, #0
 8007f2e:	46c3      	mov	fp, r8
 8007f30:	da3a      	bge.n	8007fa8 <__ieee754_pow+0xf8>
 8007f32:	4a81      	ldr	r2, [pc, #516]	@ (8008138 <__ieee754_pow+0x288>)
 8007f34:	4592      	cmp	sl, r2
 8007f36:	d84d      	bhi.n	8007fd4 <__ieee754_pow+0x124>
 8007f38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007f3c:	4592      	cmp	sl, r2
 8007f3e:	f240 84c4 	bls.w	80088ca <__ieee754_pow+0xa1a>
 8007f42:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007f46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007f4a:	2a14      	cmp	r2, #20
 8007f4c:	dd0f      	ble.n	8007f6e <__ieee754_pow+0xbe>
 8007f4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007f52:	fa21 f402 	lsr.w	r4, r1, r2
 8007f56:	fa04 f202 	lsl.w	r2, r4, r2
 8007f5a:	428a      	cmp	r2, r1
 8007f5c:	f040 84b5 	bne.w	80088ca <__ieee754_pow+0xa1a>
 8007f60:	f004 0401 	and.w	r4, r4, #1
 8007f64:	f1c4 0402 	rsb	r4, r4, #2
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d158      	bne.n	800801e <__ieee754_pow+0x16e>
 8007f6c:	e00e      	b.n	8007f8c <__ieee754_pow+0xdc>
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d154      	bne.n	800801c <__ieee754_pow+0x16c>
 8007f72:	f1c2 0214 	rsb	r2, r2, #20
 8007f76:	fa4a f402 	asr.w	r4, sl, r2
 8007f7a:	fa04 f202 	lsl.w	r2, r4, r2
 8007f7e:	4552      	cmp	r2, sl
 8007f80:	f040 84a0 	bne.w	80088c4 <__ieee754_pow+0xa14>
 8007f84:	f004 0401 	and.w	r4, r4, #1
 8007f88:	f1c4 0402 	rsb	r4, r4, #2
 8007f8c:	4a6b      	ldr	r2, [pc, #428]	@ (800813c <__ieee754_pow+0x28c>)
 8007f8e:	4592      	cmp	sl, r2
 8007f90:	d12e      	bne.n	8007ff0 <__ieee754_pow+0x140>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	f280 8491 	bge.w	80088bc <__ieee754_pow+0xa0c>
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	4966      	ldr	r1, [pc, #408]	@ (800813c <__ieee754_pow+0x28c>)
 8007fa2:	f7f8 fc2f 	bl	8000804 <__aeabi_ddiv>
 8007fa6:	e7a0      	b.n	8007eea <__ieee754_pow+0x3a>
 8007fa8:	2400      	movs	r4, #0
 8007faa:	bbc1      	cbnz	r1, 800801e <__ieee754_pow+0x16e>
 8007fac:	4a61      	ldr	r2, [pc, #388]	@ (8008134 <__ieee754_pow+0x284>)
 8007fae:	4592      	cmp	sl, r2
 8007fb0:	d1ec      	bne.n	8007f8c <__ieee754_pow+0xdc>
 8007fb2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007fb6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	f000 8476 	beq.w	80088ac <__ieee754_pow+0x9fc>
 8007fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8008140 <__ieee754_pow+0x290>)
 8007fc2:	4598      	cmp	r8, r3
 8007fc4:	d908      	bls.n	8007fd8 <__ieee754_pow+0x128>
 8007fc6:	f1b9 0f00 	cmp.w	r9, #0
 8007fca:	f2c0 8473 	blt.w	80088b4 <__ieee754_pow+0xa04>
 8007fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fd2:	e78a      	b.n	8007eea <__ieee754_pow+0x3a>
 8007fd4:	2402      	movs	r4, #2
 8007fd6:	e7e8      	b.n	8007faa <__ieee754_pow+0xfa>
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	f04f 0000 	mov.w	r0, #0
 8007fe0:	f04f 0100 	mov.w	r1, #0
 8007fe4:	da81      	bge.n	8007eea <__ieee754_pow+0x3a>
 8007fe6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007fea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007fee:	e77c      	b.n	8007eea <__ieee754_pow+0x3a>
 8007ff0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007ff4:	d106      	bne.n	8008004 <__ieee754_pow+0x154>
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	f7f8 fad7 	bl	80005b0 <__aeabi_dmul>
 8008002:	e772      	b.n	8007eea <__ieee754_pow+0x3a>
 8008004:	4a4f      	ldr	r2, [pc, #316]	@ (8008144 <__ieee754_pow+0x294>)
 8008006:	4591      	cmp	r9, r2
 8008008:	d109      	bne.n	800801e <__ieee754_pow+0x16e>
 800800a:	2d00      	cmp	r5, #0
 800800c:	db07      	blt.n	800801e <__ieee754_pow+0x16e>
 800800e:	ec47 6b10 	vmov	d0, r6, r7
 8008012:	b011      	add	sp, #68	@ 0x44
 8008014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	f000 bfa6 	b.w	8008f68 <__ieee754_sqrt>
 800801c:	2400      	movs	r4, #0
 800801e:	9302      	str	r3, [sp, #8]
 8008020:	ec47 6b10 	vmov	d0, r6, r7
 8008024:	f000 fc84 	bl	8008930 <fabs>
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	ec51 0b10 	vmov	r0, r1, d0
 800802e:	bb53      	cbnz	r3, 8008086 <__ieee754_pow+0x1d6>
 8008030:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008034:	4b41      	ldr	r3, [pc, #260]	@ (800813c <__ieee754_pow+0x28c>)
 8008036:	429a      	cmp	r2, r3
 8008038:	d002      	beq.n	8008040 <__ieee754_pow+0x190>
 800803a:	f1b8 0f00 	cmp.w	r8, #0
 800803e:	d122      	bne.n	8008086 <__ieee754_pow+0x1d6>
 8008040:	f1b9 0f00 	cmp.w	r9, #0
 8008044:	da05      	bge.n	8008052 <__ieee754_pow+0x1a2>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	2000      	movs	r0, #0
 800804c:	493b      	ldr	r1, [pc, #236]	@ (800813c <__ieee754_pow+0x28c>)
 800804e:	f7f8 fbd9 	bl	8000804 <__aeabi_ddiv>
 8008052:	2d00      	cmp	r5, #0
 8008054:	f6bf af49 	bge.w	8007eea <__ieee754_pow+0x3a>
 8008058:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800805c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008060:	ea58 0804 	orrs.w	r8, r8, r4
 8008064:	d108      	bne.n	8008078 <__ieee754_pow+0x1c8>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	f7f8 f8e7 	bl	8000240 <__aeabi_dsub>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	e794      	b.n	8007fa2 <__ieee754_pow+0xf2>
 8008078:	2c01      	cmp	r4, #1
 800807a:	f47f af36 	bne.w	8007eea <__ieee754_pow+0x3a>
 800807e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008082:	4619      	mov	r1, r3
 8008084:	e731      	b.n	8007eea <__ieee754_pow+0x3a>
 8008086:	0feb      	lsrs	r3, r5, #31
 8008088:	3b01      	subs	r3, #1
 800808a:	ea53 0204 	orrs.w	r2, r3, r4
 800808e:	d102      	bne.n	8008096 <__ieee754_pow+0x1e6>
 8008090:	4632      	mov	r2, r6
 8008092:	463b      	mov	r3, r7
 8008094:	e7e9      	b.n	800806a <__ieee754_pow+0x1ba>
 8008096:	3c01      	subs	r4, #1
 8008098:	431c      	orrs	r4, r3
 800809a:	d016      	beq.n	80080ca <__ieee754_pow+0x21a>
 800809c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8008120 <__ieee754_pow+0x270>
 80080a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80080a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080a8:	f240 810e 	bls.w	80082c8 <__ieee754_pow+0x418>
 80080ac:	4b26      	ldr	r3, [pc, #152]	@ (8008148 <__ieee754_pow+0x298>)
 80080ae:	459a      	cmp	sl, r3
 80080b0:	4b23      	ldr	r3, [pc, #140]	@ (8008140 <__ieee754_pow+0x290>)
 80080b2:	d916      	bls.n	80080e2 <__ieee754_pow+0x232>
 80080b4:	4598      	cmp	r8, r3
 80080b6:	d80b      	bhi.n	80080d0 <__ieee754_pow+0x220>
 80080b8:	f1b9 0f00 	cmp.w	r9, #0
 80080bc:	da0b      	bge.n	80080d6 <__ieee754_pow+0x226>
 80080be:	2000      	movs	r0, #0
 80080c0:	b011      	add	sp, #68	@ 0x44
 80080c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c6:	f000 bf47 	b.w	8008f58 <__math_oflow>
 80080ca:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8008128 <__ieee754_pow+0x278>
 80080ce:	e7e7      	b.n	80080a0 <__ieee754_pow+0x1f0>
 80080d0:	f1b9 0f00 	cmp.w	r9, #0
 80080d4:	dcf3      	bgt.n	80080be <__ieee754_pow+0x20e>
 80080d6:	2000      	movs	r0, #0
 80080d8:	b011      	add	sp, #68	@ 0x44
 80080da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080de:	f000 bf33 	b.w	8008f48 <__math_uflow>
 80080e2:	4598      	cmp	r8, r3
 80080e4:	d20c      	bcs.n	8008100 <__ieee754_pow+0x250>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ee:	f7f8 fcd1 	bl	8000a94 <__aeabi_dcmplt>
 80080f2:	3800      	subs	r0, #0
 80080f4:	bf18      	it	ne
 80080f6:	2001      	movne	r0, #1
 80080f8:	f1b9 0f00 	cmp.w	r9, #0
 80080fc:	daec      	bge.n	80080d8 <__ieee754_pow+0x228>
 80080fe:	e7df      	b.n	80080c0 <__ieee754_pow+0x210>
 8008100:	4b0e      	ldr	r3, [pc, #56]	@ (800813c <__ieee754_pow+0x28c>)
 8008102:	2200      	movs	r2, #0
 8008104:	4598      	cmp	r8, r3
 8008106:	d921      	bls.n	800814c <__ieee754_pow+0x29c>
 8008108:	2300      	movs	r3, #0
 800810a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810e:	f7f8 fcc1 	bl	8000a94 <__aeabi_dcmplt>
 8008112:	3800      	subs	r0, #0
 8008114:	bf18      	it	ne
 8008116:	2001      	movne	r0, #1
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	dcd0      	bgt.n	80080c0 <__ieee754_pow+0x210>
 800811e:	e7db      	b.n	80080d8 <__ieee754_pow+0x228>
 8008120:	00000000 	.word	0x00000000
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	00000000 	.word	0x00000000
 800812c:	bff00000 	.word	0xbff00000
 8008130:	fff00000 	.word	0xfff00000
 8008134:	7ff00000 	.word	0x7ff00000
 8008138:	433fffff 	.word	0x433fffff
 800813c:	3ff00000 	.word	0x3ff00000
 8008140:	3fefffff 	.word	0x3fefffff
 8008144:	3fe00000 	.word	0x3fe00000
 8008148:	43f00000 	.word	0x43f00000
 800814c:	4b5a      	ldr	r3, [pc, #360]	@ (80082b8 <__ieee754_pow+0x408>)
 800814e:	f7f8 f877 	bl	8000240 <__aeabi_dsub>
 8008152:	4604      	mov	r4, r0
 8008154:	460d      	mov	r5, r1
 8008156:	a350      	add	r3, pc, #320	@ (adr r3, 8008298 <__ieee754_pow+0x3e8>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 fa28 	bl	80005b0 <__aeabi_dmul>
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	a34d      	add	r3, pc, #308	@ (adr r3, 80082a0 <__ieee754_pow+0x3f0>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f7f8 fa1f 	bl	80005b0 <__aeabi_dmul>
 8008172:	2200      	movs	r2, #0
 8008174:	4682      	mov	sl, r0
 8008176:	468b      	mov	fp, r1
 8008178:	4b50      	ldr	r3, [pc, #320]	@ (80082bc <__ieee754_pow+0x40c>)
 800817a:	4620      	mov	r0, r4
 800817c:	4629      	mov	r1, r5
 800817e:	f7f8 fa17 	bl	80005b0 <__aeabi_dmul>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	a148      	add	r1, pc, #288	@ (adr r1, 80082a8 <__ieee754_pow+0x3f8>)
 8008188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800818c:	f7f8 f858 	bl	8000240 <__aeabi_dsub>
 8008190:	4622      	mov	r2, r4
 8008192:	462b      	mov	r3, r5
 8008194:	f7f8 fa0c 	bl	80005b0 <__aeabi_dmul>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	2000      	movs	r0, #0
 800819e:	4948      	ldr	r1, [pc, #288]	@ (80082c0 <__ieee754_pow+0x410>)
 80081a0:	f7f8 f84e 	bl	8000240 <__aeabi_dsub>
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	4622      	mov	r2, r4
 80081aa:	462b      	mov	r3, r5
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	2400      	movs	r4, #0
 80081b2:	f7f8 f9fd 	bl	80005b0 <__aeabi_dmul>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4640      	mov	r0, r8
 80081bc:	4649      	mov	r1, r9
 80081be:	f7f8 f9f7 	bl	80005b0 <__aeabi_dmul>
 80081c2:	a33b      	add	r3, pc, #236	@ (adr r3, 80082b0 <__ieee754_pow+0x400>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 f9f2 	bl	80005b0 <__aeabi_dmul>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4650      	mov	r0, sl
 80081d2:	4659      	mov	r1, fp
 80081d4:	f7f8 f834 	bl	8000240 <__aeabi_dsub>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4680      	mov	r8, r0
 80081de:	4689      	mov	r9, r1
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 f82e 	bl	8000244 <__adddf3>
 80081e8:	4632      	mov	r2, r6
 80081ea:	463b      	mov	r3, r7
 80081ec:	4620      	mov	r0, r4
 80081ee:	460d      	mov	r5, r1
 80081f0:	f7f8 f826 	bl	8000240 <__aeabi_dsub>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4640      	mov	r0, r8
 80081fa:	4649      	mov	r1, r9
 80081fc:	f7f8 f820 	bl	8000240 <__aeabi_dsub>
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800820c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008210:	2300      	movs	r3, #0
 8008212:	9304      	str	r3, [sp, #16]
 8008214:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008218:	4652      	mov	r2, sl
 800821a:	465b      	mov	r3, fp
 800821c:	f7f8 f810 	bl	8000240 <__aeabi_dsub>
 8008220:	4622      	mov	r2, r4
 8008222:	462b      	mov	r3, r5
 8008224:	f7f8 f9c4 	bl	80005b0 <__aeabi_dmul>
 8008228:	4680      	mov	r8, r0
 800822a:	4689      	mov	r9, r1
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008234:	f7f8 f9bc 	bl	80005b0 <__aeabi_dmul>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	f7f8 f800 	bl	8000244 <__adddf3>
 8008244:	4606      	mov	r6, r0
 8008246:	460f      	mov	r7, r1
 8008248:	4652      	mov	r2, sl
 800824a:	465b      	mov	r3, fp
 800824c:	4620      	mov	r0, r4
 800824e:	4629      	mov	r1, r5
 8008250:	f7f8 f9ae 	bl	80005b0 <__aeabi_dmul>
 8008254:	460b      	mov	r3, r1
 8008256:	4602      	mov	r2, r0
 8008258:	4680      	mov	r8, r0
 800825a:	4689      	mov	r9, r1
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f7 fff0 	bl	8000244 <__adddf3>
 8008264:	4b17      	ldr	r3, [pc, #92]	@ (80082c4 <__ieee754_pow+0x414>)
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	4299      	cmp	r1, r3
 800826c:	468a      	mov	sl, r1
 800826e:	468b      	mov	fp, r1
 8008270:	f340 82f0 	ble.w	8008854 <__ieee754_pow+0x9a4>
 8008274:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008278:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800827c:	4303      	orrs	r3, r0
 800827e:	f000 81e8 	beq.w	8008652 <__ieee754_pow+0x7a2>
 8008282:	2200      	movs	r2, #0
 8008284:	2300      	movs	r3, #0
 8008286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828a:	f7f8 fc03 	bl	8000a94 <__aeabi_dcmplt>
 800828e:	3800      	subs	r0, #0
 8008290:	bf18      	it	ne
 8008292:	2001      	movne	r0, #1
 8008294:	e714      	b.n	80080c0 <__ieee754_pow+0x210>
 8008296:	bf00      	nop
 8008298:	60000000 	.word	0x60000000
 800829c:	3ff71547 	.word	0x3ff71547
 80082a0:	f85ddf44 	.word	0xf85ddf44
 80082a4:	3e54ae0b 	.word	0x3e54ae0b
 80082a8:	55555555 	.word	0x55555555
 80082ac:	3fd55555 	.word	0x3fd55555
 80082b0:	652b82fe 	.word	0x652b82fe
 80082b4:	3ff71547 	.word	0x3ff71547
 80082b8:	3ff00000 	.word	0x3ff00000
 80082bc:	3fd00000 	.word	0x3fd00000
 80082c0:	3fe00000 	.word	0x3fe00000
 80082c4:	408fffff 	.word	0x408fffff
 80082c8:	4bd5      	ldr	r3, [pc, #852]	@ (8008620 <__ieee754_pow+0x770>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	402b      	ands	r3, r5
 80082ce:	b92b      	cbnz	r3, 80082dc <__ieee754_pow+0x42c>
 80082d0:	4bd4      	ldr	r3, [pc, #848]	@ (8008624 <__ieee754_pow+0x774>)
 80082d2:	f7f8 f96d 	bl	80005b0 <__aeabi_dmul>
 80082d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80082da:	468b      	mov	fp, r1
 80082dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80082e0:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80082e4:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80082e8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80082ec:	4413      	add	r3, r2
 80082ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80082f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f4:	4bcc      	ldr	r3, [pc, #816]	@ (8008628 <__ieee754_pow+0x778>)
 80082f6:	459b      	cmp	fp, r3
 80082f8:	dd08      	ble.n	800830c <__ieee754_pow+0x45c>
 80082fa:	4bcc      	ldr	r3, [pc, #816]	@ (800862c <__ieee754_pow+0x77c>)
 80082fc:	459b      	cmp	fp, r3
 80082fe:	f340 81a5 	ble.w	800864c <__ieee754_pow+0x79c>
 8008302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008304:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008308:	3301      	adds	r3, #1
 800830a:	930a      	str	r3, [sp, #40]	@ 0x28
 800830c:	f04f 0a00 	mov.w	sl, #0
 8008310:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008314:	4629      	mov	r1, r5
 8008316:	106d      	asrs	r5, r5, #1
 8008318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800831a:	4bc5      	ldr	r3, [pc, #788]	@ (8008630 <__ieee754_pow+0x780>)
 800831c:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008320:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008324:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008328:	ed93 7b00 	vldr	d7, [r3]
 800832c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008330:	ec53 2b17 	vmov	r2, r3, d7
 8008334:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008338:	f7f7 ff82 	bl	8000240 <__aeabi_dsub>
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008348:	f7f7 ff7c 	bl	8000244 <__adddf3>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	2000      	movs	r0, #0
 8008352:	49b8      	ldr	r1, [pc, #736]	@ (8008634 <__ieee754_pow+0x784>)
 8008354:	f7f8 fa56 	bl	8000804 <__aeabi_ddiv>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f8 f924 	bl	80005b0 <__aeabi_dmul>
 8008368:	2200      	movs	r2, #0
 800836a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800836e:	4614      	mov	r4, r2
 8008370:	461d      	mov	r5, r3
 8008372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008376:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800837a:	f04f 0b00 	mov.w	fp, #0
 800837e:	4661      	mov	r1, ip
 8008380:	46e1      	mov	r9, ip
 8008382:	4658      	mov	r0, fp
 8008384:	46d8      	mov	r8, fp
 8008386:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800838a:	f7f8 f911 	bl	80005b0 <__aeabi_dmul>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff53 	bl	8000240 <__aeabi_dsub>
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083a6:	f7f7 ff4b 	bl	8000240 <__aeabi_dsub>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083b2:	f7f7 ff45 	bl	8000240 <__aeabi_dsub>
 80083b6:	465a      	mov	r2, fp
 80083b8:	464b      	mov	r3, r9
 80083ba:	f7f8 f8f9 	bl	80005b0 <__aeabi_dmul>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f7 ff3b 	bl	8000240 <__aeabi_dsub>
 80083ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80083ce:	f7f8 f8ef 	bl	80005b0 <__aeabi_dmul>
 80083d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083da:	4610      	mov	r0, r2
 80083dc:	4619      	mov	r1, r3
 80083de:	f7f8 f8e7 	bl	80005b0 <__aeabi_dmul>
 80083e2:	4604      	mov	r4, r0
 80083e4:	460d      	mov	r5, r1
 80083e6:	a37c      	add	r3, pc, #496	@ (adr r3, 80085d8 <__ieee754_pow+0x728>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f8 f8e0 	bl	80005b0 <__aeabi_dmul>
 80083f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80085e0 <__ieee754_pow+0x730>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f7 ff25 	bl	8000244 <__adddf3>
 80083fa:	4622      	mov	r2, r4
 80083fc:	462b      	mov	r3, r5
 80083fe:	f7f8 f8d7 	bl	80005b0 <__aeabi_dmul>
 8008402:	a379      	add	r3, pc, #484	@ (adr r3, 80085e8 <__ieee754_pow+0x738>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f7 ff1c 	bl	8000244 <__adddf3>
 800840c:	4622      	mov	r2, r4
 800840e:	462b      	mov	r3, r5
 8008410:	f7f8 f8ce 	bl	80005b0 <__aeabi_dmul>
 8008414:	a376      	add	r3, pc, #472	@ (adr r3, 80085f0 <__ieee754_pow+0x740>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff13 	bl	8000244 <__adddf3>
 800841e:	4622      	mov	r2, r4
 8008420:	462b      	mov	r3, r5
 8008422:	f7f8 f8c5 	bl	80005b0 <__aeabi_dmul>
 8008426:	a374      	add	r3, pc, #464	@ (adr r3, 80085f8 <__ieee754_pow+0x748>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f7 ff0a 	bl	8000244 <__adddf3>
 8008430:	4622      	mov	r2, r4
 8008432:	462b      	mov	r3, r5
 8008434:	f7f8 f8bc 	bl	80005b0 <__aeabi_dmul>
 8008438:	a371      	add	r3, pc, #452	@ (adr r3, 8008600 <__ieee754_pow+0x750>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f7 ff01 	bl	8000244 <__adddf3>
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	4622      	mov	r2, r4
 8008448:	462b      	mov	r3, r5
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f8 f8af 	bl	80005b0 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f8 f8a9 	bl	80005b0 <__aeabi_dmul>
 800845e:	465a      	mov	r2, fp
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	464b      	mov	r3, r9
 8008466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800846a:	f7f7 feeb 	bl	8000244 <__adddf3>
 800846e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008472:	f7f8 f89d 	bl	80005b0 <__aeabi_dmul>
 8008476:	4622      	mov	r2, r4
 8008478:	462b      	mov	r3, r5
 800847a:	f7f7 fee3 	bl	8000244 <__adddf3>
 800847e:	465a      	mov	r2, fp
 8008480:	464b      	mov	r3, r9
 8008482:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008486:	4658      	mov	r0, fp
 8008488:	4649      	mov	r1, r9
 800848a:	f7f8 f891 	bl	80005b0 <__aeabi_dmul>
 800848e:	2200      	movs	r2, #0
 8008490:	4b69      	ldr	r3, [pc, #420]	@ (8008638 <__ieee754_pow+0x788>)
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	f7f7 fed5 	bl	8000244 <__adddf3>
 800849a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800849e:	f7f7 fed1 	bl	8000244 <__adddf3>
 80084a2:	460d      	mov	r5, r1
 80084a4:	460b      	mov	r3, r1
 80084a6:	4640      	mov	r0, r8
 80084a8:	4649      	mov	r1, r9
 80084aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80084ae:	465c      	mov	r4, fp
 80084b0:	465a      	mov	r2, fp
 80084b2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80084b6:	f7f8 f87b 	bl	80005b0 <__aeabi_dmul>
 80084ba:	2200      	movs	r2, #0
 80084bc:	4680      	mov	r8, r0
 80084be:	4689      	mov	r9, r1
 80084c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008638 <__ieee754_pow+0x788>)
 80084c2:	4620      	mov	r0, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	f7f7 febb 	bl	8000240 <__aeabi_dsub>
 80084ca:	4632      	mov	r2, r6
 80084cc:	463b      	mov	r3, r7
 80084ce:	f7f7 feb7 	bl	8000240 <__aeabi_dsub>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084da:	f7f7 feb1 	bl	8000240 <__aeabi_dsub>
 80084de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e2:	f7f8 f865 	bl	80005b0 <__aeabi_dmul>
 80084e6:	4606      	mov	r6, r0
 80084e8:	460f      	mov	r7, r1
 80084ea:	4622      	mov	r2, r4
 80084ec:	462b      	mov	r3, r5
 80084ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084f2:	f7f8 f85d 	bl	80005b0 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f7 fea1 	bl	8000244 <__adddf3>
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 fe99 	bl	8000244 <__adddf3>
 8008512:	460d      	mov	r5, r1
 8008514:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008518:	a33b      	add	r3, pc, #236	@ (adr r3, 8008608 <__ieee754_pow+0x758>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	465c      	mov	r4, fp
 8008520:	4658      	mov	r0, fp
 8008522:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008526:	f7f8 f843 	bl	80005b0 <__aeabi_dmul>
 800852a:	4642      	mov	r2, r8
 800852c:	464b      	mov	r3, r9
 800852e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f7 fe83 	bl	8000240 <__aeabi_dsub>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f7 fe7d 	bl	8000240 <__aeabi_dsub>
 8008546:	a332      	add	r3, pc, #200	@ (adr r3, 8008610 <__ieee754_pow+0x760>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f7f8 f830 	bl	80005b0 <__aeabi_dmul>
 8008550:	4606      	mov	r6, r0
 8008552:	460f      	mov	r7, r1
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	a32f      	add	r3, pc, #188	@ (adr r3, 8008618 <__ieee754_pow+0x768>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f8 f827 	bl	80005b0 <__aeabi_dmul>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	f7f7 fe6b 	bl	8000244 <__adddf3>
 800856e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008570:	4b32      	ldr	r3, [pc, #200]	@ (800863c <__ieee754_pow+0x78c>)
 8008572:	4413      	add	r3, r2
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f7f7 fe64 	bl	8000244 <__adddf3>
 800857c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008580:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008582:	f7f7 ffab 	bl	80004dc <__aeabi_i2d>
 8008586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008588:	4b2d      	ldr	r3, [pc, #180]	@ (8008640 <__ieee754_pow+0x790>)
 800858a:	4606      	mov	r6, r0
 800858c:	460f      	mov	r7, r1
 800858e:	4413      	add	r3, r2
 8008590:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800859c:	f7f7 fe52 	bl	8000244 <__adddf3>
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	f7f7 fe4e 	bl	8000244 <__adddf3>
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	f7f7 fe4a 	bl	8000244 <__adddf3>
 80085b0:	4632      	mov	r2, r6
 80085b2:	463b      	mov	r3, r7
 80085b4:	460d      	mov	r5, r1
 80085b6:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80085ba:	4658      	mov	r0, fp
 80085bc:	465c      	mov	r4, fp
 80085be:	f7f7 fe3f 	bl	8000240 <__aeabi_dsub>
 80085c2:	4642      	mov	r2, r8
 80085c4:	464b      	mov	r3, r9
 80085c6:	f7f7 fe3b 	bl	8000240 <__aeabi_dsub>
 80085ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ce:	f7f7 fe37 	bl	8000240 <__aeabi_dsub>
 80085d2:	4602      	mov	r2, r0
 80085d4:	e036      	b.n	8008644 <__ieee754_pow+0x794>
 80085d6:	bf00      	nop
 80085d8:	4a454eef 	.word	0x4a454eef
 80085dc:	3fca7e28 	.word	0x3fca7e28
 80085e0:	93c9db65 	.word	0x93c9db65
 80085e4:	3fcd864a 	.word	0x3fcd864a
 80085e8:	a91d4101 	.word	0xa91d4101
 80085ec:	3fd17460 	.word	0x3fd17460
 80085f0:	518f264d 	.word	0x518f264d
 80085f4:	3fd55555 	.word	0x3fd55555
 80085f8:	db6fabff 	.word	0xdb6fabff
 80085fc:	3fdb6db6 	.word	0x3fdb6db6
 8008600:	33333303 	.word	0x33333303
 8008604:	3fe33333 	.word	0x3fe33333
 8008608:	e0000000 	.word	0xe0000000
 800860c:	3feec709 	.word	0x3feec709
 8008610:	dc3a03fd 	.word	0xdc3a03fd
 8008614:	3feec709 	.word	0x3feec709
 8008618:	145b01f5 	.word	0x145b01f5
 800861c:	be3e2fe0 	.word	0xbe3e2fe0
 8008620:	7ff00000 	.word	0x7ff00000
 8008624:	43400000 	.word	0x43400000
 8008628:	0003988e 	.word	0x0003988e
 800862c:	000bb679 	.word	0x000bb679
 8008630:	08009278 	.word	0x08009278
 8008634:	3ff00000 	.word	0x3ff00000
 8008638:	40080000 	.word	0x40080000
 800863c:	08009258 	.word	0x08009258
 8008640:	08009268 	.word	0x08009268
 8008644:	460b      	mov	r3, r1
 8008646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800864a:	e5d7      	b.n	80081fc <__ieee754_pow+0x34c>
 800864c:	f04f 0a01 	mov.w	sl, #1
 8008650:	e65e      	b.n	8008310 <__ieee754_pow+0x460>
 8008652:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008924 <__ieee754_pow+0xa74>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f7 fdf2 	bl	8000244 <__adddf3>
 8008660:	4642      	mov	r2, r8
 8008662:	464b      	mov	r3, r9
 8008664:	e9cd 0100 	strd	r0, r1, [sp]
 8008668:	4620      	mov	r0, r4
 800866a:	4629      	mov	r1, r5
 800866c:	f7f7 fde8 	bl	8000240 <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008678:	f7f8 fa2a 	bl	8000ad0 <__aeabi_dcmpgt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f47f ae00 	bne.w	8008282 <__ieee754_pow+0x3d2>
 8008682:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008686:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800868a:	48a1      	ldr	r0, [pc, #644]	@ (8008910 <__ieee754_pow+0xa60>)
 800868c:	f1bb 0f00 	cmp.w	fp, #0
 8008690:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	fa43 fa0a 	asr.w	sl, r3, sl
 800869c:	44da      	add	sl, fp
 800869e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80086a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80086a6:	fa40 f001 	asr.w	r0, r0, r1
 80086aa:	f1c1 0114 	rsb	r1, r1, #20
 80086ae:	ea00 030a 	and.w	r3, r0, sl
 80086b2:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80086b6:	4640      	mov	r0, r8
 80086b8:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80086bc:	fa4a fa01 	asr.w	sl, sl, r1
 80086c0:	4649      	mov	r1, r9
 80086c2:	bfb8      	it	lt
 80086c4:	f1ca 0a00 	rsblt	sl, sl, #0
 80086c8:	f7f7 fdba 	bl	8000240 <__aeabi_dsub>
 80086cc:	4680      	mov	r8, r0
 80086ce:	4689      	mov	r9, r1
 80086d0:	2400      	movs	r4, #0
 80086d2:	4632      	mov	r2, r6
 80086d4:	463b      	mov	r3, r7
 80086d6:	4640      	mov	r0, r8
 80086d8:	4649      	mov	r1, r9
 80086da:	f7f7 fdb3 	bl	8000244 <__adddf3>
 80086de:	460d      	mov	r5, r1
 80086e0:	4620      	mov	r0, r4
 80086e2:	a37b      	add	r3, pc, #492	@ (adr r3, 80088d0 <__ieee754_pow+0xa20>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 ff62 	bl	80005b0 <__aeabi_dmul>
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	e9cd 0100 	strd	r0, r1, [sp]
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f7 fda2 	bl	8000240 <__aeabi_dsub>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4630      	mov	r0, r6
 8008702:	4639      	mov	r1, r7
 8008704:	f7f7 fd9c 	bl	8000240 <__aeabi_dsub>
 8008708:	a373      	add	r3, pc, #460	@ (adr r3, 80088d8 <__ieee754_pow+0xa28>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 ff4f 	bl	80005b0 <__aeabi_dmul>
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	a371      	add	r3, pc, #452	@ (adr r3, 80088e0 <__ieee754_pow+0xa30>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 ff46 	bl	80005b0 <__aeabi_dmul>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 fd8a 	bl	8000244 <__adddf3>
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800873c:	f7f7 fd82 	bl	8000244 <__adddf3>
 8008740:	4680      	mov	r8, r0
 8008742:	4689      	mov	r9, r1
 8008744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008748:	f7f7 fd7a 	bl	8000240 <__aeabi_dsub>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	f7f7 fd74 	bl	8000240 <__aeabi_dsub>
 8008758:	4642      	mov	r2, r8
 800875a:	4606      	mov	r6, r0
 800875c:	460f      	mov	r7, r1
 800875e:	464b      	mov	r3, r9
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f7 ff24 	bl	80005b0 <__aeabi_dmul>
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	a35e      	add	r3, pc, #376	@ (adr r3, 80088e8 <__ieee754_pow+0xa38>)
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	f7f7 ff1d 	bl	80005b0 <__aeabi_dmul>
 8008776:	a35e      	add	r3, pc, #376	@ (adr r3, 80088f0 <__ieee754_pow+0xa40>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f7 fd60 	bl	8000240 <__aeabi_dsub>
 8008780:	4622      	mov	r2, r4
 8008782:	462b      	mov	r3, r5
 8008784:	f7f7 ff14 	bl	80005b0 <__aeabi_dmul>
 8008788:	a35b      	add	r3, pc, #364	@ (adr r3, 80088f8 <__ieee754_pow+0xa48>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd59 	bl	8000244 <__adddf3>
 8008792:	4622      	mov	r2, r4
 8008794:	462b      	mov	r3, r5
 8008796:	f7f7 ff0b 	bl	80005b0 <__aeabi_dmul>
 800879a:	a359      	add	r3, pc, #356	@ (adr r3, 8008900 <__ieee754_pow+0xa50>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 fd4e 	bl	8000240 <__aeabi_dsub>
 80087a4:	4622      	mov	r2, r4
 80087a6:	462b      	mov	r3, r5
 80087a8:	f7f7 ff02 	bl	80005b0 <__aeabi_dmul>
 80087ac:	a356      	add	r3, pc, #344	@ (adr r3, 8008908 <__ieee754_pow+0xa58>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f7 fd47 	bl	8000244 <__adddf3>
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	f7f7 fef9 	bl	80005b0 <__aeabi_dmul>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f7 fd3b 	bl	8000240 <__aeabi_dsub>
 80087ca:	4604      	mov	r4, r0
 80087cc:	460d      	mov	r5, r1
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	f7f7 feeb 	bl	80005b0 <__aeabi_dmul>
 80087da:	2200      	movs	r2, #0
 80087dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087e0:	e9cd 0100 	strd	r0, r1, [sp]
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f7 fd2a 	bl	8000240 <__aeabi_dsub>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087f4:	f7f8 f806 	bl	8000804 <__aeabi_ddiv>
 80087f8:	4632      	mov	r2, r6
 80087fa:	4604      	mov	r4, r0
 80087fc:	460d      	mov	r5, r1
 80087fe:	463b      	mov	r3, r7
 8008800:	4640      	mov	r0, r8
 8008802:	4649      	mov	r1, r9
 8008804:	f7f7 fed4 	bl	80005b0 <__aeabi_dmul>
 8008808:	4632      	mov	r2, r6
 800880a:	463b      	mov	r3, r7
 800880c:	f7f7 fd1a 	bl	8000244 <__adddf3>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 fd12 	bl	8000240 <__aeabi_dsub>
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	f7f7 fd0e 	bl	8000240 <__aeabi_dsub>
 8008824:	460b      	mov	r3, r1
 8008826:	4602      	mov	r2, r0
 8008828:	493a      	ldr	r1, [pc, #232]	@ (8008914 <__ieee754_pow+0xa64>)
 800882a:	2000      	movs	r0, #0
 800882c:	f7f7 fd08 	bl	8000240 <__aeabi_dsub>
 8008830:	ec41 0b10 	vmov	d0, r0, r1
 8008834:	ee10 3a90 	vmov	r3, s1
 8008838:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800883c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008840:	da30      	bge.n	80088a4 <__ieee754_pow+0x9f4>
 8008842:	4650      	mov	r0, sl
 8008844:	f000 fad4 	bl	8008df0 <scalbn>
 8008848:	ec51 0b10 	vmov	r0, r1, d0
 800884c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008850:	f7ff bbd5 	b.w	8007ffe <__ieee754_pow+0x14e>
 8008854:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008858:	4c2f      	ldr	r4, [pc, #188]	@ (8008918 <__ieee754_pow+0xa68>)
 800885a:	42a3      	cmp	r3, r4
 800885c:	d91a      	bls.n	8008894 <__ieee754_pow+0x9e4>
 800885e:	4b2f      	ldr	r3, [pc, #188]	@ (800891c <__ieee754_pow+0xa6c>)
 8008860:	440b      	add	r3, r1
 8008862:	4303      	orrs	r3, r0
 8008864:	d009      	beq.n	800887a <__ieee754_pow+0x9ca>
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886e:	f7f8 f911 	bl	8000a94 <__aeabi_dcmplt>
 8008872:	3800      	subs	r0, #0
 8008874:	bf18      	it	ne
 8008876:	2001      	movne	r0, #1
 8008878:	e42e      	b.n	80080d8 <__ieee754_pow+0x228>
 800887a:	4642      	mov	r2, r8
 800887c:	464b      	mov	r3, r9
 800887e:	f7f7 fcdf 	bl	8000240 <__aeabi_dsub>
 8008882:	4632      	mov	r2, r6
 8008884:	463b      	mov	r3, r7
 8008886:	f7f8 f919 	bl	8000abc <__aeabi_dcmpge>
 800888a:	2800      	cmp	r0, #0
 800888c:	d1eb      	bne.n	8008866 <__ieee754_pow+0x9b6>
 800888e:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800892c <__ieee754_pow+0xa7c>
 8008892:	e6f6      	b.n	8008682 <__ieee754_pow+0x7d2>
 8008894:	469a      	mov	sl, r3
 8008896:	4b22      	ldr	r3, [pc, #136]	@ (8008920 <__ieee754_pow+0xa70>)
 8008898:	459a      	cmp	sl, r3
 800889a:	f63f aef2 	bhi.w	8008682 <__ieee754_pow+0x7d2>
 800889e:	f8dd a010 	ldr.w	sl, [sp, #16]
 80088a2:	e715      	b.n	80086d0 <__ieee754_pow+0x820>
 80088a4:	ec51 0b10 	vmov	r0, r1, d0
 80088a8:	4619      	mov	r1, r3
 80088aa:	e7cf      	b.n	800884c <__ieee754_pow+0x99c>
 80088ac:	2000      	movs	r0, #0
 80088ae:	4919      	ldr	r1, [pc, #100]	@ (8008914 <__ieee754_pow+0xa64>)
 80088b0:	f7ff bb1b 	b.w	8007eea <__ieee754_pow+0x3a>
 80088b4:	2000      	movs	r0, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	f7ff bb17 	b.w	8007eea <__ieee754_pow+0x3a>
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7ff bb13 	b.w	8007eea <__ieee754_pow+0x3a>
 80088c4:	460c      	mov	r4, r1
 80088c6:	f7ff bb61 	b.w	8007f8c <__ieee754_pow+0xdc>
 80088ca:	2400      	movs	r4, #0
 80088cc:	f7ff bb4c 	b.w	8007f68 <__ieee754_pow+0xb8>
 80088d0:	00000000 	.word	0x00000000
 80088d4:	3fe62e43 	.word	0x3fe62e43
 80088d8:	fefa39ef 	.word	0xfefa39ef
 80088dc:	3fe62e42 	.word	0x3fe62e42
 80088e0:	0ca86c39 	.word	0x0ca86c39
 80088e4:	be205c61 	.word	0xbe205c61
 80088e8:	72bea4d0 	.word	0x72bea4d0
 80088ec:	3e663769 	.word	0x3e663769
 80088f0:	c5d26bf1 	.word	0xc5d26bf1
 80088f4:	3ebbbd41 	.word	0x3ebbbd41
 80088f8:	af25de2c 	.word	0xaf25de2c
 80088fc:	3f11566a 	.word	0x3f11566a
 8008900:	16bebd93 	.word	0x16bebd93
 8008904:	3f66c16c 	.word	0x3f66c16c
 8008908:	5555553e 	.word	0x5555553e
 800890c:	3fc55555 	.word	0x3fc55555
 8008910:	fff00000 	.word	0xfff00000
 8008914:	3ff00000 	.word	0x3ff00000
 8008918:	4090cbff 	.word	0x4090cbff
 800891c:	3f6f3400 	.word	0x3f6f3400
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	652b82fe 	.word	0x652b82fe
 8008928:	3c971547 	.word	0x3c971547
 800892c:	4090cc00 	.word	0x4090cc00

08008930 <fabs>:
 8008930:	ec51 0b10 	vmov	r0, r1, d0
 8008934:	4602      	mov	r2, r0
 8008936:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800893a:	ec43 2b10 	vmov	d0, r2, r3
 800893e:	4770      	bx	lr

08008940 <__ieee754_asinf>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	ee10 5a10 	vmov	r5, s0
 8008946:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800894a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800894e:	ed2d 8b04 	vpush	{d8-d9}
 8008952:	d10c      	bne.n	800896e <__ieee754_asinf+0x2e>
 8008954:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8008acc <__ieee754_asinf+0x18c>
 8008958:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8008ad0 <__ieee754_asinf+0x190>
 800895c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008960:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008964:	eeb0 0a67 	vmov.f32	s0, s15
 8008968:	ecbd 8b04 	vpop	{d8-d9}
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	d904      	bls.n	800897a <__ieee754_asinf+0x3a>
 8008970:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008974:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008978:	e7f6      	b.n	8008968 <__ieee754_asinf+0x28>
 800897a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800897e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008982:	d20b      	bcs.n	800899c <__ieee754_asinf+0x5c>
 8008984:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8008988:	d252      	bcs.n	8008a30 <__ieee754_asinf+0xf0>
 800898a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8008ad4 <__ieee754_asinf+0x194>
 800898e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008992:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899a:	dce5      	bgt.n	8008968 <__ieee754_asinf+0x28>
 800899c:	f7ff fa70 	bl	8007e80 <fabsf>
 80089a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80089a4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80089a8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008ad8 <__ieee754_asinf+0x198>
 80089ac:	ed9f 9a4b 	vldr	s18, [pc, #300]	@ 8008adc <__ieee754_asinf+0x19c>
 80089b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80089b4:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8008ae0 <__ieee754_asinf+0x1a0>
 80089b8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80089bc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8008ae4 <__ieee754_asinf+0x1a4>
 80089c0:	eeb0 0a48 	vmov.f32	s0, s16
 80089c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80089c8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8008ae8 <__ieee754_asinf+0x1a8>
 80089cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80089d0:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8008aec <__ieee754_asinf+0x1ac>
 80089d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80089d8:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8008af0 <__ieee754_asinf+0x1b0>
 80089dc:	eea7 9a88 	vfma.f32	s18, s15, s16
 80089e0:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8008af4 <__ieee754_asinf+0x1b4>
 80089e4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80089e8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8008af8 <__ieee754_asinf+0x1b8>
 80089ec:	ee29 9a08 	vmul.f32	s18, s18, s16
 80089f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80089f4:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8008afc <__ieee754_asinf+0x1bc>
 80089f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80089fc:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008a00:	f000 fb90 	bl	8009124 <__ieee754_sqrtf>
 8008a04:	4b3e      	ldr	r3, [pc, #248]	@ (8008b00 <__ieee754_asinf+0x1c0>)
 8008a06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008a10:	d93d      	bls.n	8008a8e <__ieee754_asinf+0x14e>
 8008a12:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8008b04 <__ieee754_asinf+0x1c4>
 8008a16:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008a1a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008a1e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8008ad0 <__ieee754_asinf+0x190>
 8008a22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	bfd8      	it	le
 8008a2a:	eeb1 0a40 	vnegle.f32	s0, s0
 8008a2e:	e79b      	b.n	8008968 <__ieee754_asinf+0x28>
 8008a30:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008a34:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008ae0 <__ieee754_asinf+0x1a0>
 8008a38:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8008ad8 <__ieee754_asinf+0x198>
 8008a3c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8008af0 <__ieee754_asinf+0x1b0>
 8008a40:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008a44:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8008ae4 <__ieee754_asinf+0x1a4>
 8008a48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008a4c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008ae8 <__ieee754_asinf+0x1a8>
 8008a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a54:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8008aec <__ieee754_asinf+0x1ac>
 8008a58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008a5c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8008adc <__ieee754_asinf+0x19c>
 8008a60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a64:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8008af4 <__ieee754_asinf+0x1b4>
 8008a68:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008a6c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8008af8 <__ieee754_asinf+0x1b8>
 8008a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a74:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008a78:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8008afc <__ieee754_asinf+0x1bc>
 8008a7c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008a80:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008a84:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008a88:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008a8c:	e76c      	b.n	8008968 <__ieee754_asinf+0x28>
 8008a8e:	ee10 3a10 	vmov	r3, s0
 8008a92:	ee70 5a00 	vadd.f32	s11, s0, s0
 8008a96:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008acc <__ieee754_asinf+0x18c>
 8008a9a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008a9e:	f023 030f 	bic.w	r3, r3, #15
 8008aa2:	ee07 3a10 	vmov	s14, r3
 8008aa6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008aaa:	ee30 0a07 	vadd.f32	s0, s0, s14
 8008aae:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8008ab2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8008b08 <__ieee754_asinf+0x1c8>
 8008ab6:	eee5 7a66 	vfms.f32	s15, s10, s13
 8008aba:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8008abe:	eeb0 6a40 	vmov.f32	s12, s0
 8008ac2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008ac6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008aca:	e7aa      	b.n	8008a22 <__ieee754_asinf+0xe2>
 8008acc:	b33bbd2e 	.word	0xb33bbd2e
 8008ad0:	3fc90fdb 	.word	0x3fc90fdb
 8008ad4:	7149f2ca 	.word	0x7149f2ca
 8008ad8:	3a4f7f04 	.word	0x3a4f7f04
 8008adc:	3e2aaaab 	.word	0x3e2aaaab
 8008ae0:	3811ef08 	.word	0x3811ef08
 8008ae4:	bd241146 	.word	0xbd241146
 8008ae8:	3e4e0aa8 	.word	0x3e4e0aa8
 8008aec:	bea6b090 	.word	0xbea6b090
 8008af0:	3d9dc62e 	.word	0x3d9dc62e
 8008af4:	bf303361 	.word	0xbf303361
 8008af8:	4001572d 	.word	0x4001572d
 8008afc:	c019d139 	.word	0xc019d139
 8008b00:	3f799999 	.word	0x3f799999
 8008b04:	333bbd2e 	.word	0x333bbd2e
 8008b08:	3f490fdb 	.word	0x3f490fdb

08008b0c <__ieee754_atan2f>:
 8008b0c:	ee10 2a90 	vmov	r2, s1
 8008b10:	eef0 7a40 	vmov.f32	s15, s0
 8008b14:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008b18:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	d806      	bhi.n	8008b2e <__ieee754_atan2f+0x22>
 8008b20:	ee10 0a10 	vmov	r0, s0
 8008b24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008b28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008b2c:	d904      	bls.n	8008b38 <__ieee754_atan2f+0x2c>
 8008b2e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008b32:	eeb0 0a67 	vmov.f32	s0, s15
 8008b36:	bd10      	pop	{r4, pc}
 8008b38:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008b3c:	d103      	bne.n	8008b46 <__ieee754_atan2f+0x3a>
 8008b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b42:	f000 b881 	b.w	8008c48 <atanf>
 8008b46:	1794      	asrs	r4, r2, #30
 8008b48:	f004 0402 	and.w	r4, r4, #2
 8008b4c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008b50:	b93b      	cbnz	r3, 8008b62 <__ieee754_atan2f+0x56>
 8008b52:	2c02      	cmp	r4, #2
 8008b54:	d05c      	beq.n	8008c10 <__ieee754_atan2f+0x104>
 8008b56:	2c03      	cmp	r4, #3
 8008b58:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008c24 <__ieee754_atan2f+0x118>
 8008b5c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8008b60:	e7e7      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008b62:	b939      	cbnz	r1, 8008b74 <__ieee754_atan2f+0x68>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8008c28 <__ieee754_atan2f+0x11c>
 8008b6a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8008c2c <__ieee754_atan2f+0x120>
 8008b6e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8008b72:	e7de      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008b74:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008b78:	d110      	bne.n	8008b9c <__ieee754_atan2f+0x90>
 8008b7a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008b7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b82:	d107      	bne.n	8008b94 <__ieee754_atan2f+0x88>
 8008b84:	2c02      	cmp	r4, #2
 8008b86:	d846      	bhi.n	8008c16 <__ieee754_atan2f+0x10a>
 8008b88:	4b29      	ldr	r3, [pc, #164]	@ (8008c30 <__ieee754_atan2f+0x124>)
 8008b8a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b8e:	edd3 7a00 	vldr	s15, [r3]
 8008b92:	e7ce      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008b94:	2c02      	cmp	r4, #2
 8008b96:	d841      	bhi.n	8008c1c <__ieee754_atan2f+0x110>
 8008b98:	4b26      	ldr	r3, [pc, #152]	@ (8008c34 <__ieee754_atan2f+0x128>)
 8008b9a:	e7f6      	b.n	8008b8a <__ieee754_atan2f+0x7e>
 8008b9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008ba0:	d0e0      	beq.n	8008b64 <__ieee754_atan2f+0x58>
 8008ba2:	1a5b      	subs	r3, r3, r1
 8008ba4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8008ba8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008bac:	da1a      	bge.n	8008be4 <__ieee754_atan2f+0xd8>
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	da01      	bge.n	8008bb6 <__ieee754_atan2f+0xaa>
 8008bb2:	313c      	adds	r1, #60	@ 0x3c
 8008bb4:	db19      	blt.n	8008bea <__ieee754_atan2f+0xde>
 8008bb6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008bba:	f7ff f961 	bl	8007e80 <fabsf>
 8008bbe:	f000 f843 	bl	8008c48 <atanf>
 8008bc2:	eef0 7a40 	vmov.f32	s15, s0
 8008bc6:	2c01      	cmp	r4, #1
 8008bc8:	d012      	beq.n	8008bf0 <__ieee754_atan2f+0xe4>
 8008bca:	2c02      	cmp	r4, #2
 8008bcc:	d017      	beq.n	8008bfe <__ieee754_atan2f+0xf2>
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d0af      	beq.n	8008b32 <__ieee754_atan2f+0x26>
 8008bd2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008c38 <__ieee754_atan2f+0x12c>
 8008bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bda:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008c3c <__ieee754_atan2f+0x130>
 8008bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008be2:	e7a6      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008be4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8008c28 <__ieee754_atan2f+0x11c>
 8008be8:	e7ed      	b.n	8008bc6 <__ieee754_atan2f+0xba>
 8008bea:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008c40 <__ieee754_atan2f+0x134>
 8008bee:	e7ea      	b.n	8008bc6 <__ieee754_atan2f+0xba>
 8008bf0:	ee17 3a90 	vmov	r3, s15
 8008bf4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008bf8:	ee07 3a90 	vmov	s15, r3
 8008bfc:	e799      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008bfe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8008c38 <__ieee754_atan2f+0x12c>
 8008c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c06:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8008c3c <__ieee754_atan2f+0x130>
 8008c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c0e:	e790      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008c10:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8008c3c <__ieee754_atan2f+0x130>
 8008c14:	e78d      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008c16:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8008c44 <__ieee754_atan2f+0x138>
 8008c1a:	e78a      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008c1c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008c40 <__ieee754_atan2f+0x134>
 8008c20:	e787      	b.n	8008b32 <__ieee754_atan2f+0x26>
 8008c22:	bf00      	nop
 8008c24:	c0490fdb 	.word	0xc0490fdb
 8008c28:	3fc90fdb 	.word	0x3fc90fdb
 8008c2c:	bfc90fdb 	.word	0xbfc90fdb
 8008c30:	08009294 	.word	0x08009294
 8008c34:	08009288 	.word	0x08009288
 8008c38:	33bbbd2e 	.word	0x33bbbd2e
 8008c3c:	40490fdb 	.word	0x40490fdb
 8008c40:	00000000 	.word	0x00000000
 8008c44:	3f490fdb 	.word	0x3f490fdb

08008c48 <atanf>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	ee10 5a10 	vmov	r5, s0
 8008c4e:	eef0 7a40 	vmov.f32	s15, s0
 8008c52:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8008c56:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8008c5a:	d30f      	bcc.n	8008c7c <atanf+0x34>
 8008c5c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8008c60:	d904      	bls.n	8008c6c <atanf+0x24>
 8008c62:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008c66:	eeb0 0a67 	vmov.f32	s0, s15
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8008da4 <atanf+0x15c>
 8008c72:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008da8 <atanf+0x160>
 8008c76:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8008c7a:	e7f4      	b.n	8008c66 <atanf+0x1e>
 8008c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8008dac <atanf+0x164>)
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d810      	bhi.n	8008ca4 <atanf+0x5c>
 8008c82:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8008c86:	d20a      	bcs.n	8008c9e <atanf+0x56>
 8008c88:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008db0 <atanf+0x168>
 8008c8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c90:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008c94:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9c:	dce3      	bgt.n	8008c66 <atanf+0x1e>
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	e013      	b.n	8008ccc <atanf+0x84>
 8008ca4:	f7ff f8ec 	bl	8007e80 <fabsf>
 8008ca8:	4b42      	ldr	r3, [pc, #264]	@ (8008db4 <atanf+0x16c>)
 8008caa:	429c      	cmp	r4, r3
 8008cac:	d84f      	bhi.n	8008d4e <atanf+0x106>
 8008cae:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	d841      	bhi.n	8008d3a <atanf+0xf2>
 8008cb6:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008cba:	2300      	movs	r3, #0
 8008cbc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008cc0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008cc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008cc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008ccc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008db8 <atanf+0x170>
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8008dbc <atanf+0x174>
 8008cd6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8008dc0 <atanf+0x178>
 8008cda:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008cde:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008ce2:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008ce6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8008dc4 <atanf+0x17c>
 8008cea:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008cee:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8008dc8 <atanf+0x180>
 8008cf2:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008cf6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8008dcc <atanf+0x184>
 8008cfa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008cfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008dd0 <atanf+0x188>
 8008d02:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008d06:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8008dd4 <atanf+0x18c>
 8008d0a:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008d0e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008dd8 <atanf+0x190>
 8008d12:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008d16:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8008ddc <atanf+0x194>
 8008d1a:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008d1e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8008de0 <atanf+0x198>
 8008d22:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008d26:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008d2a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008d2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008d32:	d121      	bne.n	8008d78 <atanf+0x130>
 8008d34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d38:	e795      	b.n	8008c66 <atanf+0x1e>
 8008d3a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008d3e:	2301      	movs	r3, #1
 8008d40:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008d44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008d4c:	e7be      	b.n	8008ccc <atanf+0x84>
 8008d4e:	4b25      	ldr	r3, [pc, #148]	@ (8008de4 <atanf+0x19c>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	d80b      	bhi.n	8008d6c <atanf+0x124>
 8008d54:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8008d58:	2302      	movs	r3, #2
 8008d5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d5e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008d62:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6a:	e7af      	b.n	8008ccc <atanf+0x84>
 8008d6c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008d70:	2303      	movs	r3, #3
 8008d72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008d76:	e7a9      	b.n	8008ccc <atanf+0x84>
 8008d78:	4a1b      	ldr	r2, [pc, #108]	@ (8008de8 <atanf+0x1a0>)
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	491b      	ldr	r1, [pc, #108]	@ (8008dec <atanf+0x1a4>)
 8008d7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008d82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008d86:	edd3 6a00 	vldr	s13, [r3]
 8008d8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d92:	edd2 7a00 	vldr	s15, [r2]
 8008d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d9a:	bfb8      	it	lt
 8008d9c:	eef1 7a67 	vneglt.f32	s15, s15
 8008da0:	e761      	b.n	8008c66 <atanf+0x1e>
 8008da2:	bf00      	nop
 8008da4:	bfc90fdb 	.word	0xbfc90fdb
 8008da8:	3fc90fdb 	.word	0x3fc90fdb
 8008dac:	3edfffff 	.word	0x3edfffff
 8008db0:	7149f2ca 	.word	0x7149f2ca
 8008db4:	3f97ffff 	.word	0x3f97ffff
 8008db8:	3c8569d7 	.word	0x3c8569d7
 8008dbc:	3d4bda59 	.word	0x3d4bda59
 8008dc0:	bd6ef16b 	.word	0xbd6ef16b
 8008dc4:	3d886b35 	.word	0x3d886b35
 8008dc8:	3dba2e6e 	.word	0x3dba2e6e
 8008dcc:	3e124925 	.word	0x3e124925
 8008dd0:	3eaaaaab 	.word	0x3eaaaaab
 8008dd4:	bd15a221 	.word	0xbd15a221
 8008dd8:	bd9d8795 	.word	0xbd9d8795
 8008ddc:	bde38e38 	.word	0xbde38e38
 8008de0:	be4ccccd 	.word	0xbe4ccccd
 8008de4:	401bffff 	.word	0x401bffff
 8008de8:	080092b0 	.word	0x080092b0
 8008dec:	080092a0 	.word	0x080092a0

08008df0 <scalbn>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	ec55 4b10 	vmov	r4, r5, d0
 8008df6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	b991      	cbnz	r1, 8008e26 <scalbn+0x36>
 8008e00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008e04:	4323      	orrs	r3, r4
 8008e06:	d03d      	beq.n	8008e84 <scalbn+0x94>
 8008e08:	4b35      	ldr	r3, [pc, #212]	@ (8008ee0 <scalbn+0xf0>)
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f7f7 fbce 	bl	80005b0 <__aeabi_dmul>
 8008e14:	4b33      	ldr	r3, [pc, #204]	@ (8008ee4 <scalbn+0xf4>)
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	429e      	cmp	r6, r3
 8008e1c:	da0f      	bge.n	8008e3e <scalbn+0x4e>
 8008e1e:	a328      	add	r3, pc, #160	@ (adr r3, 8008ec0 <scalbn+0xd0>)
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	e01e      	b.n	8008e64 <scalbn+0x74>
 8008e26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008e2a:	4291      	cmp	r1, r2
 8008e2c:	d10b      	bne.n	8008e46 <scalbn+0x56>
 8008e2e:	4622      	mov	r2, r4
 8008e30:	4620      	mov	r0, r4
 8008e32:	4629      	mov	r1, r5
 8008e34:	f7f7 fa06 	bl	8000244 <__adddf3>
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	e022      	b.n	8008e84 <scalbn+0x94>
 8008e3e:	460b      	mov	r3, r1
 8008e40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e44:	3936      	subs	r1, #54	@ 0x36
 8008e46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008e4a:	4296      	cmp	r6, r2
 8008e4c:	dd0d      	ble.n	8008e6a <scalbn+0x7a>
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	a11d      	add	r1, pc, #116	@ (adr r1, 8008ec8 <scalbn+0xd8>)
 8008e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e56:	da02      	bge.n	8008e5e <scalbn+0x6e>
 8008e58:	a11d      	add	r1, pc, #116	@ (adr r1, 8008ed0 <scalbn+0xe0>)
 8008e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008ec8 <scalbn+0xd8>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fba4 	bl	80005b0 <__aeabi_dmul>
 8008e68:	e7e6      	b.n	8008e38 <scalbn+0x48>
 8008e6a:	1872      	adds	r2, r6, r1
 8008e6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008e70:	428a      	cmp	r2, r1
 8008e72:	dcec      	bgt.n	8008e4e <scalbn+0x5e>
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	dd08      	ble.n	8008e8a <scalbn+0x9a>
 8008e78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008e80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e84:	ec45 4b10 	vmov	d0, r4, r5
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008e8e:	da08      	bge.n	8008ea2 <scalbn+0xb2>
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	a10b      	add	r1, pc, #44	@ (adr r1, 8008ec0 <scalbn+0xd0>)
 8008e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e98:	dac1      	bge.n	8008e1e <scalbn+0x2e>
 8008e9a:	a10f      	add	r1, pc, #60	@ (adr r1, 8008ed8 <scalbn+0xe8>)
 8008e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea0:	e7bd      	b.n	8008e1e <scalbn+0x2e>
 8008ea2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008ea6:	3236      	adds	r2, #54	@ 0x36
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008eae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <scalbn+0xf8>)
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	e7d4      	b.n	8008e64 <scalbn+0x74>
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	c2f8f359 	.word	0xc2f8f359
 8008ec4:	01a56e1f 	.word	0x01a56e1f
 8008ec8:	8800759c 	.word	0x8800759c
 8008ecc:	7e37e43c 	.word	0x7e37e43c
 8008ed0:	8800759c 	.word	0x8800759c
 8008ed4:	fe37e43c 	.word	0xfe37e43c
 8008ed8:	c2f8f359 	.word	0xc2f8f359
 8008edc:	81a56e1f 	.word	0x81a56e1f
 8008ee0:	43500000 	.word	0x43500000
 8008ee4:	ffff3cb0 	.word	0xffff3cb0
 8008ee8:	3c900000 	.word	0x3c900000

08008eec <with_errno>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	ed2d 8b02 	vpush	{d8}
 8008ef2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ef6:	eef0 8a60 	vmov.f32	s17, s1
 8008efa:	4604      	mov	r4, r0
 8008efc:	f000 f91e 	bl	800913c <__errno>
 8008f00:	6004      	str	r4, [r0, #0]
 8008f02:	eeb0 0a48 	vmov.f32	s0, s16
 8008f06:	eef0 0a68 	vmov.f32	s1, s17
 8008f0a:	ecbd 8b02 	vpop	{d8}
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <xflow>:
 8008f10:	4603      	mov	r3, r0
 8008f12:	b507      	push	{r0, r1, r2, lr}
 8008f14:	ec51 0b10 	vmov	r0, r1, d0
 8008f18:	b183      	cbz	r3, 8008f3c <xflow+0x2c>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f20:	e9cd 2300 	strd	r2, r3, [sp]
 8008f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f28:	f7f7 fb42 	bl	80005b0 <__aeabi_dmul>
 8008f2c:	ec41 0b10 	vmov	d0, r0, r1
 8008f30:	2022      	movs	r0, #34	@ 0x22
 8008f32:	b003      	add	sp, #12
 8008f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f38:	f7ff bfd8 	b.w	8008eec <with_errno>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	e7ee      	b.n	8008f20 <xflow+0x10>
 8008f42:	0000      	movs	r0, r0
 8008f44:	0000      	movs	r0, r0
	...

08008f48 <__math_uflow>:
 8008f48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f50 <__math_uflow+0x8>
 8008f4c:	f7ff bfe0 	b.w	8008f10 <xflow>
 8008f50:	00000000 	.word	0x00000000
 8008f54:	10000000 	.word	0x10000000

08008f58 <__math_oflow>:
 8008f58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f60 <__math_oflow+0x8>
 8008f5c:	f7ff bfd8 	b.w	8008f10 <xflow>
 8008f60:	00000000 	.word	0x00000000
 8008f64:	70000000 	.word	0x70000000

08008f68 <__ieee754_sqrt>:
 8008f68:	4a6b      	ldr	r2, [pc, #428]	@ (8009118 <__ieee754_sqrt+0x1b0>)
 8008f6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6e:	ec55 4b10 	vmov	r4, r5, d0
 8008f72:	43aa      	bics	r2, r5
 8008f74:	462b      	mov	r3, r5
 8008f76:	4621      	mov	r1, r4
 8008f78:	d110      	bne.n	8008f9c <__ieee754_sqrt+0x34>
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7f7 fb16 	bl	80005b0 <__aeabi_dmul>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f7f7 f95a 	bl	8000244 <__adddf3>
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	ec45 4b10 	vmov	d0, r4, r5
 8008f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9c:	2d00      	cmp	r5, #0
 8008f9e:	dc0e      	bgt.n	8008fbe <__ieee754_sqrt+0x56>
 8008fa0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008fa4:	4322      	orrs	r2, r4
 8008fa6:	d0f5      	beq.n	8008f94 <__ieee754_sqrt+0x2c>
 8008fa8:	b19d      	cbz	r5, 8008fd2 <__ieee754_sqrt+0x6a>
 8008faa:	4622      	mov	r2, r4
 8008fac:	4620      	mov	r0, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 f946 	bl	8000240 <__aeabi_dsub>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	f7f7 fc24 	bl	8000804 <__aeabi_ddiv>
 8008fbc:	e7e8      	b.n	8008f90 <__ieee754_sqrt+0x28>
 8008fbe:	152a      	asrs	r2, r5, #20
 8008fc0:	d115      	bne.n	8008fee <__ieee754_sqrt+0x86>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e009      	b.n	8008fda <__ieee754_sqrt+0x72>
 8008fc6:	0acb      	lsrs	r3, r1, #11
 8008fc8:	3a15      	subs	r2, #21
 8008fca:	0549      	lsls	r1, r1, #21
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0fa      	beq.n	8008fc6 <__ieee754_sqrt+0x5e>
 8008fd0:	e7f7      	b.n	8008fc2 <__ieee754_sqrt+0x5a>
 8008fd2:	462a      	mov	r2, r5
 8008fd4:	e7fa      	b.n	8008fcc <__ieee754_sqrt+0x64>
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	3001      	adds	r0, #1
 8008fda:	02dc      	lsls	r4, r3, #11
 8008fdc:	d5fb      	bpl.n	8008fd6 <__ieee754_sqrt+0x6e>
 8008fde:	1e44      	subs	r4, r0, #1
 8008fe0:	1b12      	subs	r2, r2, r4
 8008fe2:	f1c0 0420 	rsb	r4, r0, #32
 8008fe6:	fa21 f404 	lsr.w	r4, r1, r4
 8008fea:	4081      	lsls	r1, r0
 8008fec:	4323      	orrs	r3, r4
 8008fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008ff6:	07d2      	lsls	r2, r2, #31
 8008ff8:	f04f 0600 	mov.w	r6, #0
 8008ffc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009000:	ea4f 0565 	mov.w	r5, r5, asr #1
 8009004:	f04f 0016 	mov.w	r0, #22
 8009008:	4632      	mov	r2, r6
 800900a:	bf58      	it	pl
 800900c:	005b      	lslpl	r3, r3, #1
 800900e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009012:	bf5c      	itt	pl
 8009014:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009018:	0049      	lslpl	r1, r1, #1
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009020:	0049      	lsls	r1, r1, #1
 8009022:	1917      	adds	r7, r2, r4
 8009024:	429f      	cmp	r7, r3
 8009026:	bfde      	ittt	le
 8009028:	193a      	addle	r2, r7, r4
 800902a:	1bdb      	suble	r3, r3, r7
 800902c:	1936      	addle	r6, r6, r4
 800902e:	0fcf      	lsrs	r7, r1, #31
 8009030:	3801      	subs	r0, #1
 8009032:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009036:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800903a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800903e:	d1f0      	bne.n	8009022 <__ieee754_sqrt+0xba>
 8009040:	4604      	mov	r4, r0
 8009042:	2720      	movs	r7, #32
 8009044:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009048:	429a      	cmp	r2, r3
 800904a:	eb00 0e0c 	add.w	lr, r0, ip
 800904e:	db02      	blt.n	8009056 <__ieee754_sqrt+0xee>
 8009050:	d113      	bne.n	800907a <__ieee754_sqrt+0x112>
 8009052:	458e      	cmp	lr, r1
 8009054:	d811      	bhi.n	800907a <__ieee754_sqrt+0x112>
 8009056:	f1be 0f00 	cmp.w	lr, #0
 800905a:	eb0e 000c 	add.w	r0, lr, ip
 800905e:	da43      	bge.n	80090e8 <__ieee754_sqrt+0x180>
 8009060:	2800      	cmp	r0, #0
 8009062:	db41      	blt.n	80090e8 <__ieee754_sqrt+0x180>
 8009064:	f102 0801 	add.w	r8, r2, #1
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	458e      	cmp	lr, r1
 800906c:	4464      	add	r4, ip
 800906e:	eba1 010e 	sub.w	r1, r1, lr
 8009072:	bf88      	it	hi
 8009074:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009078:	4642      	mov	r2, r8
 800907a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800907e:	3f01      	subs	r7, #1
 8009080:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009084:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009088:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800908c:	d1dc      	bne.n	8009048 <__ieee754_sqrt+0xe0>
 800908e:	4319      	orrs	r1, r3
 8009090:	d01b      	beq.n	80090ca <__ieee754_sqrt+0x162>
 8009092:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800911c <__ieee754_sqrt+0x1b4>
 8009096:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8009120 <__ieee754_sqrt+0x1b8>
 800909a:	e9da 0100 	ldrd	r0, r1, [sl]
 800909e:	e9db 2300 	ldrd	r2, r3, [fp]
 80090a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80090a6:	f7f7 f8cb 	bl	8000240 <__aeabi_dsub>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 fcf9 	bl	8000aa8 <__aeabi_dcmple>
 80090b6:	b140      	cbz	r0, 80090ca <__ieee754_sqrt+0x162>
 80090b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80090bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80090c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80090c4:	d112      	bne.n	80090ec <__ieee754_sqrt+0x184>
 80090c6:	3601      	adds	r6, #1
 80090c8:	463c      	mov	r4, r7
 80090ca:	1072      	asrs	r2, r6, #1
 80090cc:	07f1      	lsls	r1, r6, #31
 80090ce:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80090d2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80090d6:	bf48      	it	mi
 80090d8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80090dc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80090e0:	4618      	mov	r0, r3
 80090e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80090e6:	e753      	b.n	8008f90 <__ieee754_sqrt+0x28>
 80090e8:	4690      	mov	r8, r2
 80090ea:	e7bd      	b.n	8009068 <__ieee754_sqrt+0x100>
 80090ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80090f0:	f7f7 f8a8 	bl	8000244 <__adddf3>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 fcca 	bl	8000a94 <__aeabi_dcmplt>
 8009100:	b128      	cbz	r0, 800910e <__ieee754_sqrt+0x1a6>
 8009102:	1ca0      	adds	r0, r4, #2
 8009104:	f104 0402 	add.w	r4, r4, #2
 8009108:	bf08      	it	eq
 800910a:	3601      	addeq	r6, #1
 800910c:	e7dd      	b.n	80090ca <__ieee754_sqrt+0x162>
 800910e:	1c63      	adds	r3, r4, #1
 8009110:	f023 0401 	bic.w	r4, r3, #1
 8009114:	e7d9      	b.n	80090ca <__ieee754_sqrt+0x162>
 8009116:	bf00      	nop
 8009118:	7ff00000 	.word	0x7ff00000
 800911c:	20000040 	.word	0x20000040
 8009120:	20000038 	.word	0x20000038

08009124 <__ieee754_sqrtf>:
 8009124:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009128:	4770      	bx	lr

0800912a <memset>:
 800912a:	4402      	add	r2, r0
 800912c:	4603      	mov	r3, r0
 800912e:	4293      	cmp	r3, r2
 8009130:	d100      	bne.n	8009134 <memset+0xa>
 8009132:	4770      	bx	lr
 8009134:	f803 1b01 	strb.w	r1, [r3], #1
 8009138:	e7f9      	b.n	800912e <memset+0x4>
	...

0800913c <__errno>:
 800913c:	4b01      	ldr	r3, [pc, #4]	@ (8009144 <__errno+0x8>)
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20000048 	.word	0x20000048

08009148 <__libc_init_array>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	4d0d      	ldr	r5, [pc, #52]	@ (8009180 <__libc_init_array+0x38>)
 800914c:	2600      	movs	r6, #0
 800914e:	4c0d      	ldr	r4, [pc, #52]	@ (8009184 <__libc_init_array+0x3c>)
 8009150:	1b64      	subs	r4, r4, r5
 8009152:	10a4      	asrs	r4, r4, #2
 8009154:	42a6      	cmp	r6, r4
 8009156:	d109      	bne.n	800916c <__libc_init_array+0x24>
 8009158:	4d0b      	ldr	r5, [pc, #44]	@ (8009188 <__libc_init_array+0x40>)
 800915a:	2600      	movs	r6, #0
 800915c:	4c0b      	ldr	r4, [pc, #44]	@ (800918c <__libc_init_array+0x44>)
 800915e:	f000 f817 	bl	8009190 <_init>
 8009162:	1b64      	subs	r4, r4, r5
 8009164:	10a4      	asrs	r4, r4, #2
 8009166:	42a6      	cmp	r6, r4
 8009168:	d105      	bne.n	8009176 <__libc_init_array+0x2e>
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009170:	3601      	adds	r6, #1
 8009172:	4798      	blx	r3
 8009174:	e7ee      	b.n	8009154 <__libc_init_array+0xc>
 8009176:	f855 3b04 	ldr.w	r3, [r5], #4
 800917a:	3601      	adds	r6, #1
 800917c:	4798      	blx	r3
 800917e:	e7f2      	b.n	8009166 <__libc_init_array+0x1e>
 8009180:	080092c8 	.word	0x080092c8
 8009184:	080092c8 	.word	0x080092c8
 8009188:	080092c8 	.word	0x080092c8
 800918c:	080092cc 	.word	0x080092cc

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr
