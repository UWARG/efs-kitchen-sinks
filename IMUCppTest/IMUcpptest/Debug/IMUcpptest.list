
IMUcpptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c1c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08009e18  08009e18  0000ae18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d0  0800a2d0  0000c084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d0  0800a2d0  0000b2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d8  0800a2d8  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2dc  0800a2dc  0000b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800a2e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000084  0800a364  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800a364  0000c7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024574  00000000  00000000  0000c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004626  00000000  00000000  0003062e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00034c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013db  00000000  00000000  00036640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032cbc  00000000  00000000  00037a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002004d  00000000  00000000  0006a6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001321bd  00000000  00000000  0008a724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc8e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007550  00000000  00000000  001bc924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001c3e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000084 	.word	0x20000084
 8000214:	00000000 	.word	0x00000000
 8000218:	08009dfc 	.word	0x08009dfc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000088 	.word	0x20000088
 8000234:	08009dfc 	.word	0x08009dfc

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_uldivmod>:
 8000b34:	b953      	cbnz	r3, 8000b4c <__aeabi_uldivmod+0x18>
 8000b36:	b94a      	cbnz	r2, 8000b4c <__aeabi_uldivmod+0x18>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2800      	cmpeq	r0, #0
 8000b3e:	bf1c      	itt	ne
 8000b40:	f04f 31ff 	movne.w	r1, #4294967295
 8000b44:	f04f 30ff 	movne.w	r0, #4294967295
 8000b48:	f000 b97e 	b.w	8000e48 <__aeabi_idiv0>
 8000b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b54:	f000 f806 	bl	8000b64 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <__udivmoddi4>:
 8000b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b68:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d14d      	bne.n	8000c0c <__udivmoddi4+0xa8>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	460f      	mov	r7, r1
 8000b74:	4684      	mov	ip, r0
 8000b76:	4696      	mov	lr, r2
 8000b78:	fab2 f382 	clz	r3, r2
 8000b7c:	d960      	bls.n	8000c40 <__udivmoddi4+0xdc>
 8000b7e:	b14b      	cbz	r3, 8000b94 <__udivmoddi4+0x30>
 8000b80:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b84:	f1c3 0220 	rsb	r2, r3, #32
 8000b88:	409f      	lsls	r7, r3
 8000b8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b92:	4317      	orrs	r7, r2
 8000b94:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b98:	fa1f f48e 	uxth.w	r4, lr
 8000b9c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000ba0:	fbb7 f1f6 	udiv	r1, r7, r6
 8000ba4:	fb06 7711 	mls	r7, r6, r1, r7
 8000ba8:	fb01 f004 	mul.w	r0, r1, r4
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	4290      	cmp	r0, r2
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x62>
 8000bb4:	eb1e 0202 	adds.w	r2, lr, r2
 8000bb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bbc:	d202      	bcs.n	8000bc4 <__udivmoddi4+0x60>
 8000bbe:	4290      	cmp	r0, r2
 8000bc0:	f200 812d 	bhi.w	8000e1e <__udivmoddi4+0x2ba>
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	1a12      	subs	r2, r2, r0
 8000bc8:	fa1f fc8c 	uxth.w	ip, ip
 8000bcc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bd0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bd4:	fb00 f404 	mul.w	r4, r0, r4
 8000bd8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bdc:	4564      	cmp	r4, ip
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x8e>
 8000be0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000be4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x8c>
 8000bea:	4564      	cmp	r4, ip
 8000bec:	f200 811a 	bhi.w	8000e24 <__udivmoddi4+0x2c0>
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	b125      	cbz	r5, 8000c08 <__udivmoddi4+0xa4>
 8000bfe:	fa2c f303 	lsr.w	r3, ip, r3
 8000c02:	2200      	movs	r2, #0
 8000c04:	e9c5 3200 	strd	r3, r2, [r5]
 8000c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d905      	bls.n	8000c1c <__udivmoddi4+0xb8>
 8000c10:	b10d      	cbz	r5, 8000c16 <__udivmoddi4+0xb2>
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	2100      	movs	r1, #0
 8000c18:	4608      	mov	r0, r1
 8000c1a:	e7f5      	b.n	8000c08 <__udivmoddi4+0xa4>
 8000c1c:	fab3 f183 	clz	r1, r3
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d14d      	bne.n	8000cc0 <__udivmoddi4+0x15c>
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	f0c0 80f2 	bcc.w	8000e0e <__udivmoddi4+0x2aa>
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	f080 80ef 	bcs.w	8000e0e <__udivmoddi4+0x2aa>
 8000c30:	4606      	mov	r6, r0
 8000c32:	4623      	mov	r3, r4
 8000c34:	4608      	mov	r0, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0e6      	beq.n	8000c08 <__udivmoddi4+0xa4>
 8000c3a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c3e:	e7e3      	b.n	8000c08 <__udivmoddi4+0xa4>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f040 80a2 	bne.w	8000d8a <__udivmoddi4+0x226>
 8000c46:	1a8a      	subs	r2, r1, r2
 8000c48:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c4c:	fa1f f68e 	uxth.w	r6, lr
 8000c50:	2101      	movs	r1, #1
 8000c52:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c56:	fb07 2014 	mls	r0, r7, r4, r2
 8000c5a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c62:	fb06 f004 	mul.w	r0, r6, r4
 8000c66:	4290      	cmp	r0, r2
 8000c68:	d90f      	bls.n	8000c8a <__udivmoddi4+0x126>
 8000c6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c72:	bf2c      	ite	cs
 8000c74:	f04f 0901 	movcs.w	r9, #1
 8000c78:	f04f 0900 	movcc.w	r9, #0
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d903      	bls.n	8000c88 <__udivmoddi4+0x124>
 8000c80:	f1b9 0f00 	cmp.w	r9, #0
 8000c84:	f000 80c8 	beq.w	8000e18 <__udivmoddi4+0x2b4>
 8000c88:	4644      	mov	r4, r8
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	fa1f fc8c 	uxth.w	ip, ip
 8000c90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c94:	fb07 2210 	mls	r2, r7, r0, r2
 8000c98:	fb00 f606 	mul.w	r6, r0, r6
 8000c9c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000ca0:	4566      	cmp	r6, ip
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x152>
 8000ca4:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x150>
 8000cae:	4566      	cmp	r6, ip
 8000cb0:	f200 80bb 	bhi.w	8000e2a <__udivmoddi4+0x2c6>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	ebac 0c06 	sub.w	ip, ip, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	e79d      	b.n	8000bfc <__udivmoddi4+0x98>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cca:	fa22 f706 	lsr.w	r7, r2, r6
 8000cce:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd2:	40f4      	lsrs	r4, r6
 8000cd4:	408a      	lsls	r2, r1
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	ea4e 030c 	orr.w	r3, lr, ip
 8000cdc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ce0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ce4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf0:	fb08 4410 	mls	r4, r8, r0, r4
 8000cf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cfc:	45a1      	cmp	r9, r4
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x1ba>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0b01 	movcs.w	fp, #1
 8000d0c:	f04f 0b00 	movcc.w	fp, #0
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x1b8>
 8000d14:	f1bb 0f00 	cmp.w	fp, #0
 8000d18:	f000 8093 	beq.w	8000e42 <__udivmoddi4+0x2de>
 8000d1c:	4650      	mov	r0, sl
 8000d1e:	eba4 0409 	sub.w	r4, r4, r9
 8000d22:	fa1f f983 	uxth.w	r9, r3
 8000d26:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d2a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d906      	bls.n	8000d48 <__udivmoddi4+0x1e4>
 8000d3a:	193c      	adds	r4, r7, r4
 8000d3c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d40:	d201      	bcs.n	8000d46 <__udivmoddi4+0x1e2>
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d87a      	bhi.n	8000e3c <__udivmoddi4+0x2d8>
 8000d46:	4643      	mov	r3, r8
 8000d48:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	fba0 9802 	umull	r9, r8, r0, r2
 8000d54:	4544      	cmp	r4, r8
 8000d56:	46cc      	mov	ip, r9
 8000d58:	4643      	mov	r3, r8
 8000d5a:	d302      	bcc.n	8000d62 <__udivmoddi4+0x1fe>
 8000d5c:	d106      	bne.n	8000d6c <__udivmoddi4+0x208>
 8000d5e:	45ce      	cmp	lr, r9
 8000d60:	d204      	bcs.n	8000d6c <__udivmoddi4+0x208>
 8000d62:	3801      	subs	r0, #1
 8000d64:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d68:	eb68 0307 	sbc.w	r3, r8, r7
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x222>
 8000d6e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d72:	eb64 0403 	sbc.w	r4, r4, r3
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e73e      	b.n	8000c08 <__udivmoddi4+0xa4>
 8000d8a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d8e:	f1c3 0120 	rsb	r1, r3, #32
 8000d92:	fa04 f203 	lsl.w	r2, r4, r3
 8000d96:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d9a:	40cc      	lsrs	r4, r1
 8000d9c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000da0:	fa20 f101 	lsr.w	r1, r0, r1
 8000da4:	fa1f f68e 	uxth.w	r6, lr
 8000da8:	fbb4 f0f7 	udiv	r0, r4, r7
 8000dac:	430a      	orrs	r2, r1
 8000dae:	fb07 4410 	mls	r4, r7, r0, r4
 8000db2:	0c11      	lsrs	r1, r2, #16
 8000db4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000db8:	fb00 f406 	mul.w	r4, r0, r6
 8000dbc:	428c      	cmp	r4, r1
 8000dbe:	d90e      	bls.n	8000dde <__udivmoddi4+0x27a>
 8000dc0:	eb1e 0101 	adds.w	r1, lr, r1
 8000dc4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc8:	bf2c      	ite	cs
 8000dca:	f04f 0901 	movcs.w	r9, #1
 8000dce:	f04f 0900 	movcc.w	r9, #0
 8000dd2:	428c      	cmp	r4, r1
 8000dd4:	d902      	bls.n	8000ddc <__udivmoddi4+0x278>
 8000dd6:	f1b9 0f00 	cmp.w	r9, #0
 8000dda:	d02c      	beq.n	8000e36 <__udivmoddi4+0x2d2>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	1b09      	subs	r1, r1, r4
 8000de0:	b292      	uxth	r2, r2
 8000de2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000de6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dee:	fb04 f106 	mul.w	r1, r4, r6
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x2a2>
 8000df6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dfa:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dfe:	d201      	bcs.n	8000e04 <__udivmoddi4+0x2a0>
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d815      	bhi.n	8000e30 <__udivmoddi4+0x2cc>
 8000e04:	4644      	mov	r4, r8
 8000e06:	1a52      	subs	r2, r2, r1
 8000e08:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e0c:	e721      	b.n	8000c52 <__udivmoddi4+0xee>
 8000e0e:	1a86      	subs	r6, r0, r2
 8000e10:	eb64 0303 	sbc.w	r3, r4, r3
 8000e14:	2001      	movs	r0, #1
 8000e16:	e70e      	b.n	8000c36 <__udivmoddi4+0xd2>
 8000e18:	3c02      	subs	r4, #2
 8000e1a:	4472      	add	r2, lr
 8000e1c:	e735      	b.n	8000c8a <__udivmoddi4+0x126>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4472      	add	r2, lr
 8000e22:	e6d0      	b.n	8000bc6 <__udivmoddi4+0x62>
 8000e24:	44f4      	add	ip, lr
 8000e26:	3802      	subs	r0, #2
 8000e28:	e6e3      	b.n	8000bf2 <__udivmoddi4+0x8e>
 8000e2a:	44f4      	add	ip, lr
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e742      	b.n	8000cb6 <__udivmoddi4+0x152>
 8000e30:	3c02      	subs	r4, #2
 8000e32:	4472      	add	r2, lr
 8000e34:	e7e7      	b.n	8000e06 <__udivmoddi4+0x2a2>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4471      	add	r1, lr
 8000e3a:	e7d0      	b.n	8000dde <__udivmoddi4+0x27a>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	443c      	add	r4, r7
 8000e40:	e782      	b.n	8000d48 <__udivmoddi4+0x1e4>
 8000e42:	3802      	subs	r0, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	e76a      	b.n	8000d1e <__udivmoddi4+0x1ba>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	ed87 0b00 	vstr	d0, [r7]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8000e5e:	ec43 2b17 	vmov	d7, r2, r3
 8000e62:	eeb0 0a47 	vmov.f32	s0, s14
 8000e66:	eef0 0a67 	vmov.f32	s1, s15
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_ZN3IMUC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#define UB0_REG_PWR_MGMT0     0x4E
#define UB0_REG_TEMP_DATA1    0x1D



IMU::IMU(SPI_HandleTypeDef* spiHandle, GPIO_TypeDef* csPort, uint16_t csPin)
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	807b      	strh	r3, [r7, #2]
    : _spi(spiHandle), _csPort(csPort), _csPin(csPin),
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	887a      	ldrh	r2, [r7, #2]
 8000e92:	811a      	strh	r2, [r3, #8]
      _gyroScale(0), _accelScale(0), _gyroFS(0), _accelFS(0),
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	751a      	strb	r2, [r3, #20]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	755a      	strb	r2, [r3, #21]
      _alpha(0.1f)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <_ZN3IMUC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x98>)
 8000eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
{
    _gyrB[0] = _gyrB[1] = _gyrB[2] = 0.0f;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	61da      	str	r2, [r3, #28]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	69da      	ldr	r2, [r3, #28]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	619a      	str	r2, [r3, #24]
    _accB[0] = _accB[1] = _accB[2] = 0.0f;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    _filteredGyro[0] = _filteredGyro[1] = _filteredGyro[2] = 0.0f;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	3dcccccd 	.word	0x3dcccccd

08000f10 <_ZN3IMU13readRegistersEhhPh>:

int IMU::readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest) {
 8000f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f14:	b08b      	sub	sp, #44	@ 0x2c
 8000f16:	af02      	add	r7, sp, #8
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	72fb      	strb	r3, [r7, #11]
 8000f20:	4613      	mov	r3, r2
 8000f22:	72bb      	strb	r3, [r7, #10]
    ret = HAL_SPI_TransmitReceive(_spi, &tx, &dummy_rx, 1, HAL_MAX_DELAY);
    ret = HAL_SPI_TransmitReceive(_spi, dummy_tx, dest, count, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(_csPort, _csPin, GPIO_PIN_SET);

    return (ret == HAL_OK);
}
 8000f24:	466b      	mov	r3, sp
 8000f26:	461e      	mov	r6, r3
    uint8_t tx = subAddress | 0x80;
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	75bb      	strb	r3, [r7, #22]
    uint8_t dummy_tx[count];
 8000f32:	7ab9      	ldrb	r1, [r7, #10]
 8000f34:	460b      	mov	r3, r1
 8000f36:	3b01      	subs	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	b2cb      	uxtb	r3, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4698      	mov	r8, r3
 8000f40:	4691      	mov	r9, r2
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f56:	b2cb      	uxtb	r3, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	461c      	mov	r4, r3
 8000f5c:	4615      	mov	r5, r2
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	00eb      	lsls	r3, r5, #3
 8000f68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f6c:	00e2      	lsls	r2, r4, #3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	3307      	adds	r3, #7
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	ebad 0d03 	sub.w	sp, sp, r3
 8000f7a:	ab02      	add	r3, sp, #8
 8000f7c:	3300      	adds	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
    memset(dummy_tx, 0, count*sizeof(dummy_tx[0])); // memset(dummy_tx, 0, sizeof(dummy_tx));
 8000f80:	7abb      	ldrb	r3, [r7, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	69b8      	ldr	r0, [r7, #24]
 8000f88:	f008 ff06 	bl	8009d98 <memset>
    HAL_GPIO_WritePin(_csPort, _csPin, GPIO_PIN_RESET);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6858      	ldr	r0, [r3, #4]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	891b      	ldrh	r3, [r3, #8]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	f003 fde0 	bl	8004b5c <HAL_GPIO_WritePin>
    ret = HAL_SPI_TransmitReceive(_spi, &tx, &dummy_rx, 1, HAL_MAX_DELAY);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f107 0215 	add.w	r2, r7, #21
 8000fa4:	f107 0116 	add.w	r1, r7, #22
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f005 fff4 	bl	8006f9c <HAL_SPI_TransmitReceive>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
    ret = HAL_SPI_TransmitReceive(_spi, dummy_tx, dest, count, HAL_MAX_DELAY);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	7abb      	ldrb	r3, [r7, #10]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	69b9      	ldr	r1, [r7, #24]
 8000fca:	f005 ffe7 	bl	8006f9c <HAL_SPI_TransmitReceive>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(_csPort, _csPin, GPIO_PIN_SET);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6858      	ldr	r0, [r3, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	891b      	ldrh	r3, [r3, #8]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f003 fdbd 	bl	8004b5c <HAL_GPIO_WritePin>
    return (ret == HAL_OK);
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	46b5      	mov	sp, r6
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3724      	adds	r7, #36	@ 0x24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ffa <_ZN3IMU13writeRegisterEhh>:

void IMU::writeRegister(uint8_t subAddress, uint8_t data) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	4613      	mov	r3, r2
 8001008:	70bb      	strb	r3, [r7, #2]
    uint8_t tx_buf[2] = {subAddress, data};
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	733b      	strb	r3, [r7, #12]
 800100e:	78bb      	ldrb	r3, [r7, #2]
 8001010:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(_csPort, _csPin, GPIO_PIN_RESET);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6858      	ldr	r0, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	891b      	ldrh	r3, [r3, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	f003 fd9d 	bl	8004b5c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(_spi, tx_buf, 2, HAL_MAX_DELAY);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f107 010c 	add.w	r1, r7, #12
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	f005 fe3f 	bl	8006cb2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_csPort, _csPin, GPIO_PIN_SET);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6858      	ldr	r0, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	891b      	ldrh	r3, [r3, #8]
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	f003 fd8c 	bl	8004b5c <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN3IMU7setBankEh>:

int IMU::setBank(uint8_t bank) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
    writeRegister(REG_BANK_SEL, bank);
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	461a      	mov	r2, r3
 800105c:	2176      	movs	r1, #118	@ 0x76
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffcb 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
    return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZN3IMU15setLowNoiseModeEv>:

void IMU::setLowNoiseMode() {
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
    writeRegister(UB0_REG_PWR_MGMT0, 0x0F);
 8001076:	220f      	movs	r2, #15
 8001078:	214e      	movs	r1, #78	@ 0x4e
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffbd 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN3IMU5resetEv>:

void IMU::reset() {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    setBank(0);
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffda 	bl	800104c <_ZN3IMU7setBankEh>
    writeRegister(UB0_REG_DEVICE_CONFIG, 0x01);
 8001098:	2201      	movs	r2, #1
 800109a:	2111      	movs	r1, #17
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ffac 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
    HAL_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f002 fa7e 	bl	80035a4 <HAL_Delay>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_ZN3IMU6whoAmIEv>:

uint8_t IMU::whoAmI() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    readRegisters(UB0_REG_WHO_AM_I, 1, &buffer);
 80010b8:	f107 030f 	add.w	r3, r7, #15
 80010bc:	2201      	movs	r2, #1
 80010be:	2175      	movs	r1, #117	@ 0x75
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff25 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    return buffer;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZN3IMU7readAGTEPh>:

void IMU::readAGT(uint8_t* dataBuffer) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    readRegisters(UB0_REG_TEMP_DATA1, 14, dataBuffer);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	220e      	movs	r2, #14
 80010de:	211d      	movs	r1, #29
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff15 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_ZN3IMU13lowPassFilterEfi>:

float IMU::lowPassFilter(float raw_value, int select) {
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80010fa:	6079      	str	r1, [r7, #4]
    _filteredGyro[select] = _alpha * raw_value + (1 - _alpha) * _filteredGyro[select];
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001102:	edd7 7a02 	vldr	s15, [r7, #8]
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001114:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	330c      	adds	r3, #12
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	330c      	adds	r3, #12
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	edc3 7a00 	vstr	s15, [r3]
    return _filteredGyro[select];
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	330c      	adds	r3, #12
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	ee07 3a90 	vmov	s15, r3
}
 800114c:	eeb0 0a67 	vmov.f32	s0, s15
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_ZN3IMU9setGyroFSEh>:

void IMU::setGyroFS(uint8_t fssel) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
    setBank(0);
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff6e 	bl	800104c <_ZN3IMU7setBankEh>
    uint8_t reg;
    readRegisters(0x4F, 1, &reg);
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	2201      	movs	r2, #1
 8001176:	214f      	movs	r1, #79	@ 0x4f
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fec9 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    reg = (fssel << 5) | (reg & 0x1F);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	015b      	lsls	r3, r3, #5
 8001182:	b25a      	sxtb	r2, r3
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	b25b      	sxtb	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
    writeRegister(0x4F, reg);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	461a      	mov	r2, r3
 800119a:	214f      	movs	r1, #79	@ 0x4f
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff2c 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
    _gyroScale = (2000.0f / (float)(1 << fssel)) / 32768.0f;
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2201      	movs	r2, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80011d8 <_ZN3IMU9setGyroFSEh+0x7c>
 80011b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011ba:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80011dc <_ZN3IMU9setGyroFSEh+0x80>
 80011be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edc3 7a03 	vstr	s15, [r3, #12]
    _gyroFS = fssel;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	751a      	strb	r2, [r3, #20]
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	44fa0000 	.word	0x44fa0000
 80011dc:	47000000 	.word	0x47000000

080011e0 <_ZN3IMU10setAccelFSEh>:

void IMU::setAccelFS(uint8_t fssel) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
    setBank(0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff2c 	bl	800104c <_ZN3IMU7setBankEh>
    uint8_t reg;
    readRegisters(0x50, 1, &reg);
 80011f4:	f107 030f 	add.w	r3, r7, #15
 80011f8:	2201      	movs	r2, #1
 80011fa:	2150      	movs	r1, #80	@ 0x50
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fe87 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    reg = (fssel << 5) | (reg & 0x1F);
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	b25a      	sxtb	r2, r3
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	b25b      	sxtb	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b25b      	sxtb	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	73fb      	strb	r3, [r7, #15]
    writeRegister(0x50, reg);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	461a      	mov	r2, r3
 800121e:	2150      	movs	r1, #80	@ 0x50
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff feea 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
    _accelScale = (float)(1 << (4 - fssel)) / 32768.0f;
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	f1c3 0304 	rsb	r3, r3, #4
 800122c:	2201      	movs	r2, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001258 <_ZN3IMU10setAccelFSEh+0x78>
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	edc3 7a04 	vstr	s15, [r3, #16]
    _accelFS = fssel;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	755a      	strb	r2, [r3, #21]
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	47000000 	.word	0x47000000

0800125c <_ZN3IMU13calibrateGyroEv>:

void IMU::calibrateGyro() {
 800125c:	b580      	push	{r7, lr}
 800125e:	b092      	sub	sp, #72	@ 0x48
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    const uint8_t current_fssel = _gyroFS;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7d1b      	ldrb	r3, [r3, #20]
 8001268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    setGyroFS(0x03);
 800126c:	2103      	movs	r1, #3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff74 	bl	800115c <_ZN3IMU9setGyroFSEh>
    float avg[3] = {0, 0, 0};
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t buffer[14];
    int16_t raw[7];

    for (int i = 0; i < 1000; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	647b      	str	r3, [r7, #68]	@ 0x44
 800128a:	e058      	b.n	800133e <_ZN3IMU13calibrateGyroEv+0xe2>
        readAGT(buffer);
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4619      	mov	r1, r3
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff1c 	bl	80010d0 <_ZN3IMU7readAGTEPh>
        for (int j = 0; j < 7; j++)
 8001298:	2300      	movs	r3, #0
 800129a:	643b      	str	r3, [r7, #64]	@ 0x40
 800129c:	e01a      	b.n	80012d4 <_ZN3IMU13calibrateGyroEv+0x78>
            raw[j] = ((int16_t)buffer[j*2] << 8) | buffer[j*2+1];
 800129e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	3348      	adds	r3, #72	@ 0x48
 80012a4:	443b      	add	r3, r7
 80012a6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	3301      	adds	r3, #1
 80012b4:	3348      	adds	r3, #72	@ 0x48
 80012b6:	443b      	add	r3, r7
 80012b8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	3348      	adds	r3, #72	@ 0x48
 80012c8:	443b      	add	r3, r7
 80012ca:	f823 2c40 	strh.w	r2, [r3, #-64]
        for (int j = 0; j < 7; j++)
 80012ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012d0:	3301      	adds	r3, #1
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80012d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	dde1      	ble.n	800129e <_ZN3IMU13calibrateGyroEv+0x42>

        for (int j = 0; j < 3; j++)
 80012da:	2300      	movs	r3, #0
 80012dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012de:	e025      	b.n	800132c <_ZN3IMU13calibrateGyroEv+0xd0>
            avg[j] += (float)raw[j+4] / 16.4f / 1000.0f;
 80012e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3348      	adds	r3, #72	@ 0x48
 80012e6:	443b      	add	r3, r7
 80012e8:	3b20      	subs	r3, #32
 80012ea:	ed93 7a00 	vldr	s14, [r3]
 80012ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012f0:	3304      	adds	r3, #4
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	3348      	adds	r3, #72	@ 0x48
 80012f6:	443b      	add	r3, r7
 80012f8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001304:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8001384 <_ZN3IMU13calibrateGyroEv+0x128>
 8001308:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800130c:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001388 <_ZN3IMU13calibrateGyroEv+0x12c>
 8001310:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	3348      	adds	r3, #72	@ 0x48
 800131e:	443b      	add	r3, r7
 8001320:	3b20      	subs	r3, #32
 8001322:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++)
 8001326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001328:	3301      	adds	r3, #1
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800132c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800132e:	2b02      	cmp	r3, #2
 8001330:	ddd6      	ble.n	80012e0 <_ZN3IMU13calibrateGyroEv+0x84>

        HAL_Delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f002 f936 	bl	80035a4 <HAL_Delay>
    for (int i = 0; i < 1000; i++) {
 8001338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800133a:	3301      	adds	r3, #1
 800133c:	647b      	str	r3, [r7, #68]	@ 0x44
 800133e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001340:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001344:	dba2      	blt.n	800128c <_ZN3IMU13calibrateGyroEv+0x30>
    }

    for (int i = 0; i < 3; i++) _gyrB[i] = avg[i];
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800134a:	e00e      	b.n	800136a <_ZN3IMU13calibrateGyroEv+0x10e>
 800134c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	3348      	adds	r3, #72	@ 0x48
 8001352:	443b      	add	r3, r7
 8001354:	3b20      	subs	r3, #32
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800135c:	3306      	adds	r3, #6
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001366:	3301      	adds	r3, #1
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
 800136a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800136c:	2b02      	cmp	r3, #2
 800136e:	dded      	ble.n	800134c <_ZN3IMU13calibrateGyroEv+0xf0>
    setGyroFS(current_fssel);
 8001370:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fef0 	bl	800115c <_ZN3IMU9setGyroFSEh>
}
 800137c:	bf00      	nop
 800137e:	3748      	adds	r7, #72	@ 0x48
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	41833333 	.word	0x41833333
 8001388:	447a0000 	.word	0x447a0000
 800138c:	00000000 	.word	0x00000000

08001390 <_ZN3IMU20configureNotchFilterEv>:

    // Restore original full-scale setting
    setAccelFS(currentFS);
}

void IMU::configureNotchFilter(){
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint8_t BW_SEL = 7;
 8001398:	2307      	movs	r3, #7
 800139a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint32_t f_des = 1300;
 800139e:	f240 5314 	movw	r3, #1300	@ 0x514
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
	double pi = 3.14159265;
 80013a4:	a398      	add	r3, pc, #608	@ (adr r3, 8001608 <_ZN3IMU20configureNotchFilterEv+0x278>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double COSWZ = cos(2 * pi * f_des / 32);
 80013ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	f7fe ff45 	bl	8000244 <__adddf3>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4614      	mov	r4, r2
 80013c0:	461d      	mov	r5, r3
 80013c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013c4:	f7ff f87a 	bl	80004bc <__aeabi_ui2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff f8ee 	bl	80005b0 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b83      	ldr	r3, [pc, #524]	@ (80015f0 <_ZN3IMU20configureNotchFilterEv+0x260>)
 80013e2:	f7ff fa0f 	bl	8000804 <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	ec43 2b17 	vmov	d7, r2, r3
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	f007 f9bb 	bl	8008770 <cos>
 80013fa:	ed87 0b04 	vstr	d0, [r7, #16]
	int NF_COSWZ = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool NF_COSWZ_SEL = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if(abs(COSWZ) <= 0.875){
 8001408:	ed97 0b04 	vldr	d0, [r7, #16]
 800140c:	f7ff fd1e 	bl	8000e4c <_ZSt3absd>
 8001410:	ec51 0b10 	vmov	r0, r1, d0
 8001414:	2301      	movs	r3, #1
 8001416:	461c      	mov	r4, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b75      	ldr	r3, [pc, #468]	@ (80015f4 <_ZN3IMU20configureNotchFilterEv+0x264>)
 800141e:	f7ff fb43 	bl	8000aa8 <__aeabi_dcmple>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <_ZN3IMU20configureNotchFilterEv+0x9c>
 8001428:	2300      	movs	r3, #0
 800142a:	461c      	mov	r4, r3
 800142c:	b2e3      	uxtb	r3, r4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01c      	beq.n	800146c <_ZN3IMU20configureNotchFilterEv+0xdc>
		NF_COSWZ_SEL = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		NF_COSWZ = round(COSWZ * 256);
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <_ZN3IMU20configureNotchFilterEv+0x268>)
 800143e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001442:	f7ff f8b5 	bl	80005b0 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	ec43 2b17 	vmov	d7, r2, r3
 800144e:	eeb0 0a47 	vmov.f32	s0, s14
 8001452:	eef0 0a67 	vmov.f32	s1, s15
 8001456:	f007 fa1b 	bl	8008890 <round>
 800145a:	ec53 2b10 	vmov	r2, r3, d0
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb3f 	bl	8000ae4 <__aeabi_d2iz>
 8001466:	4603      	mov	r3, r0
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800146a:	e063      	b.n	8001534 <_ZN3IMU20configureNotchFilterEv+0x1a4>
	}else{
		NF_COSWZ_SEL = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if(COSWZ > 0.875){
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b5f      	ldr	r3, [pc, #380]	@ (80015f4 <_ZN3IMU20configureNotchFilterEv+0x264>)
 8001478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800147c:	f7ff fb28 	bl	8000ad0 <__aeabi_dcmpgt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d02b      	beq.n	80014de <_ZN3IMU20configureNotchFilterEv+0x14e>
			NF_COSWZ = round(8 * (1 - COSWZ) * 256);
 8001486:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800148a:	f04f 0000 	mov.w	r0, #0
 800148e:	495b      	ldr	r1, [pc, #364]	@ (80015fc <_ZN3IMU20configureNotchFilterEv+0x26c>)
 8001490:	f7fe fed6 	bl	8000240 <__aeabi_dsub>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b57      	ldr	r3, [pc, #348]	@ (8001600 <_ZN3IMU20configureNotchFilterEv+0x270>)
 80014a2:	f7ff f885 	bl	80005b0 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <_ZN3IMU20configureNotchFilterEv+0x268>)
 80014b4:	f7ff f87c 	bl	80005b0 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	ec43 2b17 	vmov	d7, r2, r3
 80014c0:	eeb0 0a47 	vmov.f32	s0, s14
 80014c4:	eef0 0a67 	vmov.f32	s1, s15
 80014c8:	f007 f9e2 	bl	8008890 <round>
 80014cc:	ec53 2b10 	vmov	r2, r3, d0
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb06 	bl	8000ae4 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014dc:	e02a      	b.n	8001534 <_ZN3IMU20configureNotchFilterEv+0x1a4>
		}else{
			NF_COSWZ = round(-8 * (1 + COSWZ) * 256);
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b46      	ldr	r3, [pc, #280]	@ (80015fc <_ZN3IMU20configureNotchFilterEv+0x26c>)
 80014e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e8:	f7fe feac 	bl	8000244 <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b42      	ldr	r3, [pc, #264]	@ (8001604 <_ZN3IMU20configureNotchFilterEv+0x274>)
 80014fa:	f7ff f859 	bl	80005b0 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <_ZN3IMU20configureNotchFilterEv+0x268>)
 800150c:	f7ff f850 	bl	80005b0 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	ec43 2b17 	vmov	d7, r2, r3
 8001518:	eeb0 0a47 	vmov.f32	s0, s14
 800151c:	eef0 0a67 	vmov.f32	s1, s15
 8001520:	f007 f9b6 	bl	8008890 <round>
 8001524:	ec53 2b10 	vmov	r2, r3, d0
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fada 	bl	8000ae4 <__aeabi_d2iz>
 8001530:	4603      	mov	r3, r0
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}
	setBank(1);
 8001534:	2101      	movs	r1, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fd88 	bl	800104c <_ZN3IMU7setBankEh>
	writeRegister(0x0F, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for X-axis
 800153c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	210f      	movs	r1, #15
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fd58 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
	writeRegister(0x10, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for Y-axis
 800154a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	2110      	movs	r1, #16
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fd51 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
	writeRegister(0x11, (uint8_t)(NF_COSWZ & 0xFF));  // Lower byte for Z-axis
 8001558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	2111      	movs	r1, #17
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fd4a 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
	writeRegister(0x12, (uint8_t)((NF_COSWZ >> 8) & 0x01));  // Upper bit for all axes
 8001566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001568:	121b      	asrs	r3, r3, #8
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	2112      	movs	r1, #18
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fd3f 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

	uint8_t reg_0x12;
	readRegisters(0x12, 1, &reg_0x12);
 800157c:	f107 030f 	add.w	r3, r7, #15
 8001580:	2201      	movs	r2, #1
 8001582:	2112      	movs	r1, #18
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fcc3 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
	// Modify only necessary bits (Bit 3 = X, Bit 4 = Y, Bit 5 = Z)
	reg_0x12 &= ~(0b00111000);  // Clear bits 3, 4, 5
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001590:	b2db      	uxtb	r3, r3
 8001592:	73fb      	strb	r3, [r7, #15]
	reg_0x12 |= (NF_COSWZ_SEL << 3) | (NF_COSWZ_SEL << 4) | (NF_COSWZ_SEL << 5);
 8001594:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001598:	461a      	mov	r2, r3
 800159a:	0052      	lsls	r2, r2, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
	writeRegister(0x12, reg_0x12);
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	461a      	mov	r2, r3
 80015c0:	2112      	movs	r1, #18
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fd19 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

	// Set Notch Filter Bandwidth
	writeRegister(0x13, BW_SEL << 4);
 80015c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	2113      	movs	r1, #19
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fd10 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>


	setBank(0);
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd35 	bl	800104c <_ZN3IMU7setBankEh>
}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	@ 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	40400000 	.word	0x40400000
 80015f4:	3fec0000 	.word	0x3fec0000
 80015f8:	40700000 	.word	0x40700000
 80015fc:	3ff00000 	.word	0x3ff00000
 8001600:	40200000 	.word	0x40200000
 8001604:	c0200000 	.word	0xc0200000
 8001608:	53c8d4f1 	.word	0x53c8d4f1
 800160c:	400921fb 	.word	0x400921fb

08001610 <_ZL12getAAFConfigt>:
    {3299,55, 3008,    3}, {3381,56, 3136,    3}, {3464,57, 3264,    3},
    {3548,58, 3392,    3}, {3633,59, 3456,    3}, {3718,60, 3584,    3},
    {3805,61, 3712,    3}, {3892,62, 3840,    3}, {3979,63, 3968,    3}
};

static const AAF_Config *getAAFConfig(uint16_t bandwidth) {
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
    const AAF_Config *best = &aaf_table[0];
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <_ZL12getAAFConfigt+0x48>)
 800161c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < sizeof(aaf_table)/sizeof(aaf_table[0]); i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	e00f      	b.n	8001644 <_ZL12getAAFConfigt+0x34>
        if (aaf_table[i].bandwidth >= bandwidth) {
 8001624:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <_ZL12getAAFConfigt+0x48>)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800162c:	88fa      	ldrh	r2, [r7, #6]
 800162e:	429a      	cmp	r2, r3
 8001630:	d805      	bhi.n	800163e <_ZL12getAAFConfigt+0x2e>
            best = &aaf_table[i];
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <_ZL12getAAFConfigt+0x48>)
 8001638:	4413      	add	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
            break;
 800163c:	e005      	b.n	800164a <_ZL12getAAFConfigt+0x3a>
    for (size_t i = 0; i < sizeof(aaf_table)/sizeof(aaf_table[0]); i++) {
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3301      	adds	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b3e      	cmp	r3, #62	@ 0x3e
 8001648:	d9ec      	bls.n	8001624 <_ZL12getAAFConfigt+0x14>
        }
    }
    return best;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	08009e44 	.word	0x08009e44

0800165c <_ZN3IMU18setAntiAliasFilterEtbb>:

void IMU::setAntiAliasFilter(uint16_t bandwidth_hz, bool accel_enable, bool gyro_enable) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	4608      	mov	r0, r1
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4603      	mov	r3, r0
 800166c:	807b      	strh	r3, [r7, #2]
 800166e:	460b      	mov	r3, r1
 8001670:	707b      	strb	r3, [r7, #1]
 8001672:	4613      	mov	r3, r2
 8001674:	703b      	strb	r3, [r7, #0]
    const AAF_Config *cfg = getAAFConfig(bandwidth_hz);
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffc9 	bl	8001610 <_ZL12getAAFConfigt>
 800167e:	6178      	str	r0, [r7, #20]

    // accel
    setBank(2);
 8001680:	2102      	movs	r1, #2
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fce2 	bl	800104c <_ZN3IMU7setBankEh>

    uint8_t reg03;
    readRegisters(0x03, 1, &reg03);
 8001688:	f107 0313 	add.w	r3, r7, #19
 800168c:	2201      	movs	r2, #1
 800168e:	2103      	movs	r1, #3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fc3d 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    reg03 &= ~0x7E;                         // Clear bits 6:1
 8001696:	7cfb      	ldrb	r3, [r7, #19]
 8001698:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800169c:	b2db      	uxtb	r3, r3
 800169e:	74fb      	strb	r3, [r7, #19]
    reg03 |= (cfg->delt & 0x3F) << 1;       // ACCEL_AAF_DELT
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	7cfb      	ldrb	r3, [r7, #19]
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	74fb      	strb	r3, [r7, #19]
    if (!accel_enable)
 80016ba:	787b      	ldrb	r3, [r7, #1]
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <_ZN3IMU18setAntiAliasFilterEtbb+0x76>
        reg03 |= 1 << 0;                    // ACCEL_AAF_DIS = 1
 80016c6:	7cfb      	ldrb	r3, [r7, #19]
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	74fb      	strb	r3, [r7, #19]
 80016d0:	e004      	b.n	80016dc <_ZN3IMU18setAntiAliasFilterEtbb+0x80>
    else
        reg03 &= ~(1 << 0);                 // Enable AAF
 80016d2:	7cfb      	ldrb	r3, [r7, #19]
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	74fb      	strb	r3, [r7, #19]
    writeRegister(0x03, reg03);
 80016dc:	7cfb      	ldrb	r3, [r7, #19]
 80016de:	461a      	mov	r2, r3
 80016e0:	2103      	movs	r1, #3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fc89 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

    writeRegister(0x04, (uint8_t)(cfg->deltsqr & 0xFF));  // Lower 8 bits of DELTSQR
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	889b      	ldrh	r3, [r3, #4]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	2104      	movs	r1, #4
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fc81 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
    uint8_t reg05;
    readRegisters(0x05, 1, &reg05);
 80016f8:	f107 0312 	add.w	r3, r7, #18
 80016fc:	2201      	movs	r2, #1
 80016fe:	2105      	movs	r1, #5
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fc05 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    reg05 &= 0x00;                          // Clear bits 7:0
 8001706:	2300      	movs	r3, #0
 8001708:	74bb      	strb	r3, [r7, #18]
    reg05 |= ((cfg->deltsqr >> 8) & 0x0F);  // Upper 4 bits of DELTSQR
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b29b      	uxth	r3, r3
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b25a      	sxtb	r2, r3
 800171a:	7cbb      	ldrb	r3, [r7, #18]
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	74bb      	strb	r3, [r7, #18]
    reg05 |= (cfg->bitshift << 4) & 0xF0;   // ACCEL_AAF_BITSHIFT
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	799b      	ldrb	r3, [r3, #6]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	b25a      	sxtb	r2, r3
 800172e:	7cbb      	ldrb	r3, [r7, #18]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	74bb      	strb	r3, [r7, #18]
    writeRegister(0x05, reg05);
 800173a:	7cbb      	ldrb	r3, [r7, #18]
 800173c:	461a      	mov	r2, r3
 800173e:	2105      	movs	r1, #5
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fc5a 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

    // gyro
    setBank(1);
 8001746:	2101      	movs	r1, #1
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fc7f 	bl	800104c <_ZN3IMU7setBankEh>

    uint8_t reg0C;
    readRegisters(0x0C, 1, &reg0C);
 800174e:	f107 0311 	add.w	r3, r7, #17
 8001752:	2201      	movs	r2, #1
 8001754:	210c      	movs	r1, #12
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fbda 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    reg0C &= ~0x3F;                        // Clear bits 5:0
 800175c:	7c7b      	ldrb	r3, [r7, #17]
 800175e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001762:	b2db      	uxtb	r3, r3
 8001764:	747b      	strb	r3, [r7, #17]
    reg0C |= (cfg->delt & 0x3F);           // GYRO_AAF_DELT
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	789b      	ldrb	r3, [r3, #2]
 800176a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800176e:	b2da      	uxtb	r2, r3
 8001770:	7c7b      	ldrb	r3, [r7, #17]
 8001772:	4313      	orrs	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	747b      	strb	r3, [r7, #17]
    writeRegister(0x0C, reg0C);
 8001778:	7c7b      	ldrb	r3, [r7, #17]
 800177a:	461a      	mov	r2, r3
 800177c:	210c      	movs	r1, #12
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fc3b 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

    writeRegister(0x0D, (uint8_t)(cfg->deltsqr & 0xFF));  // Lower 8 bits
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	210d      	movs	r1, #13
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fc33 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>
    uint8_t reg0E;
    readRegisters(0x0E, 1, &reg0E);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2201      	movs	r2, #1
 800179a:	210e      	movs	r1, #14
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fbb7 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    reg0E &= 0x00;                         // Clear bits
 80017a2:	2300      	movs	r3, #0
 80017a4:	743b      	strb	r3, [r7, #16]
    reg0E |= ((cfg->deltsqr >> 8) & 0x0F); // Upper 4 bits
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	7c3b      	ldrb	r3, [r7, #16]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	743b      	strb	r3, [r7, #16]
    reg0E |= (cfg->bitshift << 4) & 0xF0;  // GYRO_AAF_BITSHIFT
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	799b      	ldrb	r3, [r3, #6]
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	7c3b      	ldrb	r3, [r7, #16]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	743b      	strb	r3, [r7, #16]
    writeRegister(0x0E, reg0E);
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	461a      	mov	r2, r3
 80017da:	210e      	movs	r1, #14
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fc0c 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

    uint8_t reg0B;
    readRegisters(0x0B, 1, &reg0B);
 80017e2:	f107 030f 	add.w	r3, r7, #15
 80017e6:	2201      	movs	r2, #1
 80017e8:	210b      	movs	r1, #11
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fb90 	bl	8000f10 <_ZN3IMU13readRegistersEhhPh>
    if (!gyro_enable)
 80017f0:	783b      	ldrb	r3, [r7, #0]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <_ZN3IMU18setAntiAliasFilterEtbb+0x1ac>
        reg0B |= (1 << 1);                 // Disable Gyro AAF
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e004      	b.n	8001812 <_ZN3IMU18setAntiAliasFilterEtbb+0x1b6>
    else
        reg0B &= ~(1 << 1);                // Enable Gyro AAF
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	f023 0302 	bic.w	r3, r3, #2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	73fb      	strb	r3, [r7, #15]
    writeRegister(0x0B, reg0B);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	461a      	mov	r2, r3
 8001816:	210b      	movs	r1, #11
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fbee 	bl	8000ffa <_ZN3IMU13writeRegisterEhh>

    setBank(0);
 800181e:	2100      	movs	r1, #0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fc13 	bl	800104c <_ZN3IMU7setBankEh>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZN3IMU5beginEv>:


int IMU::begin() {
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_csPort, _csPin, GPIO_PIN_SET);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6858      	ldr	r0, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	891b      	ldrh	r3, [r3, #8]
 800183e:	2201      	movs	r2, #1
 8001840:	4619      	mov	r1, r3
 8001842:	f003 f98b 	bl	8004b5c <HAL_GPIO_WritePin>
    reset();
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fc1e 	bl	8001088 <_ZN3IMU5resetEv>
    uint8_t address = whoAmI();
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fc2f 	bl	80010b0 <_ZN3IMU6whoAmIEv>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
    setLowNoiseMode();
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fc09 	bl	800106e <_ZN3IMU15setLowNoiseModeEv>
    setAccelFS(0b01101001);
 800185c:	2169      	movs	r1, #105	@ 0x69
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fcbe 	bl	80011e0 <_ZN3IMU10setAccelFSEh>
    configureNotchFilter();
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fd93 	bl	8001390 <_ZN3IMU20configureNotchFilterEv>
	setAntiAliasFilter(213, true, true);
 800186a:	2301      	movs	r3, #1
 800186c:	2201      	movs	r2, #1
 800186e:	21d5      	movs	r1, #213	@ 0xd5
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fef3 	bl	800165c <_ZN3IMU18setAntiAliasFilterEtbb>
    calibrateGyro();
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fcf0 	bl	800125c <_ZN3IMU13calibrateGyroEv>
    return address;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_>:

void IMU::getAccelGyro(float& ax, float& ay, float& az, float& gx, float& gy, float& gz) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	@ 0x50
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
    uint8_t buffer[14];
    int16_t raw[7];
    float acc_temp[3];
    float gyr_temp[3];
    readAGT(buffer);
 8001896:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800189a:	4619      	mov	r1, r3
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fc17 	bl	80010d0 <_ZN3IMU7readAGTEPh>

    for (int i = 0; i < 7; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018a6:	e01a      	b.n	80018de <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x56>
        raw[i] = ((int16_t)buffer[i*2] << 8) | buffer[i*2+1];
 80018a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	3350      	adds	r3, #80	@ 0x50
 80018ae:	443b      	add	r3, r7
 80018b0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	3301      	adds	r3, #1
 80018be:	3350      	adds	r3, #80	@ 0x50
 80018c0:	443b      	add	r3, r7
 80018c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	3350      	adds	r3, #80	@ 0x50
 80018d2:	443b      	add	r3, r7
 80018d4:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (int i = 0; i < 7; i++)
 80018d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018da:	3301      	adds	r3, #1
 80018dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018e0:	2b06      	cmp	r3, #6
 80018e2:	dde1      	ble.n	80018a8 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x20>

    acc_temp[0] = (float)raw[1] / 2048.0f * 9.81f / 2.0f;
 80018e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001a18 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x190>
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001a1c <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x194>
 80018fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001900:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	edc7 7a08 	vstr	s15, [r7, #32]
    acc_temp[1] = (float)raw[2] / 2048.0f * 9.81f / 2.0f;
 800190c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001918:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001a18 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x190>
 800191c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001920:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001a1c <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x194>
 8001924:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001928:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800192c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001930:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    acc_temp[2] = (float)raw[3] / 2048.0f * 9.81f / 2.0f;
 8001934:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001940:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001a18 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x190>
 8001944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001948:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001a1c <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x194>
 800194c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001950:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    gyr_temp[0] = lowPassFilter((float)raw[4] / 16.4f, 0);
 800195c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001968:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001a20 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x198>
 800196c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001970:	2100      	movs	r1, #0
 8001972:	eeb0 0a47 	vmov.f32	s0, s14
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f7ff fbb9 	bl	80010ee <_ZN3IMU13lowPassFilterEfi>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
 8001980:	edc7 7a05 	vstr	s15, [r7, #20]
    gyr_temp[1] = lowPassFilter((float)raw[5] / 16.4f, 1);
 8001984:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001990:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001a20 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x198>
 8001994:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001998:	2101      	movs	r1, #1
 800199a:	eeb0 0a47 	vmov.f32	s0, s14
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff fba5 	bl	80010ee <_ZN3IMU13lowPassFilterEfi>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	edc7 7a06 	vstr	s15, [r7, #24]
    gyr_temp[2] = lowPassFilter((float)raw[6] / 16.4f, 2);
 80019ac:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001a20 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_+0x198>
 80019bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c0:	2102      	movs	r1, #2
 80019c2:	eeb0 0a47 	vmov.f32	s0, s14
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fb91 	bl	80010ee <_ZN3IMU13lowPassFilterEfi>
 80019cc:	eef0 7a40 	vmov.f32	s15, s0
 80019d0:	edc7 7a07 	vstr	s15, [r7, #28]

    // NED
    ax = (float)acc_temp[1];
 80019d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	601a      	str	r2, [r3, #0]
    ay = (float)acc_temp[0];
 80019da:	6a3a      	ldr	r2, [r7, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
    az = ((float)acc_temp[2]);
 80019e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	601a      	str	r2, [r3, #0]
    gx = ((float)-gyr_temp[1]);
 80019e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ea:	eef1 7a67 	vneg.f32	s15, s15
 80019ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019f0:	edc3 7a00 	vstr	s15, [r3]
    gy = ((float)-gyr_temp[0]);
 80019f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f8:	eef1 7a67 	vneg.f32	s15, s15
 80019fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019fe:	edc3 7a00 	vstr	s15, [r3]
    gz = ((float)-gyr_temp[2]);
 8001a02:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a06:	eef1 7a67 	vneg.f32	s15, s15
 8001a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
}
 8001a10:	bf00      	nop
 8001a12:	3750      	adds	r7, #80	@ 0x50
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	45000000 	.word	0x45000000
 8001a1c:	411cf5c3 	.word	0x411cf5c3
 8001a20:	41833333 	.word	0x41833333

08001a24 <_ZN6MahonyC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Mahony::Mahony()
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
{
	twoKp = twoKpDef;	// 2 * proportional gain (Kp)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <_ZN6MahonyC1Ev+0x64>)
 8001a30:	601a      	str	r2, [r3, #0]
	twoKi = twoKiDef;	// 2 * integral gain (Ki)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a38:	605a      	str	r2, [r3, #4]
	q0 = 1.0f;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a40:	609a      	str	r2, [r3, #8]
	q1 = 0.0f;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
	q2 = 0.0f;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
	q3 = 0.0f;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
	integralFBx = 0.0f;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
	integralFBy = 0.0f;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
	integralFBz = 0.0f;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
	invSampleFreq = 1.0f / DEFAULT_SAMPLE_FREQ;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f04f 526c 	mov.w	r2, #989855744	@ 0x3b000000
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	41f00000 	.word	0x41f00000

08001a8c <_ZN6Mahony9updateIMUEffffff>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Mahony::updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b092      	sub	sp, #72	@ 0x48
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	61f8      	str	r0, [r7, #28]
 8001a94:	ed87 0a06 	vstr	s0, [r7, #24]
 8001a98:	edc7 0a05 	vstr	s1, [r7, #20]
 8001a9c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001aa0:	edc7 1a03 	vstr	s3, [r7, #12]
 8001aa4:	ed87 2a02 	vstr	s4, [r7, #8]
 8001aa8:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8001aac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001d04 <_ZN6Mahony9updateIMUEffffff+0x278>
 8001ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab8:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= 0.0174533f;
 8001abc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac0:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8001d04 <_ZN6Mahony9updateIMUEffffff+0x278>
 8001ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac8:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= 0.0174533f;
 8001acc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad0:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001d04 <_ZN6Mahony9updateIMUEffffff+0x278>
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	edc7 7a04 	vstr	s15, [r7, #16]

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d10e      	bne.n	8001b08 <_ZN6Mahony9updateIMUEffffff+0x7c>
 8001aea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d107      	bne.n	8001b08 <_ZN6Mahony9updateIMUEffffff+0x7c>
 8001af8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001afc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	f000 8133 	beq.w	8001d6e <_ZN6Mahony9updateIMUEffffff+0x2e2>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	f000 faaa 	bl	8002084 <_ZN6Mahony7invSqrtEf>
 8001b30:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8001b34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b38:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8001b44:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b48:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8001b54:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b58:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b60:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q0 * q1 + q2 * q3;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bc8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	edd3 6a05 	vldr	s13, [r3, #20]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8001be4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001be8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf0:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bf4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c00:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8001c04:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c08:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c14:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c20:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8001c24:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c28:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c30:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c34:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c40:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	dd59      	ble.n	8001d08 <_ZN6Mahony9updateIMUEffffff+0x27c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c60:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	edc3 7a06 	vstr	s15, [r3, #24]
			integralFBy += twoKi * halfey * invSampleFreq;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	edc3 7a07 	vstr	s15, [r3, #28]
			integralFBz += twoKi * halfez * invSampleFreq;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cb0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	edc3 7a08 	vstr	s15, [r3, #32]
			gx += integralFBx;	// apply integral feedback
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a04 	vstr	s15, [r7, #16]
 8001d02:	e00d      	b.n	8001d20 <_ZN6Mahony9updateIMUEffffff+0x294>
 8001d04:	3c8efa39 	.word	0x3c8efa39
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
			integralFBy = 0.0f;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
			integralFBz = 0.0f;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	ed93 7a00 	vldr	s14, [r3]
 8001d40:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	ed93 7a00 	vldr	s14, [r3]
 8001d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001d74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * invSampleFreq);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001d8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9e:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * invSampleFreq);
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001da8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q0;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q1;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q2;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	623b      	str	r3, [r7, #32]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dd8:	eef1 6a67 	vneg.f32	s13, s15
 8001ddc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001de4:	ed97 6a08 	vldr	s12, [r7, #32]
 8001de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001df0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	ed93 6a05 	vldr	s12, [r3, #20]
 8001dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	edc3 7a02 	vstr	s15, [r3, #8]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e16:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e22:	ed97 6a08 	vldr	s12, [r7, #32]
 8001e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	ed93 6a05 	vldr	s12, [r3, #20]
 8001e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	edc3 7a03 	vstr	s15, [r3, #12]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e54:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e60:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001e64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	ed93 6a05 	vldr	s12, [r3, #20]
 8001e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	edc3 7a04 	vstr	s15, [r3, #16]
	q3 += (qa * gz + qb * gy - qc * gx);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e92:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e9e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eae:	ed97 6a08 	vldr	s12, [r7, #32]
 8001eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	edc3 7a05 	vstr	s15, [r3, #20]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	edd3 6a05 	vldr	s13, [r3, #20]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	f000 f8b4 	bl	8002084 <_ZN6Mahony7invSqrtEf>
 8001f1c:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q0 *= recipNorm;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f26:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	edc3 7a02 	vstr	s15, [r3, #8]
	q1 *= recipNorm;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f3a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	edc3 7a03 	vstr	s15, [r3, #12]
	q2 *= recipNorm;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f4e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	edc3 7a04 	vstr	s15, [r3, #16]
	q3 *= recipNorm;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f62:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	edc3 7a05 	vstr	s15, [r3, #20]

	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	edd3 6a04 	vldr	s13, [r3, #16]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc0:	eef0 0a67 	vmov.f32	s1, s15
 8001fc4:	eeb0 0a46 	vmov.f32	s0, s12
 8001fc8:	f006 fc52 	bl	8008870 <atan2f>
 8001fcc:	eef0 7a40 	vmov.f32	s15, s0
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffa:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	f006 fc07 	bl	8008818 <asinf>
 800200a:	eef0 7a40 	vmov.f32	s15, s0
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	ed93 7a03 	vldr	s14, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	edd3 6a02 	vldr	s13, [r3, #8]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002034:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	ed93 7a04 	vldr	s14, [r3, #16]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	edd3 7a04 	vldr	s15, [r3, #16]
 8002044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002048:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800204c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	edd3 6a05 	vldr	s13, [r3, #20]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	edd3 7a05 	vldr	s15, [r3, #20]
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	eef0 0a67 	vmov.f32	s1, s15
 8002068:	eeb0 0a46 	vmov.f32	s0, s12
 800206c:	f006 fc00 	bl	8008870 <atan2f>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800207a:	bf00      	nop
 800207c:	3748      	adds	r7, #72	@ 0x48
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop

08002084 <_ZN6Mahony7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root

float Mahony::invSqrt(float x)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800208e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002092:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209a:	edc7 7a05 	vstr	s15, [r7, #20]
	union { float f; long l; } i;
	i.f = x;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
	i.l = 0x5f3759df - (i.l >> 1);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	105a      	asrs	r2, r3, #1
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <_ZN6Mahony7invSqrtEf+0x90>)
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
	float y = i.f;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80020b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80020d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80020dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80020f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80020f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
}
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	5f3759df 	.word	0x5f3759df

08002118 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002124:	4907      	ldr	r1, [pc, #28]	@ (8002144 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800212e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4013      	ands	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000

08002148 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002152:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002154:	4907      	ldr	r1, [pc, #28]	@ (8002174 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <LL_APB1_GRP2_EnableClock+0x2c>)
 800215e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40021000 	.word	0x40021000

08002178 <_ZN6Mahony7getRollEv>:

public:
	Mahony();
	void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
	void updateIMU(float gx, float gy, float gz, float ax, float ay, float az);
	float getRoll() {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
		return roll * 57.29578f;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002186:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800219c <_ZN6Mahony7getRollEv+0x24>
 800218a:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	42652ee1 	.word	0x42652ee1

080021a0 <_ZN6Mahony8getPitchEv>:
	float getPitch() {
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
		return pitch * 57.29578f;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80021ae:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80021c4 <_ZN6Mahony8getPitchEv+0x24>
 80021b2:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
 80021b6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	42652ee1 	.word	0x42652ee1

080021c8 <_ZN6Mahony6getYawEv>:
	float getYaw() {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
		return yaw * 57.29578f + 180.0f;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80021d6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80021f4 <_ZN6Mahony6getYawEv+0x2c>
 80021da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80021f8 <_ZN6Mahony6getYawEv+0x30>
 80021e2:	ee77 7a87 	vadd.f32	s15, s15, s14
	}
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	42652ee1 	.word	0x42652ee1
 80021f8:	43340000 	.word	0x43340000

080021fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0a2      	sub	sp, #136	@ 0x88
 8002200:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002202:	f001 f959 	bl	80034b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002206:	f000 f8b5 	bl	8002374 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220a:	f000 fb27 	bl	800285c <_ZL12MX_GPIO_Initv>
  MX_ICACHE_Init();
 800220e:	f000 f9ad 	bl	800256c <_ZL14MX_ICACHE_Initv>
  MX_ADC1_Init();
 8002212:	f000 f925 	bl	8002460 <_ZL12MX_ADC1_Initv>
  MX_RTC_Init();
 8002216:	f000 f9c7 	bl	80025a8 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 800221a:	f000 fa19 	bl	8002650 <_ZL12MX_SPI1_Initv>
  MX_UCPD1_Init();
 800221e:	f000 fa59 	bl	80026d4 <_ZL13MX_UCPD1_Initv>
  MX_USART2_UART_Init();
 8002222:	f000 fa8d 	bl	8002740 <_ZL19MX_USART2_UART_Initv>
  MX_USB_PCD_Init();
 8002226:	f000 faeb 	bl	8002800 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  	IMU imu(&hspi1, GPIOA, GPIO_PIN_4);
 800222a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800222e:	2310      	movs	r3, #16
 8002230:	4a44      	ldr	r2, [pc, #272]	@ (8002344 <main+0x148>)
 8002232:	4945      	ldr	r1, [pc, #276]	@ (8002348 <main+0x14c>)
 8002234:	f7fe fe1e 	bl	8000e74 <_ZN3IMUC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
	Mahony ahrs;
 8002238:	463b      	mov	r3, r7
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fbf2 	bl	8001a24 <_ZN6MahonyC1Ev>
	uint8_t addr = imu.begin();
 8002240:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff faf2 	bl	800182e <_ZN3IMU5beginEv>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8002250:	2000      	movs	r0, #0
 8002252:	f000 fe89 	bl	8002f68 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8002256:	2001      	movs	r0, #1
 8002258:	f000 fe86 	bl	8002f68 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800225c:	2002      	movs	r0, #2
 800225e:	f000 fe83 	bl	8002f68 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002262:	2101      	movs	r1, #1
 8002264:	2000      	movs	r0, #0
 8002266:	f000 fedd 	bl	8003024 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800226a:	4b38      	ldr	r3, [pc, #224]	@ (800234c <main+0x150>)
 800226c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002270:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8002272:	4b36      	ldr	r3, [pc, #216]	@ (800234c <main+0x150>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <main+0x150>)
 800227a:	2200      	movs	r2, #0
 800227c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800227e:	4b33      	ldr	r3, [pc, #204]	@ (800234c <main+0x150>)
 8002280:	2200      	movs	r2, #0
 8002282:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <main+0x150>)
 8002286:	2200      	movs	r2, #0
 8002288:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800228a:	4930      	ldr	r1, [pc, #192]	@ (800234c <main+0x150>)
 800228c:	2000      	movs	r0, #0
 800228e:	f000 ff85 	bl	800319c <BSP_COM_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <main+0xaa>
  {
    Error_Handler();
 80022a2:	f000 fb5f 	bl	8002964 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  imu.getAccelGyro(ax, ay, az, gx, gy, gz);
 80022a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <main+0x154>)
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <main+0x158>)
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <main+0x15c>)
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4b29      	ldr	r3, [pc, #164]	@ (800235c <main+0x160>)
 80022b8:	4a29      	ldr	r2, [pc, #164]	@ (8002360 <main+0x164>)
 80022ba:	492a      	ldr	r1, [pc, #168]	@ (8002364 <main+0x168>)
 80022bc:	f7ff fae4 	bl	8001888 <_ZN3IMU12getAccelGyroERfS0_S0_S0_S0_S0_>
	  ahrs.updateIMU(gx, gy, gz, ax, ay, az);
 80022c0:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <main+0x15c>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <main+0x158>)
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <main+0x154>)
 80022ce:	edd3 6a00 	vldr	s13, [r3]
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <main+0x168>)
 80022d4:	ed93 6a00 	vldr	s12, [r3]
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <main+0x164>)
 80022da:	edd3 5a00 	vldr	s11, [r3]
 80022de:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <main+0x160>)
 80022e0:	ed93 5a00 	vldr	s10, [r3]
 80022e4:	463b      	mov	r3, r7
 80022e6:	eef0 2a45 	vmov.f32	s5, s10
 80022ea:	eeb0 2a65 	vmov.f32	s4, s11
 80022ee:	eef0 1a46 	vmov.f32	s3, s12
 80022f2:	eeb0 1a66 	vmov.f32	s2, s13
 80022f6:	eef0 0a47 	vmov.f32	s1, s14
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fbc4 	bl	8001a8c <_ZN6Mahony9updateIMUEffffff>
	  test_roll = ahrs.getRoll();
 8002304:	463b      	mov	r3, r7
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff36 	bl	8002178 <_ZN6Mahony7getRollEv>
 800230c:	eef0 7a40 	vmov.f32	s15, s0
 8002310:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <main+0x16c>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
	  test_pitch = ahrs.getPitch();
 8002316:	463b      	mov	r3, r7
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff41 	bl	80021a0 <_ZN6Mahony8getPitchEv>
 800231e:	eef0 7a40 	vmov.f32	s15, s0
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <main+0x170>)
 8002324:	edc3 7a00 	vstr	s15, [r3]
	  test_yaw = ahrs.getYaw();
 8002328:	463b      	mov	r3, r7
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff4c 	bl	80021c8 <_ZN6Mahony6getYawEv>
 8002330:	eef0 7a40 	vmov.f32	s15, s0
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <main+0x174>)
 8002336:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(50);
 800233a:	2032      	movs	r0, #50	@ 0x32
 800233c:	f001 f932 	bl	80035a4 <HAL_Delay>
	  imu.getAccelGyro(ax, ay, az, gx, gy, gz);
 8002340:	bf00      	nop
 8002342:	e7b0      	b.n	80022a6 <main+0xaa>
 8002344:	42020000 	.word	0x42020000
 8002348:	20000140 	.word	0x20000140
 800234c:	200000a0 	.word	0x200000a0
 8002350:	20000534 	.word	0x20000534
 8002354:	20000530 	.word	0x20000530
 8002358:	2000052c 	.word	0x2000052c
 800235c:	20000528 	.word	0x20000528
 8002360:	20000524 	.word	0x20000524
 8002364:	20000520 	.word	0x20000520
 8002368:	20000514 	.word	0x20000514
 800236c:	20000518 	.word	0x20000518
 8002370:	2000051c 	.word	0x2000051c

08002374 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b098      	sub	sp, #96	@ 0x60
 8002378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237a:	f107 0318 	add.w	r3, r7, #24
 800237e:	2248      	movs	r2, #72	@ 0x48
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f007 fd08 	bl	8009d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002396:	2000      	movs	r0, #0
 8002398:	f002 fd3e 	bl	8004e18 <HAL_PWREx_ControlVoltageScaling>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80023ac:	f000 fada 	bl	8002964 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023b0:	f002 fd14 	bl	8004ddc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023b4:	4b29      	ldr	r3, [pc, #164]	@ (800245c <_Z18SystemClock_Configv+0xe8>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	4a28      	ldr	r2, [pc, #160]	@ (800245c <_Z18SystemClock_Configv+0xe8>)
 80023bc:	f023 0318 	bic.w	r3, r3, #24
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80023c4:	2336      	movs	r3, #54	@ 0x36
 80023c6:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023c8:	2381      	movs	r3, #129	@ 0x81
 80023ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023d2:	2301      	movs	r3, #1
 80023d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d6:	2340      	movs	r3, #64	@ 0x40
 80023d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023da:	2301      	movs	r3, #1
 80023dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80023de:	2300      	movs	r3, #0
 80023e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023e2:	2360      	movs	r3, #96	@ 0x60
 80023e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e6:	2302      	movs	r3, #2
 80023e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80023ea:	2301      	movs	r3, #1
 80023ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80023f2:	2337      	movs	r3, #55	@ 0x37
 80023f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80023f6:	2307      	movs	r3, #7
 80023f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023fa:	2302      	movs	r3, #2
 80023fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023fe:	2302      	movs	r3, #2
 8002400:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002402:	f107 0318 	add.w	r3, r7, #24
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fda6 	bl	8004f58 <HAL_RCC_OscConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 800241c:	f000 faa2 	bl	8002964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002420:	230f      	movs	r3, #15
 8002422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002424:	2303      	movs	r3, #3
 8002426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	2105      	movs	r1, #5
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fa63 	bl	8005904 <HAL_RCC_ClockConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800244e:	f000 fa89 	bl	8002964 <Error_Handler>
  }
}
 8002452:	bf00      	nop
 8002454:	3760      	adds	r7, #96	@ 0x60
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002482:	4b37      	ldr	r3, [pc, #220]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 8002484:	4a37      	ldr	r2, [pc, #220]	@ (8002564 <_ZL12MX_ADC1_Initv+0x104>)
 8002486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002488:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800248e:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002494:	4b32      	ldr	r3, [pc, #200]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024a2:	2204      	movs	r2, #4
 80024a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80024b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024b8:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024c6:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024d4:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024e2:	481f      	ldr	r0, [pc, #124]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 80024e4:	f001 fa22 	bl	800392c <HAL_ADC_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80024f8:	f000 fa34 	bl	8002964 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	4619      	mov	r1, r3
 8002506:	4816      	ldr	r0, [pc, #88]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 8002508:	f001 ff6c 	bl	80043e4 <HAL_ADCEx_MultiModeConfigChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800251c:	f000 fa22 	bl	8002964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <_ZL12MX_ADC1_Initv+0x108>)
 8002522:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002524:	2306      	movs	r3, #6
 8002526:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800252c:	237f      	movs	r3, #127	@ 0x7f
 800252e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002530:	2304      	movs	r3, #4
 8002532:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4808      	ldr	r0, [pc, #32]	@ (8002560 <_ZL12MX_ADC1_Initv+0x100>)
 800253e:	f001 fb41 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8002552:	f000 fa07 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	@ 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200000b0 	.word	0x200000b0
 8002564:	42028000 	.word	0x42028000
 8002568:	0c900008 	.word	0x0c900008

0800256c <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002570:	2000      	movs	r0, #0
 8002572:	f002 fb0b 	bl	8004b8c <HAL_ICACHE_ConfigAssociativityMode>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8002586:	f000 f9ed 	bl	8002964 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800258a:	f002 fb1f 	bl	8004bcc <HAL_ICACHE_Enable>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800259e:	f000 f9e1 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80025ae:	463b      	mov	r3, r7
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025be:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025c0:	4a22      	ldr	r2, [pc, #136]	@ (800264c <_ZL11MX_RTC_Initv+0xa4>)
 80025c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025c4:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025cc:	227f      	movs	r2, #127	@ 0x7f
 80025ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025d2:	22ff      	movs	r2, #255	@ 0xff
 80025d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025e2:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025e8:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80025f0:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025f6:	4814      	ldr	r0, [pc, #80]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 80025f8:	f004 f97e 	bl	80068f8 <HAL_RTC_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 800260c:	f000 f9aa 	bl	8002964 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002610:	2300      	movs	r3, #0
 8002612:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002620:	463b      	mov	r3, r7
 8002622:	4619      	mov	r1, r3
 8002624:	4808      	ldr	r0, [pc, #32]	@ (8002648 <_ZL11MX_RTC_Initv+0xa0>)
 8002626:	f004 fa75 	bl	8006b14 <HAL_RTCEx_PrivilegeModeSet>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 800263a:	f000 f993 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000118 	.word	0x20000118
 800264c:	40002800 	.word	0x40002800

08002650 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002656:	4a1e      	ldr	r2, [pc, #120]	@ (80026d0 <_ZL12MX_SPI1_Initv+0x80>)
 8002658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800265a:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 800265c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002662:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002668:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 800266a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800266e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002670:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800267c:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 800267e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002686:	2218      	movs	r2, #24
 8002688:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002690:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 800269e:	2207      	movs	r2, #7
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 80026aa:	2208      	movs	r2, #8
 80026ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026ae:	4807      	ldr	r0, [pc, #28]	@ (80026cc <_ZL12MX_SPI1_Initv+0x7c>)
 80026b0:	f004 fa5c 	bl	8006b6c <HAL_SPI_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80026c4:	f000 f94e 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000140 	.word	0x20000140
 80026d0:	40013000 	.word	0x40013000

080026d4 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	463b      	mov	r3, r7
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80026ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80026ee:	f7ff fd2b 	bl	8002148 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7ff fd10 	bl	8002118 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7ff fd0d 	bl	8002118 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80026fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002702:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002704:	2303      	movs	r3, #3
 8002706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	4809      	ldr	r0, [pc, #36]	@ (8002738 <_ZL13MX_UCPD1_Initv+0x64>)
 8002712:	f005 ff86 	bl	8008622 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800271a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800271c:	2303      	movs	r3, #3
 800271e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	463b      	mov	r3, r7
 8002726:	4619      	mov	r1, r3
 8002728:	4804      	ldr	r0, [pc, #16]	@ (800273c <_ZL13MX_UCPD1_Initv+0x68>)
 800272a:	f005 ff7a 	bl	8008622 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	42020400 	.word	0x42020400
 800273c:	42020000 	.word	0x42020000

08002740 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002744:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002746:	4a2d      	ldr	r2, [pc, #180]	@ (80027fc <_ZL19MX_USART2_UART_Initv+0xbc>)
 8002748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800274a:	4b2b      	ldr	r3, [pc, #172]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800274c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002752:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800275e:	4b26      	ldr	r3, [pc, #152]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002764:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002766:	220c      	movs	r2, #12
 8002768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276a:	4b23      	ldr	r3, [pc, #140]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002770:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800277c:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002782:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002784:	2200      	movs	r2, #0
 8002786:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002788:	481b      	ldr	r0, [pc, #108]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800278a:	f004 ff8d 	bl	80076a8 <HAL_UART_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800279e:	f000 f8e1 	bl	8002964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a2:	2100      	movs	r1, #0
 80027a4:	4814      	ldr	r0, [pc, #80]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80027a6:	f005 fd27 	bl	80081f8 <HAL_UARTEx_SetTxFifoThreshold>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80027ba:	f000 f8d3 	bl	8002964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027be:	2100      	movs	r1, #0
 80027c0:	480d      	ldr	r0, [pc, #52]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80027c2:	f005 fd57 	bl	8008274 <HAL_UARTEx_SetRxFifoThreshold>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80027d6:	f000 f8c5 	bl	8002964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027da:	4807      	ldr	r0, [pc, #28]	@ (80027f8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80027dc:	f005 fcd3 	bl	8008186 <HAL_UARTEx_DisableFifoMode>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80027f0:	f000 f8b8 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200001a4 	.word	0x200001a4
 80027fc:	40004400 	.word	0x40004400

08002800 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002806:	4a14      	ldr	r2, [pc, #80]	@ (8002858 <_ZL15MX_USB_PCD_Initv+0x58>)
 8002808:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 800280c:	2208      	movs	r2, #8
 800280e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002810:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002812:	2202      	movs	r2, #2
 8002814:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002816:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002818:	2202      	movs	r2, #2
 800281a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800281c:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 800281e:	2200      	movs	r2, #0
 8002820:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002822:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002824:	2200      	movs	r2, #0
 8002826:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002828:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 800282a:	2200      	movs	r2, #0
 800282c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002830:	2200      	movs	r2, #0
 8002832:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002834:	4807      	ldr	r0, [pc, #28]	@ (8002854 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002836:	f002 f9d9 	bl	8004bec <HAL_PCD_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 800284a:	f000 f88b 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000238 	.word	0x20000238
 8002858:	4000d400 	.word	0x4000d400

0800285c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287e:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288e:	4a31      	ldr	r2, [pc, #196]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002896:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ae:	4b29      	ldr	r3, [pc, #164]	@ (8002954 <_ZL12MX_GPIO_Initv+0xf8>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80028c0:	4825      	ldr	r0, [pc, #148]	@ (8002958 <_ZL12MX_GPIO_Initv+0xfc>)
 80028c2:	f002 f94b 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	4824      	ldr	r0, [pc, #144]	@ (800295c <_ZL12MX_GPIO_Initv+0x100>)
 80028cc:	f002 f946 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	21a0      	movs	r1, #160	@ 0xa0
 80028d4:	4822      	ldr	r0, [pc, #136]	@ (8002960 <_ZL12MX_GPIO_Initv+0x104>)
 80028d6:	f002 f941 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80028da:	f44f 7304 	mov.w	r3, #528	@ 0x210
 80028de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	4619      	mov	r1, r3
 80028f2:	4819      	ldr	r0, [pc, #100]	@ (8002958 <_ZL12MX_GPIO_Initv+0xfc>)
 80028f4:	f001 ffb2 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4619      	mov	r1, r3
 800290e:	4814      	ldr	r0, [pc, #80]	@ (8002960 <_ZL12MX_GPIO_Initv+0x104>)
 8002910:	f001 ffa4 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4619      	mov	r1, r3
 800292a:	480c      	ldr	r0, [pc, #48]	@ (800295c <_ZL12MX_GPIO_Initv+0x100>)
 800292c:	f001 ff96 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002930:	23a0      	movs	r3, #160	@ 0xa0
 8002932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4619      	mov	r1, r3
 8002946:	4806      	ldr	r0, [pc, #24]	@ (8002960 <_ZL12MX_GPIO_Initv+0x104>)
 8002948:	f001 ff88 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800294c:	bf00      	nop
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	42020000 	.word	0x42020000
 800295c:	42020800 	.word	0x42020800
 8002960:	42020400 	.word	0x42020400

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800296c:	bf00      	nop
 800296e:	e7fd      	b.n	800296c <Error_Handler+0x8>

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_MspInit+0x44>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <HAL_MspInit+0x44>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6613      	str	r3, [r2, #96]	@ 0x60
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_MspInit+0x44>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_MspInit+0x44>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_MspInit+0x44>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6593      	str	r3, [r2, #88]	@ 0x58
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_MspInit+0x44>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b0ae      	sub	sp, #184	@ 0xb8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2294      	movs	r2, #148	@ 0x94
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f007 f9dd 	bl	8009d98 <memset>
  if(hadc->Instance==ADC1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_ADC_MspInit+0xa8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d137      	bne.n	8002a58 <HAL_ADC_MspInit+0xa0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80029ee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80029f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fa66 	bl	8005ecc <HAL_RCCEx_PeriphCLKConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002a06:	f7ff ffad 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_ADC_MspInit+0xac>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	4a15      	ldr	r2, [pc, #84]	@ (8002a64 <HAL_ADC_MspInit+0xac>)
 8002a10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a16:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <HAL_ADC_MspInit+0xac>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_ADC_MspInit+0xac>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <HAL_ADC_MspInit+0xac>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_ADC_MspInit+0xac>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a40:	2303      	movs	r3, #3
 8002a42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <HAL_ADC_MspInit+0xb0>)
 8002a54:	f001 ff02 	bl	800485c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a58:	bf00      	nop
 8002a5a:	37b8      	adds	r7, #184	@ 0xb8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	42028000 	.word	0x42028000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	42020800 	.word	0x42020800

08002a6c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0a8      	sub	sp, #160	@ 0xa0
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	2294      	movs	r2, #148	@ 0x94
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f007 f98b 	bl	8009d98 <memset>
  if(hrtc->Instance==RTC)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <HAL_RTC_MspInit+0x74>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d124      	bne.n	8002ad6 <HAL_RTC_MspInit+0x6a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a90:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 fa14 	bl	8005ecc <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002aaa:	f7ff ff5b 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <HAL_RTC_MspInit+0x78>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae4 <HAL_RTC_MspInit+0x78>)
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_RTC_MspInit+0x78>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	4a08      	ldr	r2, [pc, #32]	@ (8002ae4 <HAL_RTC_MspInit+0x78>)
 8002ac4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RTC_MspInit+0x78>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002ad6:	bf00      	nop
 8002ad8:	37a0      	adds	r7, #160	@ 0xa0
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40002800 	.word	0x40002800
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a17      	ldr	r2, [pc, #92]	@ (8002b64 <HAL_SPI_MspInit+0x7c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d127      	bne.n	8002b5a <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0a:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <HAL_SPI_MspInit+0x80>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	4a16      	ldr	r2, [pc, #88]	@ (8002b68 <HAL_SPI_MspInit+0x80>)
 8002b10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <HAL_SPI_MspInit+0x80>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <HAL_SPI_MspInit+0x80>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	4a10      	ldr	r2, [pc, #64]	@ (8002b68 <HAL_SPI_MspInit+0x80>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <HAL_SPI_MspInit+0x80>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002b3a:	23c2      	movs	r3, #194	@ 0xc2
 8002b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	4619      	mov	r1, r3
 8002b54:	4805      	ldr	r0, [pc, #20]	@ (8002b6c <HAL_SPI_MspInit+0x84>)
 8002b56:	f001 fe81 	bl	800485c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	@ 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40013000 	.word	0x40013000
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	42020000 	.word	0x42020000

08002b70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0ae      	sub	sp, #184	@ 0xb8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	2294      	movs	r2, #148	@ 0x94
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f007 f901 	bl	8009d98 <memset>
  if(huart->Instance==USART2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	@ (8002c20 <HAL_UART_MspInit+0xb0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d13a      	bne.n	8002c16 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 f98d 	bl	8005ecc <HAL_RCCEx_PeriphCLKConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bb8:	f7ff fed4 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_UART_MspInit+0xb4>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_UART_MspInit+0xb4>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc8:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <HAL_UART_MspInit+0xb4>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_UART_MspInit+0xb4>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd8:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <HAL_UART_MspInit+0xb4>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_UART_MspInit+0xb4>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bec:	230c      	movs	r3, #12
 8002bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c04:	2307      	movs	r3, #7
 8002c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <HAL_UART_MspInit+0xb8>)
 8002c12:	f001 fe23 	bl	800485c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c16:	bf00      	nop
 8002c18:	37b8      	adds	r7, #184	@ 0xb8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40004400 	.word	0x40004400
 8002c24:	40021000 	.word	0x40021000
 8002c28:	42020000 	.word	0x42020000

08002c2c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0b0      	sub	sp, #192	@ 0xc0
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	2294      	movs	r2, #148	@ 0x94
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f007 f8a3 	bl	8009d98 <memset>
  if(hpcd->Instance==USB)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a31      	ldr	r2, [pc, #196]	@ (8002d1c <HAL_PCD_MspInit+0xf0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d15a      	bne.n	8002d12 <HAL_PCD_MspInit+0xe6>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c68:	f107 0318 	add.w	r3, r7, #24
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 f92d 	bl	8005ecc <HAL_RCCEx_PeriphCLKConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002c78:	f7ff fe74 	bl	8002964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c80:	4a27      	ldr	r2, [pc, #156]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c88:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c94:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002cae:	230a      	movs	r3, #10
 8002cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481a      	ldr	r0, [pc, #104]	@ (8002d24 <HAL_PCD_MspInit+0xf8>)
 8002cbc:	f001 fdce 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002cc0:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	4a16      	ldr	r2, [pc, #88]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002cc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d114      	bne.n	8002d0e <HAL_PCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002cfc:	f002 f8e8 	bl	8004ed0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	4a06      	ldr	r2, [pc, #24]	@ (8002d20 <HAL_PCD_MspInit+0xf4>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_MspInit 1 */

  }

}
 8002d0c:	e001      	b.n	8002d12 <HAL_PCD_MspInit+0xe6>
      HAL_PWREx_EnableVddUSB();
 8002d0e:	f002 f8df 	bl	8004ed0 <HAL_PWREx_EnableVddUSB>
}
 8002d12:	bf00      	nop
 8002d14:	37c0      	adds	r7, #192	@ 0xc0
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	4000d400 	.word	0x4000d400
 8002d20:	40021000 	.word	0x40021000
 8002d24:	42020000 	.word	0x42020000

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <NMI_Handler+0x4>

08002d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <HardFault_Handler+0x4>

08002d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <MemManage_Handler+0x4>

08002d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <BusFault_Handler+0x4>

08002d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <UsageFault_Handler+0x4>

08002d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7e:	f000 fbf1 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f000 f9f0 	bl	8003170 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <SystemInit+0x20>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	4a05      	ldr	r2, [pc, #20]	@ (8002db4 <SystemInit+0x20>)
 8002da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8002dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002dca:	4b4c      	ldr	r3, [pc, #304]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e005      	b.n	8002de6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002dda:	4b48      	ldr	r3, [pc, #288]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002de6:	4a46      	ldr	r2, [pc, #280]	@ (8002f00 <SystemCoreClockUpdate+0x148>)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df0:	4b42      	ldr	r3, [pc, #264]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d866      	bhi.n	8002eca <SystemCoreClockUpdate+0x112>
 8002dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <SystemCoreClockUpdate+0x4c>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002ecb 	.word	0x08002ecb
 8002e0c:	08002ecb 	.word	0x08002ecb
 8002e10:	08002ecb 	.word	0x08002ecb
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002ecb 	.word	0x08002ecb
 8002e1c:	08002ecb 	.word	0x08002ecb
 8002e20:	08002ecb 	.word	0x08002ecb
 8002e24:	08002e49 	.word	0x08002e49
 8002e28:	08002ecb 	.word	0x08002ecb
 8002e2c:	08002ecb 	.word	0x08002ecb
 8002e30:	08002ecb 	.word	0x08002ecb
 8002e34:	08002e51 	.word	0x08002e51
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002e38:	4a32      	ldr	r2, [pc, #200]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	6013      	str	r3, [r2, #0]
      break;
 8002e3e:	e048      	b.n	8002ed2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002e40:	4b30      	ldr	r3, [pc, #192]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002e42:	4a31      	ldr	r2, [pc, #196]	@ (8002f08 <SystemCoreClockUpdate+0x150>)
 8002e44:	601a      	str	r2, [r3, #0]
      break;
 8002e46:	e044      	b.n	8002ed2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002e48:	4b2e      	ldr	r3, [pc, #184]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002e4a:	4a30      	ldr	r2, [pc, #192]	@ (8002f0c <SystemCoreClockUpdate+0x154>)
 8002e4c:	601a      	str	r2, [r3, #0]
      break;
 8002e4e:	e040      	b.n	8002ed2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e50:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002e5a:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	3301      	adds	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d003      	beq.n	8002e76 <SystemCoreClockUpdate+0xbe>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d006      	beq.n	8002e82 <SystemCoreClockUpdate+0xca>
 8002e74:	e00b      	b.n	8002e8e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002e76:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <SystemCoreClockUpdate+0x150>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	613b      	str	r3, [r7, #16]
          break;
 8002e80:	e00b      	b.n	8002e9a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002e82:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <SystemCoreClockUpdate+0x154>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	613b      	str	r3, [r7, #16]
          break;
 8002e8c:	e005      	b.n	8002e9a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	613b      	str	r3, [r7, #16]
          break;
 8002e98:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0e5b      	lsrs	r3, r3, #25
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002ec6:	6013      	str	r3, [r2, #0]
      break;
 8002ec8:	e003      	b.n	8002ed2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002eca:	4a0e      	ldr	r2, [pc, #56]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	6013      	str	r3, [r2, #0]
      break;
 8002ed0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <SystemCoreClockUpdate+0x144>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <SystemCoreClockUpdate+0x158>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <SystemCoreClockUpdate+0x14c>)
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	0800a054 	.word	0x0800a054
 8002f04:	20000000 	.word	0x20000000
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200
 8002f10:	0800a03c 	.word	0x0800a03c

08002f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f18:	f7ff ff3c 	bl	8002d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f1e:	e003      	b.n	8002f28 <LoopCopyDataInit>

08002f20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f26:	3104      	adds	r1, #4

08002f28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f28:	480a      	ldr	r0, [pc, #40]	@ (8002f54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f30:	d3f6      	bcc.n	8002f20 <CopyDataInit>
	ldr	r2, =_sbss
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f34:	e002      	b.n	8002f3c <LoopFillZerobss>

08002f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f38:	f842 3b04 	str.w	r3, [r2], #4

08002f3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <LoopForever+0x16>)
	cmp	r2, r3
 8002f3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f40:	d3f9      	bcc.n	8002f36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f42:	f006 ff37 	bl	8009db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f46:	f7ff f959 	bl	80021fc <main>

08002f4a <LoopForever>:

LoopForever:
    b LoopForever
 8002f4a:	e7fe      	b.n	8002f4a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002f4c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002f50:	0800a2e0 	.word	0x0800a2e0
	ldr	r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f58:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8002f5c:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8002f60:	200007a8 	.word	0x200007a8

08002f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC1_2_IRQHandler>
	...

08002f68 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10c      	bne.n	8002f92 <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8002f78:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7c:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f84:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	e01b      	b.n	8002fca <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10c      	bne.n	8002fb2 <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	e00b      	b.n	8002fca <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8002fb2:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb6:	4a18      	ldr	r2, [pc, #96]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <BSP_LED_Init+0xb0>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4a13      	ldr	r2, [pc, #76]	@ (800301c <BSP_LED_Init+0xb4>)
 8002fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd2:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <BSP_LED_Init+0xb8>)
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	f107 0214 	add.w	r2, r7, #20
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fc34 	bl	800485c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8003020 <BSP_LED_Init+0xb8>)
 8002ff8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	4a07      	ldr	r2, [pc, #28]	@ (800301c <BSP_LED_Init+0xb4>)
 8003000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003004:	2200      	movs	r2, #0
 8003006:	4619      	mov	r1, r3
 8003008:	f001 fda8 	bl	8004b5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3728      	adds	r7, #40	@ 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	20000004 	.word	0x20000004
 8003020:	2000000c 	.word	0x2000000c

08003024 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	@ 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	460a      	mov	r2, r1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	4613      	mov	r3, r2
 8003032:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8003034:	2300      	movs	r3, #0
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8003038:	230f      	movs	r3, #15
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 800303c:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <BSP_PB_Init+0x118>)
 800303e:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8003040:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <BSP_PB_Init+0x11c>)
 8003042:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8003044:	4b3f      	ldr	r3, [pc, #252]	@ (8003144 <BSP_PB_Init+0x120>)
 8003046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003048:	4a3e      	ldr	r2, [pc, #248]	@ (8003144 <BSP_PB_Init+0x120>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003050:	4b3c      	ldr	r3, [pc, #240]	@ (8003144 <BSP_PB_Init+0x120>)
 8003052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4a3a      	ldr	r2, [pc, #232]	@ (8003148 <BSP_PB_Init+0x124>)
 8003060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003064:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 800306a:	2302      	movs	r3, #2
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	4a34      	ldr	r2, [pc, #208]	@ (800314c <BSP_PB_Init+0x128>)
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003080:	f107 0218 	add.w	r2, r7, #24
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fbe8 	bl	800485c <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800308c:	79bb      	ldrb	r3, [r7, #6]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d14f      	bne.n	8003132 <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8003092:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	4a2c      	ldr	r2, [pc, #176]	@ (800314c <BSP_PB_Init+0x128>)
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	f107 0218 	add.w	r2, r7, #24
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fbd8 	bl	800485c <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <BSP_PB_Init+0x12c>)
 80030b8:	441a      	add	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3330      	adds	r3, #48	@ 0x30
 80030c0:	443b      	add	r3, r7
 80030c2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f001 fb6a 	bl	80047a2 <HAL_EXTI_GetHandle>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d12b      	bne.n	800312c <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 80030d4:	79fa      	ldrb	r2, [r7, #7]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <BSP_PB_Init+0x12c>)
 80030e0:	1898      	adds	r0, r3, r2
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	3330      	adds	r3, #48	@ 0x30
 80030e8:	443b      	add	r3, r7
 80030ea:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80030ee:	461a      	mov	r2, r3
 80030f0:	2101      	movs	r1, #1
 80030f2:	f001 fb2a 	bl	800474a <HAL_EXTI_RegisterCallback>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d113      	bne.n	8003124 <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <BSP_PB_Init+0x130>)
 8003100:	56d0      	ldrsb	r0, [r2, r3]
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	3330      	adds	r3, #48	@ 0x30
 8003108:	443b      	add	r3, r7
 800310a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800310e:	2200      	movs	r2, #0
 8003110:	4619      	mov	r1, r3
 8003112:	f001 fae6 	bl	80046e2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4a0e      	ldr	r2, [pc, #56]	@ (8003154 <BSP_PB_Init+0x130>)
 800311a:	56d3      	ldrsb	r3, [r2, r3]
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fafa 	bl	8004716 <HAL_NVIC_EnableIRQ>
 8003122:	e006      	b.n	8003132 <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8003124:	f06f 0303 	mvn.w	r3, #3
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312a:	e002      	b.n	8003132 <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 800312c:	f06f 0303 	mvn.w	r3, #3
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003134:	4618      	mov	r0, r3
 8003136:	3730      	adds	r7, #48	@ 0x30
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	0600000d 	.word	0x0600000d
 8003140:	08003309 	.word	0x08003309
 8003144:	40021000 	.word	0x40021000
 8003148:	20000018 	.word	0x20000018
 800314c:	2000001c 	.word	0x2000001c
 8003150:	20000660 	.word	0x20000660
 8003154:	20000020 	.word	0x20000020

08003158 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800317a:	79fa      	ldrb	r2, [r7, #7]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <BSP_PB_IRQHandler+0x28>)
 8003186:	4413      	add	r3, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f001 fb1f 	bl	80047cc <HAL_EXTI_IRQHandler>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000660 	.word	0x20000660

0800319c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80031b2:	f06f 0301 	mvn.w	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e03a      	b.n	8003230 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 80031ba:	79fa      	ldrb	r2, [r7, #7]
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	491f      	ldr	r1, [pc, #124]	@ (800323c <BSP_COM_Init+0xa0>)
 80031c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80031c4:	491e      	ldr	r1, [pc, #120]	@ (8003240 <BSP_COM_Init+0xa4>)
 80031c6:	2094      	movs	r0, #148	@ 0x94
 80031c8:	fb00 f303 	mul.w	r3, r0, r3
 80031cc:	440b      	add	r3, r1
 80031ce:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	2294      	movs	r2, #148	@ 0x94
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <BSP_COM_Init+0xa4>)
 80031da:	4413      	add	r3, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f89b 	bl	8003318 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d123      	bne.n	8003230 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d110      	bne.n	8003210 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2294      	movs	r2, #148	@ 0x94
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <BSP_COM_Init+0xa4>)
 80031f8:	4413      	add	r3, r2
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f821 	bl	8003244 <MX_LPUART1_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8003208:	f06f 0303 	mvn.w	r3, #3
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e00f      	b.n	8003230 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	2294      	movs	r2, #148	@ 0x94
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	4a09      	ldr	r2, [pc, #36]	@ (8003240 <BSP_COM_Init+0xa4>)
 800321a:	4413      	add	r3, r2
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f841 	bl	80032a6 <MX_USART3_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 800322a:	f06f 0303 	mvn.w	r3, #3
 800322e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000024 	.word	0x20000024
 8003240:	20000538 	.word	0x20000538

08003244 <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	891b      	ldrh	r3, [r3, #8]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	895b      	ldrh	r3, [r3, #10]
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	220c      	movs	r2, #12
 8003276:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	899b      	ldrh	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003288:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f004 fa06 	bl	80076a8 <HAL_UART_Init>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	891b      	ldrh	r3, [r3, #8]
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	895b      	ldrh	r3, [r3, #10]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	220c      	movs	r2, #12
 80032d8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	899b      	ldrh	r3, [r3, #12]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80032ea:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f004 f9d5 	bl	80076a8 <HAL_UART_Init>
 80032fe:	4603      	mov	r3, r0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800330c:	2000      	movs	r0, #0
 800330e:	f7ff ff23 	bl	8003158 <BSP_PB_Callback>
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b098      	sub	sp, #96	@ 0x60
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8003320:	4a60      	ldr	r2, [pc, #384]	@ (80034a4 <UART_MspInit+0x18c>)
 8003322:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800332a:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 800332e:	4a5d      	ldr	r2, [pc, #372]	@ (80034a4 <UART_MspInit+0x18c>)
 8003330:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003338:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 800333c:	4b5a      	ldr	r3, [pc, #360]	@ (80034a8 <UART_MspInit+0x190>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8003342:	4b5a      	ldr	r3, [pc, #360]	@ (80034ac <UART_MspInit+0x194>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8003348:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800334c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 800334e:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8003352:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a55      	ldr	r2, [pc, #340]	@ (80034b0 <UART_MspInit+0x198>)
 800335a:	4293      	cmp	r3, r2
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8003368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800336c:	2b00      	cmp	r3, #0
 800336e:	d132      	bne.n	80033d6 <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <UART_MspInit+0x19c>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	4a4f      	ldr	r2, [pc, #316]	@ (80034b4 <UART_MspInit+0x19c>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	@ 0x58
 800337c:	4b4d      	ldr	r3, [pc, #308]	@ (80034b4 <UART_MspInit+0x19c>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8003388:	f001 fdb2 	bl	8004ef0 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 800338c:	4b49      	ldr	r3, [pc, #292]	@ (80034b4 <UART_MspInit+0x19c>)
 800338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003390:	4a48      	ldr	r2, [pc, #288]	@ (80034b4 <UART_MspInit+0x19c>)
 8003392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003398:	4b46      	ldr	r3, [pc, #280]	@ (80034b4 <UART_MspInit+0x19c>)
 800339a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 80033a4:	4b43      	ldr	r3, [pc, #268]	@ (80034b4 <UART_MspInit+0x19c>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a8:	4a42      	ldr	r2, [pc, #264]	@ (80034b4 <UART_MspInit+0x19c>)
 80033aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b0:	4b40      	ldr	r3, [pc, #256]	@ (80034b4 <UART_MspInit+0x19c>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 80033bc:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <UART_MspInit+0x19c>)
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	4a3c      	ldr	r2, [pc, #240]	@ (80034b4 <UART_MspInit+0x19c>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80033c8:	4b3a      	ldr	r3, [pc, #232]	@ (80034b4 <UART_MspInit+0x19c>)
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	e023      	b.n	800341e <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 80033d6:	4b37      	ldr	r3, [pc, #220]	@ (80034b4 <UART_MspInit+0x19c>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	4a36      	ldr	r2, [pc, #216]	@ (80034b4 <UART_MspInit+0x19c>)
 80033dc:	f043 0308 	orr.w	r3, r3, #8
 80033e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033e2:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <UART_MspInit+0x19c>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <UART_MspInit+0x19c>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f2:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <UART_MspInit+0x19c>)
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033fa:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <UART_MspInit+0x19c>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8003406:	4b2b      	ldr	r3, [pc, #172]	@ (80034b4 <UART_MspInit+0x19c>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	4a2a      	ldr	r2, [pc, #168]	@ (80034b4 <UART_MspInit+0x19c>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003410:	6593      	str	r3, [r2, #88]	@ 0x58
 8003412:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <UART_MspInit+0x19c>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 800341e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	3360      	adds	r3, #96	@ 0x60
 8003426:	443b      	add	r3, r7
 8003428:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800342c:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003432:	2302      	movs	r3, #2
 8003434:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 8003436:	2301      	movs	r3, #1
 8003438:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 800343a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800343e:	3360      	adds	r3, #96	@ 0x60
 8003440:	443b      	add	r3, r7
 8003442:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8003446:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8003448:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3360      	adds	r3, #96	@ 0x60
 8003450:	443b      	add	r3, r7
 8003452:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003456:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f9fd 	bl	800485c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8003462:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	3360      	adds	r3, #96	@ 0x60
 800346a:	443b      	add	r3, r7
 800346c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003470:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8003472:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003476:	3360      	adds	r3, #96	@ 0x60
 8003478:	443b      	add	r3, r7
 800347a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800347e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8003480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3360      	adds	r3, #96	@ 0x60
 8003488:	443b      	add	r3, r7
 800348a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800348e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f9e1 	bl	800485c <HAL_GPIO_Init>
}
 800349a:	bf00      	nop
 800349c:	3760      	adds	r7, #96	@ 0x60
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	08009e34 	.word	0x08009e34
 80034a8:	08009e3c 	.word	0x08009e3c
 80034ac:	08009e40 	.word	0x08009e40
 80034b0:	40008000 	.word	0x40008000
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80034c2:	2004      	movs	r0, #4
 80034c4:	f001 f902 	bl	80046cc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80034c8:	f7ff fc76 	bl	8002db8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034cc:	2000      	movs	r0, #0
 80034ce:	f000 f80d 	bl	80034ec <HAL_InitTick>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	71fb      	strb	r3, [r7, #7]
 80034dc:	e001      	b.n	80034e2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034de:	f7ff fa47 	bl	8002970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034e2:	79fb      	ldrb	r3, [r7, #7]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034f8:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <HAL_InitTick+0x6c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d023      	beq.n	8003548 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003500:	4b16      	ldr	r3, [pc, #88]	@ (800355c <HAL_InitTick+0x70>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <HAL_InitTick+0x6c>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800350e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f90b 	bl	8004732 <HAL_SYSTICK_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b07      	cmp	r3, #7
 8003526:	d809      	bhi.n	800353c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003528:	2200      	movs	r2, #0
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f001 f8d7 	bl	80046e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003534:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <HAL_InitTick+0x74>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e007      	b.n	800354c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e004      	b.n	800354c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	e001      	b.n	800354c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000030 	.word	0x20000030
 800355c:	20000000 	.word	0x20000000
 8003560:	2000002c 	.word	0x2000002c

08003564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_IncTick+0x20>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_IncTick+0x24>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4413      	add	r3, r2
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <HAL_IncTick+0x24>)
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000030 	.word	0x20000030
 8003588:	2000066c 	.word	0x2000066c

0800358c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return uwTick;
 8003590:	4b03      	ldr	r3, [pc, #12]	@ (80035a0 <HAL_GetTick+0x14>)
 8003592:	681b      	ldr	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	2000066c 	.word	0x2000066c

080035a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035ac:	f7ff ffee 	bl	800358c <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d005      	beq.n	80035ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <HAL_Delay+0x44>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ca:	bf00      	nop
 80035cc:	f7ff ffde 	bl	800358c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d8f7      	bhi.n	80035cc <HAL_Delay+0x28>
  {
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000030 	.word	0x20000030

080035ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3360      	adds	r3, #96	@ 0x60
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <LL_ADC_SetOffset+0x44>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	4313      	orrs	r3, r2
 8003684:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	03fff000 	.word	0x03fff000

0800369c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3360      	adds	r3, #96	@ 0x60
 80036aa:	461a      	mov	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3360      	adds	r3, #96	@ 0x60
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	615a      	str	r2, [r3, #20]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3330      	adds	r3, #48	@ 0x30
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	4413      	add	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	211f      	movs	r1, #31
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	f003 011f 	and.w	r1, r3, #31
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	431a      	orrs	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3314      	adds	r3, #20
 800378c:	461a      	mov	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0e5b      	lsrs	r3, r3, #25
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	4413      	add	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	0d1b      	lsrs	r3, r3, #20
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2107      	movs	r1, #7
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	0d1b      	lsrs	r3, r3, #20
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	43db      	mvns	r3, r3
 80037ee:	401a      	ands	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0318 	and.w	r3, r3, #24
 80037f6:	4908      	ldr	r1, [pc, #32]	@ (8003818 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037f8:	40d9      	lsrs	r1, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	400b      	ands	r3, r1
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	0007ffff 	.word	0x0007ffff

0800381c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800382c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6093      	str	r3, [r2, #8]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003854:	d101      	bne.n	800385a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003878:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800387c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038a4:	d101      	bne.n	80038aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <LL_ADC_IsEnabled+0x18>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <LL_ADC_IsEnabled+0x1a>
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d101      	bne.n	80038f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d101      	bne.n	800391c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b089      	sub	sp, #36	@ 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e12e      	b.n	8003ba4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff f82f 	bl	80029b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff67 	bl	8003840 <LL_ADC_IsDeepPowerDownEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff4d 	bl	800381c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff82 	bl	8003890 <LL_ADC_IsInternalRegulatorEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff66 	bl	8003868 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800399c:	4b83      	ldr	r3, [pc, #524]	@ (8003bac <HAL_ADC_Init+0x280>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	4a83      	ldr	r2, [pc, #524]	@ (8003bb0 <HAL_ADC_Init+0x284>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	3301      	adds	r3, #1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039b0:	e002      	b.n	80039b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f9      	bne.n	80039b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff64 	bl	8003890 <LL_ADC_IsInternalRegulatorEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	f043 0210 	orr.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff75 	bl	80038de <LL_ADC_REG_IsConversionOngoing>
 80039f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 80c7 	bne.w	8003b92 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80c3 	bne.w	8003b92 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a14:	f043 0202 	orr.w	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff49 	bl	80038b8 <LL_ADC_IsEnabled>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d110      	bne.n	8003a4e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a2c:	4861      	ldr	r0, [pc, #388]	@ (8003bb4 <HAL_ADC_Init+0x288>)
 8003a2e:	f7ff ff43 	bl	80038b8 <LL_ADC_IsEnabled>
 8003a32:	4604      	mov	r4, r0
 8003a34:	4860      	ldr	r0, [pc, #384]	@ (8003bb8 <HAL_ADC_Init+0x28c>)
 8003a36:	f7ff ff3f 	bl	80038b8 <LL_ADC_IsEnabled>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4323      	orrs	r3, r4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4619      	mov	r1, r3
 8003a48:	485c      	ldr	r0, [pc, #368]	@ (8003bbc <HAL_ADC_Init+0x290>)
 8003a4a:	f7ff fdcf 	bl	80035ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7e5b      	ldrb	r3, [r3, #25]
 8003a52:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a58:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a5e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a64:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d106      	bne.n	8003a8a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	3b01      	subs	r3, #1
 8003a82:	045b      	lsls	r3, r3, #17
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	4b44      	ldr	r3, [pc, #272]	@ (8003bc0 <HAL_ADC_Init+0x294>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff20 	bl	8003904 <LL_ADC_INJ_IsConversionOngoing>
 8003ac4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d140      	bne.n	8003b4e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d13d      	bne.n	8003b4e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7e1b      	ldrb	r3, [r3, #24]
 8003ada:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003adc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ae4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003af4:	f023 0306 	bic.w	r3, r3, #6
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	430b      	orrs	r3, r1
 8003b00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d118      	bne.n	8003b3e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b28:	4311      	orrs	r1, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	e007      	b.n	8003b4e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10c      	bne.n	8003b70 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	f023 010f 	bic.w	r1, r3, #15
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b6e:	e007      	b.n	8003b80 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 020f 	bic.w	r2, r2, #15
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	f023 0303 	bic.w	r3, r3, #3
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b90:	e007      	b.n	8003ba2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3724      	adds	r7, #36	@ 0x24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd90      	pop	{r4, r7, pc}
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	053e2d63 	.word	0x053e2d63
 8003bb4:	42028000 	.word	0x42028000
 8003bb8:	42028100 	.word	0x42028100
 8003bbc:	42028300 	.word	0x42028300
 8003bc0:	fff0c007 	.word	0xfff0c007

08003bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b0b7      	sub	sp, #220	@ 0xdc
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x22>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e3c1      	b.n	800436a <HAL_ADC_ConfigChannel+0x7a6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fe73 	bl	80038de <LL_ADC_REG_IsConversionOngoing>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 83a6 	bne.w	800434c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f7ff fd89 	bl	8003724 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fe61 	bl	80038de <LL_ADC_REG_IsConversionOngoing>
 8003c1c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fe6d 	bl	8003904 <LL_ADC_INJ_IsConversionOngoing>
 8003c2a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 81c1 	bne.w	8003fba <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 81bc 	bne.w	8003fba <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c4a:	d10f      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7ff fd90 	bl	800377c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fd4a 	bl	80036fe <LL_ADC_SetSamplingTimeCommonConfig>
 8003c6a:	e00e      	b.n	8003c8a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f7ff fd7f 	bl	800377c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fd3a 	bl	80036fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d00a      	beq.n	8003cc2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6919      	ldr	r1, [r3, #16]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cbc:	f7ff fcca 	bl	8003654 <LL_ADC_SetOffset>
 8003cc0:	e17b      	b.n	8003fba <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fce7 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x12a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fcdc 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	0e9b      	lsrs	r3, r3, #26
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	e01e      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x168>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fcd1 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	e004      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x180>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	e018      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1b2>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e004      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003d6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d106      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fca0 	bl	80036c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fc84 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1f0>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fc79 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	f003 021f 	and.w	r2, r3, #31
 8003db2:	e01e      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x22e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fc6e 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003de2:	2320      	movs	r3, #32
 8003de4:	e004      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8003de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x246>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	0e9b      	lsrs	r3, r3, #26
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	e018      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x278>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003e2e:	2320      	movs	r3, #32
 8003e30:	e004      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8003e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d106      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fc3d 	bl	80036c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fc21 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x2b6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2102      	movs	r1, #2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fc16 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	e01e      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x2f4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fc0b 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	e004      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x30c>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	e016      	b.n	8003efe <HAL_ADC_ConfigChannel+0x33a>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003ee2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e004      	b.n	8003efe <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d106      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fbdc 	bl	80036c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2103      	movs	r1, #3
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fbc0 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x378>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fbb5 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	f003 021f 	and.w	r2, r3, #31
 8003f3a:	e017      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x3a8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2103      	movs	r1, #3
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fbaa 	bl	800369c <LL_ADC_GetOffsetChannel>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f56:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e003      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x3c0>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	e011      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x3e4>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	e003      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d106      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fb87 	bl	80036c8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fc7a 	bl	80038b8 <LL_ADC_IsEnabled>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 81c9 	bne.w	800435e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f7ff fbfb 	bl	80037d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a8f      	ldr	r2, [pc, #572]	@ (8004220 <HAL_ADC_ConfigChannel+0x65c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f040 8131 	bne.w	800424c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x44e>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	3301      	adds	r3, #1
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2b09      	cmp	r3, #9
 8004008:	bf94      	ite	ls
 800400a:	2301      	movls	r3, #1
 800400c:	2300      	movhi	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e019      	b.n	8004046 <HAL_ADC_ConfigChannel+0x482>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004022:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e003      	b.n	8004036 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800402e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2b09      	cmp	r3, #9
 800403e:	bf94      	ite	ls
 8004040:	2301      	movls	r3, #1
 8004042:	2300      	movhi	r3, #0
 8004044:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004046:	2b00      	cmp	r3, #0
 8004048:	d079      	beq.n	800413e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x4a2>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	0e9b      	lsrs	r3, r3, #26
 800405c:	3301      	adds	r3, #1
 800405e:	069b      	lsls	r3, r3, #26
 8004060:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004064:	e015      	b.n	8004092 <HAL_ADC_ConfigChannel+0x4ce>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004076:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800407e:	2320      	movs	r3, #32
 8004080:	e003      	b.n	800408a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	069b      	lsls	r3, r3, #26
 800408e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x4ee>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	0e9b      	lsrs	r3, r3, #26
 80040a4:	3301      	adds	r3, #1
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2101      	movs	r1, #1
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	e017      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x51e>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80040ca:	2320      	movs	r3, #32
 80040cc:	e003      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80040ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	ea42 0103 	orr.w	r1, r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x544>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0e9b      	lsrs	r3, r3, #26
 80040f8:	3301      	adds	r3, #1
 80040fa:	f003 021f 	and.w	r2, r3, #31
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	051b      	lsls	r3, r3, #20
 8004106:	e018      	b.n	800413a <HAL_ADC_ConfigChannel+0x576>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	fa93 f3a3 	rbit	r3, r3
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800411a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004120:	2320      	movs	r3, #32
 8004122:	e003      	b.n	800412c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f003 021f 	and.w	r2, r3, #31
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413a:	430b      	orrs	r3, r1
 800413c:	e081      	b.n	8004242 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004146:	2b00      	cmp	r3, #0
 8004148:	d107      	bne.n	800415a <HAL_ADC_ConfigChannel+0x596>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	0e9b      	lsrs	r3, r3, #26
 8004150:	3301      	adds	r3, #1
 8004152:	069b      	lsls	r3, r3, #26
 8004154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004158:	e015      	b.n	8004186 <HAL_ADC_ConfigChannel+0x5c2>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e003      	b.n	800417e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	3301      	adds	r3, #1
 8004180:	069b      	lsls	r3, r3, #26
 8004182:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x5e2>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e9b      	lsrs	r3, r3, #26
 8004198:	3301      	adds	r3, #1
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	e017      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x612>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	61fb      	str	r3, [r7, #28]
  return result;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80041be:	2320      	movs	r3, #32
 80041c0:	e003      	b.n	80041ca <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	fab3 f383 	clz	r3, r3
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	ea42 0103 	orr.w	r1, r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x63e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0e9b      	lsrs	r3, r3, #26
 80041ec:	3301      	adds	r3, #1
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	3b1e      	subs	r3, #30
 80041fa:	051b      	lsls	r3, r3, #20
 80041fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004200:	e01e      	b.n	8004240 <HAL_ADC_ConfigChannel+0x67c>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	613b      	str	r3, [r7, #16]
  return result;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800421a:	2320      	movs	r3, #32
 800421c:	e006      	b.n	800422c <HAL_ADC_ConfigChannel+0x668>
 800421e:	bf00      	nop
 8004220:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	3b1e      	subs	r3, #30
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004246:	4619      	mov	r1, r3
 8004248:	f7ff fa98 	bl	800377c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b48      	ldr	r3, [pc, #288]	@ (8004374 <HAL_ADC_ConfigChannel+0x7b0>)
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8082 	beq.w	800435e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800425a:	4847      	ldr	r0, [pc, #284]	@ (8004378 <HAL_ADC_ConfigChannel+0x7b4>)
 800425c:	f7ff f9ec 	bl	8003638 <LL_ADC_GetCommonPathInternalCh>
 8004260:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004264:	4845      	ldr	r0, [pc, #276]	@ (800437c <HAL_ADC_ConfigChannel+0x7b8>)
 8004266:	f7ff fb27 	bl	80038b8 <LL_ADC_IsEnabled>
 800426a:	4604      	mov	r4, r0
 800426c:	4844      	ldr	r0, [pc, #272]	@ (8004380 <HAL_ADC_ConfigChannel+0x7bc>)
 800426e:	f7ff fb23 	bl	80038b8 <LL_ADC_IsEnabled>
 8004272:	4603      	mov	r3, r0
 8004274:	4323      	orrs	r3, r4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d15e      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a41      	ldr	r2, [pc, #260]	@ (8004384 <HAL_ADC_ConfigChannel+0x7c0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d127      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d121      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a39      	ldr	r2, [pc, #228]	@ (800437c <HAL_ADC_ConfigChannel+0x7b8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d161      	bne.n	800435e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800429a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800429e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a2:	4619      	mov	r1, r3
 80042a4:	4834      	ldr	r0, [pc, #208]	@ (8004378 <HAL_ADC_ConfigChannel+0x7b4>)
 80042a6:	f7ff f9b4 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042aa:	4b37      	ldr	r3, [pc, #220]	@ (8004388 <HAL_ADC_ConfigChannel+0x7c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	4a36      	ldr	r2, [pc, #216]	@ (800438c <HAL_ADC_ConfigChannel+0x7c8>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80042c2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80042c4:	e002      	b.n	80042cc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f9      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042d2:	e044      	b.n	800435e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004390 <HAL_ADC_ConfigChannel+0x7cc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d113      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a23      	ldr	r2, [pc, #140]	@ (800437c <HAL_ADC_ConfigChannel+0x7b8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d134      	bne.n	800435e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042fc:	4619      	mov	r1, r3
 80042fe:	481e      	ldr	r0, [pc, #120]	@ (8004378 <HAL_ADC_ConfigChannel+0x7b4>)
 8004300:	f7ff f987 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004304:	e02b      	b.n	800435e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <HAL_ADC_ConfigChannel+0x7d0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d126      	bne.n	800435e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d120      	bne.n	800435e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <HAL_ADC_ConfigChannel+0x7b8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d11b      	bne.n	800435e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800432a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800432e:	4619      	mov	r1, r3
 8004330:	4811      	ldr	r0, [pc, #68]	@ (8004378 <HAL_ADC_ConfigChannel+0x7b4>)
 8004332:	f7ff f96e 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
 8004336:	e012      	b.n	800435e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800434a:	e008      	b.n	800435e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004366:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800436a:	4618      	mov	r0, r3
 800436c:	37dc      	adds	r7, #220	@ 0xdc
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}
 8004372:	bf00      	nop
 8004374:	80080000 	.word	0x80080000
 8004378:	42028300 	.word	0x42028300
 800437c:	42028000 	.word	0x42028000
 8004380:	42028100 	.word	0x42028100
 8004384:	c7520000 	.word	0xc7520000
 8004388:	20000000 	.word	0x20000000
 800438c:	053e2d63 	.word	0x053e2d63
 8004390:	cb840000 	.word	0xcb840000
 8004394:	80000001 	.word	0x80000001

08004398 <LL_ADC_IsEnabled>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <LL_ADC_IsEnabled+0x18>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_ADC_IsEnabled+0x1a>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <LL_ADC_REG_IsConversionOngoing>:
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d101      	bne.n	80043d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b0a1      	sub	sp, #132	@ 0x84
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043fe:	2302      	movs	r3, #2
 8004400:	e089      	b.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800440a:	2300      	movs	r3, #0
 800440c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800440e:	2300      	movs	r3, #0
 8004410:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a42      	ldr	r2, [pc, #264]	@ (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d102      	bne.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800441c:	4b41      	ldr	r3, [pc, #260]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e001      	b.n	8004426 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e068      	b.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff ffb9 	bl	80043be <LL_ADC_REG_IsConversionOngoing>
 800444c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ffb3 	bl	80043be <LL_ADC_REG_IsConversionOngoing>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d14a      	bne.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800445e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004460:	2b00      	cmp	r3, #0
 8004462:	d147      	bne.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004464:	4b30      	ldr	r3, [pc, #192]	@ (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004466:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d027      	beq.n	80044c0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004482:	035b      	lsls	r3, r3, #13
 8004484:	430b      	orrs	r3, r1
 8004486:	431a      	orrs	r2, r3
 8004488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800448a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800448c:	4824      	ldr	r0, [pc, #144]	@ (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800448e:	f7ff ff83 	bl	8004398 <LL_ADC_IsEnabled>
 8004492:	4604      	mov	r4, r0
 8004494:	4823      	ldr	r0, [pc, #140]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004496:	f7ff ff7f 	bl	8004398 <LL_ADC_IsEnabled>
 800449a:	4603      	mov	r3, r0
 800449c:	4323      	orrs	r3, r4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d132      	bne.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044aa:	f023 030f 	bic.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	6811      	ldr	r1, [r2, #0]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	6892      	ldr	r2, [r2, #8]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	431a      	orrs	r2, r3
 80044ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044bc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044be:	e023      	b.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044cc:	4814      	ldr	r0, [pc, #80]	@ (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80044ce:	f7ff ff63 	bl	8004398 <LL_ADC_IsEnabled>
 80044d2:	4604      	mov	r4, r0
 80044d4:	4813      	ldr	r0, [pc, #76]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044d6:	f7ff ff5f 	bl	8004398 <LL_ADC_IsEnabled>
 80044da:	4603      	mov	r3, r0
 80044dc:	4323      	orrs	r3, r4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d112      	bne.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044ea:	f023 030f 	bic.w	r3, r3, #15
 80044ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80044f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044f2:	e009      	b.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004506:	e000      	b.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004508:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004512:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004516:	4618      	mov	r0, r3
 8004518:	3784      	adds	r7, #132	@ 0x84
 800451a:	46bd      	mov	sp, r7
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	bf00      	nop
 8004520:	42028000 	.word	0x42028000
 8004524:	42028100 	.word	0x42028100
 8004528:	42028300 	.word	0x42028300

0800452c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <__NVIC_SetPriorityGrouping+0x44>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004548:	4013      	ands	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800455e:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <__NVIC_SetPriorityGrouping+0x44>)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	60d3      	str	r3, [r2, #12]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__NVIC_GetPriorityGrouping+0x18>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	f003 0307 	and.w	r3, r3, #7
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db0b      	blt.n	80045ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	4907      	ldr	r1, [pc, #28]	@ (80045c8 <__NVIC_EnableIRQ+0x38>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2001      	movs	r0, #1
 80045b2:	fa00 f202 	lsl.w	r2, r0, r2
 80045b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000e100 	.word	0xe000e100

080045cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db0a      	blt.n	80045f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	490c      	ldr	r1, [pc, #48]	@ (8004618 <__NVIC_SetPriority+0x4c>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	0152      	lsls	r2, r2, #5
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	440b      	add	r3, r1
 80045f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f4:	e00a      	b.n	800460c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4908      	ldr	r1, [pc, #32]	@ (800461c <__NVIC_SetPriority+0x50>)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	3b04      	subs	r3, #4
 8004604:	0152      	lsls	r2, r2, #5
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	440b      	add	r3, r1
 800460a:	761a      	strb	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000e100 	.word	0xe000e100
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	@ 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f1c3 0307 	rsb	r3, r3, #7
 800463a:	2b03      	cmp	r3, #3
 800463c:	bf28      	it	cs
 800463e:	2303      	movcs	r3, #3
 8004640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3303      	adds	r3, #3
 8004646:	2b06      	cmp	r3, #6
 8004648:	d902      	bls.n	8004650 <NVIC_EncodePriority+0x30>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3b04      	subs	r3, #4
 800464e:	e000      	b.n	8004652 <NVIC_EncodePriority+0x32>
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43da      	mvns	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	401a      	ands	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004668:	f04f 31ff 	mov.w	r1, #4294967295
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	43d9      	mvns	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004678:	4313      	orrs	r3, r2
         );
}
 800467a:	4618      	mov	r0, r3
 800467c:	3724      	adds	r7, #36	@ 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004698:	d301      	bcc.n	800469e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800469a:	2301      	movs	r3, #1
 800469c:	e00f      	b.n	80046be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800469e:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <SysTick_Config+0x40>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046a6:	2107      	movs	r1, #7
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	f7ff ff8e 	bl	80045cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <SysTick_Config+0x40>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b6:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <SysTick_Config+0x40>)
 80046b8:	2207      	movs	r2, #7
 80046ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	e000e010 	.word	0xe000e010

080046cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff29 	bl	800452c <__NVIC_SetPriorityGrouping>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	4603      	mov	r3, r0
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046f0:	f7ff ff40 	bl	8004574 <__NVIC_GetPriorityGrouping>
 80046f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7ff ff90 	bl	8004620 <NVIC_EncodePriority>
 8004700:	4602      	mov	r2, r0
 8004702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff5f 	bl	80045cc <__NVIC_SetPriority>
}
 800470e:	bf00      	nop
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	4603      	mov	r3, r0
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff33 	bl	8004590 <__NVIC_EnableIRQ>
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ffa4 	bl	8004688 <SysTick_Config>
 8004740:	4603      	mov	r3, r0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	460b      	mov	r3, r1
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d011      	beq.n	8004786 <HAL_EXTI_RegisterCallback+0x3c>
 8004762:	2b02      	cmp	r3, #2
 8004764:	dc13      	bgt.n	800478e <HAL_EXTI_RegisterCallback+0x44>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_EXTI_RegisterCallback+0x26>
 800476a:	2b01      	cmp	r3, #1
 800476c:	d007      	beq.n	800477e <HAL_EXTI_RegisterCallback+0x34>
 800476e:	e00e      	b.n	800478e <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]
      break;
 800477c:	e00a      	b.n	8004794 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	605a      	str	r2, [r3, #4]
      break;
 8004784:	e006      	b.n	8004794 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
      break;
 800478c:	e002      	b.n	8004794 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
      break;
 8004792:	bf00      	nop
  }

  return status;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e003      	b.n	80047be <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2201      	movs	r2, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <HAL_EXTI_IRQHandler+0x88>)
 80047f6:	4413      	add	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	4b0d      	ldr	r3, [pc, #52]	@ (8004858 <HAL_EXTI_IRQHandler+0x8c>)
 8004824:	4413      	add	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	4798      	blx	r3
    }
  }
}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	4002f40c 	.word	0x4002f40c
 8004858:	4002f410 	.word	0x4002f410

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800486a:	e158      	b.n	8004b1e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2101      	movs	r1, #1
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 814a 	beq.w	8004b18 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d005      	beq.n	800489c <HAL_GPIO_Init+0x40>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d130      	bne.n	80048fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	2203      	movs	r2, #3
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d2:	2201      	movs	r2, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0201 	and.w	r2, r3, #1
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b03      	cmp	r3, #3
 8004908:	d017      	beq.n	800493a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	2203      	movs	r2, #3
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d123      	bne.n	800498e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3208      	adds	r2, #8
 8004988:	6939      	ldr	r1, [r7, #16]
 800498a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2203      	movs	r2, #3
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4013      	ands	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a4 	beq.w	8004b18 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80049d0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3318      	adds	r3, #24
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_GPIO_Init+0x2e4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d025      	beq.n	8004a48 <HAL_GPIO_Init+0x1ec>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a51      	ldr	r2, [pc, #324]	@ (8004b44 <HAL_GPIO_Init+0x2e8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01f      	beq.n	8004a44 <HAL_GPIO_Init+0x1e8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a50      	ldr	r2, [pc, #320]	@ (8004b48 <HAL_GPIO_Init+0x2ec>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d019      	beq.n	8004a40 <HAL_GPIO_Init+0x1e4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b4c <HAL_GPIO_Init+0x2f0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <HAL_GPIO_Init+0x1e0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a4e      	ldr	r2, [pc, #312]	@ (8004b50 <HAL_GPIO_Init+0x2f4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00d      	beq.n	8004a38 <HAL_GPIO_Init+0x1dc>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b54 <HAL_GPIO_Init+0x2f8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <HAL_GPIO_Init+0x1d8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a4c      	ldr	r2, [pc, #304]	@ (8004b58 <HAL_GPIO_Init+0x2fc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_GPIO_Init+0x1d4>
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	e00c      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a30:	2307      	movs	r3, #7
 8004a32:	e00a      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a34:	2305      	movs	r3, #5
 8004a36:	e008      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	e006      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e004      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	f002 0203 	and.w	r2, r2, #3
 8004a50:	00d2      	lsls	r2, r2, #3
 8004a52:	4093      	lsls	r3, r2
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004a5a:	4938      	ldr	r1, [pc, #224]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3318      	adds	r3, #24
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a68:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a92:	4b2a      	ldr	r3, [pc, #168]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ab6:	4a21      	ldr	r2, [pc, #132]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004abc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ae2:	4a16      	ldr	r2, [pc, #88]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8004aea:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b10:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <HAL_GPIO_Init+0x2e0>)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f ae9f 	bne.w	800486c <HAL_GPIO_Init+0x10>
  }
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	4002f400 	.word	0x4002f400
 8004b40:	42020000 	.word	0x42020000
 8004b44:	42020400 	.word	0x42020400
 8004b48:	42020800 	.word	0x42020800
 8004b4c:	42020c00 	.word	0x42020c00
 8004b50:	42021000 	.word	0x42021000
 8004b54:	42021400 	.word	0x42021400
 8004b58:	42021800 	.word	0x42021800

08004b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b6c:	787b      	ldrb	r3, [r7, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b78:	e002      	b.n	8004b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	e007      	b.n	8004bba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004baa:	4b07      	ldr	r3, [pc, #28]	@ (8004bc8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 0204 	bic.w	r2, r3, #4
 8004bb2:	4905      	ldr	r1, [pc, #20]	@ (8004bc8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40030400 	.word	0x40030400

08004bcc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_ICACHE_Enable+0x1c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	@ (8004be8 <HAL_ICACHE_Enable+0x1c>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40030400 	.word	0x40030400

08004bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0c0      	b.n	8004d80 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fe f80a 	bl	8002c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 fd69 	bl	80086fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e03e      	b.n	8004cae <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3311      	adds	r3, #17
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	440b      	add	r3, r1
 8004c52:	3310      	adds	r3, #16
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	440b      	add	r3, r1
 8004c66:	3313      	adds	r3, #19
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c6c:	7bfa      	ldrb	r2, [r7, #15]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3320      	adds	r3, #32
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3324      	adds	r3, #36	@ 0x24
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	3301      	adds	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	791b      	ldrb	r3, [r3, #4]
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3bb      	bcc.n	8004c30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e044      	b.n	8004d48 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	440b      	add	r3, r1
 8004ccc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	440b      	add	r3, r1
 8004ce2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	440b      	add	r3, r1
 8004d24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	3301      	adds	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3b5      	bcc.n	8004cbe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d5e:	f003 fce8 	bl	8008732 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7a9b      	ldrb	r3, [r3, #10]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f805 	bl	8004d88 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f043 0302 	orr.w	r3, r3, #2
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40007000 	.word	0x40007000

08004dfc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40007000 	.word	0x40007000

08004e18 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004e20:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e28:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004e2a:	f000 f871 	bl	8004f10 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e34:	d101      	bne.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e03e      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004e3a:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e46:	d101      	bne.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e035      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d101      	bne.n	8004e58 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e02f      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e58:	4b19      	ldr	r3, [pc, #100]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004e60:	4917      	ldr	r1, [pc, #92]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004e68:	4b16      	ldr	r3, [pc, #88]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	09db      	lsrs	r3, r3, #7
 8004e76:	2232      	movs	r2, #50	@ 0x32
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	08db      	lsrs	r3, r3, #3
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e88:	e002      	b.n	8004e90 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9c:	d102      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f2      	bne.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e000      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	0a7c5ac5 	.word	0x0a7c5ac5
 8004ecc:	cccccccd 	.word	0xcccccccd

08004ed0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ede:	6053      	str	r3, [r2, #4]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40007000 	.word	0x40007000

08004ef0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004efa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004efe:	6053      	str	r3, [r2, #4]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40007000 	.word	0x40007000

08004f10 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	e00a      	b.n	8004f44 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	e001      	b.n	8004f44 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004f40:	2300      	movs	r3, #0
 8004f42:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004f44:	687b      	ldr	r3, [r7, #4]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40007000 	.word	0x40007000

08004f58 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f000 bcc2 	b.w	80058f0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6c:	4b99      	ldr	r3, [pc, #612]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f76:	4b97      	ldr	r3, [pc, #604]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80e9 	beq.w	8005160 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x4a>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	f040 8083 	bne.w	80050a2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d17f      	bne.n	80050a2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <HAL_RCC_OscConfig+0x64>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f000 bc9a 	b.w	80058f0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc0:	4b84      	ldr	r3, [pc, #528]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x7e>
 8004fcc:	4b81      	ldr	r3, [pc, #516]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fd4:	e005      	b.n	8004fe2 <HAL_RCC_OscConfig+0x8a>
 8004fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d224      	bcs.n	8005030 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fe9c 	bl	8005d28 <RCC_SetFlashLatencyFromMSIRange>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f000 bc7a 	b.w	80058f0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ffc:	4b75      	ldr	r3, [pc, #468]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a74      	ldr	r2, [pc, #464]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005002:	f043 0308 	orr.w	r3, r3, #8
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b72      	ldr	r3, [pc, #456]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	496f      	ldr	r1, [pc, #444]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800501a:	4b6e      	ldr	r3, [pc, #440]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	496a      	ldr	r1, [pc, #424]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
 800502e:	e026      	b.n	800507e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005030:	4b68      	ldr	r3, [pc, #416]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a67      	ldr	r2, [pc, #412]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005036:	f043 0308 	orr.w	r3, r3, #8
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b65      	ldr	r3, [pc, #404]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	4962      	ldr	r1, [pc, #392]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504e:	4b61      	ldr	r3, [pc, #388]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	495d      	ldr	r1, [pc, #372]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fe5b 	bl	8005d28 <RCC_SetFlashLatencyFromMSIRange>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f000 bc39 	b.w	80058f0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800507e:	f000 fe17 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005082:	4603      	mov	r3, r0
 8005084:	4a54      	ldr	r2, [pc, #336]	@ (80051d8 <HAL_RCC_OscConfig+0x280>)
 8005086:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005088:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <HAL_RCC_OscConfig+0x284>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fa2d 	bl	80034ec <HAL_InitTick>
 8005092:	4603      	mov	r3, r0
 8005094:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d060      	beq.n	800515e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	f000 bc27 	b.w	80058f0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d039      	beq.n	800511e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050aa:	4b4a      	ldr	r3, [pc, #296]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a49      	ldr	r2, [pc, #292]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050b6:	f7fe fa69 	bl	800358c <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050bc:	e00f      	b.n	80050de <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050be:	f7fe fa65 	bl	800358c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d908      	bls.n	80050de <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050cc:	4b41      	ldr	r3, [pc, #260]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	f000 bc09 	b.w	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050de:	4b3d      	ldr	r3, [pc, #244]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0e9      	beq.n	80050be <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ea:	4b3a      	ldr	r3, [pc, #232]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a39      	ldr	r2, [pc, #228]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4b37      	ldr	r3, [pc, #220]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	4934      	ldr	r1, [pc, #208]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005108:	4b32      	ldr	r3, [pc, #200]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	492f      	ldr	r1, [pc, #188]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
 800511c:	e020      	b.n	8005160 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800511e:	4b2d      	ldr	r3, [pc, #180]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2c      	ldr	r2, [pc, #176]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800512a:	f7fe fa2f 	bl	800358c <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005130:	e00e      	b.n	8005150 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005132:	f7fe fa2b 	bl	800358c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d907      	bls.n	8005150 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005140:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e3cf      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005150:	4b20      	ldr	r3, [pc, #128]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ea      	bne.n	8005132 <HAL_RCC_OscConfig+0x1da>
 800515c:	e000      	b.n	8005160 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800515e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d07e      	beq.n	800526a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b08      	cmp	r3, #8
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x226>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d10e      	bne.n	8005196 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b03      	cmp	r3, #3
 800517c:	d10b      	bne.n	8005196 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06e      	beq.n	8005268 <HAL_RCC_OscConfig+0x310>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d16a      	bne.n	8005268 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e3ac      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519e:	d106      	bne.n	80051ae <HAL_RCC_OscConfig+0x256>
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0b      	ldr	r2, [pc, #44]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80051a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e024      	b.n	80051f8 <HAL_RCC_OscConfig+0x2a0>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b6:	d113      	bne.n	80051e0 <HAL_RCC_OscConfig+0x288>
 80051b8:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a05      	ldr	r2, [pc, #20]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80051be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4b03      	ldr	r3, [pc, #12]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a02      	ldr	r2, [pc, #8]	@ (80051d4 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e012      	b.n	80051f8 <HAL_RCC_OscConfig+0x2a0>
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	20000000 	.word	0x20000000
 80051dc:	2000002c 	.word	0x2000002c
 80051e0:	4b8b      	ldr	r3, [pc, #556]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a8a      	ldr	r2, [pc, #552]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b88      	ldr	r3, [pc, #544]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a87      	ldr	r2, [pc, #540]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80051f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d019      	beq.n	8005234 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fe f9c4 	bl	800358c <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005206:	e00e      	b.n	8005226 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005208:	f7fe f9c0 	bl	800358c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	@ 0x64
 8005214:	d907      	bls.n	8005226 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005216:	4b7e      	ldr	r3, [pc, #504]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e364      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005226:	4b7a      	ldr	r3, [pc, #488]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ea      	beq.n	8005208 <HAL_RCC_OscConfig+0x2b0>
 8005232:	e01a      	b.n	800526a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fe f9aa 	bl	800358c <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800523a:	e00e      	b.n	800525a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523c:	f7fe f9a6 	bl	800358c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	@ 0x64
 8005248:	d907      	bls.n	800525a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800524a:	4b71      	ldr	r3, [pc, #452]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e34a      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800525a:	4b6d      	ldr	r3, [pc, #436]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1ea      	bne.n	800523c <HAL_RCC_OscConfig+0x2e4>
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d06c      	beq.n	8005350 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d005      	beq.n	8005288 <HAL_RCC_OscConfig+0x330>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b0c      	cmp	r3, #12
 8005280:	d119      	bne.n	80052b6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d116      	bne.n	80052b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005288:	4b61      	ldr	r3, [pc, #388]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_OscConfig+0x348>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e327      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	4958      	ldr	r1, [pc, #352]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b4:	e04c      	b.n	8005350 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d029      	beq.n	8005312 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052be:	4b54      	ldr	r3, [pc, #336]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a53      	ldr	r2, [pc, #332]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ca:	f7fe f95f 	bl	800358c <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d0:	e00e      	b.n	80052f0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d2:	f7fe f95b 	bl	800358c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d907      	bls.n	80052f0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e2ff      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f0:	4b47      	ldr	r3, [pc, #284]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ea      	beq.n	80052d2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b44      	ldr	r3, [pc, #272]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	4941      	ldr	r1, [pc, #260]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]
 8005310:	e01e      	b.n	8005350 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005312:	4b3f      	ldr	r3, [pc, #252]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a3e      	ldr	r2, [pc, #248]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fe f935 	bl	800358c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005324:	e00e      	b.n	8005344 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005326:	f7fe f931 	bl	800358c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d907      	bls.n	8005344 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005334:	4b36      	ldr	r3, [pc, #216]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e2d5      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005344:	4b32      	ldr	r3, [pc, #200]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ea      	bne.n	8005326 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d062      	beq.n	8005422 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d038      	beq.n	80053d6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800536c:	4b28      	ldr	r3, [pc, #160]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005372:	4a27      	ldr	r2, [pc, #156]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005374:	f023 0310 	bic.w	r3, r3, #16
 8005378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800537c:	e007      	b.n	800538e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800537e:	4b24      	ldr	r3, [pc, #144]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005384:	4a22      	ldr	r2, [pc, #136]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	4b20      	ldr	r3, [pc, #128]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005394:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fe f8f5 	bl	800358c <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053a4:	e00f      	b.n	80053c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a6:	f7fe f8f1 	bl	800358c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b07      	cmp	r3, #7
 80053b2:	d908      	bls.n	80053c6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b4:	4b16      	ldr	r3, [pc, #88]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e294      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c6:	4b12      	ldr	r3, [pc, #72]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0e8      	beq.n	80053a6 <HAL_RCC_OscConfig+0x44e>
 80053d4:	e025      	b.n	8005422 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80053d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fe f8d1 	bl	800358c <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ec:	e012      	b.n	8005414 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe f8cd 	bl	800358c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	d90b      	bls.n	8005414 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fc:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e270      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005414:	4ba8      	ldr	r3, [pc, #672]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 812d 	beq.w	800568a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005430:	2300      	movs	r3, #0
 8005432:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005434:	4ba0      	ldr	r3, [pc, #640]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005440:	4b9d      	ldr	r3, [pc, #628]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	4a9c      	ldr	r2, [pc, #624]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544a:	6593      	str	r3, [r2, #88]	@ 0x58
 800544c:	4b9a      	ldr	r3, [pc, #616]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005458:	2301      	movs	r3, #1
 800545a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545c:	4b97      	ldr	r3, [pc, #604]	@ (80056bc <HAL_RCC_OscConfig+0x764>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11e      	bne.n	80054a6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005468:	4b94      	ldr	r3, [pc, #592]	@ (80056bc <HAL_RCC_OscConfig+0x764>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a93      	ldr	r2, [pc, #588]	@ (80056bc <HAL_RCC_OscConfig+0x764>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005474:	f7fe f88a 	bl	800358c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547a:	e00e      	b.n	800549a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547c:	f7fe f886 	bl	800358c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d907      	bls.n	800549a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800548a:	4b8c      	ldr	r3, [pc, #560]	@ (80056bc <HAL_RCC_OscConfig+0x764>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e22a      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549a:	4b88      	ldr	r3, [pc, #544]	@ (80056bc <HAL_RCC_OscConfig+0x764>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ea      	beq.n	800547c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01f      	beq.n	80054f2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d010      	beq.n	80054e0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054be:	4b7e      	ldr	r3, [pc, #504]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c4:	4a7c      	ldr	r2, [pc, #496]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054c6:	f043 0304 	orr.w	r3, r3, #4
 80054ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054ce:	4b7a      	ldr	r3, [pc, #488]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d4:	4a78      	ldr	r2, [pc, #480]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054de:	e018      	b.n	8005512 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054e0:	4b75      	ldr	r3, [pc, #468]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	4a74      	ldr	r2, [pc, #464]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054f0:	e00f      	b.n	8005512 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054f2:	4b71      	ldr	r3, [pc, #452]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f8:	4a6f      	ldr	r2, [pc, #444]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005502:	4b6d      	ldr	r3, [pc, #436]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005508:	4a6b      	ldr	r2, [pc, #428]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 800550a:	f023 0304 	bic.w	r3, r3, #4
 800550e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d068      	beq.n	80055ec <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551a:	f7fe f837 	bl	800358c <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005520:	e011      	b.n	8005546 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fe f833 	bl	800358c <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d908      	bls.n	8005546 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005534:	4b60      	ldr	r3, [pc, #384]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e1d4      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005546:	4b5c      	ldr	r3, [pc, #368]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0e6      	beq.n	8005522 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555c:	2b00      	cmp	r3, #0
 800555e:	d022      	beq.n	80055a6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005560:	4b55      	ldr	r3, [pc, #340]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	4a54      	ldr	r2, [pc, #336]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005570:	e011      	b.n	8005596 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005572:	f7fe f80b 	bl	800358c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005580:	4293      	cmp	r3, r2
 8005582:	d908      	bls.n	8005596 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005584:	4b4c      	ldr	r3, [pc, #304]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e1ac      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005596:	4b48      	ldr	r3, [pc, #288]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0e6      	beq.n	8005572 <HAL_RCC_OscConfig+0x61a>
 80055a4:	e068      	b.n	8005678 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80055a6:	4b44      	ldr	r3, [pc, #272]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ac:	4a42      	ldr	r2, [pc, #264]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80055ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055b6:	e011      	b.n	80055dc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b8:	f7fd ffe8 	bl	800358c <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d908      	bls.n	80055dc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055ca:	4b3b      	ldr	r3, [pc, #236]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e189      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055dc:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <HAL_RCC_OscConfig+0x660>
 80055ea:	e045      	b.n	8005678 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fd ffce 	bl	800358c <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055f2:	e011      	b.n	8005618 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f4:	f7fd ffca 	bl	800358c <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d908      	bls.n	8005618 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005606:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e16b      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005618:	4b27      	ldr	r3, [pc, #156]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005626:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	d021      	beq.n	8005678 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005634:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	4a1f      	ldr	r2, [pc, #124]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 800563c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005644:	e011      	b.n	800566a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005646:	f7fd ffa1 	bl	800358c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005654:	4293      	cmp	r3, r2
 8005656:	d908      	bls.n	800566a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005658:	4b17      	ldr	r3, [pc, #92]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e142      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800566a:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e6      	bne.n	8005646 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005678:	7ffb      	ldrb	r3, [r7, #31]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567e:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005682:	4a0d      	ldr	r2, [pc, #52]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005688:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d04f      	beq.n	8005736 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d028      	beq.n	80056f0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800569e:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80056a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056a4:	4a04      	ldr	r2, [pc, #16]	@ (80056b8 <HAL_RCC_OscConfig+0x760>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fd ff6d 	bl	800358c <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056b4:	e014      	b.n	80056e0 <HAL_RCC_OscConfig+0x788>
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c0:	f7fd ff64 	bl	800358c <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d908      	bls.n	80056e0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ce:	4b8a      	ldr	r3, [pc, #552]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80056d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e107      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056e0:	4b85      	ldr	r3, [pc, #532]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0e8      	beq.n	80056c0 <HAL_RCC_OscConfig+0x768>
 80056ee:	e022      	b.n	8005736 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056f0:	4b81      	ldr	r3, [pc, #516]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80056f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056f6:	4a80      	ldr	r2, [pc, #512]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fd ff44 	bl	800358c <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005706:	e00f      	b.n	8005728 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005708:	f7fd ff40 	bl	800358c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d908      	bls.n	8005728 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005716:	4b78      	ldr	r3, [pc, #480]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e0e3      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005728:	4b73      	ldr	r3, [pc, #460]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 800572a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e8      	bne.n	8005708 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80d7 	beq.w	80058ee <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005740:	4b6d      	ldr	r3, [pc, #436]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b0c      	cmp	r3, #12
 800574a:	f000 8091 	beq.w	8005870 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	2b02      	cmp	r3, #2
 8005754:	d166      	bne.n	8005824 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b68      	ldr	r3, [pc, #416]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a67      	ldr	r2, [pc, #412]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 800575c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fd ff13 	bl	800358c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005768:	e00e      	b.n	8005788 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576a:	f7fd ff0f 	bl	800358c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d907      	bls.n	8005788 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005778:	4b5f      	ldr	r3, [pc, #380]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e0b3      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005788:	4b5b      	ldr	r3, [pc, #364]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1ea      	bne.n	800576a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005794:	4b58      	ldr	r3, [pc, #352]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	4b58      	ldr	r3, [pc, #352]	@ (80058fc <HAL_RCC_OscConfig+0x9a4>)
 800579a:	4013      	ands	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057ae:	0212      	lsls	r2, r2, #8
 80057b0:	4311      	orrs	r1, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80057b6:	0852      	lsrs	r2, r2, #1
 80057b8:	3a01      	subs	r2, #1
 80057ba:	0552      	lsls	r2, r2, #21
 80057bc:	4311      	orrs	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80057c2:	0852      	lsrs	r2, r2, #1
 80057c4:	3a01      	subs	r2, #1
 80057c6:	0652      	lsls	r2, r2, #25
 80057c8:	4311      	orrs	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057ce:	06d2      	lsls	r2, r2, #27
 80057d0:	430a      	orrs	r2, r1
 80057d2:	4949      	ldr	r1, [pc, #292]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d8:	4b47      	ldr	r3, [pc, #284]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a46      	ldr	r2, [pc, #280]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80057de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057e4:	4b44      	ldr	r3, [pc, #272]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a43      	ldr	r2, [pc, #268]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 80057ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fd fecc 	bl	800358c <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f6:	e00e      	b.n	8005816 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fd fec8 	bl	800358c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d907      	bls.n	8005816 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005806:	4b3c      	ldr	r3, [pc, #240]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e06c      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005816:	4b38      	ldr	r3, [pc, #224]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0ea      	beq.n	80057f8 <HAL_RCC_OscConfig+0x8a0>
 8005822:	e064      	b.n	80058ee <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005824:	4b34      	ldr	r3, [pc, #208]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a33      	ldr	r2, [pc, #204]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800582e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fd feac 	bl	800358c <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005836:	e00e      	b.n	8005856 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fd fea8 	bl	800358c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d907      	bls.n	8005856 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005846:	4b2c      	ldr	r3, [pc, #176]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e04c      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005856:	4b28      	ldr	r3, [pc, #160]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ea      	bne.n	8005838 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005862:	4b25      	ldr	r3, [pc, #148]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	4924      	ldr	r1, [pc, #144]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 8005868:	4b25      	ldr	r3, [pc, #148]	@ (8005900 <HAL_RCC_OscConfig+0x9a8>)
 800586a:	4013      	ands	r3, r2
 800586c:	60cb      	str	r3, [r1, #12]
 800586e:	e03e      	b.n	80058ee <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e039      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800587c:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <HAL_RCC_OscConfig+0x9a0>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 0203 	and.w	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	429a      	cmp	r2, r3
 800588e:	d12c      	bne.n	80058ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	3b01      	subs	r3, #1
 800589c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d123      	bne.n	80058ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d11b      	bne.n	80058ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d113      	bne.n	80058ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	3b01      	subs	r3, #1
 80058d0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	3b01      	subs	r3, #1
 80058e4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	019f800c 	.word	0x019f800c
 8005900:	feeefffc 	.word	0xfeeefffc

08005904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e11c      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b90      	ldr	r3, [pc, #576]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d910      	bls.n	800594c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 020f 	bic.w	r2, r3, #15
 8005932:	498b      	ldr	r1, [pc, #556]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	4313      	orrs	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b89      	ldr	r3, [pc, #548]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e104      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4b81      	ldr	r3, [pc, #516]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005964:	429a      	cmp	r2, r3
 8005966:	d908      	bls.n	800597a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005968:	4b7e      	ldr	r3, [pc, #504]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	497b      	ldr	r1, [pc, #492]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8085 	beq.w	8005a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d11f      	bne.n	80059d0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005990:	4b74      	ldr	r3, [pc, #464]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0da      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059a0:	f000 fa26 	bl	8005df0 <RCC_GetSysClockFreqFromPLLSource>
 80059a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4a6f      	ldr	r2, [pc, #444]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d947      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80059ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d141      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059c2:	4a68      	ldr	r2, [pc, #416]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 80059c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e036      	b.n	8005a3e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059d8:	4b62      	ldr	r3, [pc, #392]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d115      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0b6      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0aa      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a00:	4b58      	ldr	r3, [pc, #352]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0a2      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a10:	f000 f8b0 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4a53      	ldr	r2, [pc, #332]	@ (8005b68 <HAL_RCC_ClockConfig+0x264>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d90f      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a1e:	4b51      	ldr	r3, [pc, #324]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a32:	4a4c      	ldr	r2, [pc, #304]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a3a:	2380      	movs	r3, #128	@ 0x80
 8005a3c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a3e:	4b49      	ldr	r3, [pc, #292]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 0203 	bic.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4946      	ldr	r1, [pc, #280]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a50:	f7fd fd9c 	bl	800358c <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	e013      	b.n	8005a80 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a58:	f7fd fd98 	bl	800358c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d90a      	bls.n	8005a80 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 020c 	and.w	r2, r3, #12
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e06a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a80:	4b38      	ldr	r3, [pc, #224]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 020c 	and.w	r2, r3, #12
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d1e2      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b80      	cmp	r3, #128	@ 0x80
 8005a96:	d105      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a98:	4b32      	ldr	r3, [pc, #200]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4a31      	ldr	r2, [pc, #196]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aa2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d010      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d208      	bcs.n	8005ad2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b28      	ldr	r3, [pc, #160]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4925      	ldr	r1, [pc, #148]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad2:	4b23      	ldr	r3, [pc, #140]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d210      	bcs.n	8005b02 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 020f 	bic.w	r2, r3, #15
 8005ae8:	491d      	ldr	r1, [pc, #116]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b60 <HAL_RCC_ClockConfig+0x25c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d001      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e029      	b.n	8005b56 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b0e:	4b15      	ldr	r3, [pc, #84]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	4912      	ldr	r1, [pc, #72]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	490a      	ldr	r1, [pc, #40]	@ (8005b64 <HAL_RCC_ClockConfig+0x260>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b40:	f000 f8b6 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4a09      	ldr	r2, [pc, #36]	@ (8005b6c <HAL_RCC_ClockConfig+0x268>)
 8005b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b4a:	4b09      	ldr	r3, [pc, #36]	@ (8005b70 <HAL_RCC_ClockConfig+0x26c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fd fccc 	bl	80034ec <HAL_InitTick>
 8005b54:	4603      	mov	r3, r0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40022000 	.word	0x40022000
 8005b64:	40021000 	.word	0x40021000
 8005b68:	04c4b400 	.word	0x04c4b400
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	2000002c 	.word	0x2000002c

08005b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	@ 0x24
 8005b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b82:	4b47      	ldr	r3, [pc, #284]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b8c:	4b44      	ldr	r3, [pc, #272]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d121      	bne.n	8005be6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d11e      	bne.n	8005be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e005      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005bc4:	4b36      	ldr	r3, [pc, #216]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005bd0:	4a34      	ldr	r2, [pc, #208]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x130>)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d102      	bne.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bec:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e004      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x138>)
 8005bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d146      	bne.n	8005c90 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005c02:	4b27      	ldr	r3, [pc, #156]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	091b      	lsrs	r3, r3, #4
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	3301      	adds	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d003      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0xb4>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d00d      	beq.n	8005c42 <HAL_RCC_GetSysClockFreq+0xce>
 8005c26:	e019      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005c32:	68d2      	ldr	r2, [r2, #12]
 8005c34:	0a12      	lsrs	r2, r2, #8
 8005c36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	617b      	str	r3, [r7, #20]
        break;
 8005c40:	e019      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c42:	4a1a      	ldr	r2, [pc, #104]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x138>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005c4c:	68d2      	ldr	r2, [r2, #12]
 8005c4e:	0a12      	lsrs	r2, r2, #8
 8005c50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]
        break;
 8005c5a:	e00c      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005c66:	68d2      	ldr	r2, [r2, #12]
 8005c68:	0a12      	lsrs	r2, r2, #8
 8005c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	617b      	str	r3, [r7, #20]
        break;
 8005c74:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005c76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	0e5b      	lsrs	r3, r3, #25
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	3301      	adds	r3, #1
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c90:	69bb      	ldr	r3, [r7, #24]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3724      	adds	r7, #36	@ 0x24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	0800a054 	.word	0x0800a054
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	007a1200 	.word	0x007a1200

08005cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005cb4:	f7ff ff5e 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <HAL_RCC_GetHCLKFreq+0x20>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	4903      	ldr	r1, [pc, #12]	@ (8005cd4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	0800a03c 	.word	0x0800a03c

08005cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cdc:	f7ff ffe8 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4903      	ldr	r1, [pc, #12]	@ (8005cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	0800a04c 	.word	0x0800a04c

08005d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d04:	f7ff ffd4 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b05      	ldr	r3, [pc, #20]	@ (8005d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	0adb      	lsrs	r3, r3, #11
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4903      	ldr	r1, [pc, #12]	@ (8005d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d16:	5ccb      	ldrb	r3, [r1, r3]
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40021000 	.word	0x40021000
 8005d24:	0800a04c 	.word	0x0800a04c

08005d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d34:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d40:	f7ff f85c 	bl	8004dfc <HAL_PWREx_GetVoltageRange>
 8005d44:	6138      	str	r0, [r7, #16]
 8005d46:	e014      	b.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	4b27      	ldr	r3, [pc, #156]	@ (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	4a26      	ldr	r2, [pc, #152]	@ (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d54:	4b24      	ldr	r3, [pc, #144]	@ (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d60:	f7ff f84c 	bl	8004dfc <HAL_PWREx_GetVoltageRange>
 8005d64:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d66:	4b20      	ldr	r3, [pc, #128]	@ (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005de8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d7e:	d10b      	bne.n	8005d98 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b80      	cmp	r3, #128	@ 0x80
 8005d84:	d919      	bls.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d8a:	d902      	bls.n	8005d92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005d90:	e013      	b.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d92:	2301      	movs	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005d96:	e010      	b.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b80      	cmp	r3, #128	@ 0x80
 8005d9c:	d902      	bls.n	8005da4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d9e:	2303      	movs	r3, #3
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e00a      	b.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b80      	cmp	r3, #128	@ 0x80
 8005da8:	d102      	bne.n	8005db0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005daa:	2302      	movs	r3, #2
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e004      	b.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b70      	cmp	r3, #112	@ 0x70
 8005db4:	d101      	bne.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dba:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 020f 	bic.w	r2, r3, #15
 8005dc2:	490a      	ldr	r1, [pc, #40]	@ (8005dec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005dca:	4b08      	ldr	r3, [pc, #32]	@ (8005dec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40022000 	.word	0x40022000

08005df0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005df6:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e00:	4b2e      	ldr	r3, [pc, #184]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d015      	beq.n	8005e40 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d839      	bhi.n	8005e8e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d01c      	beq.n	8005e5a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d133      	bne.n	8005e8e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e26:	4a26      	ldr	r2, [pc, #152]	@ (8005ec0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	4a23      	ldr	r2, [pc, #140]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e30:	68d2      	ldr	r2, [r2, #12]
 8005e32:	0a12      	lsrs	r2, r2, #8
 8005e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	613b      	str	r3, [r7, #16]
      break;
 8005e3e:	e029      	b.n	8005e94 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e40:	4a20      	ldr	r2, [pc, #128]	@ (8005ec4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e4a:	68d2      	ldr	r2, [r2, #12]
 8005e4c:	0a12      	lsrs	r2, r2, #8
 8005e4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	613b      	str	r3, [r7, #16]
      break;
 8005e58:	e01c      	b.n	8005e94 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e5a:	4b18      	ldr	r3, [pc, #96]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e66:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	e005      	b.n	8005e82 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e76:	4b11      	ldr	r3, [pc, #68]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005e82:	4a11      	ldr	r2, [pc, #68]	@ (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8a:	613b      	str	r3, [r7, #16]
        break;
 8005e8c:	e002      	b.n	8005e94 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
      break;
 8005e92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005e94:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	0e5b      	lsrs	r3, r3, #25
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005eae:	683b      	ldr	r3, [r7, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	00f42400 	.word	0x00f42400
 8005ec4:	007a1200 	.word	0x007a1200
 8005ec8:	0800a054 	.word	0x0800a054

08005ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ed8:	2300      	movs	r3, #0
 8005eda:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d040      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eec:	2b80      	cmp	r3, #128	@ 0x80
 8005eee:	d02a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ef0:	2b80      	cmp	r3, #128	@ 0x80
 8005ef2:	d825      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ef4:	2b60      	cmp	r3, #96	@ 0x60
 8005ef6:	d026      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ef8:	2b60      	cmp	r3, #96	@ 0x60
 8005efa:	d821      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005efc:	2b40      	cmp	r3, #64	@ 0x40
 8005efe:	d006      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d81d      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f0c:	e018      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4a8e      	ldr	r2, [pc, #568]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f18:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fb56 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f2c:	e00c      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3320      	adds	r3, #32
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fc33 	bl	80067a0 <RCCEx_PLLSAI2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f3e:	e003      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	77fb      	strb	r3, [r7, #31]
        break;
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f54:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f5c:	497b      	ldr	r1, [pc, #492]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005f64:	e001      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	7ffb      	ldrb	r3, [r7, #31]
 8005f68:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d047      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7e:	d030      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f84:	d82a      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f8a:	d02a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f90:	d824      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f96:	d008      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d81e      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa6:	d010      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fa8:	e018      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005faa:	4b68      	ldr	r3, [pc, #416]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4a67      	ldr	r2, [pc, #412]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005fb6:	e015      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fb08 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005fc8:	e00c      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3320      	adds	r3, #32
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fbe5 	bl	80067a0 <RCCEx_PLLSAI2_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005fda:	e003      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77fb      	strb	r3, [r7, #31]
        break;
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe4:	7ffb      	ldrb	r3, [r7, #31]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fea:	4b58      	ldr	r3, [pc, #352]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff8:	4954      	ldr	r1, [pc, #336]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006000:	e001      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006002:	7ffb      	ldrb	r3, [r7, #31]
 8006004:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80ab 	beq.w	800616a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006014:	2300      	movs	r3, #0
 8006016:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006018:	4b4c      	ldr	r3, [pc, #304]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10d      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006024:	4b49      	ldr	r3, [pc, #292]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006028:	4a48      	ldr	r2, [pc, #288]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800602a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006030:	4b46      	ldr	r3, [pc, #280]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800603c:	2301      	movs	r3, #1
 800603e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006040:	4b43      	ldr	r3, [pc, #268]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a42      	ldr	r2, [pc, #264]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800604c:	f7fd fa9e 	bl	800358c <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006052:	e00f      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fd fa9a 	bl	800358c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d908      	bls.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006062:	4b3b      	ldr	r3, [pc, #236]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8006072:	e006      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006074:	4b36      	ldr	r3, [pc, #216]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0e9      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006080:	e000      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006082:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006084:	7ffb      	ldrb	r3, [r7, #31]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d164      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800608a:	4b30      	ldr	r3, [pc, #192]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006094:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01f      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d019      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060a8:	4b28      	ldr	r3, [pc, #160]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ba:	4a24      	ldr	r2, [pc, #144]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060c4:	4b21      	ldr	r3, [pc, #132]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	4a20      	ldr	r2, [pc, #128]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060d4:	4a1d      	ldr	r2, [pc, #116]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01f      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fd fa51 	bl	800358c <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ec:	e012      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fd fa4d 	bl	800358c <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d909      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006100:	4b12      	ldr	r3, [pc, #72]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8006112:	e007      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006114:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0e5      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8006124:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8006126:	7ffb      	ldrb	r3, [r7, #31]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10c      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006132:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613c:	4903      	ldr	r1, [pc, #12]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006146:	7ffb      	ldrb	r3, [r7, #31]
 8006148:	77bb      	strb	r3, [r7, #30]
 800614a:	e005      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800614c:	40021000 	.word	0x40021000
 8006150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7ffb      	ldrb	r3, [r7, #31]
 8006156:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d105      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615e:	4b9c      	ldr	r3, [pc, #624]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006162:	4a9b      	ldr	r2, [pc, #620]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006168:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006176:	4b96      	ldr	r3, [pc, #600]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617c:	f023 0203 	bic.w	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006184:	4992      	ldr	r1, [pc, #584]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006198:	4b8d      	ldr	r3, [pc, #564]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619e:	f023 020c 	bic.w	r2, r3, #12
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	498a      	ldr	r1, [pc, #552]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061ba:	4b85      	ldr	r3, [pc, #532]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c8:	4981      	ldr	r1, [pc, #516]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061dc:	4b7c      	ldr	r3, [pc, #496]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	4979      	ldr	r1, [pc, #484]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061fe:	4b74      	ldr	r3, [pc, #464]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620c:	4970      	ldr	r1, [pc, #448]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006220:	4b6b      	ldr	r3, [pc, #428]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800622e:	4968      	ldr	r1, [pc, #416]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006242:	4b63      	ldr	r3, [pc, #396]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006248:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006250:	495f      	ldr	r1, [pc, #380]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006264:	4b5a      	ldr	r3, [pc, #360]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006272:	4957      	ldr	r1, [pc, #348]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006286:	4b52      	ldr	r3, [pc, #328]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006294:	494e      	ldr	r1, [pc, #312]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d031      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062b0:	d00e      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80062b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062b6:	d814      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d015      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80062bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062c0:	d10f      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c2:	4b43      	ldr	r3, [pc, #268]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	4a42      	ldr	r2, [pc, #264]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062cc:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80062ce:	e00c      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f97c 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	77fb      	strb	r3, [r7, #31]
        break;
 80062e6:	e000      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80062e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062f0:	4b37      	ldr	r3, [pc, #220]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062fe:	4934      	ldr	r1, [pc, #208]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006306:	e001      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	7ffb      	ldrb	r3, [r7, #31]
 800630a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006318:	4b2d      	ldr	r3, [pc, #180]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006326:	492a      	ldr	r1, [pc, #168]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800633a:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006340:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006348:	4921      	ldr	r1, [pc, #132]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800635c:	4b1c      	ldr	r3, [pc, #112]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006362:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636a:	4919      	ldr	r1, [pc, #100]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800637e:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006380:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006384:	f023 0203 	bic.w	r2, r3, #3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638c:	4910      	ldr	r1, [pc, #64]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d02b      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063a0:	4b0b      	ldr	r3, [pc, #44]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ae:	4908      	ldr	r1, [pc, #32]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063be:	d109      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c0:	4b03      	ldr	r3, [pc, #12]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4a02      	ldr	r2, [pc, #8]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80063c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ca:	60d3      	str	r3, [r2, #12]
 80063cc:	e014      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063dc:	d10c      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2101      	movs	r1, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 f8f5 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80063f4:	7ffb      	ldrb	r3, [r7, #31]
 80063f6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d04a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800640c:	d108      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800640e:	4b70      	ldr	r3, [pc, #448]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006410:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006414:	4a6e      	ldr	r2, [pc, #440]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006416:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800641a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800641e:	e012      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006420:	4b6b      	ldr	r3, [pc, #428]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800642e:	4968      	ldr	r1, [pc, #416]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006436:	4b66      	ldr	r3, [pc, #408]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006438:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800643c:	4a64      	ldr	r2, [pc, #400]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800643e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006442:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800644a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800644e:	d10d      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	2101      	movs	r1, #1
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f8bc 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006460:	7ffb      	ldrb	r3, [r7, #31]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d019      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006466:	7ffb      	ldrb	r3, [r7, #31]
 8006468:	77bb      	strb	r3, [r7, #30]
 800646a:	e016      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006474:	d106      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006476:	4b56      	ldr	r3, [pc, #344]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	4a55      	ldr	r2, [pc, #340]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800647c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006480:	60d3      	str	r3, [r2, #12]
 8006482:	e00a      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006488:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800648c:	d105      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800648e:	4b50      	ldr	r3, [pc, #320]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4a4f      	ldr	r2, [pc, #316]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006498:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d028      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a6:	4b4a      	ldr	r3, [pc, #296]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064b4:	4946      	ldr	r1, [pc, #280]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c4:	d106      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c6:	4b42      	ldr	r3, [pc, #264]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4a41      	ldr	r2, [pc, #260]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80064cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064d0:	60d3      	str	r3, [r2, #12]
 80064d2:	e011      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3304      	adds	r3, #4
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f875 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01e      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006504:	4b32      	ldr	r3, [pc, #200]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006514:	492e      	ldr	r1, [pc, #184]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006526:	d10c      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	2102      	movs	r1, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f850 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006538:	7ffb      	ldrb	r3, [r7, #31]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800653e:	7ffb      	ldrb	r3, [r7, #31]
 8006540:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800654e:	4b20      	ldr	r3, [pc, #128]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006554:	f023 0204 	bic.w	r2, r3, #4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800655e:	491c      	ldr	r1, [pc, #112]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006572:	4b17      	ldr	r3, [pc, #92]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006578:	f023 0218 	bic.w	r2, r3, #24
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	4913      	ldr	r1, [pc, #76]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d017      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006596:	4b0e      	ldr	r3, [pc, #56]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006598:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a6:	490a      	ldr	r1, [pc, #40]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065b8:	d105      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ba:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	4a04      	ldr	r2, [pc, #16]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80065c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065c4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80065c6:	7fbb      	ldrb	r3, [r7, #30]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40021000 	.word	0x40021000

080065d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d018      	beq.n	800661c <RCCEx_PLLSAI1_Config+0x48>
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d81f      	bhi.n	800662e <RCCEx_PLLSAI1_Config+0x5a>
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d002      	beq.n	80065f8 <RCCEx_PLLSAI1_Config+0x24>
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d009      	beq.n	800660a <RCCEx_PLLSAI1_Config+0x36>
 80065f6:	e01a      	b.n	800662e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065f8:	4b65      	ldr	r3, [pc, #404]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d117      	bne.n	8006634 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006608:	e014      	b.n	8006634 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800660a:	4b61      	ldr	r3, [pc, #388]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006612:	2b00      	cmp	r3, #0
 8006614:	d110      	bne.n	8006638 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800661a:	e00d      	b.n	8006638 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800661c:	4b5c      	ldr	r3, [pc, #368]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d109      	bne.n	800663c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800662c:	e006      	b.n	800663c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	73fb      	strb	r3, [r7, #15]
      break;
 8006632:	e004      	b.n	800663e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800663c:	bf00      	nop
  }

  if (status == HAL_OK)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 809f 	bne.w	8006784 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006646:	4b52      	ldr	r3, [pc, #328]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a51      	ldr	r2, [pc, #324]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 800664c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006652:	f7fc ff9b 	bl	800358c <HAL_GetTick>
 8006656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006658:	e00f      	b.n	800667a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800665a:	f7fc ff97 	bl	800358c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d908      	bls.n	800667a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006668:	4b49      	ldr	r3, [pc, #292]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006678:	e006      	b.n	8006688 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800667a:	4b45      	ldr	r3, [pc, #276]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e9      	bne.n	800665a <RCCEx_PLLSAI1_Config+0x86>
 8006686:	e000      	b.n	800668a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006688:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d179      	bne.n	8006784 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d116      	bne.n	80066c4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006696:	4b3e      	ldr	r3, [pc, #248]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	4b3e      	ldr	r3, [pc, #248]	@ (8006794 <RCCEx_PLLSAI1_Config+0x1c0>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6892      	ldr	r2, [r2, #8]
 80066a2:	0211      	lsls	r1, r2, #8
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68d2      	ldr	r2, [r2, #12]
 80066a8:	06d2      	lsls	r2, r2, #27
 80066aa:	4311      	orrs	r1, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6852      	ldr	r2, [r2, #4]
 80066b0:	3a01      	subs	r2, #1
 80066b2:	0112      	lsls	r2, r2, #4
 80066b4:	4311      	orrs	r1, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	4934      	ldr	r1, [pc, #208]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	610b      	str	r3, [r1, #16]
 80066c2:	e033      	b.n	800672c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d118      	bne.n	80066fc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ca:	4b31      	ldr	r3, [pc, #196]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	4b32      	ldr	r3, [pc, #200]	@ (8006798 <RCCEx_PLLSAI1_Config+0x1c4>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6892      	ldr	r2, [r2, #8]
 80066d6:	0211      	lsls	r1, r2, #8
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6912      	ldr	r2, [r2, #16]
 80066dc:	0852      	lsrs	r2, r2, #1
 80066de:	3a01      	subs	r2, #1
 80066e0:	0552      	lsls	r2, r2, #21
 80066e2:	4311      	orrs	r1, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6852      	ldr	r2, [r2, #4]
 80066e8:	3a01      	subs	r2, #1
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	4311      	orrs	r1, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6812      	ldr	r2, [r2, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	4926      	ldr	r1, [pc, #152]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	610b      	str	r3, [r1, #16]
 80066fa:	e017      	b.n	800672c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066fc:	4b24      	ldr	r3, [pc, #144]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	4b26      	ldr	r3, [pc, #152]	@ (800679c <RCCEx_PLLSAI1_Config+0x1c8>)
 8006702:	4013      	ands	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6892      	ldr	r2, [r2, #8]
 8006708:	0211      	lsls	r1, r2, #8
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6952      	ldr	r2, [r2, #20]
 800670e:	0852      	lsrs	r2, r2, #1
 8006710:	3a01      	subs	r2, #1
 8006712:	0652      	lsls	r2, r2, #25
 8006714:	4311      	orrs	r1, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6852      	ldr	r2, [r2, #4]
 800671a:	3a01      	subs	r2, #1
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	4311      	orrs	r1, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	491a      	ldr	r1, [pc, #104]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006728:	4313      	orrs	r3, r2
 800672a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800672c:	4b18      	ldr	r3, [pc, #96]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a17      	ldr	r2, [pc, #92]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fc ff28 	bl	800358c <HAL_GetTick>
 800673c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800673e:	e00f      	b.n	8006760 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006740:	f7fc ff24 	bl	800358c <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d908      	bls.n	8006760 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800674e:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800675e:	e006      	b.n	800676e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006760:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0e9      	beq.n	8006740 <RCCEx_PLLSAI1_Config+0x16c>
 800676c:	e000      	b.n	8006770 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800676e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006776:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	4904      	ldr	r1, [pc, #16]	@ (8006790 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000
 8006794:	07ff800c 	.word	0x07ff800c
 8006798:	ff9f800c 	.word	0xff9f800c
 800679c:	f9ff800c 	.word	0xf9ff800c

080067a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d018      	beq.n	80067e8 <RCCEx_PLLSAI2_Config+0x48>
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d81f      	bhi.n	80067fa <RCCEx_PLLSAI2_Config+0x5a>
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d002      	beq.n	80067c4 <RCCEx_PLLSAI2_Config+0x24>
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d009      	beq.n	80067d6 <RCCEx_PLLSAI2_Config+0x36>
 80067c2:	e01a      	b.n	80067fa <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067c4:	4b4a      	ldr	r3, [pc, #296]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d117      	bne.n	8006800 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d4:	e014      	b.n	8006800 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067d6:	4b46      	ldr	r3, [pc, #280]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d110      	bne.n	8006804 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e6:	e00d      	b.n	8006804 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80067e8:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f8:	e006      	b.n	8006808 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
      break;
 80067fe:	e004      	b.n	800680a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006800:	bf00      	nop
 8006802:	e002      	b.n	800680a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006808:	bf00      	nop
  }

  if (status == HAL_OK)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d169      	bne.n	80068e4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006810:	4b37      	ldr	r3, [pc, #220]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a36      	ldr	r2, [pc, #216]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800681a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800681c:	f7fc feb6 	bl	800358c <HAL_GetTick>
 8006820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006822:	e00f      	b.n	8006844 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006824:	f7fc feb2 	bl	800358c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d908      	bls.n	8006844 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006832:	4b2f      	ldr	r3, [pc, #188]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006842:	e006      	b.n	8006852 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006844:	4b2a      	ldr	r3, [pc, #168]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e9      	bne.n	8006824 <RCCEx_PLLSAI2_Config+0x84>
 8006850:	e000      	b.n	8006854 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006852:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d144      	bne.n	80068e4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d115      	bne.n	800688c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006860:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006862:	695a      	ldr	r2, [r3, #20]
 8006864:	4b23      	ldr	r3, [pc, #140]	@ (80068f4 <RCCEx_PLLSAI2_Config+0x154>)
 8006866:	4013      	ands	r3, r2
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6892      	ldr	r2, [r2, #8]
 800686c:	0211      	lsls	r1, r2, #8
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68d2      	ldr	r2, [r2, #12]
 8006872:	06d2      	lsls	r2, r2, #27
 8006874:	4311      	orrs	r1, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6852      	ldr	r2, [r2, #4]
 800687a:	3a01      	subs	r2, #1
 800687c:	0112      	lsls	r2, r2, #4
 800687e:	4311      	orrs	r1, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6812      	ldr	r2, [r2, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	491a      	ldr	r1, [pc, #104]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006888:	4313      	orrs	r3, r2
 800688a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800688c:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 8006892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fc fe78 	bl	800358c <HAL_GetTick>
 800689c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800689e:	e00f      	b.n	80068c0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068a0:	f7fc fe74 	bl	800358c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d908      	bls.n	80068c0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068ae:	4b10      	ldr	r3, [pc, #64]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80068be:	e006      	b.n	80068ce <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068c0:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0e9      	beq.n	80068a0 <RCCEx_PLLSAI2_Config+0x100>
 80068cc:	e000      	b.n	80068d0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80068ce:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80068d6:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80068d8:	695a      	ldr	r2, [r3, #20]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	4904      	ldr	r1, [pc, #16]	@ (80068f0 <RCCEx_PLLSAI2_Config+0x150>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40021000 	.word	0x40021000
 80068f4:	07ff800c 	.word	0x07ff800c

080068f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d066      	beq.n	80069d8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fc f8a4 	bl	8002a6c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b10      	cmp	r3, #16
 8006938:	d045      	beq.n	80069c6 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800693a:	4b2a      	ldr	r3, [pc, #168]	@ (80069e4 <HAL_RTC_Init+0xec>)
 800693c:	22ca      	movs	r2, #202	@ 0xca
 800693e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006940:	4b28      	ldr	r3, [pc, #160]	@ (80069e4 <HAL_RTC_Init+0xec>)
 8006942:	2253      	movs	r2, #83	@ 0x53
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f872 	bl	8006a30 <RTC_EnterInitMode>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d121      	bne.n	800699a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006956:	4b23      	ldr	r3, [pc, #140]	@ (80069e4 <HAL_RTC_Init+0xec>)
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	4a22      	ldr	r2, [pc, #136]	@ (80069e4 <HAL_RTC_Init+0xec>)
 800695c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006964:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006966:	4b1f      	ldr	r3, [pc, #124]	@ (80069e4 <HAL_RTC_Init+0xec>)
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	4319      	orrs	r1, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	430b      	orrs	r3, r1
 800697a:	491a      	ldr	r1, [pc, #104]	@ (80069e4 <HAL_RTC_Init+0xec>)
 800697c:	4313      	orrs	r3, r2
 800697e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4916      	ldr	r1, [pc, #88]	@ (80069e4 <HAL_RTC_Init+0xec>)
 800698c:	4313      	orrs	r3, r2
 800698e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f881 	bl	8006a98 <RTC_ExitInitMode>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10e      	bne.n	80069be <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80069a0:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <HAL_RTC_Init+0xec>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a19      	ldr	r1, [r3, #32]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4319      	orrs	r1, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	430b      	orrs	r3, r1
 80069b8:	490a      	ldr	r1, [pc, #40]	@ (80069e4 <HAL_RTC_Init+0xec>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069be:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <HAL_RTC_Init+0xec>)
 80069c0:	22ff      	movs	r2, #255	@ 0xff
 80069c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80069c4:	e001      	b.n	80069ca <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40002800 	.word	0x40002800

080069e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80069f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <HAL_RTC_WaitForSynchro+0x40>)
 80069f2:	4a0e      	ldr	r2, [pc, #56]	@ (8006a2c <HAL_RTC_WaitForSynchro+0x44>)
 80069f4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069f6:	f7fc fdc9 	bl	800358c <HAL_GetTick>
 80069fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80069fc:	e009      	b.n	8006a12 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069fe:	f7fc fdc5 	bl	800358c <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a0c:	d901      	bls.n	8006a12 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e006      	b.n	8006a20 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a12:	4b05      	ldr	r3, [pc, #20]	@ (8006a28 <HAL_RTC_WaitForSynchro+0x40>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ef      	beq.n	80069fe <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40002800 	.word	0x40002800
 8006a2c:	0001005c 	.word	0x0001005c

08006a30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a3c:	4b15      	ldr	r3, [pc, #84]	@ (8006a94 <RTC_EnterInitMode+0x64>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d120      	bne.n	8006a8a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a48:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <RTC_EnterInitMode+0x64>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	4a11      	ldr	r2, [pc, #68]	@ (8006a94 <RTC_EnterInitMode+0x64>)
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a52:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006a54:	f7fc fd9a 	bl	800358c <HAL_GetTick>
 8006a58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a5a:	e00d      	b.n	8006a78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5c:	f7fc fd96 	bl	800358c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a6a:	d905      	bls.n	8006a78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2203      	movs	r2, #3
 8006a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <RTC_EnterInitMode+0x64>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <RTC_EnterInitMode+0x5a>
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d1e8      	bne.n	8006a5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40002800 	.word	0x40002800

08006a98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4a19      	ldr	r2, [pc, #100]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aae:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ab0:	4b17      	ldr	r3, [pc, #92]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff93 	bl	80069e8 <HAL_RTC_WaitForSynchro>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01e      	beq.n	8006b06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2203      	movs	r2, #3
 8006acc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	73fb      	strb	r3, [r7, #15]
 8006ad4:	e017      	b.n	8006b06 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	4a0d      	ldr	r2, [pc, #52]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006adc:	f023 0320 	bic.w	r3, r3, #32
 8006ae0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff ff80 	bl	80069e8 <HAL_RTC_WaitForSynchro>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2203      	movs	r2, #3
 8006af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006afa:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	4a04      	ldr	r2, [pc, #16]	@ (8006b10 <RTC_ExitInitMode+0x78>)
 8006b00:	f043 0320 	orr.w	r3, r3, #32
 8006b04:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40002800 	.word	0x40002800

08006b14 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	490f      	ldr	r1, [pc, #60]	@ (8006b64 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	490c      	ldr	r1, [pc, #48]	@ (8006b68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6919      	ldr	r1, [r3, #16]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	4906      	ldr	r1, [pc, #24]	@ (8006b68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40002800 	.word	0x40002800
 8006b68:	40003400 	.word	0x40003400

08006b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e095      	b.n	8006caa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d108      	bne.n	8006b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b8e:	d009      	beq.n	8006ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	61da      	str	r2, [r3, #28]
 8006b96:	e005      	b.n	8006ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb ff92 	bl	8002ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006be4:	d902      	bls.n	8006bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e002      	b.n	8006bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bfa:	d007      	beq.n	8006c0c <HAL_SPI_Init+0xa0>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c04:	d002      	beq.n	8006c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	ea42 0103 	orr.w	r1, r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	f003 0204 	and.w	r2, r3, #4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c88:	ea42 0103 	orr.w	r1, r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b088      	sub	sp, #32
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_SPI_Transmit+0x22>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e15f      	b.n	8006f94 <HAL_SPI_Transmit+0x2e2>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cdc:	f7fc fc56 	bl	800358c <HAL_GetTick>
 8006ce0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cf6:	e148      	b.n	8006f8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x52>
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d08:	e13f      	b.n	8006f8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d54:	d10f      	bne.n	8006d76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d80:	2b40      	cmp	r3, #64	@ 0x40
 8006d82:	d007      	beq.n	8006d94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d9c:	d94f      	bls.n	8006e3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_SPI_Transmit+0xfa>
 8006da6:	8afb      	ldrh	r3, [r7, #22]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d142      	bne.n	8006e32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	881a      	ldrh	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	1c9a      	adds	r2, r3, #2
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dd0:	e02f      	b.n	8006e32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d112      	bne.n	8006e06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de4:	881a      	ldrh	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	1c9a      	adds	r2, r3, #2
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e04:	e015      	b.n	8006e32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e06:	f7fc fbc1 	bl	800358c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d803      	bhi.n	8006e1e <HAL_SPI_Transmit+0x16c>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d102      	bne.n	8006e24 <HAL_SPI_Transmit+0x172>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e30:	e0ab      	b.n	8006f8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ca      	bne.n	8006dd2 <HAL_SPI_Transmit+0x120>
 8006e3c:	e080      	b.n	8006f40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0x19a>
 8006e46:	8afb      	ldrh	r3, [r7, #22]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d174      	bne.n	8006f36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d912      	bls.n	8006e7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5a:	881a      	ldrh	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	1c9a      	adds	r2, r3, #2
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b02      	subs	r3, #2
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e7a:	e05c      	b.n	8006f36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ea2:	e048      	b.n	8006f36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d12b      	bne.n	8006f0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d912      	bls.n	8006ee2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b02      	subs	r3, #2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ee0:	e029      	b.n	8006f36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	330c      	adds	r3, #12
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f08:	e015      	b.n	8006f36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f0a:	f7fc fb3f 	bl	800358c <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d803      	bhi.n	8006f22 <HAL_SPI_Transmit+0x270>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d102      	bne.n	8006f28 <HAL_SPI_Transmit+0x276>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f34:	e029      	b.n	8006f8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1b1      	bne.n	8006ea4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fb69 	bl	800761c <SPI_EndRxTxTransaction>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2220      	movs	r2, #32
 8006f54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e003      	b.n	8006f8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3720      	adds	r7, #32
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	@ 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006faa:	2301      	movs	r3, #1
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x26>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e20a      	b.n	80073d8 <HAL_SPI_TransmitReceive+0x43c>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fca:	f7fc fadf 	bl	800358c <HAL_GetTick>
 8006fce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fd6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006fde:	887b      	ldrh	r3, [r7, #2]
 8006fe0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006fe2:	887b      	ldrh	r3, [r7, #2]
 8006fe4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fe6:	7efb      	ldrb	r3, [r7, #27]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d00e      	beq.n	800700a <HAL_SPI_TransmitReceive+0x6e>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff2:	d106      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d102      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x66>
 8006ffc:	7efb      	ldrb	r3, [r7, #27]
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d003      	beq.n	800700a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007002:	2302      	movs	r3, #2
 8007004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007008:	e1e0      	b.n	80073cc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_SPI_TransmitReceive+0x80>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_SPI_TransmitReceive+0x80>
 8007016:	887b      	ldrh	r3, [r7, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d103      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007022:	e1d3      	b.n	80073cc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b04      	cmp	r3, #4
 800702e:	d003      	beq.n	8007038 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2205      	movs	r2, #5
 8007034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	887a      	ldrh	r2, [r7, #2]
 8007048:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	887a      	ldrh	r2, [r7, #2]
 8007050:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	887a      	ldrh	r2, [r7, #2]
 800705e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	887a      	ldrh	r2, [r7, #2]
 8007064:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800707a:	d802      	bhi.n	8007082 <HAL_SPI_TransmitReceive+0xe6>
 800707c:	8a3b      	ldrh	r3, [r7, #16]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d908      	bls.n	8007094 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	e007      	b.n	80070a4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	d007      	beq.n	80070c2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070ca:	f240 8081 	bls.w	80071d0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_SPI_TransmitReceive+0x140>
 80070d6:	8a7b      	ldrh	r3, [r7, #18]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d16d      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	881a      	ldrh	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007100:	e05a      	b.n	80071b8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d11b      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x1ac>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d016      	beq.n	8007148 <HAL_SPI_TransmitReceive+0x1ac>
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	2b01      	cmp	r3, #1
 800711e:	d113      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007124:	881a      	ldrh	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	1c9a      	adds	r2, r3, #2
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	d11c      	bne.n	8007190 <HAL_SPI_TransmitReceive+0x1f4>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	b292      	uxth	r2, r2
 800716e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	1c9a      	adds	r2, r3, #2
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800718c:	2301      	movs	r3, #1
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007190:	f7fc f9fc 	bl	800358c <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719c:	429a      	cmp	r2, r3
 800719e:	d80b      	bhi.n	80071b8 <HAL_SPI_TransmitReceive+0x21c>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a6:	d007      	beq.n	80071b8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80071b6:	e109      	b.n	80073cc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d19f      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x166>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d199      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x166>
 80071ce:	e0e3      	b.n	8007398 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_SPI_TransmitReceive+0x244>
 80071d8:	8a7b      	ldrh	r3, [r7, #18]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	f040 80cf 	bne.w	800737e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d912      	bls.n	8007210 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fa:	1c9a      	adds	r2, r3, #2
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b02      	subs	r3, #2
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800720e:	e0b6      	b.n	800737e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	330c      	adds	r3, #12
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007236:	e0a2      	b.n	800737e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b02      	cmp	r3, #2
 8007244:	d134      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x314>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02f      	beq.n	80072b0 <HAL_SPI_TransmitReceive+0x314>
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	2b01      	cmp	r3, #1
 8007254:	d12c      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	d912      	bls.n	8007286 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	881a      	ldrh	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007270:	1c9a      	adds	r2, r3, #2
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b02      	subs	r3, #2
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007284:	e012      	b.n	80072ac <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d148      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x3b4>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d042      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d923      	bls.n	800731e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e0:	b292      	uxth	r2, r2
 80072e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b02      	subs	r3, #2
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d81f      	bhi.n	800734c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	e016      	b.n	800734c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f103 020c 	add.w	r2, r3, #12
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800734c:	2301      	movs	r3, #1
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007350:	f7fc f91c 	bl	800358c <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735c:	429a      	cmp	r2, r3
 800735e:	d803      	bhi.n	8007368 <HAL_SPI_TransmitReceive+0x3cc>
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d102      	bne.n	800736e <HAL_SPI_TransmitReceive+0x3d2>
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	2b00      	cmp	r3, #0
 800736c:	d107      	bne.n	800737e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800737c:	e026      	b.n	80073cc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	f47f af57 	bne.w	8007238 <HAL_SPI_TransmitReceive+0x29c>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f af50 	bne.w	8007238 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f93d 	bl	800761c <SPI_EndRxTxTransaction>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c2:	e003      	b.n	80073cc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80073d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3728      	adds	r7, #40	@ 0x28
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073f0:	f7fc f8cc 	bl	800358c <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4413      	add	r3, r2
 80073fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007400:	f7fc f8c4 	bl	800358c <HAL_GetTick>
 8007404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007406:	4b39      	ldr	r3, [pc, #228]	@ (80074ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	015b      	lsls	r3, r3, #5
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	fb02 f303 	mul.w	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007416:	e054      	b.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d050      	beq.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007420:	f7fc f8b4 	bl	800358c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	429a      	cmp	r2, r3
 800742e:	d902      	bls.n	8007436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d13d      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800744e:	d111      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007458:	d004      	beq.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007462:	d107      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800747c:	d10f      	bne.n	800749e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800749c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e017      	b.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3b01      	subs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4013      	ands	r3, r2
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	bf0c      	ite	eq
 80074d2:	2301      	moveq	r3, #1
 80074d4:	2300      	movne	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d19b      	bne.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000000 	.word	0x20000000

080074f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	@ 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007502:	f7fc f843 	bl	800358c <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	4413      	add	r3, r2
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007512:	f7fc f83b 	bl	800358c <HAL_GetTick>
 8007516:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007520:	4b3d      	ldr	r3, [pc, #244]	@ (8007618 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	00da      	lsls	r2, r3, #3
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	0d1b      	lsrs	r3, r3, #20
 8007530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007532:	fb02 f303 	mul.w	r3, r2, r3
 8007536:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007538:	e060      	b.n	80075fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007540:	d107      	bne.n	8007552 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007550:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d050      	beq.n	80075fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800755a:	f7fc f817 	bl	800358c <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007566:	429a      	cmp	r2, r3
 8007568:	d902      	bls.n	8007570 <SPI_WaitFifoStateUntilTimeout+0x80>
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d13d      	bne.n	80075ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800757e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007588:	d111      	bne.n	80075ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007592:	d004      	beq.n	800759e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800759c:	d107      	bne.n	80075ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b6:	d10f      	bne.n	80075d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e010      	b.n	800760e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4013      	ands	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d196      	bne.n	800753a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3728      	adds	r7, #40	@ 0x28
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000000 	.word	0x20000000

0800761c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7ff ff5b 	bl	80074f0 <SPI_WaitFifoStateUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007644:	f043 0220 	orr.w	r2, r3, #32
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e027      	b.n	80076a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	2180      	movs	r1, #128	@ 0x80
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fec0 	bl	80073e0 <SPI_WaitFlagStateUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e014      	b.n	80076a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff ff34 	bl	80074f0 <SPI_WaitFifoStateUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007692:	f043 0220 	orr.w	r2, r3, #32
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e000      	b.n	80076a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e042      	b.n	8007740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fb fa4f 	bl	8002b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2224      	movs	r2, #36	@ 0x24
 80076d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fb28 	bl	8007d48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f825 	bl	8007748 <UART_SetConfig>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e01b      	b.n	8007740 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fba7 	bl	8007e8c <UART_CheckIdleState>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800774c:	b08c      	sub	sp, #48	@ 0x30
 800774e:	af00      	add	r7, sp, #0
 8007750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	431a      	orrs	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	4313      	orrs	r3, r2
 800776e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4baa      	ldr	r3, [pc, #680]	@ (8007a20 <UART_SetConfig+0x2d8>)
 8007778:	4013      	ands	r3, r2
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007780:	430b      	orrs	r3, r1
 8007782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a9f      	ldr	r2, [pc, #636]	@ (8007a24 <UART_SetConfig+0x2dc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077b0:	4313      	orrs	r3, r2
 80077b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80077be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d2:	f023 010f 	bic.w	r1, r3, #15
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a90      	ldr	r2, [pc, #576]	@ (8007a28 <UART_SetConfig+0x2e0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d125      	bne.n	8007838 <UART_SetConfig+0xf0>
 80077ec:	4b8f      	ldr	r3, [pc, #572]	@ (8007a2c <UART_SetConfig+0x2e4>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d81a      	bhi.n	8007830 <UART_SetConfig+0xe8>
 80077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007800 <UART_SetConfig+0xb8>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007811 	.word	0x08007811
 8007804:	08007821 	.word	0x08007821
 8007808:	08007819 	.word	0x08007819
 800780c:	08007829 	.word	0x08007829
 8007810:	2301      	movs	r3, #1
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007816:	e116      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e112      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007826:	e10e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782e:	e10a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e106      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a7c      	ldr	r2, [pc, #496]	@ (8007a30 <UART_SetConfig+0x2e8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d138      	bne.n	80078b4 <UART_SetConfig+0x16c>
 8007842:	4b7a      	ldr	r3, [pc, #488]	@ (8007a2c <UART_SetConfig+0x2e4>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b0c      	cmp	r3, #12
 800784e:	d82d      	bhi.n	80078ac <UART_SetConfig+0x164>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <UART_SetConfig+0x110>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800788d 	.word	0x0800788d
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080078ad 	.word	0x080078ad
 8007864:	080078ad 	.word	0x080078ad
 8007868:	0800789d 	.word	0x0800789d
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078ad 	.word	0x080078ad
 8007874:	080078ad 	.word	0x080078ad
 8007878:	08007895 	.word	0x08007895
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078ad 	.word	0x080078ad
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078a5 	.word	0x080078a5
 800788c:	2300      	movs	r3, #0
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007892:	e0d8      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007894:	2302      	movs	r3, #2
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789a:	e0d4      	b.n	8007a46 <UART_SetConfig+0x2fe>
 800789c:	2304      	movs	r3, #4
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a2:	e0d0      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078a4:	2308      	movs	r3, #8
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078aa:	e0cc      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b2:	e0c8      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a5e      	ldr	r2, [pc, #376]	@ (8007a34 <UART_SetConfig+0x2ec>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d125      	bne.n	800790a <UART_SetConfig+0x1c2>
 80078be:	4b5b      	ldr	r3, [pc, #364]	@ (8007a2c <UART_SetConfig+0x2e4>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078c8:	2b30      	cmp	r3, #48	@ 0x30
 80078ca:	d016      	beq.n	80078fa <UART_SetConfig+0x1b2>
 80078cc:	2b30      	cmp	r3, #48	@ 0x30
 80078ce:	d818      	bhi.n	8007902 <UART_SetConfig+0x1ba>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d00a      	beq.n	80078ea <UART_SetConfig+0x1a2>
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d814      	bhi.n	8007902 <UART_SetConfig+0x1ba>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <UART_SetConfig+0x19a>
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d008      	beq.n	80078f2 <UART_SetConfig+0x1aa>
 80078e0:	e00f      	b.n	8007902 <UART_SetConfig+0x1ba>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e8:	e0ad      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078ea:	2302      	movs	r3, #2
 80078ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f0:	e0a9      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078f2:	2304      	movs	r3, #4
 80078f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f8:	e0a5      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078fa:	2308      	movs	r3, #8
 80078fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007900:	e0a1      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007902:	2310      	movs	r3, #16
 8007904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007908:	e09d      	b.n	8007a46 <UART_SetConfig+0x2fe>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a4a      	ldr	r2, [pc, #296]	@ (8007a38 <UART_SetConfig+0x2f0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d125      	bne.n	8007960 <UART_SetConfig+0x218>
 8007914:	4b45      	ldr	r3, [pc, #276]	@ (8007a2c <UART_SetConfig+0x2e4>)
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800791e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007920:	d016      	beq.n	8007950 <UART_SetConfig+0x208>
 8007922:	2bc0      	cmp	r3, #192	@ 0xc0
 8007924:	d818      	bhi.n	8007958 <UART_SetConfig+0x210>
 8007926:	2b80      	cmp	r3, #128	@ 0x80
 8007928:	d00a      	beq.n	8007940 <UART_SetConfig+0x1f8>
 800792a:	2b80      	cmp	r3, #128	@ 0x80
 800792c:	d814      	bhi.n	8007958 <UART_SetConfig+0x210>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <UART_SetConfig+0x1f0>
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d008      	beq.n	8007948 <UART_SetConfig+0x200>
 8007936:	e00f      	b.n	8007958 <UART_SetConfig+0x210>
 8007938:	2300      	movs	r3, #0
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e082      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007940:	2302      	movs	r3, #2
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e07e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794e:	e07a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007956:	e076      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795e:	e072      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a35      	ldr	r2, [pc, #212]	@ (8007a3c <UART_SetConfig+0x2f4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d12a      	bne.n	80079c0 <UART_SetConfig+0x278>
 800796a:	4b30      	ldr	r3, [pc, #192]	@ (8007a2c <UART_SetConfig+0x2e4>)
 800796c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007978:	d01a      	beq.n	80079b0 <UART_SetConfig+0x268>
 800797a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800797e:	d81b      	bhi.n	80079b8 <UART_SetConfig+0x270>
 8007980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007984:	d00c      	beq.n	80079a0 <UART_SetConfig+0x258>
 8007986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800798a:	d815      	bhi.n	80079b8 <UART_SetConfig+0x270>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <UART_SetConfig+0x250>
 8007990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007994:	d008      	beq.n	80079a8 <UART_SetConfig+0x260>
 8007996:	e00f      	b.n	80079b8 <UART_SetConfig+0x270>
 8007998:	2300      	movs	r3, #0
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e052      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079a0:	2302      	movs	r3, #2
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e04e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079a8:	2304      	movs	r3, #4
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ae:	e04a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079b0:	2308      	movs	r3, #8
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e046      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079b8:	2310      	movs	r3, #16
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079be:	e042      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a17      	ldr	r2, [pc, #92]	@ (8007a24 <UART_SetConfig+0x2dc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d13a      	bne.n	8007a40 <UART_SetConfig+0x2f8>
 80079ca:	4b18      	ldr	r3, [pc, #96]	@ (8007a2c <UART_SetConfig+0x2e4>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079d8:	d01a      	beq.n	8007a10 <UART_SetConfig+0x2c8>
 80079da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079de:	d81b      	bhi.n	8007a18 <UART_SetConfig+0x2d0>
 80079e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079e4:	d00c      	beq.n	8007a00 <UART_SetConfig+0x2b8>
 80079e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ea:	d815      	bhi.n	8007a18 <UART_SetConfig+0x2d0>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <UART_SetConfig+0x2b0>
 80079f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f4:	d008      	beq.n	8007a08 <UART_SetConfig+0x2c0>
 80079f6:	e00f      	b.n	8007a18 <UART_SetConfig+0x2d0>
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	e022      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	e01e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0e:	e01a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a16:	e016      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1e:	e012      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a20:	cfff69f3 	.word	0xcfff69f3
 8007a24:	40008000 	.word	0x40008000
 8007a28:	40013800 	.word	0x40013800
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40004400 	.word	0x40004400
 8007a34:	40004800 	.word	0x40004800
 8007a38:	40004c00 	.word	0x40004c00
 8007a3c:	40005000 	.word	0x40005000
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4ab0      	ldr	r2, [pc, #704]	@ (8007d0c <UART_SetConfig+0x5c4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	f040 809b 	bne.w	8007b88 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d827      	bhi.n	8007aaa <UART_SetConfig+0x362>
 8007a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a60 <UART_SetConfig+0x318>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007a85 	.word	0x08007a85
 8007a64:	08007a8d 	.word	0x08007a8d
 8007a68:	08007a95 	.word	0x08007a95
 8007a6c:	08007aab 	.word	0x08007aab
 8007a70:	08007a9b 	.word	0x08007a9b
 8007a74:	08007aab 	.word	0x08007aab
 8007a78:	08007aab 	.word	0x08007aab
 8007a7c:	08007aab 	.word	0x08007aab
 8007a80:	08007aa3 	.word	0x08007aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a84:	f7fe f928 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a8a:	e014      	b.n	8007ab6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a8c:	f7fe f938 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a92:	e010      	b.n	8007ab6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a94:	4b9e      	ldr	r3, [pc, #632]	@ (8007d10 <UART_SetConfig+0x5c8>)
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a98:	e00d      	b.n	8007ab6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a9a:	f7fe f86b 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8007a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aa0:	e009      	b.n	8007ab6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007aa8:	e005      	b.n	8007ab6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 8130 	beq.w	8007d1e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	4a94      	ldr	r2, [pc, #592]	@ (8007d14 <UART_SetConfig+0x5cc>)
 8007ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4413      	add	r3, r2
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d305      	bcc.n	8007aee <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d903      	bls.n	8007af6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007af4:	e113      	b.n	8007d1e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	2200      	movs	r2, #0
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	60fa      	str	r2, [r7, #12]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	4a84      	ldr	r2, [pc, #528]	@ (8007d14 <UART_SetConfig+0x5cc>)
 8007b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b18:	f7f9 f80c 	bl	8000b34 <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	020b      	lsls	r3, r1, #8
 8007b2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b32:	0202      	lsls	r2, r0, #8
 8007b34:	6979      	ldr	r1, [r7, #20]
 8007b36:	6849      	ldr	r1, [r1, #4]
 8007b38:	0849      	lsrs	r1, r1, #1
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	4605      	mov	r5, r0
 8007b40:	eb12 0804 	adds.w	r8, r2, r4
 8007b44:	eb43 0905 	adc.w	r9, r3, r5
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	469a      	mov	sl, r3
 8007b50:	4693      	mov	fp, r2
 8007b52:	4652      	mov	r2, sl
 8007b54:	465b      	mov	r3, fp
 8007b56:	4640      	mov	r0, r8
 8007b58:	4649      	mov	r1, r9
 8007b5a:	f7f8 ffeb 	bl	8000b34 <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4613      	mov	r3, r2
 8007b64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b6c:	d308      	bcc.n	8007b80 <UART_SetConfig+0x438>
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b74:	d204      	bcs.n	8007b80 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	e0ce      	b.n	8007d1e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b86:	e0ca      	b.n	8007d1e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b90:	d166      	bne.n	8007c60 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007b92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d827      	bhi.n	8007bea <UART_SetConfig+0x4a2>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <UART_SetConfig+0x458>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007beb 	.word	0x08007beb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007beb 	.word	0x08007beb
 8007bb8:	08007beb 	.word	0x08007beb
 8007bbc:	08007beb 	.word	0x08007beb
 8007bc0:	08007be3 	.word	0x08007be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc4:	f7fe f888 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bca:	e014      	b.n	8007bf6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bcc:	f7fe f898 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bd2:	e010      	b.n	8007bf6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8007d10 <UART_SetConfig+0x5c8>)
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bd8:	e00d      	b.n	8007bf6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bda:	f7fd ffcb 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8007bde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007be0:	e009      	b.n	8007bf6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007be6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007be8:	e005      	b.n	8007bf6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8090 	beq.w	8007d1e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c02:	4a44      	ldr	r2, [pc, #272]	@ (8007d14 <UART_SetConfig+0x5cc>)
 8007c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c10:	005a      	lsls	r2, r3, #1
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	441a      	add	r2, r3
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d916      	bls.n	8007c58 <UART_SetConfig+0x510>
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c30:	d212      	bcs.n	8007c58 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f023 030f 	bic.w	r3, r3, #15
 8007c3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	8bfb      	ldrh	r3, [r7, #30]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	8bfa      	ldrh	r2, [r7, #30]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e062      	b.n	8007d1e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c5e:	e05e      	b.n	8007d1e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d828      	bhi.n	8007cba <UART_SetConfig+0x572>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <UART_SetConfig+0x528>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c95 	.word	0x08007c95
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007cbb 	.word	0x08007cbb
 8007c80:	08007cab 	.word	0x08007cab
 8007c84:	08007cbb 	.word	0x08007cbb
 8007c88:	08007cbb 	.word	0x08007cbb
 8007c8c:	08007cbb 	.word	0x08007cbb
 8007c90:	08007cb3 	.word	0x08007cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fe f820 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c9a:	e014      	b.n	8007cc6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c9c:	f7fe f830 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007ca0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ca2:	e010      	b.n	8007cc6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d10 <UART_SetConfig+0x5c8>)
 8007ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ca8:	e00d      	b.n	8007cc6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007caa:	f7fd ff63 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8007cae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cb0:	e009      	b.n	8007cc6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cb8:	e005      	b.n	8007cc6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cc4:	bf00      	nop
    }

    if (pclk != 0U)
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d028      	beq.n	8007d1e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	4a10      	ldr	r2, [pc, #64]	@ (8007d14 <UART_SetConfig+0x5cc>)
 8007cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	441a      	add	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	d910      	bls.n	8007d18 <UART_SetConfig+0x5d0>
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cfc:	d20c      	bcs.n	8007d18 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e009      	b.n	8007d1e <UART_SetConfig+0x5d6>
 8007d0a:	bf00      	nop
 8007d0c:	40008000 	.word	0x40008000
 8007d10:	00f42400 	.word	0x00f42400
 8007d14:	0800a094 	.word	0x0800a094
      }
      else
      {
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3730      	adds	r7, #48	@ 0x30
 8007d42:	46bd      	mov	sp, r7
 8007d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e46:	d10a      	bne.n	8007e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b098      	sub	sp, #96	@ 0x60
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e9c:	f7fb fb76 	bl	800358c <HAL_GetTick>
 8007ea0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d12f      	bne.n	8007f10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f88e 	bl	8007fe0 <UART_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d022      	beq.n	8007f10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e6      	bne.n	8007eca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e063      	b.n	8007fd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d149      	bne.n	8007fb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f26:	2200      	movs	r2, #0
 8007f28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f857 	bl	8007fe0 <UART_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03c      	beq.n	8007fb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	623b      	str	r3, [r7, #32]
   return(result);
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e6      	bne.n	8007f38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f8a:	61fa      	str	r2, [r7, #28]
 8007f8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	69b9      	ldr	r1, [r7, #24]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	617b      	str	r3, [r7, #20]
   return(result);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e5      	bne.n	8007f6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e012      	b.n	8007fd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3758      	adds	r7, #88	@ 0x58
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	4613      	mov	r3, r2
 8007fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff0:	e04f      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d04b      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffa:	f7fb fac7 	bl	800358c <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	429a      	cmp	r2, r3
 8008008:	d302      	bcc.n	8008010 <UART_WaitOnFlagUntilTimeout+0x30>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e04e      	b.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d037      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b80      	cmp	r3, #128	@ 0x80
 8008026:	d034      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b40      	cmp	r3, #64	@ 0x40
 800802c:	d031      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b08      	cmp	r3, #8
 800803a:	d110      	bne.n	800805e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2208      	movs	r2, #8
 8008042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f838 	bl	80080ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2208      	movs	r2, #8
 800804e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e029      	b.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800806c:	d111      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f81e 	bl	80080ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2220      	movs	r2, #32
 8008082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e00f      	b.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4013      	ands	r3, r2
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	429a      	cmp	r2, r3
 80080a0:	bf0c      	ite	eq
 80080a2:	2301      	moveq	r3, #1
 80080a4:	2300      	movne	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d0a0      	beq.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b095      	sub	sp, #84	@ 0x54
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3308      	adds	r3, #8
 80080fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	61fb      	str	r3, [r7, #28]
   return(result);
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800811a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800811e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e3      	bne.n	80080f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d118      	bne.n	8008166 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	60bb      	str	r3, [r7, #8]
   return(result);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f023 0310 	bic.w	r3, r3, #16
 8008148:	647b      	str	r3, [r7, #68]	@ 0x44
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008152:	61bb      	str	r3, [r7, #24]
 8008154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6979      	ldr	r1, [r7, #20]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	613b      	str	r3, [r7, #16]
   return(result);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e6      	bne.n	8008134 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800817a:	bf00      	nop
 800817c:	3754      	adds	r7, #84	@ 0x54
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008186:	b480      	push	{r7}
 8008188:	b085      	sub	sp, #20
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_UARTEx_DisableFifoMode+0x16>
 8008198:	2302      	movs	r3, #2
 800819a:	e027      	b.n	80081ec <HAL_UARTEx_DisableFifoMode+0x66>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2224      	movs	r2, #36	@ 0x24
 80081a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0201 	bic.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800820c:	2302      	movs	r3, #2
 800820e:	e02d      	b.n	800826c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2224      	movs	r2, #36	@ 0x24
 800821c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f84f 	bl	80082f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008288:	2302      	movs	r3, #2
 800828a:	e02d      	b.n	80082e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2224      	movs	r2, #36	@ 0x24
 8008298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0201 	bic.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f811 	bl	80082f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d108      	bne.n	8008312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008310:	e031      	b.n	8008376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008312:	2308      	movs	r3, #8
 8008314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008316:	2308      	movs	r3, #8
 8008318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	0e5b      	lsrs	r3, r3, #25
 8008322:	b2db      	uxtb	r3, r3
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	0f5b      	lsrs	r3, r3, #29
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	7b3a      	ldrb	r2, [r7, #12]
 800833e:	4911      	ldr	r1, [pc, #68]	@ (8008384 <UARTEx_SetNbDataToProcess+0x94>)
 8008340:	5c8a      	ldrb	r2, [r1, r2]
 8008342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008346:	7b3a      	ldrb	r2, [r7, #12]
 8008348:	490f      	ldr	r1, [pc, #60]	@ (8008388 <UARTEx_SetNbDataToProcess+0x98>)
 800834a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800834c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	7b7a      	ldrb	r2, [r7, #13]
 800835c:	4909      	ldr	r1, [pc, #36]	@ (8008384 <UARTEx_SetNbDataToProcess+0x94>)
 800835e:	5c8a      	ldrb	r2, [r1, r2]
 8008360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008364:	7b7a      	ldrb	r2, [r7, #13]
 8008366:	4908      	ldr	r1, [pc, #32]	@ (8008388 <UARTEx_SetNbDataToProcess+0x98>)
 8008368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800836a:	fb93 f3f2 	sdiv	r3, r3, r2
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	0800a0ac 	.word	0x0800a0ac
 8008388:	0800a0b4 	.word	0x0800a0b4

0800838c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800838c:	b480      	push	{r7}
 800838e:	b08b      	sub	sp, #44	@ 0x2c
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	fa93 f3a3 	rbit	r3, r3
 80083a6:	613b      	str	r3, [r7, #16]
  return result;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80083b2:	2320      	movs	r3, #32
 80083b4:	e003      	b.n	80083be <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	fab3 f383 	clz	r3, r3
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	2103      	movs	r1, #3
 80083c2:	fa01 f303 	lsl.w	r3, r1, r3
 80083c6:	43db      	mvns	r3, r3
 80083c8:	401a      	ands	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	fa93 f3a3 	rbit	r3, r3
 80083d4:	61fb      	str	r3, [r7, #28]
  return result;
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80083e0:	2320      	movs	r3, #32
 80083e2:	e003      	b.n	80083ec <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80083e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e6:	fab3 f383 	clz	r3, r3
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	fa01 f303 	lsl.w	r3, r1, r3
 80083f4:	431a      	orrs	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	601a      	str	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	372c      	adds	r7, #44	@ 0x2c
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	43db      	mvns	r3, r3
 800841a:	401a      	ands	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	431a      	orrs	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	605a      	str	r2, [r3, #4]
}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008436:	b480      	push	{r7}
 8008438:	b08b      	sub	sp, #44	@ 0x2c
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	fa93 f3a3 	rbit	r3, r3
 8008450:	613b      	str	r3, [r7, #16]
  return result;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800845c:	2320      	movs	r3, #32
 800845e:	e003      	b.n	8008468 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	fab3 f383 	clz	r3, r3
 8008466:	b2db      	uxtb	r3, r3
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	2103      	movs	r1, #3
 800846c:	fa01 f303 	lsl.w	r3, r1, r3
 8008470:	43db      	mvns	r3, r3
 8008472:	401a      	ands	r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	fa93 f3a3 	rbit	r3, r3
 800847e:	61fb      	str	r3, [r7, #28]
  return result;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800848a:	2320      	movs	r3, #32
 800848c:	e003      	b.n	8008496 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	fab3 f383 	clz	r3, r3
 8008494:	b2db      	uxtb	r3, r3
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	fa01 f303 	lsl.w	r3, r1, r3
 800849e:	431a      	orrs	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80084a4:	bf00      	nop
 80084a6:	372c      	adds	r7, #44	@ 0x2c
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b08b      	sub	sp, #44	@ 0x2c
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	fa93 f3a3 	rbit	r3, r3
 80084ca:	613b      	str	r3, [r7, #16]
  return result;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80084d6:	2320      	movs	r3, #32
 80084d8:	e003      	b.n	80084e2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	fab3 f383 	clz	r3, r3
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	2103      	movs	r1, #3
 80084e6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ea:	43db      	mvns	r3, r3
 80084ec:	401a      	ands	r2, r3
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	fa93 f3a3 	rbit	r3, r3
 80084f8:	61fb      	str	r3, [r7, #28]
  return result;
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008504:	2320      	movs	r3, #32
 8008506:	e003      	b.n	8008510 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	fab3 f383 	clz	r3, r3
 800850e:	b2db      	uxtb	r3, r3
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	fa01 f303 	lsl.w	r3, r1, r3
 8008518:	431a      	orrs	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	60da      	str	r2, [r3, #12]
}
 800851e:	bf00      	nop
 8008520:	372c      	adds	r7, #44	@ 0x2c
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800852a:	b480      	push	{r7}
 800852c:	b08b      	sub	sp, #44	@ 0x2c
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1a      	ldr	r2, [r3, #32]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	fa93 f3a3 	rbit	r3, r3
 8008544:	613b      	str	r3, [r7, #16]
  return result;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008550:	2320      	movs	r3, #32
 8008552:	e003      	b.n	800855c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	fab3 f383 	clz	r3, r3
 800855a:	b2db      	uxtb	r3, r3
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	210f      	movs	r1, #15
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	43db      	mvns	r3, r3
 8008566:	401a      	ands	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	fa93 f3a3 	rbit	r3, r3
 8008572:	61fb      	str	r3, [r7, #28]
  return result;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800857e:	2320      	movs	r3, #32
 8008580:	e003      	b.n	800858a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	fab3 f383 	clz	r3, r3
 8008588:	b2db      	uxtb	r3, r3
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	fa01 f303 	lsl.w	r3, r1, r3
 8008592:	431a      	orrs	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008598:	bf00      	nop
 800859a:	372c      	adds	r7, #44	@ 0x2c
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b08b      	sub	sp, #44	@ 0x2c
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	0a1b      	lsrs	r3, r3, #8
 80085b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	fa93 f3a3 	rbit	r3, r3
 80085c0:	613b      	str	r3, [r7, #16]
  return result;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80085cc:	2320      	movs	r3, #32
 80085ce:	e003      	b.n	80085d8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	fab3 f383 	clz	r3, r3
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	210f      	movs	r1, #15
 80085dc:	fa01 f303 	lsl.w	r3, r1, r3
 80085e0:	43db      	mvns	r3, r3
 80085e2:	401a      	ands	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	0a1b      	lsrs	r3, r3, #8
 80085e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	fa93 f3a3 	rbit	r3, r3
 80085f0:	61fb      	str	r3, [r7, #28]
  return result;
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80085fc:	2320      	movs	r3, #32
 80085fe:	e003      	b.n	8008608 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	fab3 f383 	clz	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	fa01 f303 	lsl.w	r3, r1, r3
 8008610:	431a      	orrs	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008616:	bf00      	nop
 8008618:	372c      	adds	r7, #44	@ 0x2c
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b088      	sub	sp, #32
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	fa93 f3a3 	rbit	r3, r3
 8008638:	60fb      	str	r3, [r7, #12]
  return result;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <LL_GPIO_Init+0x26>
    return 32U;
 8008644:	2320      	movs	r3, #32
 8008646:	e003      	b.n	8008650 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	fab3 f383 	clz	r3, r3
 800864e:	b2db      	uxtb	r3, r3
 8008650:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008652:	e047      	b.n	80086e4 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	2101      	movs	r1, #1
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	4013      	ands	r3, r2
 8008662:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d039      	beq.n	80086de <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d003      	beq.n	800867a <LL_GPIO_Init+0x58>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d10d      	bne.n	8008696 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	461a      	mov	r2, r3
 8008680:	69b9      	ldr	r1, [r7, #24]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff fed7 	bl	8008436 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	461a      	mov	r2, r3
 800868e:	69b9      	ldr	r1, [r7, #24]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff feb8 	bl	8008406 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	461a      	mov	r2, r3
 800869c:	69b9      	ldr	r1, [r7, #24]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff ff06 	bl	80084b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d111      	bne.n	80086d0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2bff      	cmp	r3, #255	@ 0xff
 80086b0:	d807      	bhi.n	80086c2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	461a      	mov	r2, r3
 80086b8:	69b9      	ldr	r1, [r7, #24]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff ff35 	bl	800852a <LL_GPIO_SetAFPin_0_7>
 80086c0:	e006      	b.n	80086d0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	461a      	mov	r2, r3
 80086c8:	69b9      	ldr	r1, [r7, #24]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff ff6a 	bl	80085a4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	461a      	mov	r2, r3
 80086d6:	69b9      	ldr	r1, [r7, #24]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff fe57 	bl	800838c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3301      	adds	r3, #1
 80086e2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	fa22 f303 	lsr.w	r3, r2, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1b0      	bne.n	8008654 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008704:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	b29b      	uxth	r3, r3
 8008716:	43db      	mvns	r3, r3
 8008718:	b29b      	uxth	r3, r3
 800871a:	4013      	ands	r3, r2
 800871c:	b29a      	uxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	1d3b      	adds	r3, r7, #4
 800873c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <cos>:
 8008770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008772:	ec53 2b10 	vmov	r2, r3, d0
 8008776:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800877a:	4825      	ldr	r0, [pc, #148]	@ (8008810 <cos+0xa0>)
 800877c:	4281      	cmp	r1, r0
 800877e:	d806      	bhi.n	800878e <cos+0x1e>
 8008780:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008808 <cos+0x98>
 8008784:	b005      	add	sp, #20
 8008786:	f85d eb04 	ldr.w	lr, [sp], #4
 800878a:	f000 b8c9 	b.w	8008920 <__kernel_cos>
 800878e:	4821      	ldr	r0, [pc, #132]	@ (8008814 <cos+0xa4>)
 8008790:	4281      	cmp	r1, r0
 8008792:	d908      	bls.n	80087a6 <cos+0x36>
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	f7f7 fd52 	bl	8000240 <__aeabi_dsub>
 800879c:	ec41 0b10 	vmov	d0, r0, r1
 80087a0:	b005      	add	sp, #20
 80087a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80087a6:	4668      	mov	r0, sp
 80087a8:	f000 fa3e 	bl	8008c28 <__ieee754_rem_pio2>
 80087ac:	f000 0003 	and.w	r0, r0, #3
 80087b0:	2801      	cmp	r0, #1
 80087b2:	d00b      	beq.n	80087cc <cos+0x5c>
 80087b4:	2802      	cmp	r0, #2
 80087b6:	d015      	beq.n	80087e4 <cos+0x74>
 80087b8:	b9d8      	cbnz	r0, 80087f2 <cos+0x82>
 80087ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087be:	ed9d 0b00 	vldr	d0, [sp]
 80087c2:	f000 f8ad 	bl	8008920 <__kernel_cos>
 80087c6:	ec51 0b10 	vmov	r0, r1, d0
 80087ca:	e7e7      	b.n	800879c <cos+0x2c>
 80087cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087d0:	ed9d 0b00 	vldr	d0, [sp]
 80087d4:	f000 f96c 	bl	8008ab0 <__kernel_sin>
 80087d8:	ec53 2b10 	vmov	r2, r3, d0
 80087dc:	4610      	mov	r0, r2
 80087de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80087e2:	e7db      	b.n	800879c <cos+0x2c>
 80087e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087e8:	ed9d 0b00 	vldr	d0, [sp]
 80087ec:	f000 f898 	bl	8008920 <__kernel_cos>
 80087f0:	e7f2      	b.n	80087d8 <cos+0x68>
 80087f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087f6:	ed9d 0b00 	vldr	d0, [sp]
 80087fa:	2001      	movs	r0, #1
 80087fc:	f000 f958 	bl	8008ab0 <__kernel_sin>
 8008800:	e7e1      	b.n	80087c6 <cos+0x56>
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
	...
 8008810:	3fe921fb 	.word	0x3fe921fb
 8008814:	7fefffff 	.word	0x7fefffff

08008818 <asinf>:
 8008818:	b508      	push	{r3, lr}
 800881a:	ed2d 8b02 	vpush	{d8}
 800881e:	eeb0 8a40 	vmov.f32	s16, s0
 8008822:	f000 fc05 	bl	8009030 <__ieee754_asinf>
 8008826:	eef0 8a40 	vmov.f32	s17, s0
 800882a:	eeb4 8a48 	vcmp.f32	s16, s16
 800882e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008832:	d615      	bvs.n	8008860 <asinf+0x48>
 8008834:	eeb0 0a48 	vmov.f32	s0, s16
 8008838:	f000 f81c 	bl	8008874 <fabsf>
 800883c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008840:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	dd0a      	ble.n	8008860 <asinf+0x48>
 800884a:	f001 faad 	bl	8009da8 <__errno>
 800884e:	2321      	movs	r3, #33	@ 0x21
 8008850:	ecbd 8b02 	vpop	{d8}
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	4805      	ldr	r0, [pc, #20]	@ (800886c <asinf+0x54>)
 8008858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800885c:	f000 b812 	b.w	8008884 <nanf>
 8008860:	eeb0 0a68 	vmov.f32	s0, s17
 8008864:	ecbd 8b02 	vpop	{d8}
 8008868:	bd08      	pop	{r3, pc}
 800886a:	bf00      	nop
 800886c:	0800a0bc 	.word	0x0800a0bc

08008870 <atan2f>:
 8008870:	f000 bcc4 	b.w	80091fc <__ieee754_atan2f>

08008874 <fabsf>:
 8008874:	ee10 3a10 	vmov	r3, s0
 8008878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800887c:	ee00 3a10 	vmov	s0, r3
 8008880:	4770      	bx	lr
	...

08008884 <nanf>:
 8008884:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800888c <nanf+0x8>
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	7fc00000 	.word	0x7fc00000

08008890 <round>:
 8008890:	ec51 0b10 	vmov	r0, r1, d0
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800889a:	460b      	mov	r3, r1
 800889c:	4605      	mov	r5, r0
 800889e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80088a2:	2a13      	cmp	r2, #19
 80088a4:	dc1b      	bgt.n	80088de <round+0x4e>
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	da0b      	bge.n	80088c2 <round+0x32>
 80088aa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80088ae:	3201      	adds	r2, #1
 80088b0:	bf04      	itt	eq
 80088b2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80088b6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80088ba:	2200      	movs	r2, #0
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	e015      	b.n	80088ee <round+0x5e>
 80088c2:	4c15      	ldr	r4, [pc, #84]	@ (8008918 <round+0x88>)
 80088c4:	4114      	asrs	r4, r2
 80088c6:	ea04 0601 	and.w	r6, r4, r1
 80088ca:	4306      	orrs	r6, r0
 80088cc:	d00f      	beq.n	80088ee <round+0x5e>
 80088ce:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80088d2:	fa41 f202 	asr.w	r2, r1, r2
 80088d6:	4413      	add	r3, r2
 80088d8:	ea23 0304 	bic.w	r3, r3, r4
 80088dc:	e7ed      	b.n	80088ba <round+0x2a>
 80088de:	2a33      	cmp	r2, #51	@ 0x33
 80088e0:	dd08      	ble.n	80088f4 <round+0x64>
 80088e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80088e6:	d102      	bne.n	80088ee <round+0x5e>
 80088e8:	4602      	mov	r2, r0
 80088ea:	f7f7 fcab 	bl	8000244 <__adddf3>
 80088ee:	ec41 0b10 	vmov	d0, r0, r1
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80088f8:	f04f 34ff 	mov.w	r4, #4294967295
 80088fc:	40f4      	lsrs	r4, r6
 80088fe:	4204      	tst	r4, r0
 8008900:	d0f5      	beq.n	80088ee <round+0x5e>
 8008902:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008906:	2201      	movs	r2, #1
 8008908:	408a      	lsls	r2, r1
 800890a:	1952      	adds	r2, r2, r5
 800890c:	bf28      	it	cs
 800890e:	3301      	addcs	r3, #1
 8008910:	ea22 0204 	bic.w	r2, r2, r4
 8008914:	e7d2      	b.n	80088bc <round+0x2c>
 8008916:	bf00      	nop
 8008918:	000fffff 	.word	0x000fffff
 800891c:	00000000 	.word	0x00000000

08008920 <__kernel_cos>:
 8008920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	ec57 6b10 	vmov	r6, r7, d0
 8008928:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800892c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008930:	ed8d 1b00 	vstr	d1, [sp]
 8008934:	d206      	bcs.n	8008944 <__kernel_cos+0x24>
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f8 f8d3 	bl	8000ae4 <__aeabi_d2iz>
 800893e:	2800      	cmp	r0, #0
 8008940:	f000 8088 	beq.w	8008a54 <__kernel_cos+0x134>
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fe30 	bl	80005b0 <__aeabi_dmul>
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	2200      	movs	r2, #0
 8008956:	4b50      	ldr	r3, [pc, #320]	@ (8008a98 <__kernel_cos+0x178>)
 8008958:	f7f7 fe2a 	bl	80005b0 <__aeabi_dmul>
 800895c:	4682      	mov	sl, r0
 800895e:	468b      	mov	fp, r1
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	a33e      	add	r3, pc, #248	@ (adr r3, 8008a60 <__kernel_cos+0x140>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	f7f7 fe21 	bl	80005b0 <__aeabi_dmul>
 800896e:	a33e      	add	r3, pc, #248	@ (adr r3, 8008a68 <__kernel_cos+0x148>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fc66 	bl	8000244 <__adddf3>
 8008978:	4622      	mov	r2, r4
 800897a:	462b      	mov	r3, r5
 800897c:	f7f7 fe18 	bl	80005b0 <__aeabi_dmul>
 8008980:	a33b      	add	r3, pc, #236	@ (adr r3, 8008a70 <__kernel_cos+0x150>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fc5b 	bl	8000240 <__aeabi_dsub>
 800898a:	4622      	mov	r2, r4
 800898c:	462b      	mov	r3, r5
 800898e:	f7f7 fe0f 	bl	80005b0 <__aeabi_dmul>
 8008992:	a339      	add	r3, pc, #228	@ (adr r3, 8008a78 <__kernel_cos+0x158>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fc54 	bl	8000244 <__adddf3>
 800899c:	4622      	mov	r2, r4
 800899e:	462b      	mov	r3, r5
 80089a0:	f7f7 fe06 	bl	80005b0 <__aeabi_dmul>
 80089a4:	a336      	add	r3, pc, #216	@ (adr r3, 8008a80 <__kernel_cos+0x160>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fc49 	bl	8000240 <__aeabi_dsub>
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	f7f7 fdfd 	bl	80005b0 <__aeabi_dmul>
 80089b6:	a334      	add	r3, pc, #208	@ (adr r3, 8008a88 <__kernel_cos+0x168>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f7f7 fc42 	bl	8000244 <__adddf3>
 80089c0:	4622      	mov	r2, r4
 80089c2:	462b      	mov	r3, r5
 80089c4:	f7f7 fdf4 	bl	80005b0 <__aeabi_dmul>
 80089c8:	4622      	mov	r2, r4
 80089ca:	462b      	mov	r3, r5
 80089cc:	f7f7 fdf0 	bl	80005b0 <__aeabi_dmul>
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089dc:	f7f7 fde8 	bl	80005b0 <__aeabi_dmul>
 80089e0:	460b      	mov	r3, r1
 80089e2:	4602      	mov	r2, r0
 80089e4:	4629      	mov	r1, r5
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7f7 fc2a 	bl	8000240 <__aeabi_dsub>
 80089ec:	4b2b      	ldr	r3, [pc, #172]	@ (8008a9c <__kernel_cos+0x17c>)
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	4598      	cmp	r8, r3
 80089f4:	d810      	bhi.n	8008a18 <__kernel_cos+0xf8>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4650      	mov	r0, sl
 80089fc:	4659      	mov	r1, fp
 80089fe:	f7f7 fc1f 	bl	8000240 <__aeabi_dsub>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	2000      	movs	r0, #0
 8008a08:	4925      	ldr	r1, [pc, #148]	@ (8008aa0 <__kernel_cos+0x180>)
 8008a0a:	f7f7 fc19 	bl	8000240 <__aeabi_dsub>
 8008a0e:	ec41 0b10 	vmov	d0, r0, r1
 8008a12:	b003      	add	sp, #12
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	4b22      	ldr	r3, [pc, #136]	@ (8008aa4 <__kernel_cos+0x184>)
 8008a1a:	2400      	movs	r4, #0
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4920      	ldr	r1, [pc, #128]	@ (8008aa0 <__kernel_cos+0x180>)
 8008a20:	4598      	cmp	r8, r3
 8008a22:	4622      	mov	r2, r4
 8008a24:	bf94      	ite	ls
 8008a26:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008a2a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8008aa8 <__kernel_cos+0x188>)
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	f7f7 fc07 	bl	8000240 <__aeabi_dsub>
 8008a32:	4622      	mov	r2, r4
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	462b      	mov	r3, r5
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	f7f7 fbff 	bl	8000240 <__aeabi_dsub>
 8008a42:	4632      	mov	r2, r6
 8008a44:	463b      	mov	r3, r7
 8008a46:	f7f7 fbfb 	bl	8000240 <__aeabi_dsub>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4649      	mov	r1, r9
 8008a52:	e7da      	b.n	8008a0a <__kernel_cos+0xea>
 8008a54:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008a90 <__kernel_cos+0x170>
 8008a58:	e7db      	b.n	8008a12 <__kernel_cos+0xf2>
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	be8838d4 	.word	0xbe8838d4
 8008a64:	bda8fae9 	.word	0xbda8fae9
 8008a68:	bdb4b1c4 	.word	0xbdb4b1c4
 8008a6c:	3e21ee9e 	.word	0x3e21ee9e
 8008a70:	809c52ad 	.word	0x809c52ad
 8008a74:	3e927e4f 	.word	0x3e927e4f
 8008a78:	19cb1590 	.word	0x19cb1590
 8008a7c:	3efa01a0 	.word	0x3efa01a0
 8008a80:	16c15177 	.word	0x16c15177
 8008a84:	3f56c16c 	.word	0x3f56c16c
 8008a88:	5555554c 	.word	0x5555554c
 8008a8c:	3fa55555 	.word	0x3fa55555
 8008a90:	00000000 	.word	0x00000000
 8008a94:	3ff00000 	.word	0x3ff00000
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	3fd33332 	.word	0x3fd33332
 8008aa0:	3ff00000 	.word	0x3ff00000
 8008aa4:	3fe90000 	.word	0x3fe90000
 8008aa8:	3fd20000 	.word	0x3fd20000
 8008aac:	00000000 	.word	0x00000000

08008ab0 <__kernel_sin>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	ec55 4b10 	vmov	r4, r5, d0
 8008ab8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008abc:	b085      	sub	sp, #20
 8008abe:	4680      	mov	r8, r0
 8008ac0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008ac4:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008ac8:	d205      	bcs.n	8008ad6 <__kernel_sin+0x26>
 8008aca:	4620      	mov	r0, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7f8 f809 	bl	8000ae4 <__aeabi_d2iz>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d052      	beq.n	8008b7c <__kernel_sin+0xcc>
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	462b      	mov	r3, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fd67 	bl	80005b0 <__aeabi_dmul>
 8008ae2:	4682      	mov	sl, r0
 8008ae4:	468b      	mov	fp, r1
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f7 fd5f 	bl	80005b0 <__aeabi_dmul>
 8008af2:	a342      	add	r3, pc, #264	@ (adr r3, 8008bfc <__kernel_sin+0x14c>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	e9cd 0100 	strd	r0, r1, [sp]
 8008afc:	4650      	mov	r0, sl
 8008afe:	4659      	mov	r1, fp
 8008b00:	f7f7 fd56 	bl	80005b0 <__aeabi_dmul>
 8008b04:	a33f      	add	r3, pc, #252	@ (adr r3, 8008c04 <__kernel_sin+0x154>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fb99 	bl	8000240 <__aeabi_dsub>
 8008b0e:	4652      	mov	r2, sl
 8008b10:	465b      	mov	r3, fp
 8008b12:	f7f7 fd4d 	bl	80005b0 <__aeabi_dmul>
 8008b16:	a33d      	add	r3, pc, #244	@ (adr r3, 8008c0c <__kernel_sin+0x15c>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fb92 	bl	8000244 <__adddf3>
 8008b20:	4652      	mov	r2, sl
 8008b22:	465b      	mov	r3, fp
 8008b24:	f7f7 fd44 	bl	80005b0 <__aeabi_dmul>
 8008b28:	a33a      	add	r3, pc, #232	@ (adr r3, 8008c14 <__kernel_sin+0x164>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fb87 	bl	8000240 <__aeabi_dsub>
 8008b32:	4652      	mov	r2, sl
 8008b34:	465b      	mov	r3, fp
 8008b36:	f7f7 fd3b 	bl	80005b0 <__aeabi_dmul>
 8008b3a:	a338      	add	r3, pc, #224	@ (adr r3, 8008c1c <__kernel_sin+0x16c>)
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f7f7 fb80 	bl	8000244 <__adddf3>
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	d11b      	bne.n	8008b86 <__kernel_sin+0xd6>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4650      	mov	r0, sl
 8008b54:	4659      	mov	r1, fp
 8008b56:	f7f7 fd2b 	bl	80005b0 <__aeabi_dmul>
 8008b5a:	a325      	add	r3, pc, #148	@ (adr r3, 8008bf0 <__kernel_sin+0x140>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fb6e 	bl	8000240 <__aeabi_dsub>
 8008b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b68:	f7f7 fd22 	bl	80005b0 <__aeabi_dmul>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4620      	mov	r0, r4
 8008b72:	4629      	mov	r1, r5
 8008b74:	f7f7 fb66 	bl	8000244 <__adddf3>
 8008b78:	4604      	mov	r4, r0
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	ec45 4b10 	vmov	d0, r4, r5
 8008b80:	b005      	add	sp, #20
 8008b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b86:	2200      	movs	r2, #0
 8008b88:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf8 <__kernel_sin+0x148>)
 8008b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b8e:	f7f7 fd0f 	bl	80005b0 <__aeabi_dmul>
 8008b92:	4680      	mov	r8, r0
 8008b94:	4689      	mov	r9, r1
 8008b96:	4632      	mov	r2, r6
 8008b98:	463b      	mov	r3, r7
 8008b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b9e:	f7f7 fd07 	bl	80005b0 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	f7f7 fb49 	bl	8000240 <__aeabi_dsub>
 8008bae:	4652      	mov	r2, sl
 8008bb0:	465b      	mov	r3, fp
 8008bb2:	f7f7 fcfd 	bl	80005b0 <__aeabi_dmul>
 8008bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bba:	f7f7 fb41 	bl	8000240 <__aeabi_dsub>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	460f      	mov	r7, r1
 8008bc2:	a30b      	add	r3, pc, #44	@ (adr r3, 8008bf0 <__kernel_sin+0x140>)
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bcc:	f7f7 fcf0 	bl	80005b0 <__aeabi_dmul>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 fb34 	bl	8000244 <__adddf3>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4620      	mov	r0, r4
 8008be2:	4629      	mov	r1, r5
 8008be4:	f7f7 fb2c 	bl	8000240 <__aeabi_dsub>
 8008be8:	e7c6      	b.n	8008b78 <__kernel_sin+0xc8>
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
 8008bf0:	55555549 	.word	0x55555549
 8008bf4:	3fc55555 	.word	0x3fc55555
 8008bf8:	3fe00000 	.word	0x3fe00000
 8008bfc:	5acfd57c 	.word	0x5acfd57c
 8008c00:	3de5d93a 	.word	0x3de5d93a
 8008c04:	8a2b9ceb 	.word	0x8a2b9ceb
 8008c08:	3e5ae5e6 	.word	0x3e5ae5e6
 8008c0c:	57b1fe7d 	.word	0x57b1fe7d
 8008c10:	3ec71de3 	.word	0x3ec71de3
 8008c14:	19c161d5 	.word	0x19c161d5
 8008c18:	3f2a01a0 	.word	0x3f2a01a0
 8008c1c:	1110f8a6 	.word	0x1110f8a6
 8008c20:	3f811111 	.word	0x3f811111
 8008c24:	00000000 	.word	0x00000000

08008c28 <__ieee754_rem_pio2>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	ec57 6b10 	vmov	r6, r7, d0
 8008c30:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008c34:	4bc4      	ldr	r3, [pc, #784]	@ (8008f48 <__ieee754_rem_pio2+0x320>)
 8008c36:	b08d      	sub	sp, #52	@ 0x34
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4598      	cmp	r8, r3
 8008c3c:	9704      	str	r7, [sp, #16]
 8008c3e:	d807      	bhi.n	8008c50 <__ieee754_rem_pio2+0x28>
 8008c40:	2200      	movs	r2, #0
 8008c42:	2300      	movs	r3, #0
 8008c44:	ed80 0b00 	vstr	d0, [r0]
 8008c48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	e028      	b.n	8008ca2 <__ieee754_rem_pio2+0x7a>
 8008c50:	4bbe      	ldr	r3, [pc, #760]	@ (8008f4c <__ieee754_rem_pio2+0x324>)
 8008c52:	4598      	cmp	r8, r3
 8008c54:	d878      	bhi.n	8008d48 <__ieee754_rem_pio2+0x120>
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4dbd      	ldr	r5, [pc, #756]	@ (8008f50 <__ieee754_rem_pio2+0x328>)
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	a3ab      	add	r3, pc, #684	@ (adr r3, 8008f10 <__ieee754_rem_pio2+0x2e8>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	dd38      	ble.n	8008cda <__ieee754_rem_pio2+0xb2>
 8008c68:	f7f7 faea 	bl	8000240 <__aeabi_dsub>
 8008c6c:	45a8      	cmp	r8, r5
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	d01a      	beq.n	8008caa <__ieee754_rem_pio2+0x82>
 8008c74:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008f18 <__ieee754_rem_pio2+0x2f0>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fae1 	bl	8000240 <__aeabi_dsub>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4680      	mov	r8, r0
 8008c84:	4689      	mov	r9, r1
 8008c86:	4630      	mov	r0, r6
 8008c88:	4639      	mov	r1, r7
 8008c8a:	f7f7 fad9 	bl	8000240 <__aeabi_dsub>
 8008c8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008f18 <__ieee754_rem_pio2+0x2f0>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	2501      	movs	r5, #1
 8008c96:	f7f7 fad3 	bl	8000240 <__aeabi_dsub>
 8008c9a:	e9c4 8900 	strd	r8, r9, [r4]
 8008c9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	b00d      	add	sp, #52	@ 0x34
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	a39d      	add	r3, pc, #628	@ (adr r3, 8008f20 <__ieee754_rem_pio2+0x2f8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 fac6 	bl	8000240 <__aeabi_dsub>
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	a39b      	add	r3, pc, #620	@ (adr r3, 8008f28 <__ieee754_rem_pio2+0x300>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fabf 	bl	8000240 <__aeabi_dsub>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4689      	mov	r9, r1
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 fab7 	bl	8000240 <__aeabi_dsub>
 8008cd2:	a395      	add	r3, pc, #596	@ (adr r3, 8008f28 <__ieee754_rem_pio2+0x300>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	e7dc      	b.n	8008c94 <__ieee754_rem_pio2+0x6c>
 8008cda:	f7f7 fab3 	bl	8000244 <__adddf3>
 8008cde:	45a8      	cmp	r8, r5
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	460f      	mov	r7, r1
 8008ce4:	d018      	beq.n	8008d18 <__ieee754_rem_pio2+0xf0>
 8008ce6:	a38c      	add	r3, pc, #560	@ (adr r3, 8008f18 <__ieee754_rem_pio2+0x2f0>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	f7f7 faaa 	bl	8000244 <__adddf3>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	4689      	mov	r9, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 faa0 	bl	8000240 <__aeabi_dsub>
 8008d00:	a385      	add	r3, pc, #532	@ (adr r3, 8008f18 <__ieee754_rem_pio2+0x2f0>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fa9d 	bl	8000244 <__adddf3>
 8008d0a:	f04f 35ff 	mov.w	r5, #4294967295
 8008d0e:	e9c4 8900 	strd	r8, r9, [r4]
 8008d12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d16:	e7c4      	b.n	8008ca2 <__ieee754_rem_pio2+0x7a>
 8008d18:	a381      	add	r3, pc, #516	@ (adr r3, 8008f20 <__ieee754_rem_pio2+0x2f8>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f7f7 fa91 	bl	8000244 <__adddf3>
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	a380      	add	r3, pc, #512	@ (adr r3, 8008f28 <__ieee754_rem_pio2+0x300>)
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	f7f7 fa8a 	bl	8000244 <__adddf3>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fa80 	bl	8000240 <__aeabi_dsub>
 8008d40:	a379      	add	r3, pc, #484	@ (adr r3, 8008f28 <__ieee754_rem_pio2+0x300>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	e7de      	b.n	8008d06 <__ieee754_rem_pio2+0xde>
 8008d48:	4b82      	ldr	r3, [pc, #520]	@ (8008f54 <__ieee754_rem_pio2+0x32c>)
 8008d4a:	4598      	cmp	r8, r3
 8008d4c:	f200 80d1 	bhi.w	8008ef2 <__ieee754_rem_pio2+0x2ca>
 8008d50:	f000 f966 	bl	8009020 <fabs>
 8008d54:	ec57 6b10 	vmov	r6, r7, d0
 8008d58:	a375      	add	r3, pc, #468	@ (adr r3, 8008f30 <__ieee754_rem_pio2+0x308>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	f7f7 fc25 	bl	80005b0 <__aeabi_dmul>
 8008d66:	2200      	movs	r2, #0
 8008d68:	4b7b      	ldr	r3, [pc, #492]	@ (8008f58 <__ieee754_rem_pio2+0x330>)
 8008d6a:	f7f7 fa6b 	bl	8000244 <__adddf3>
 8008d6e:	f7f7 feb9 	bl	8000ae4 <__aeabi_d2iz>
 8008d72:	4605      	mov	r5, r0
 8008d74:	f7f7 fbb2 	bl	80004dc <__aeabi_i2d>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d80:	a363      	add	r3, pc, #396	@ (adr r3, 8008f10 <__ieee754_rem_pio2+0x2e8>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f7f7 fc13 	bl	80005b0 <__aeabi_dmul>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4630      	mov	r0, r6
 8008d90:	4639      	mov	r1, r7
 8008d92:	f7f7 fa55 	bl	8000240 <__aeabi_dsub>
 8008d96:	4682      	mov	sl, r0
 8008d98:	468b      	mov	fp, r1
 8008d9a:	a35f      	add	r3, pc, #380	@ (adr r3, 8008f18 <__ieee754_rem_pio2+0x2f0>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da4:	f7f7 fc04 	bl	80005b0 <__aeabi_dmul>
 8008da8:	2d1f      	cmp	r5, #31
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	dc0c      	bgt.n	8008dca <__ieee754_rem_pio2+0x1a2>
 8008db0:	1e6a      	subs	r2, r5, #1
 8008db2:	4b6a      	ldr	r3, [pc, #424]	@ (8008f5c <__ieee754_rem_pio2+0x334>)
 8008db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db8:	4543      	cmp	r3, r8
 8008dba:	d006      	beq.n	8008dca <__ieee754_rem_pio2+0x1a2>
 8008dbc:	4632      	mov	r2, r6
 8008dbe:	463b      	mov	r3, r7
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	f7f7 fa3c 	bl	8000240 <__aeabi_dsub>
 8008dc8:	e00e      	b.n	8008de8 <__ieee754_rem_pio2+0x1c0>
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4632      	mov	r2, r6
 8008dce:	4650      	mov	r0, sl
 8008dd0:	4659      	mov	r1, fp
 8008dd2:	f7f7 fa35 	bl	8000240 <__aeabi_dsub>
 8008dd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008dda:	9305      	str	r3, [sp, #20]
 8008ddc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008de0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008de4:	2b10      	cmp	r3, #16
 8008de6:	dc02      	bgt.n	8008dee <__ieee754_rem_pio2+0x1c6>
 8008de8:	e9c4 0100 	strd	r0, r1, [r4]
 8008dec:	e039      	b.n	8008e62 <__ieee754_rem_pio2+0x23a>
 8008dee:	a34c      	add	r3, pc, #304	@ (adr r3, 8008f20 <__ieee754_rem_pio2+0x2f8>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008df8:	f7f7 fbda 	bl	80005b0 <__aeabi_dmul>
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	460f      	mov	r7, r1
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4650      	mov	r0, sl
 8008e06:	4659      	mov	r1, fp
 8008e08:	f7f7 fa1a 	bl	8000240 <__aeabi_dsub>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	4650      	mov	r0, sl
 8008e16:	4659      	mov	r1, fp
 8008e18:	f7f7 fa12 	bl	8000240 <__aeabi_dsub>
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	463b      	mov	r3, r7
 8008e20:	f7f7 fa0e 	bl	8000240 <__aeabi_dsub>
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	a33f      	add	r3, pc, #252	@ (adr r3, 8008f28 <__ieee754_rem_pio2+0x300>)
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e32:	f7f7 fbbd 	bl	80005b0 <__aeabi_dmul>
 8008e36:	4632      	mov	r2, r6
 8008e38:	463b      	mov	r3, r7
 8008e3a:	f7f7 fa01 	bl	8000240 <__aeabi_dsub>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	4640      	mov	r0, r8
 8008e48:	4649      	mov	r1, r9
 8008e4a:	f7f7 f9f9 	bl	8000240 <__aeabi_dsub>
 8008e4e:	9a05      	ldr	r2, [sp, #20]
 8008e50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b31      	cmp	r3, #49	@ 0x31
 8008e58:	dc20      	bgt.n	8008e9c <__ieee754_rem_pio2+0x274>
 8008e5a:	46c2      	mov	sl, r8
 8008e5c:	46cb      	mov	fp, r9
 8008e5e:	e9c4 0100 	strd	r0, r1, [r4]
 8008e62:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e66:	4650      	mov	r0, sl
 8008e68:	4659      	mov	r1, fp
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	f7f7 f9e7 	bl	8000240 <__aeabi_dsub>
 8008e72:	463b      	mov	r3, r7
 8008e74:	4632      	mov	r2, r6
 8008e76:	f7f7 f9e3 	bl	8000240 <__aeabi_dsub>
 8008e7a:	9b04      	ldr	r3, [sp, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e82:	f6bf af0e 	bge.w	8008ca2 <__ieee754_rem_pio2+0x7a>
 8008e86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008e8a:	f8c4 8000 	str.w	r8, [r4]
 8008e8e:	60a0      	str	r0, [r4, #8]
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e96:	60e3      	str	r3, [r4, #12]
 8008e98:	426d      	negs	r5, r5
 8008e9a:	e702      	b.n	8008ca2 <__ieee754_rem_pio2+0x7a>
 8008e9c:	a326      	add	r3, pc, #152	@ (adr r3, 8008f38 <__ieee754_rem_pio2+0x310>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea6:	f7f7 fb83 	bl	80005b0 <__aeabi_dmul>
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460f      	mov	r7, r1
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 f9c3 	bl	8000240 <__aeabi_dsub>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4682      	mov	sl, r0
 8008ec0:	468b      	mov	fp, r1
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 f9bb 	bl	8000240 <__aeabi_dsub>
 8008eca:	4632      	mov	r2, r6
 8008ecc:	463b      	mov	r3, r7
 8008ece:	f7f7 f9b7 	bl	8000240 <__aeabi_dsub>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008f40 <__ieee754_rem_pio2+0x318>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee0:	f7f7 fb66 	bl	80005b0 <__aeabi_dmul>
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	f7f7 f9aa 	bl	8000240 <__aeabi_dsub>
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	e764      	b.n	8008dbc <__ieee754_rem_pio2+0x194>
 8008ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f60 <__ieee754_rem_pio2+0x338>)
 8008ef4:	4598      	cmp	r8, r3
 8008ef6:	d935      	bls.n	8008f64 <__ieee754_rem_pio2+0x33c>
 8008ef8:	4632      	mov	r2, r6
 8008efa:	463b      	mov	r3, r7
 8008efc:	4630      	mov	r0, r6
 8008efe:	4639      	mov	r1, r7
 8008f00:	f7f7 f99e 	bl	8000240 <__aeabi_dsub>
 8008f04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f08:	e9c4 0100 	strd	r0, r1, [r4]
 8008f0c:	e69e      	b.n	8008c4c <__ieee754_rem_pio2+0x24>
 8008f0e:	bf00      	nop
 8008f10:	54400000 	.word	0x54400000
 8008f14:	3ff921fb 	.word	0x3ff921fb
 8008f18:	1a626331 	.word	0x1a626331
 8008f1c:	3dd0b461 	.word	0x3dd0b461
 8008f20:	1a600000 	.word	0x1a600000
 8008f24:	3dd0b461 	.word	0x3dd0b461
 8008f28:	2e037073 	.word	0x2e037073
 8008f2c:	3ba3198a 	.word	0x3ba3198a
 8008f30:	6dc9c883 	.word	0x6dc9c883
 8008f34:	3fe45f30 	.word	0x3fe45f30
 8008f38:	2e000000 	.word	0x2e000000
 8008f3c:	3ba3198a 	.word	0x3ba3198a
 8008f40:	252049c1 	.word	0x252049c1
 8008f44:	397b839a 	.word	0x397b839a
 8008f48:	3fe921fb 	.word	0x3fe921fb
 8008f4c:	4002d97b 	.word	0x4002d97b
 8008f50:	3ff921fb 	.word	0x3ff921fb
 8008f54:	413921fb 	.word	0x413921fb
 8008f58:	3fe00000 	.word	0x3fe00000
 8008f5c:	0800a0c0 	.word	0x0800a0c0
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008f6e:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008f72:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008f76:	f04f 0803 	mov.w	r8, #3
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	f7f7 fdb2 	bl	8000ae4 <__aeabi_d2iz>
 8008f80:	f7f7 faac 	bl	80004dc <__aeabi_i2d>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f90:	f7f7 f956 	bl	8000240 <__aeabi_dsub>
 8008f94:	2200      	movs	r2, #0
 8008f96:	4b20      	ldr	r3, [pc, #128]	@ (8009018 <__ieee754_rem_pio2+0x3f0>)
 8008f98:	f7f7 fb0a 	bl	80005b0 <__aeabi_dmul>
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	f7f7 fda0 	bl	8000ae4 <__aeabi_d2iz>
 8008fa4:	f7f7 fa9a 	bl	80004dc <__aeabi_i2d>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4630      	mov	r0, r6
 8008fae:	4639      	mov	r1, r7
 8008fb0:	2600      	movs	r6, #0
 8008fb2:	2700      	movs	r7, #0
 8008fb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fb8:	f7f7 f942 	bl	8000240 <__aeabi_dsub>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4b16      	ldr	r3, [pc, #88]	@ (8009018 <__ieee754_rem_pio2+0x3f0>)
 8008fc0:	f7f7 faf6 	bl	80005b0 <__aeabi_dmul>
 8008fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008fc8:	4632      	mov	r2, r6
 8008fca:	463b      	mov	r3, r7
 8008fcc:	46c2      	mov	sl, r8
 8008fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fd2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008fd6:	f7f7 fd53 	bl	8000a80 <__aeabi_dcmpeq>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d1f4      	bne.n	8008fc8 <__ieee754_rem_pio2+0x3a0>
 8008fde:	4b0f      	ldr	r3, [pc, #60]	@ (800901c <__ieee754_rem_pio2+0x3f4>)
 8008fe0:	462a      	mov	r2, r5
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	a806      	add	r0, sp, #24
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	2302      	movs	r3, #2
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4653      	mov	r3, sl
 8008fee:	f000 fa7b 	bl	80094e8 <__kernel_rem_pio2>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f6bf ae53 	bge.w	8008ca2 <__ieee754_rem_pio2+0x7a>
 8008ffc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009000:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009004:	e9c4 2300 	strd	r2, r3, [r4]
 8009008:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800900c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009010:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009014:	e740      	b.n	8008e98 <__ieee754_rem_pio2+0x270>
 8009016:	bf00      	nop
 8009018:	41700000 	.word	0x41700000
 800901c:	0800a140 	.word	0x0800a140

08009020 <fabs>:
 8009020:	ec51 0b10 	vmov	r0, r1, d0
 8009024:	4602      	mov	r2, r0
 8009026:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800902a:	ec43 2b10 	vmov	d0, r2, r3
 800902e:	4770      	bx	lr

08009030 <__ieee754_asinf>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	ee10 5a10 	vmov	r5, s0
 8009036:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800903a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800903e:	ed2d 8b04 	vpush	{d8-d9}
 8009042:	d10c      	bne.n	800905e <__ieee754_asinf+0x2e>
 8009044:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80091bc <__ieee754_asinf+0x18c>
 8009048:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80091c0 <__ieee754_asinf+0x190>
 800904c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009050:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009054:	eeb0 0a67 	vmov.f32	s0, s15
 8009058:	ecbd 8b04 	vpop	{d8-d9}
 800905c:	bd38      	pop	{r3, r4, r5, pc}
 800905e:	d904      	bls.n	800906a <__ieee754_asinf+0x3a>
 8009060:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009064:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009068:	e7f6      	b.n	8009058 <__ieee754_asinf+0x28>
 800906a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800906e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009072:	d20b      	bcs.n	800908c <__ieee754_asinf+0x5c>
 8009074:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8009078:	d252      	bcs.n	8009120 <__ieee754_asinf+0xf0>
 800907a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80091c4 <__ieee754_asinf+0x194>
 800907e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009082:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908a:	dce5      	bgt.n	8009058 <__ieee754_asinf+0x28>
 800908c:	f7ff fbf2 	bl	8008874 <fabsf>
 8009090:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009094:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8009098:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80091c8 <__ieee754_asinf+0x198>
 800909c:	ed9f 9a4b 	vldr	s18, [pc, #300]	@ 80091cc <__ieee754_asinf+0x19c>
 80090a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80090a4:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80091d0 <__ieee754_asinf+0x1a0>
 80090a8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80090ac:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80091d4 <__ieee754_asinf+0x1a4>
 80090b0:	eeb0 0a48 	vmov.f32	s0, s16
 80090b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80090b8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80091d8 <__ieee754_asinf+0x1a8>
 80090bc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80090c0:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80091dc <__ieee754_asinf+0x1ac>
 80090c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80090c8:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80091e0 <__ieee754_asinf+0x1b0>
 80090cc:	eea7 9a88 	vfma.f32	s18, s15, s16
 80090d0:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80091e4 <__ieee754_asinf+0x1b4>
 80090d4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80090d8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80091e8 <__ieee754_asinf+0x1b8>
 80090dc:	ee29 9a08 	vmul.f32	s18, s18, s16
 80090e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80090e4:	eddf 7a41 	vldr	s15, [pc, #260]	@ 80091ec <__ieee754_asinf+0x1bc>
 80090e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80090ec:	eee7 8a88 	vfma.f32	s17, s15, s16
 80090f0:	f000 f9f6 	bl	80094e0 <__ieee754_sqrtf>
 80090f4:	4b3e      	ldr	r3, [pc, #248]	@ (80091f0 <__ieee754_asinf+0x1c0>)
 80090f6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80090fa:	429c      	cmp	r4, r3
 80090fc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009100:	d93d      	bls.n	800917e <__ieee754_asinf+0x14e>
 8009102:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80091f4 <__ieee754_asinf+0x1c4>
 8009106:	eea0 0a06 	vfma.f32	s0, s0, s12
 800910a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800910e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80091c0 <__ieee754_asinf+0x190>
 8009112:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009116:	2d00      	cmp	r5, #0
 8009118:	bfd8      	it	le
 800911a:	eeb1 0a40 	vnegle.f32	s0, s0
 800911e:	e79b      	b.n	8009058 <__ieee754_asinf+0x28>
 8009120:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009124:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80091d0 <__ieee754_asinf+0x1a0>
 8009128:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80091c8 <__ieee754_asinf+0x198>
 800912c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80091e0 <__ieee754_asinf+0x1b0>
 8009130:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009134:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80091d4 <__ieee754_asinf+0x1a4>
 8009138:	eee7 6a27 	vfma.f32	s13, s14, s15
 800913c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80091d8 <__ieee754_asinf+0x1a8>
 8009140:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009144:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80091dc <__ieee754_asinf+0x1ac>
 8009148:	eee7 6a27 	vfma.f32	s13, s14, s15
 800914c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80091cc <__ieee754_asinf+0x19c>
 8009150:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009154:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80091e4 <__ieee754_asinf+0x1b4>
 8009158:	eee7 6a86 	vfma.f32	s13, s15, s12
 800915c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80091e8 <__ieee754_asinf+0x1b8>
 8009160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009164:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8009168:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80091ec <__ieee754_asinf+0x1bc>
 800916c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009170:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8009174:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8009178:	eea0 0a27 	vfma.f32	s0, s0, s15
 800917c:	e76c      	b.n	8009058 <__ieee754_asinf+0x28>
 800917e:	ee10 3a10 	vmov	r3, s0
 8009182:	ee70 5a00 	vadd.f32	s11, s0, s0
 8009186:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80091bc <__ieee754_asinf+0x18c>
 800918a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800918e:	f023 030f 	bic.w	r3, r3, #15
 8009192:	ee07 3a10 	vmov	s14, r3
 8009196:	eea7 8a47 	vfms.f32	s16, s14, s14
 800919a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800919e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80091a2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80091f8 <__ieee754_asinf+0x1c8>
 80091a6:	eee5 7a66 	vfms.f32	s15, s10, s13
 80091aa:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80091ae:	eeb0 6a40 	vmov.f32	s12, s0
 80091b2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80091b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80091ba:	e7aa      	b.n	8009112 <__ieee754_asinf+0xe2>
 80091bc:	b33bbd2e 	.word	0xb33bbd2e
 80091c0:	3fc90fdb 	.word	0x3fc90fdb
 80091c4:	7149f2ca 	.word	0x7149f2ca
 80091c8:	3a4f7f04 	.word	0x3a4f7f04
 80091cc:	3e2aaaab 	.word	0x3e2aaaab
 80091d0:	3811ef08 	.word	0x3811ef08
 80091d4:	bd241146 	.word	0xbd241146
 80091d8:	3e4e0aa8 	.word	0x3e4e0aa8
 80091dc:	bea6b090 	.word	0xbea6b090
 80091e0:	3d9dc62e 	.word	0x3d9dc62e
 80091e4:	bf303361 	.word	0xbf303361
 80091e8:	4001572d 	.word	0x4001572d
 80091ec:	c019d139 	.word	0xc019d139
 80091f0:	3f799999 	.word	0x3f799999
 80091f4:	333bbd2e 	.word	0x333bbd2e
 80091f8:	3f490fdb 	.word	0x3f490fdb

080091fc <__ieee754_atan2f>:
 80091fc:	ee10 2a90 	vmov	r2, s1
 8009200:	eef0 7a40 	vmov.f32	s15, s0
 8009204:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8009208:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800920c:	b510      	push	{r4, lr}
 800920e:	d806      	bhi.n	800921e <__ieee754_atan2f+0x22>
 8009210:	ee10 0a10 	vmov	r0, s0
 8009214:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009218:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800921c:	d904      	bls.n	8009228 <__ieee754_atan2f+0x2c>
 800921e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009222:	eeb0 0a67 	vmov.f32	s0, s15
 8009226:	bd10      	pop	{r4, pc}
 8009228:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800922c:	d103      	bne.n	8009236 <__ieee754_atan2f+0x3a>
 800922e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009232:	f000 b881 	b.w	8009338 <atanf>
 8009236:	1794      	asrs	r4, r2, #30
 8009238:	f004 0402 	and.w	r4, r4, #2
 800923c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009240:	b93b      	cbnz	r3, 8009252 <__ieee754_atan2f+0x56>
 8009242:	2c02      	cmp	r4, #2
 8009244:	d05c      	beq.n	8009300 <__ieee754_atan2f+0x104>
 8009246:	2c03      	cmp	r4, #3
 8009248:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8009314 <__ieee754_atan2f+0x118>
 800924c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8009250:	e7e7      	b.n	8009222 <__ieee754_atan2f+0x26>
 8009252:	b939      	cbnz	r1, 8009264 <__ieee754_atan2f+0x68>
 8009254:	2800      	cmp	r0, #0
 8009256:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8009318 <__ieee754_atan2f+0x11c>
 800925a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800931c <__ieee754_atan2f+0x120>
 800925e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8009262:	e7de      	b.n	8009222 <__ieee754_atan2f+0x26>
 8009264:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009268:	d110      	bne.n	800928c <__ieee754_atan2f+0x90>
 800926a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800926e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009272:	d107      	bne.n	8009284 <__ieee754_atan2f+0x88>
 8009274:	2c02      	cmp	r4, #2
 8009276:	d846      	bhi.n	8009306 <__ieee754_atan2f+0x10a>
 8009278:	4b29      	ldr	r3, [pc, #164]	@ (8009320 <__ieee754_atan2f+0x124>)
 800927a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800927e:	edd3 7a00 	vldr	s15, [r3]
 8009282:	e7ce      	b.n	8009222 <__ieee754_atan2f+0x26>
 8009284:	2c02      	cmp	r4, #2
 8009286:	d841      	bhi.n	800930c <__ieee754_atan2f+0x110>
 8009288:	4b26      	ldr	r3, [pc, #152]	@ (8009324 <__ieee754_atan2f+0x128>)
 800928a:	e7f6      	b.n	800927a <__ieee754_atan2f+0x7e>
 800928c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009290:	d0e0      	beq.n	8009254 <__ieee754_atan2f+0x58>
 8009292:	1a5b      	subs	r3, r3, r1
 8009294:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8009298:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800929c:	da1a      	bge.n	80092d4 <__ieee754_atan2f+0xd8>
 800929e:	2a00      	cmp	r2, #0
 80092a0:	da01      	bge.n	80092a6 <__ieee754_atan2f+0xaa>
 80092a2:	313c      	adds	r1, #60	@ 0x3c
 80092a4:	db19      	blt.n	80092da <__ieee754_atan2f+0xde>
 80092a6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80092aa:	f7ff fae3 	bl	8008874 <fabsf>
 80092ae:	f000 f843 	bl	8009338 <atanf>
 80092b2:	eef0 7a40 	vmov.f32	s15, s0
 80092b6:	2c01      	cmp	r4, #1
 80092b8:	d012      	beq.n	80092e0 <__ieee754_atan2f+0xe4>
 80092ba:	2c02      	cmp	r4, #2
 80092bc:	d017      	beq.n	80092ee <__ieee754_atan2f+0xf2>
 80092be:	2c00      	cmp	r4, #0
 80092c0:	d0af      	beq.n	8009222 <__ieee754_atan2f+0x26>
 80092c2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009328 <__ieee754_atan2f+0x12c>
 80092c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092ca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800932c <__ieee754_atan2f+0x130>
 80092ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092d2:	e7a6      	b.n	8009222 <__ieee754_atan2f+0x26>
 80092d4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009318 <__ieee754_atan2f+0x11c>
 80092d8:	e7ed      	b.n	80092b6 <__ieee754_atan2f+0xba>
 80092da:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009330 <__ieee754_atan2f+0x134>
 80092de:	e7ea      	b.n	80092b6 <__ieee754_atan2f+0xba>
 80092e0:	ee17 3a90 	vmov	r3, s15
 80092e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	e799      	b.n	8009222 <__ieee754_atan2f+0x26>
 80092ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009328 <__ieee754_atan2f+0x12c>
 80092f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800932c <__ieee754_atan2f+0x130>
 80092fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092fe:	e790      	b.n	8009222 <__ieee754_atan2f+0x26>
 8009300:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800932c <__ieee754_atan2f+0x130>
 8009304:	e78d      	b.n	8009222 <__ieee754_atan2f+0x26>
 8009306:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8009334 <__ieee754_atan2f+0x138>
 800930a:	e78a      	b.n	8009222 <__ieee754_atan2f+0x26>
 800930c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009330 <__ieee754_atan2f+0x134>
 8009310:	e787      	b.n	8009222 <__ieee754_atan2f+0x26>
 8009312:	bf00      	nop
 8009314:	c0490fdb 	.word	0xc0490fdb
 8009318:	3fc90fdb 	.word	0x3fc90fdb
 800931c:	bfc90fdb 	.word	0xbfc90fdb
 8009320:	0800a254 	.word	0x0800a254
 8009324:	0800a248 	.word	0x0800a248
 8009328:	33bbbd2e 	.word	0x33bbbd2e
 800932c:	40490fdb 	.word	0x40490fdb
 8009330:	00000000 	.word	0x00000000
 8009334:	3f490fdb 	.word	0x3f490fdb

08009338 <atanf>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	ee10 5a10 	vmov	r5, s0
 800933e:	eef0 7a40 	vmov.f32	s15, s0
 8009342:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009346:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800934a:	d30f      	bcc.n	800936c <atanf+0x34>
 800934c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009350:	d904      	bls.n	800935c <atanf+0x24>
 8009352:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009356:	eeb0 0a67 	vmov.f32	s0, s15
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	2d00      	cmp	r5, #0
 800935e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8009494 <atanf+0x15c>
 8009362:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009498 <atanf+0x160>
 8009366:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800936a:	e7f4      	b.n	8009356 <atanf+0x1e>
 800936c:	4b4b      	ldr	r3, [pc, #300]	@ (800949c <atanf+0x164>)
 800936e:	429c      	cmp	r4, r3
 8009370:	d810      	bhi.n	8009394 <atanf+0x5c>
 8009372:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009376:	d20a      	bcs.n	800938e <atanf+0x56>
 8009378:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80094a0 <atanf+0x168>
 800937c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009380:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009384:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938c:	dce3      	bgt.n	8009356 <atanf+0x1e>
 800938e:	f04f 33ff 	mov.w	r3, #4294967295
 8009392:	e013      	b.n	80093bc <atanf+0x84>
 8009394:	f7ff fa6e 	bl	8008874 <fabsf>
 8009398:	4b42      	ldr	r3, [pc, #264]	@ (80094a4 <atanf+0x16c>)
 800939a:	429c      	cmp	r4, r3
 800939c:	d84f      	bhi.n	800943e <atanf+0x106>
 800939e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d841      	bhi.n	800942a <atanf+0xf2>
 80093a6:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80093aa:	2300      	movs	r3, #0
 80093ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80093b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093bc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80094a8 <atanf+0x170>
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80094ac <atanf+0x174>
 80093c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80094b0 <atanf+0x178>
 80093ca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80093ce:	ee66 6a06 	vmul.f32	s13, s12, s12
 80093d2:	eee6 5a87 	vfma.f32	s11, s13, s14
 80093d6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80094b4 <atanf+0x17c>
 80093da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093de:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80094b8 <atanf+0x180>
 80093e2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80093e6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80094bc <atanf+0x184>
 80093ea:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80094c0 <atanf+0x188>
 80093f2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80093f6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80094c4 <atanf+0x18c>
 80093fa:	eea6 5a87 	vfma.f32	s10, s13, s14
 80093fe:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80094c8 <atanf+0x190>
 8009402:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009406:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80094cc <atanf+0x194>
 800940a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800940e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80094d0 <atanf+0x198>
 8009412:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009416:	ee27 7a26 	vmul.f32	s14, s14, s13
 800941a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800941e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009422:	d121      	bne.n	8009468 <atanf+0x130>
 8009424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009428:	e795      	b.n	8009356 <atanf+0x1e>
 800942a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800942e:	2301      	movs	r3, #1
 8009430:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009434:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009438:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800943c:	e7be      	b.n	80093bc <atanf+0x84>
 800943e:	4b25      	ldr	r3, [pc, #148]	@ (80094d4 <atanf+0x19c>)
 8009440:	429c      	cmp	r4, r3
 8009442:	d80b      	bhi.n	800945c <atanf+0x124>
 8009444:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009448:	2302      	movs	r3, #2
 800944a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800944e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009452:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945a:	e7af      	b.n	80093bc <atanf+0x84>
 800945c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009460:	2303      	movs	r3, #3
 8009462:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009466:	e7a9      	b.n	80093bc <atanf+0x84>
 8009468:	4a1b      	ldr	r2, [pc, #108]	@ (80094d8 <atanf+0x1a0>)
 800946a:	2d00      	cmp	r5, #0
 800946c:	491b      	ldr	r1, [pc, #108]	@ (80094dc <atanf+0x1a4>)
 800946e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009472:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009476:	edd3 6a00 	vldr	s13, [r3]
 800947a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800947e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009482:	edd2 7a00 	vldr	s15, [r2]
 8009486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800948a:	bfb8      	it	lt
 800948c:	eef1 7a67 	vneglt.f32	s15, s15
 8009490:	e761      	b.n	8009356 <atanf+0x1e>
 8009492:	bf00      	nop
 8009494:	bfc90fdb 	.word	0xbfc90fdb
 8009498:	3fc90fdb 	.word	0x3fc90fdb
 800949c:	3edfffff 	.word	0x3edfffff
 80094a0:	7149f2ca 	.word	0x7149f2ca
 80094a4:	3f97ffff 	.word	0x3f97ffff
 80094a8:	3c8569d7 	.word	0x3c8569d7
 80094ac:	3d4bda59 	.word	0x3d4bda59
 80094b0:	bd6ef16b 	.word	0xbd6ef16b
 80094b4:	3d886b35 	.word	0x3d886b35
 80094b8:	3dba2e6e 	.word	0x3dba2e6e
 80094bc:	3e124925 	.word	0x3e124925
 80094c0:	3eaaaaab 	.word	0x3eaaaaab
 80094c4:	bd15a221 	.word	0xbd15a221
 80094c8:	bd9d8795 	.word	0xbd9d8795
 80094cc:	bde38e38 	.word	0xbde38e38
 80094d0:	be4ccccd 	.word	0xbe4ccccd
 80094d4:	401bffff 	.word	0x401bffff
 80094d8:	0800a270 	.word	0x0800a270
 80094dc:	0800a260 	.word	0x0800a260

080094e0 <__ieee754_sqrtf>:
 80094e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80094e4:	4770      	bx	lr
	...

080094e8 <__kernel_rem_pio2>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	ed2d 8b02 	vpush	{d8}
 80094f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80094f4:	f112 0f14 	cmn.w	r2, #20
 80094f8:	f04f 0500 	mov.w	r5, #0
 80094fc:	9306      	str	r3, [sp, #24]
 80094fe:	bfa8      	it	ge
 8009500:	1ed4      	subge	r4, r2, #3
 8009502:	4bbd      	ldr	r3, [pc, #756]	@ (80097f8 <__kernel_rem_pio2+0x310>)
 8009504:	bfb8      	it	lt
 8009506:	2400      	movlt	r4, #0
 8009508:	9104      	str	r1, [sp, #16]
 800950a:	ae20      	add	r6, sp, #128	@ 0x80
 800950c:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800950e:	9008      	str	r0, [sp, #32]
 8009510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	9b06      	ldr	r3, [sp, #24]
 8009518:	f103 33ff 	add.w	r3, r3, #4294967295
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	bfa4      	itt	ge
 8009520:	2318      	movge	r3, #24
 8009522:	fb94 f4f3 	sdivge	r4, r4, r3
 8009526:	f06f 0317 	mvn.w	r3, #23
 800952a:	fb04 3303 	mla	r3, r4, r3, r3
 800952e:	eb03 0b02 	add.w	fp, r3, r2
 8009532:	9b00      	ldr	r3, [sp, #0]
 8009534:	9a05      	ldr	r2, [sp, #20]
 8009536:	eb03 0802 	add.w	r8, r3, r2
 800953a:	1aa7      	subs	r7, r4, r2
 800953c:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800953e:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 80097e8 <__kernel_rem_pio2+0x300>
 8009542:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009546:	4545      	cmp	r5, r8
 8009548:	dd13      	ble.n	8009572 <__kernel_rem_pio2+0x8a>
 800954a:	aa20      	add	r2, sp, #128	@ 0x80
 800954c:	9b06      	ldr	r3, [sp, #24]
 800954e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009552:	f04f 0800 	mov.w	r8, #0
 8009556:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800955a:	9b00      	ldr	r3, [sp, #0]
 800955c:	4598      	cmp	r8, r3
 800955e:	dc30      	bgt.n	80095c2 <__kernel_rem_pio2+0xda>
 8009560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009564:	462f      	mov	r7, r5
 8009566:	2600      	movs	r6, #0
 8009568:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80097e8 <__kernel_rem_pio2+0x300>
 800956c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009570:	e01b      	b.n	80095aa <__kernel_rem_pio2+0xc2>
 8009572:	42ef      	cmn	r7, r5
 8009574:	d407      	bmi.n	8009586 <__kernel_rem_pio2+0x9e>
 8009576:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800957a:	f7f6 ffaf 	bl	80004dc <__aeabi_i2d>
 800957e:	3501      	adds	r5, #1
 8009580:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009584:	e7df      	b.n	8009546 <__kernel_rem_pio2+0x5e>
 8009586:	ec51 0b18 	vmov	r0, r1, d8
 800958a:	e7f8      	b.n	800957e <__kernel_rem_pio2+0x96>
 800958c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009590:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009594:	3601      	adds	r6, #1
 8009596:	f7f7 f80b 	bl	80005b0 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a2:	f7f6 fe4f 	bl	8000244 <__adddf3>
 80095a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	3f08      	subs	r7, #8
 80095ae:	429e      	cmp	r6, r3
 80095b0:	ddec      	ble.n	800958c <__kernel_rem_pio2+0xa4>
 80095b2:	f108 0801 	add.w	r8, r8, #1
 80095b6:	3508      	adds	r5, #8
 80095b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095bc:	ecaa 7b02 	vstmia	sl!, {d7}
 80095c0:	e7cb      	b.n	800955a <__kernel_rem_pio2+0x72>
 80095c2:	9b00      	ldr	r3, [sp, #0]
 80095c4:	aa0c      	add	r2, sp, #48	@ 0x30
 80095c6:	f8dd 8000 	ldr.w	r8, [sp]
 80095ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d0:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80095d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80095d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80095dc:	ac0c      	add	r4, sp, #48	@ 0x30
 80095de:	46c2      	mov	sl, r8
 80095e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095e2:	ab98      	add	r3, sp, #608	@ 0x260
 80095e4:	46a1      	mov	r9, r4
 80095e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80095ea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80095ee:	ab70      	add	r3, sp, #448	@ 0x1c0
 80095f0:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80095f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095f8:	f1ba 0f00 	cmp.w	sl, #0
 80095fc:	f1a5 0508 	sub.w	r5, r5, #8
 8009600:	dc77      	bgt.n	80096f2 <__kernel_rem_pio2+0x20a>
 8009602:	4658      	mov	r0, fp
 8009604:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009608:	f000 fac6 	bl	8009b98 <scalbn>
 800960c:	2200      	movs	r2, #0
 800960e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009612:	ec57 6b10 	vmov	r6, r7, d0
 8009616:	4630      	mov	r0, r6
 8009618:	4639      	mov	r1, r7
 800961a:	f7f6 ffc9 	bl	80005b0 <__aeabi_dmul>
 800961e:	ec41 0b10 	vmov	d0, r0, r1
 8009622:	f000 fb39 	bl	8009c98 <floor>
 8009626:	2200      	movs	r2, #0
 8009628:	4b74      	ldr	r3, [pc, #464]	@ (80097fc <__kernel_rem_pio2+0x314>)
 800962a:	ec51 0b10 	vmov	r0, r1, d0
 800962e:	f7f6 ffbf 	bl	80005b0 <__aeabi_dmul>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4630      	mov	r0, r6
 8009638:	4639      	mov	r1, r7
 800963a:	f7f6 fe01 	bl	8000240 <__aeabi_dsub>
 800963e:	460f      	mov	r7, r1
 8009640:	4606      	mov	r6, r0
 8009642:	f7f7 fa4f 	bl	8000ae4 <__aeabi_d2iz>
 8009646:	9002      	str	r0, [sp, #8]
 8009648:	f7f6 ff48 	bl	80004dc <__aeabi_i2d>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f6 fdf4 	bl	8000240 <__aeabi_dsub>
 8009658:	f1bb 0f00 	cmp.w	fp, #0
 800965c:	4606      	mov	r6, r0
 800965e:	460f      	mov	r7, r1
 8009660:	dd6c      	ble.n	800973c <__kernel_rem_pio2+0x254>
 8009662:	f108 31ff 	add.w	r1, r8, #4294967295
 8009666:	ab0c      	add	r3, sp, #48	@ 0x30
 8009668:	f1cb 0018 	rsb	r0, fp, #24
 800966c:	9d02      	ldr	r5, [sp, #8]
 800966e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009672:	fa43 f200 	asr.w	r2, r3, r0
 8009676:	4415      	add	r5, r2
 8009678:	4082      	lsls	r2, r0
 800967a:	1a9b      	subs	r3, r3, r2
 800967c:	aa0c      	add	r2, sp, #48	@ 0x30
 800967e:	9502      	str	r5, [sp, #8]
 8009680:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009684:	f1cb 0217 	rsb	r2, fp, #23
 8009688:	fa43 f902 	asr.w	r9, r3, r2
 800968c:	f1b9 0f00 	cmp.w	r9, #0
 8009690:	dd64      	ble.n	800975c <__kernel_rem_pio2+0x274>
 8009692:	9b02      	ldr	r3, [sp, #8]
 8009694:	2200      	movs	r2, #0
 8009696:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800969a:	3301      	adds	r3, #1
 800969c:	4615      	mov	r5, r2
 800969e:	9302      	str	r3, [sp, #8]
 80096a0:	4590      	cmp	r8, r2
 80096a2:	f300 80b7 	bgt.w	8009814 <__kernel_rem_pio2+0x32c>
 80096a6:	f1bb 0f00 	cmp.w	fp, #0
 80096aa:	dd07      	ble.n	80096bc <__kernel_rem_pio2+0x1d4>
 80096ac:	f1bb 0f01 	cmp.w	fp, #1
 80096b0:	f000 80be 	beq.w	8009830 <__kernel_rem_pio2+0x348>
 80096b4:	f1bb 0f02 	cmp.w	fp, #2
 80096b8:	f000 80c5 	beq.w	8009846 <__kernel_rem_pio2+0x35e>
 80096bc:	f1b9 0f02 	cmp.w	r9, #2
 80096c0:	d14c      	bne.n	800975c <__kernel_rem_pio2+0x274>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	2000      	movs	r0, #0
 80096c8:	494d      	ldr	r1, [pc, #308]	@ (8009800 <__kernel_rem_pio2+0x318>)
 80096ca:	f7f6 fdb9 	bl	8000240 <__aeabi_dsub>
 80096ce:	4606      	mov	r6, r0
 80096d0:	460f      	mov	r7, r1
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	d042      	beq.n	800975c <__kernel_rem_pio2+0x274>
 80096d6:	4658      	mov	r0, fp
 80096d8:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 80097f0 <__kernel_rem_pio2+0x308>
 80096dc:	f000 fa5c 	bl	8009b98 <scalbn>
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	ec53 2b10 	vmov	r2, r3, d0
 80096e8:	f7f6 fdaa 	bl	8000240 <__aeabi_dsub>
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	e034      	b.n	800975c <__kernel_rem_pio2+0x274>
 80096f2:	2200      	movs	r2, #0
 80096f4:	4b43      	ldr	r3, [pc, #268]	@ (8009804 <__kernel_rem_pio2+0x31c>)
 80096f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096fe:	f7f6 ff57 	bl	80005b0 <__aeabi_dmul>
 8009702:	f7f7 f9ef 	bl	8000ae4 <__aeabi_d2iz>
 8009706:	f7f6 fee9 	bl	80004dc <__aeabi_i2d>
 800970a:	2200      	movs	r2, #0
 800970c:	4b3e      	ldr	r3, [pc, #248]	@ (8009808 <__kernel_rem_pio2+0x320>)
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	f7f6 ff4d 	bl	80005b0 <__aeabi_dmul>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971e:	f7f6 fd8f 	bl	8000240 <__aeabi_dsub>
 8009722:	f7f7 f9df 	bl	8000ae4 <__aeabi_d2iz>
 8009726:	4639      	mov	r1, r7
 8009728:	f849 0b04 	str.w	r0, [r9], #4
 800972c:	4630      	mov	r0, r6
 800972e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009732:	f7f6 fd87 	bl	8000244 <__adddf3>
 8009736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800973a:	e75d      	b.n	80095f8 <__kernel_rem_pio2+0x110>
 800973c:	d107      	bne.n	800974e <__kernel_rem_pio2+0x266>
 800973e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009742:	aa0c      	add	r2, sp, #48	@ 0x30
 8009744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009748:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800974c:	e79e      	b.n	800968c <__kernel_rem_pio2+0x1a4>
 800974e:	2200      	movs	r2, #0
 8009750:	4b2e      	ldr	r3, [pc, #184]	@ (800980c <__kernel_rem_pio2+0x324>)
 8009752:	f7f7 f9b3 	bl	8000abc <__aeabi_dcmpge>
 8009756:	2800      	cmp	r0, #0
 8009758:	d143      	bne.n	80097e2 <__kernel_rem_pio2+0x2fa>
 800975a:	4681      	mov	r9, r0
 800975c:	2200      	movs	r2, #0
 800975e:	2300      	movs	r3, #0
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f7 f98c 	bl	8000a80 <__aeabi_dcmpeq>
 8009768:	2800      	cmp	r0, #0
 800976a:	f000 80be 	beq.w	80098ea <__kernel_rem_pio2+0x402>
 800976e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009772:	2200      	movs	r2, #0
 8009774:	9900      	ldr	r1, [sp, #0]
 8009776:	428b      	cmp	r3, r1
 8009778:	da6d      	bge.n	8009856 <__kernel_rem_pio2+0x36e>
 800977a:	2a00      	cmp	r2, #0
 800977c:	f000 8088 	beq.w	8009890 <__kernel_rem_pio2+0x3a8>
 8009780:	f108 38ff 	add.w	r8, r8, #4294967295
 8009784:	ab0c      	add	r3, sp, #48	@ 0x30
 8009786:	f1ab 0b18 	sub.w	fp, fp, #24
 800978a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0f6      	beq.n	8009780 <__kernel_rem_pio2+0x298>
 8009792:	4658      	mov	r0, fp
 8009794:	4646      	mov	r6, r8
 8009796:	f04f 0a00 	mov.w	sl, #0
 800979a:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8009804 <__kernel_rem_pio2+0x31c>
 800979e:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 80097f0 <__kernel_rem_pio2+0x308>
 80097a2:	f000 f9f9 	bl	8009b98 <scalbn>
 80097a6:	f108 0301 	add.w	r3, r8, #1
 80097aa:	00da      	lsls	r2, r3, #3
 80097ac:	9205      	str	r2, [sp, #20]
 80097ae:	aa70      	add	r2, sp, #448	@ 0x1c0
 80097b0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80097b4:	ec55 4b10 	vmov	r4, r5, d0
 80097b8:	2e00      	cmp	r6, #0
 80097ba:	f280 80ce 	bge.w	800995a <__kernel_rem_pio2+0x472>
 80097be:	4644      	mov	r4, r8
 80097c0:	2c00      	cmp	r4, #0
 80097c2:	f2c0 80fc 	blt.w	80099be <__kernel_rem_pio2+0x4d6>
 80097c6:	4b12      	ldr	r3, [pc, #72]	@ (8009810 <__kernel_rem_pio2+0x328>)
 80097c8:	f04f 0a00 	mov.w	sl, #0
 80097cc:	f04f 0b00 	mov.w	fp, #0
 80097d0:	2600      	movs	r6, #0
 80097d2:	461f      	mov	r7, r3
 80097d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80097d6:	eba8 0504 	sub.w	r5, r8, r4
 80097da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097de:	9306      	str	r3, [sp, #24]
 80097e0:	e0e1      	b.n	80099a6 <__kernel_rem_pio2+0x4be>
 80097e2:	f04f 0902 	mov.w	r9, #2
 80097e6:	e754      	b.n	8009692 <__kernel_rem_pio2+0x1aa>
	...
 80097f4:	3ff00000 	.word	0x3ff00000
 80097f8:	0800a2c0 	.word	0x0800a2c0
 80097fc:	40200000 	.word	0x40200000
 8009800:	3ff00000 	.word	0x3ff00000
 8009804:	3e700000 	.word	0x3e700000
 8009808:	41700000 	.word	0x41700000
 800980c:	3fe00000 	.word	0x3fe00000
 8009810:	0800a280 	.word	0x0800a280
 8009814:	f854 3b04 	ldr.w	r3, [r4], #4
 8009818:	b945      	cbnz	r5, 800982c <__kernel_rem_pio2+0x344>
 800981a:	b123      	cbz	r3, 8009826 <__kernel_rem_pio2+0x33e>
 800981c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009820:	f844 3c04 	str.w	r3, [r4, #-4]
 8009824:	2301      	movs	r3, #1
 8009826:	3201      	adds	r2, #1
 8009828:	461d      	mov	r5, r3
 800982a:	e739      	b.n	80096a0 <__kernel_rem_pio2+0x1b8>
 800982c:	1acb      	subs	r3, r1, r3
 800982e:	e7f7      	b.n	8009820 <__kernel_rem_pio2+0x338>
 8009830:	f108 32ff 	add.w	r2, r8, #4294967295
 8009834:	ab0c      	add	r3, sp, #48	@ 0x30
 8009836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800983e:	a90c      	add	r1, sp, #48	@ 0x30
 8009840:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009844:	e73a      	b.n	80096bc <__kernel_rem_pio2+0x1d4>
 8009846:	f108 32ff 	add.w	r2, r8, #4294967295
 800984a:	ab0c      	add	r3, sp, #48	@ 0x30
 800984c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009850:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009854:	e7f3      	b.n	800983e <__kernel_rem_pio2+0x356>
 8009856:	a90c      	add	r1, sp, #48	@ 0x30
 8009858:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800985c:	3b01      	subs	r3, #1
 800985e:	430a      	orrs	r2, r1
 8009860:	e788      	b.n	8009774 <__kernel_rem_pio2+0x28c>
 8009862:	3401      	adds	r4, #1
 8009864:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009868:	2a00      	cmp	r2, #0
 800986a:	d0fa      	beq.n	8009862 <__kernel_rem_pio2+0x37a>
 800986c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800986e:	aa20      	add	r2, sp, #128	@ 0x80
 8009870:	f108 0701 	add.w	r7, r8, #1
 8009874:	4444      	add	r4, r8
 8009876:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800987a:	eb0d 0503 	add.w	r5, sp, r3
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	4443      	add	r3, r8
 8009882:	3d98      	subs	r5, #152	@ 0x98
 8009884:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009888:	42bc      	cmp	r4, r7
 800988a:	da04      	bge.n	8009896 <__kernel_rem_pio2+0x3ae>
 800988c:	46a0      	mov	r8, r4
 800988e:	e6a3      	b.n	80095d8 <__kernel_rem_pio2+0xf0>
 8009890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009892:	2401      	movs	r4, #1
 8009894:	e7e6      	b.n	8009864 <__kernel_rem_pio2+0x37c>
 8009896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009898:	f04f 0800 	mov.w	r8, #0
 800989c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80098a0:	f7f6 fe1c 	bl	80004dc <__aeabi_i2d>
 80098a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098a8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009b68 <__kernel_rem_pio2+0x680>
 80098ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 80098b0:	46b2      	mov	sl, r6
 80098b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098b6:	9b05      	ldr	r3, [sp, #20]
 80098b8:	4598      	cmp	r8, r3
 80098ba:	dd05      	ble.n	80098c8 <__kernel_rem_pio2+0x3e0>
 80098bc:	3701      	adds	r7, #1
 80098be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098c2:	eca5 7b02 	vstmia	r5!, {d7}
 80098c6:	e7df      	b.n	8009888 <__kernel_rem_pio2+0x3a0>
 80098c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80098cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80098d0:	f7f6 fe6e 	bl	80005b0 <__aeabi_dmul>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	f108 0801 	add.w	r8, r8, #1
 80098dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e0:	f7f6 fcb0 	bl	8000244 <__adddf3>
 80098e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098e8:	e7e5      	b.n	80098b6 <__kernel_rem_pio2+0x3ce>
 80098ea:	f1cb 0000 	rsb	r0, fp, #0
 80098ee:	ec47 6b10 	vmov	d0, r6, r7
 80098f2:	f000 f951 	bl	8009b98 <scalbn>
 80098f6:	2200      	movs	r2, #0
 80098f8:	4b9d      	ldr	r3, [pc, #628]	@ (8009b70 <__kernel_rem_pio2+0x688>)
 80098fa:	ec55 4b10 	vmov	r4, r5, d0
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f7 f8db 	bl	8000abc <__aeabi_dcmpge>
 8009906:	b300      	cbz	r0, 800994a <__kernel_rem_pio2+0x462>
 8009908:	2200      	movs	r2, #0
 800990a:	4b9a      	ldr	r3, [pc, #616]	@ (8009b74 <__kernel_rem_pio2+0x68c>)
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fe4e 	bl	80005b0 <__aeabi_dmul>
 8009914:	f10b 0b18 	add.w	fp, fp, #24
 8009918:	f7f7 f8e4 	bl	8000ae4 <__aeabi_d2iz>
 800991c:	4606      	mov	r6, r0
 800991e:	f7f6 fddd 	bl	80004dc <__aeabi_i2d>
 8009922:	2200      	movs	r2, #0
 8009924:	4b92      	ldr	r3, [pc, #584]	@ (8009b70 <__kernel_rem_pio2+0x688>)
 8009926:	f7f6 fe43 	bl	80005b0 <__aeabi_dmul>
 800992a:	460b      	mov	r3, r1
 800992c:	4602      	mov	r2, r0
 800992e:	4629      	mov	r1, r5
 8009930:	4620      	mov	r0, r4
 8009932:	f7f6 fc85 	bl	8000240 <__aeabi_dsub>
 8009936:	f7f7 f8d5 	bl	8000ae4 <__aeabi_d2iz>
 800993a:	ab0c      	add	r3, sp, #48	@ 0x30
 800993c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009940:	f108 0801 	add.w	r8, r8, #1
 8009944:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009948:	e723      	b.n	8009792 <__kernel_rem_pio2+0x2aa>
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f7 f8c9 	bl	8000ae4 <__aeabi_d2iz>
 8009952:	ab0c      	add	r3, sp, #48	@ 0x30
 8009954:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009958:	e71b      	b.n	8009792 <__kernel_rem_pio2+0x2aa>
 800995a:	ab0c      	add	r3, sp, #48	@ 0x30
 800995c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009960:	3e01      	subs	r6, #1
 8009962:	f7f6 fdbb 	bl	80004dc <__aeabi_i2d>
 8009966:	4622      	mov	r2, r4
 8009968:	462b      	mov	r3, r5
 800996a:	f7f6 fe21 	bl	80005b0 <__aeabi_dmul>
 800996e:	4652      	mov	r2, sl
 8009970:	465b      	mov	r3, fp
 8009972:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009976:	4620      	mov	r0, r4
 8009978:	4629      	mov	r1, r5
 800997a:	f7f6 fe19 	bl	80005b0 <__aeabi_dmul>
 800997e:	4604      	mov	r4, r0
 8009980:	460d      	mov	r5, r1
 8009982:	e719      	b.n	80097b8 <__kernel_rem_pio2+0x2d0>
 8009984:	9906      	ldr	r1, [sp, #24]
 8009986:	3601      	adds	r6, #1
 8009988:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800998c:	9106      	str	r1, [sp, #24]
 800998e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009992:	f7f6 fe0d 	bl	80005b0 <__aeabi_dmul>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4650      	mov	r0, sl
 800999c:	4659      	mov	r1, fp
 800999e:	f7f6 fc51 	bl	8000244 <__adddf3>
 80099a2:	4682      	mov	sl, r0
 80099a4:	468b      	mov	fp, r1
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	429e      	cmp	r6, r3
 80099aa:	dc01      	bgt.n	80099b0 <__kernel_rem_pio2+0x4c8>
 80099ac:	42b5      	cmp	r5, r6
 80099ae:	dae9      	bge.n	8009984 <__kernel_rem_pio2+0x49c>
 80099b0:	ab48      	add	r3, sp, #288	@ 0x120
 80099b2:	3c01      	subs	r4, #1
 80099b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80099b8:	e9c5 ab00 	strd	sl, fp, [r5]
 80099bc:	e700      	b.n	80097c0 <__kernel_rem_pio2+0x2d8>
 80099be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	dc0b      	bgt.n	80099dc <__kernel_rem_pio2+0x4f4>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dc39      	bgt.n	8009a3c <__kernel_rem_pio2+0x554>
 80099c8:	d05d      	beq.n	8009a86 <__kernel_rem_pio2+0x59e>
 80099ca:	9b02      	ldr	r3, [sp, #8]
 80099cc:	f003 0007 	and.w	r0, r3, #7
 80099d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80099d4:	ecbd 8b02 	vpop	{d8}
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d1f3      	bne.n	80099ca <__kernel_rem_pio2+0x4e2>
 80099e2:	9b05      	ldr	r3, [sp, #20]
 80099e4:	46c2      	mov	sl, r8
 80099e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80099ea:	eb0d 0403 	add.w	r4, sp, r3
 80099ee:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80099f2:	4625      	mov	r5, r4
 80099f4:	f1ba 0f00 	cmp.w	sl, #0
 80099f8:	f1a5 0508 	sub.w	r5, r5, #8
 80099fc:	dc6b      	bgt.n	8009ad6 <__kernel_rem_pio2+0x5ee>
 80099fe:	4645      	mov	r5, r8
 8009a00:	2d01      	cmp	r5, #1
 8009a02:	f1a4 0408 	sub.w	r4, r4, #8
 8009a06:	f300 8087 	bgt.w	8009b18 <__kernel_rem_pio2+0x630>
 8009a0a:	9c05      	ldr	r4, [sp, #20]
 8009a0c:	ab48      	add	r3, sp, #288	@ 0x120
 8009a0e:	2000      	movs	r0, #0
 8009a10:	2100      	movs	r1, #0
 8009a12:	441c      	add	r4, r3
 8009a14:	f1b8 0f01 	cmp.w	r8, #1
 8009a18:	f300 809c 	bgt.w	8009b54 <__kernel_rem_pio2+0x66c>
 8009a1c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009a20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009a24:	f1b9 0f00 	cmp.w	r9, #0
 8009a28:	f040 80a6 	bne.w	8009b78 <__kernel_rem_pio2+0x690>
 8009a2c:	9b04      	ldr	r3, [sp, #16]
 8009a2e:	e9c3 7800 	strd	r7, r8, [r3]
 8009a32:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009a36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009a3a:	e7c6      	b.n	80099ca <__kernel_rem_pio2+0x4e2>
 8009a3c:	9d05      	ldr	r5, [sp, #20]
 8009a3e:	ab48      	add	r3, sp, #288	@ 0x120
 8009a40:	4644      	mov	r4, r8
 8009a42:	2000      	movs	r0, #0
 8009a44:	441d      	add	r5, r3
 8009a46:	2100      	movs	r1, #0
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	da35      	bge.n	8009ab8 <__kernel_rem_pio2+0x5d0>
 8009a4c:	f1b9 0f00 	cmp.w	r9, #0
 8009a50:	d038      	beq.n	8009ac4 <__kernel_rem_pio2+0x5dc>
 8009a52:	4602      	mov	r2, r0
 8009a54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a58:	9c04      	ldr	r4, [sp, #16]
 8009a5a:	ad4a      	add	r5, sp, #296	@ 0x128
 8009a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8009a60:	2401      	movs	r4, #1
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009a6a:	f7f6 fbe9 	bl	8000240 <__aeabi_dsub>
 8009a6e:	45a0      	cmp	r8, r4
 8009a70:	da2b      	bge.n	8009aca <__kernel_rem_pio2+0x5e2>
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d002      	beq.n	8009a7e <__kernel_rem_pio2+0x596>
 8009a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009a84:	e7a1      	b.n	80099ca <__kernel_rem_pio2+0x4e2>
 8009a86:	9c05      	ldr	r4, [sp, #20]
 8009a88:	ab48      	add	r3, sp, #288	@ 0x120
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	441c      	add	r4, r3
 8009a90:	f1b8 0f00 	cmp.w	r8, #0
 8009a94:	da09      	bge.n	8009aaa <__kernel_rem_pio2+0x5c2>
 8009a96:	f1b9 0f00 	cmp.w	r9, #0
 8009a9a:	d002      	beq.n	8009aa2 <__kernel_rem_pio2+0x5ba>
 8009a9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	e9c3 0100 	strd	r0, r1, [r3]
 8009aa8:	e78f      	b.n	80099ca <__kernel_rem_pio2+0x4e2>
 8009aaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009aae:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ab2:	f7f6 fbc7 	bl	8000244 <__adddf3>
 8009ab6:	e7eb      	b.n	8009a90 <__kernel_rem_pio2+0x5a8>
 8009ab8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009abc:	3c01      	subs	r4, #1
 8009abe:	f7f6 fbc1 	bl	8000244 <__adddf3>
 8009ac2:	e7c1      	b.n	8009a48 <__kernel_rem_pio2+0x560>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	e7c6      	b.n	8009a58 <__kernel_rem_pio2+0x570>
 8009aca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009ace:	3401      	adds	r4, #1
 8009ad0:	f7f6 fbb8 	bl	8000244 <__adddf3>
 8009ad4:	e7cb      	b.n	8009a6e <__kernel_rem_pio2+0x586>
 8009ad6:	ed95 7b00 	vldr	d7, [r5]
 8009ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ade:	ed8d 7b00 	vstr	d7, [sp]
 8009ae2:	ed95 7b02 	vldr	d7, [r5, #8]
 8009ae6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aea:	ec53 2b17 	vmov	r2, r3, d7
 8009aee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009af2:	f7f6 fba7 	bl	8000244 <__adddf3>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b02:	f7f6 fb9d 	bl	8000240 <__aeabi_dsub>
 8009b06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b0a:	f7f6 fb9b 	bl	8000244 <__adddf3>
 8009b0e:	e9c5 6700 	strd	r6, r7, [r5]
 8009b12:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009b16:	e76d      	b.n	80099f4 <__kernel_rem_pio2+0x50c>
 8009b18:	ed94 7b00 	vldr	d7, [r4]
 8009b1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009b20:	3d01      	subs	r5, #1
 8009b22:	4652      	mov	r2, sl
 8009b24:	465b      	mov	r3, fp
 8009b26:	ec51 0b17 	vmov	r0, r1, d7
 8009b2a:	ed8d 7b00 	vstr	d7, [sp]
 8009b2e:	f7f6 fb89 	bl	8000244 <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4606      	mov	r6, r0
 8009b38:	460f      	mov	r7, r1
 8009b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b3e:	f7f6 fb7f 	bl	8000240 <__aeabi_dsub>
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	f7f6 fb7d 	bl	8000244 <__adddf3>
 8009b4a:	e9c4 6700 	strd	r6, r7, [r4]
 8009b4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b52:	e755      	b.n	8009a00 <__kernel_rem_pio2+0x518>
 8009b54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b5c:	f7f6 fb72 	bl	8000244 <__adddf3>
 8009b60:	e758      	b.n	8009a14 <__kernel_rem_pio2+0x52c>
 8009b62:	bf00      	nop
 8009b64:	f3af 8000 	nop.w
	...
 8009b70:	41700000 	.word	0x41700000
 8009b74:	3e700000 	.word	0x3e700000
 8009b78:	9b04      	ldr	r3, [sp, #16]
 8009b7a:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009b7e:	9a04      	ldr	r2, [sp, #16]
 8009b80:	601f      	str	r7, [r3, #0]
 8009b82:	605c      	str	r4, [r3, #4]
 8009b84:	609d      	str	r5, [r3, #8]
 8009b86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b8a:	6110      	str	r0, [r2, #16]
 8009b8c:	60d3      	str	r3, [r2, #12]
 8009b8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b92:	6153      	str	r3, [r2, #20]
 8009b94:	e719      	b.n	80099ca <__kernel_rem_pio2+0x4e2>
 8009b96:	bf00      	nop

08009b98 <scalbn>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	ec55 4b10 	vmov	r4, r5, d0
 8009b9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	b991      	cbnz	r1, 8009bce <scalbn+0x36>
 8009ba8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009bac:	4323      	orrs	r3, r4
 8009bae:	d03d      	beq.n	8009c2c <scalbn+0x94>
 8009bb0:	4b35      	ldr	r3, [pc, #212]	@ (8009c88 <scalbn+0xf0>)
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f7f6 fcfa 	bl	80005b0 <__aeabi_dmul>
 8009bbc:	4b33      	ldr	r3, [pc, #204]	@ (8009c8c <scalbn+0xf4>)
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	429e      	cmp	r6, r3
 8009bc4:	da0f      	bge.n	8009be6 <scalbn+0x4e>
 8009bc6:	a328      	add	r3, pc, #160	@ (adr r3, 8009c68 <scalbn+0xd0>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	e01e      	b.n	8009c0c <scalbn+0x74>
 8009bce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009bd2:	4291      	cmp	r1, r2
 8009bd4:	d10b      	bne.n	8009bee <scalbn+0x56>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	4620      	mov	r0, r4
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7f6 fb32 	bl	8000244 <__adddf3>
 8009be0:	4604      	mov	r4, r0
 8009be2:	460d      	mov	r5, r1
 8009be4:	e022      	b.n	8009c2c <scalbn+0x94>
 8009be6:	460b      	mov	r3, r1
 8009be8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009bec:	3936      	subs	r1, #54	@ 0x36
 8009bee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009bf2:	4296      	cmp	r6, r2
 8009bf4:	dd0d      	ble.n	8009c12 <scalbn+0x7a>
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009c70 <scalbn+0xd8>)
 8009bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bfe:	da02      	bge.n	8009c06 <scalbn+0x6e>
 8009c00:	a11d      	add	r1, pc, #116	@ (adr r1, 8009c78 <scalbn+0xe0>)
 8009c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c06:	a31a      	add	r3, pc, #104	@ (adr r3, 8009c70 <scalbn+0xd8>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fcd0 	bl	80005b0 <__aeabi_dmul>
 8009c10:	e7e6      	b.n	8009be0 <scalbn+0x48>
 8009c12:	1872      	adds	r2, r6, r1
 8009c14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009c18:	428a      	cmp	r2, r1
 8009c1a:	dcec      	bgt.n	8009bf6 <scalbn+0x5e>
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	dd08      	ble.n	8009c32 <scalbn+0x9a>
 8009c20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009c28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c2c:	ec45 4b10 	vmov	d0, r4, r5
 8009c30:	bd70      	pop	{r4, r5, r6, pc}
 8009c32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009c36:	da08      	bge.n	8009c4a <scalbn+0xb2>
 8009c38:	2d00      	cmp	r5, #0
 8009c3a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009c68 <scalbn+0xd0>)
 8009c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c40:	dac1      	bge.n	8009bc6 <scalbn+0x2e>
 8009c42:	a10f      	add	r1, pc, #60	@ (adr r1, 8009c80 <scalbn+0xe8>)
 8009c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c48:	e7bd      	b.n	8009bc6 <scalbn+0x2e>
 8009c4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c4e:	3236      	adds	r2, #54	@ 0x36
 8009c50:	4620      	mov	r0, r4
 8009c52:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009c56:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c90 <scalbn+0xf8>)
 8009c5e:	4629      	mov	r1, r5
 8009c60:	e7d4      	b.n	8009c0c <scalbn+0x74>
 8009c62:	bf00      	nop
 8009c64:	f3af 8000 	nop.w
 8009c68:	c2f8f359 	.word	0xc2f8f359
 8009c6c:	01a56e1f 	.word	0x01a56e1f
 8009c70:	8800759c 	.word	0x8800759c
 8009c74:	7e37e43c 	.word	0x7e37e43c
 8009c78:	8800759c 	.word	0x8800759c
 8009c7c:	fe37e43c 	.word	0xfe37e43c
 8009c80:	c2f8f359 	.word	0xc2f8f359
 8009c84:	81a56e1f 	.word	0x81a56e1f
 8009c88:	43500000 	.word	0x43500000
 8009c8c:	ffff3cb0 	.word	0xffff3cb0
 8009c90:	3c900000 	.word	0x3c900000
 8009c94:	00000000 	.word	0x00000000

08009c98 <floor>:
 8009c98:	ec51 0b10 	vmov	r0, r1, d0
 8009c9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009ca8:	460c      	mov	r4, r1
 8009caa:	4605      	mov	r5, r0
 8009cac:	4680      	mov	r8, r0
 8009cae:	2e13      	cmp	r6, #19
 8009cb0:	dc35      	bgt.n	8009d1e <floor+0x86>
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	da17      	bge.n	8009ce6 <floor+0x4e>
 8009cb6:	a334      	add	r3, pc, #208	@ (adr r3, 8009d88 <floor+0xf0>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 fac2 	bl	8000244 <__adddf3>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f7f6 ff04 	bl	8000ad0 <__aeabi_dcmpgt>
 8009cc8:	b150      	cbz	r0, 8009ce0 <floor+0x48>
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	da56      	bge.n	8009d7c <floor+0xe4>
 8009cce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009cd2:	432c      	orrs	r4, r5
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	42ac      	cmp	r4, r5
 8009cd8:	4c2d      	ldr	r4, [pc, #180]	@ (8009d90 <floor+0xf8>)
 8009cda:	bf08      	it	eq
 8009cdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	e024      	b.n	8009d30 <floor+0x98>
 8009ce6:	4f2b      	ldr	r7, [pc, #172]	@ (8009d94 <floor+0xfc>)
 8009ce8:	4137      	asrs	r7, r6
 8009cea:	ea01 0307 	and.w	r3, r1, r7
 8009cee:	4303      	orrs	r3, r0
 8009cf0:	d01e      	beq.n	8009d30 <floor+0x98>
 8009cf2:	a325      	add	r3, pc, #148	@ (adr r3, 8009d88 <floor+0xf0>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 faa4 	bl	8000244 <__adddf3>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f7f6 fee6 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d0eb      	beq.n	8009ce0 <floor+0x48>
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	f04f 0500 	mov.w	r5, #0
 8009d0e:	bfbe      	ittt	lt
 8009d10:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009d14:	4133      	asrlt	r3, r6
 8009d16:	18e4      	addlt	r4, r4, r3
 8009d18:	ea24 0407 	bic.w	r4, r4, r7
 8009d1c:	e7e0      	b.n	8009ce0 <floor+0x48>
 8009d1e:	2e33      	cmp	r6, #51	@ 0x33
 8009d20:	dd0a      	ble.n	8009d38 <floor+0xa0>
 8009d22:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009d26:	d103      	bne.n	8009d30 <floor+0x98>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	f7f6 fa8a 	bl	8000244 <__adddf3>
 8009d30:	ec41 0b10 	vmov	d0, r0, r1
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d38:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d40:	40df      	lsrs	r7, r3
 8009d42:	4207      	tst	r7, r0
 8009d44:	d0f4      	beq.n	8009d30 <floor+0x98>
 8009d46:	a310      	add	r3, pc, #64	@ (adr r3, 8009d88 <floor+0xf0>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fa7a 	bl	8000244 <__adddf3>
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	f7f6 febc 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0c1      	beq.n	8009ce0 <floor+0x48>
 8009d5c:	2c00      	cmp	r4, #0
 8009d5e:	da0a      	bge.n	8009d76 <floor+0xde>
 8009d60:	2e14      	cmp	r6, #20
 8009d62:	d101      	bne.n	8009d68 <floor+0xd0>
 8009d64:	3401      	adds	r4, #1
 8009d66:	e006      	b.n	8009d76 <floor+0xde>
 8009d68:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	40b3      	lsls	r3, r6
 8009d70:	441d      	add	r5, r3
 8009d72:	4545      	cmp	r5, r8
 8009d74:	d3f6      	bcc.n	8009d64 <floor+0xcc>
 8009d76:	ea25 0507 	bic.w	r5, r5, r7
 8009d7a:	e7b1      	b.n	8009ce0 <floor+0x48>
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	462c      	mov	r4, r5
 8009d80:	e7ae      	b.n	8009ce0 <floor+0x48>
 8009d82:	bf00      	nop
 8009d84:	f3af 8000 	nop.w
 8009d88:	8800759c 	.word	0x8800759c
 8009d8c:	7e37e43c 	.word	0x7e37e43c
 8009d90:	bff00000 	.word	0xbff00000
 8009d94:	000fffff 	.word	0x000fffff

08009d98 <memset>:
 8009d98:	4402      	add	r2, r0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d100      	bne.n	8009da2 <memset+0xa>
 8009da0:	4770      	bx	lr
 8009da2:	f803 1b01 	strb.w	r1, [r3], #1
 8009da6:	e7f9      	b.n	8009d9c <memset+0x4>

08009da8 <__errno>:
 8009da8:	4b01      	ldr	r3, [pc, #4]	@ (8009db0 <__errno+0x8>)
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	20000034 	.word	0x20000034

08009db4 <__libc_init_array>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	4d0d      	ldr	r5, [pc, #52]	@ (8009dec <__libc_init_array+0x38>)
 8009db8:	2600      	movs	r6, #0
 8009dba:	4c0d      	ldr	r4, [pc, #52]	@ (8009df0 <__libc_init_array+0x3c>)
 8009dbc:	1b64      	subs	r4, r4, r5
 8009dbe:	10a4      	asrs	r4, r4, #2
 8009dc0:	42a6      	cmp	r6, r4
 8009dc2:	d109      	bne.n	8009dd8 <__libc_init_array+0x24>
 8009dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8009df4 <__libc_init_array+0x40>)
 8009dc6:	2600      	movs	r6, #0
 8009dc8:	4c0b      	ldr	r4, [pc, #44]	@ (8009df8 <__libc_init_array+0x44>)
 8009dca:	f000 f817 	bl	8009dfc <_init>
 8009dce:	1b64      	subs	r4, r4, r5
 8009dd0:	10a4      	asrs	r4, r4, #2
 8009dd2:	42a6      	cmp	r6, r4
 8009dd4:	d105      	bne.n	8009de2 <__libc_init_array+0x2e>
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ddc:	3601      	adds	r6, #1
 8009dde:	4798      	blx	r3
 8009de0:	e7ee      	b.n	8009dc0 <__libc_init_array+0xc>
 8009de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de6:	3601      	adds	r6, #1
 8009de8:	4798      	blx	r3
 8009dea:	e7f2      	b.n	8009dd2 <__libc_init_array+0x1e>
 8009dec:	0800a2d8 	.word	0x0800a2d8
 8009df0:	0800a2d8 	.word	0x0800a2d8
 8009df4:	0800a2d8 	.word	0x0800a2d8
 8009df8:	0800a2dc 	.word	0x0800a2dc

08009dfc <_init>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr

08009e08 <_fini>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr
