
ZP_AirSpeed_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080088d0  080088d0  000188d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b14  08008b14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b1c  08008b1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000074  08008b98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08008b98  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c0e  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1f  00000000  00000000  00036cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00039ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  0003a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c03d  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c2f  00000000  00000000  0006782d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102e27  00000000  00000000  0007a45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017d283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e4  00000000  00000000  0017d2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	080088b4 	.word	0x080088b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	080088b4 	.word	0x080088b4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b982 	b.w	8000edc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d148      	bne.n	8000c90 <__udivmoddi4+0xa0>
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	4694      	mov	ip, r2
 8000c02:	d961      	bls.n	8000cc8 <__udivmoddi4+0xd8>
 8000c04:	fab2 f382 	clz	r3, r2
 8000c08:	b143      	cbz	r3, 8000c1c <__udivmoddi4+0x2c>
 8000c0a:	f1c3 0120 	rsb	r1, r3, #32
 8000c0e:	409f      	lsls	r7, r3
 8000c10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c14:	409c      	lsls	r4, r3
 8000c16:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1a:	430f      	orrs	r7, r1
 8000c1c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c20:	fa1f fe8c 	uxth.w	lr, ip
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c2a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c2e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c32:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c36:	4290      	cmp	r0, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x5c>
 8000c3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x5a>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f200 8137 	bhi.w	8000eb8 <__udivmoddi4+0x2c8>
 8000c4a:	463e      	mov	r6, r7
 8000c4c:	1a12      	subs	r2, r2, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c54:	fb01 2210 	mls	r2, r1, r0, r2
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x86>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x84>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 811c 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000c74:	4610      	mov	r0, r2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	2600      	movs	r6, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0x9a>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0xb8>
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	f000 80fd 	beq.w	8000e94 <__udivmoddi4+0x2a4>
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca8:	fab3 f683 	clz	r6, r3
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d14b      	bne.n	8000d48 <__udivmoddi4+0x158>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	f0c0 80f2 	bcc.w	8000e9a <__udivmoddi4+0x2aa>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f240 80ef 	bls.w	8000e9a <__udivmoddi4+0x2aa>
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e3      	beq.n	8000c8a <__udivmoddi4+0x9a>
 8000cc2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cc6:	e7e0      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xdc>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f382 	clz	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 809d 	bne.w	8000e10 <__udivmoddi4+0x220>
 8000cd6:	1a89      	subs	r1, r1, r2
 8000cd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cdc:	b297      	uxth	r7, r2
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000ce6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb07 f002 	mul.w	r0, r7, r2
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d90f      	bls.n	8000d16 <__udivmoddi4+0x126>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cfe:	bf2c      	ite	cs
 8000d00:	f04f 0901 	movcs.w	r9, #1
 8000d04:	f04f 0900 	movcc.w	r9, #0
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	d903      	bls.n	8000d14 <__udivmoddi4+0x124>
 8000d0c:	f1b9 0f00 	cmp.w	r9, #0
 8000d10:	f000 80cf 	beq.w	8000eb2 <__udivmoddi4+0x2c2>
 8000d14:	4642      	mov	r2, r8
 8000d16:	1a09      	subs	r1, r1, r0
 8000d18:	b2a4      	uxth	r4, r4
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x150>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x14e>
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	f200 80b4 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	1be4      	subs	r4, r4, r7
 8000d42:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d46:	e79b      	b.n	8000c80 <__udivmoddi4+0x90>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	40f9      	lsrs	r1, r7
 8000d58:	40b2      	lsls	r2, r6
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	431c      	orrs	r4, r3
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d76:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x1b6>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0b01 	movcs.w	fp, #1
 8000d94:	f04f 0b00 	movcc.w	fp, #0
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x1b4>
 8000d9c:	f1bb 0f00 	cmp.w	fp, #0
 8000da0:	f000 808d 	beq.w	8000ebe <__udivmoddi4+0x2ce>
 8000da4:	46d0      	mov	r8, sl
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dae:	fb09 1110 	mls	r1, r9, r0, r1
 8000db2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dba:	458e      	cmp	lr, r1
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1de>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d201      	bcs.n	8000dcc <__udivmoddi4+0x1dc>
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d87f      	bhi.n	8000ecc <__udivmoddi4+0x2dc>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dda:	4541      	cmp	r1, r8
 8000ddc:	464c      	mov	r4, r9
 8000dde:	46c6      	mov	lr, r8
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x1f8>
 8000de2:	d106      	bne.n	8000df2 <__udivmoddi4+0x202>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d204      	bcs.n	8000df2 <__udivmoddi4+0x202>
 8000de8:	3801      	subs	r0, #1
 8000dea:	ebb9 0402 	subs.w	r4, r9, r2
 8000dee:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d070      	beq.n	8000ed8 <__udivmoddi4+0x2e8>
 8000df6:	1b1a      	subs	r2, r3, r4
 8000df8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfc:	fa22 f306 	lsr.w	r3, r2, r6
 8000e00:	fa01 f707 	lsl.w	r7, r1, r7
 8000e04:	40f1      	lsrs	r1, r6
 8000e06:	2600      	movs	r6, #0
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	e73c      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0020 	rsb	r0, r3, #32
 8000e18:	fa01 f203 	lsl.w	r2, r1, r3
 8000e1c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e20:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e24:	fa24 f100 	lsr.w	r1, r4, r0
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	409c      	lsls	r4, r3
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e34:	0c0a      	lsrs	r2, r1, #16
 8000e36:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e3a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e3e:	fb00 f607 	mul.w	r6, r0, r7
 8000e42:	4296      	cmp	r6, r2
 8000e44:	d90e      	bls.n	8000e64 <__udivmoddi4+0x274>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4296      	cmp	r6, r2
 8000e5a:	d902      	bls.n	8000e62 <__udivmoddi4+0x272>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	d031      	beq.n	8000ec6 <__udivmoddi4+0x2d6>
 8000e62:	4640      	mov	r0, r8
 8000e64:	1b92      	subs	r2, r2, r6
 8000e66:	b289      	uxth	r1, r1
 8000e68:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e6c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e74:	fb06 f207 	mul.w	r2, r6, r7
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x29c>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e84:	d201      	bcs.n	8000e8a <__udivmoddi4+0x29a>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d823      	bhi.n	8000ed2 <__udivmoddi4+0x2e2>
 8000e8a:	4646      	mov	r6, r8
 8000e8c:	1a89      	subs	r1, r1, r2
 8000e8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e92:	e725      	b.n	8000ce0 <__udivmoddi4+0xf0>
 8000e94:	462e      	mov	r6, r5
 8000e96:	4628      	mov	r0, r5
 8000e98:	e6f7      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e9a:	1a84      	subs	r4, r0, r2
 8000e9c:	eb61 0303 	sbc.w	r3, r1, r3
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	461f      	mov	r7, r3
 8000ea4:	e70b      	b.n	8000cbe <__udivmoddi4+0xce>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e749      	b.n	8000d40 <__udivmoddi4+0x150>
 8000eac:	4464      	add	r4, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	e6e1      	b.n	8000c76 <__udivmoddi4+0x86>
 8000eb2:	3a02      	subs	r2, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	e72e      	b.n	8000d16 <__udivmoddi4+0x126>
 8000eb8:	3e02      	subs	r6, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	e6c6      	b.n	8000c4c <__udivmoddi4+0x5c>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e76f      	b.n	8000da6 <__udivmoddi4+0x1b6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	e7cb      	b.n	8000e64 <__udivmoddi4+0x274>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e77d      	b.n	8000dce <__udivmoddi4+0x1de>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	e7d9      	b.n	8000e8c <__udivmoddi4+0x29c>
 8000ed8:	462e      	mov	r6, r5
 8000eda:	e6d6      	b.n	8000c8a <__udivmoddi4+0x9a>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eea:	ed97 0a01 	vldr	s0, [r7, #4]
 8000eee:	f006 f8cb 	bl	8007088 <sqrtf>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN17Airspeed_MS4525DOC1EP19__I2C_HandleTypeDef>:
#include <Airspeed.hpp>


Airspeed_MS4525DO::Airspeed_MS4525DO(I2C_HandleTypeDef* dev)
 8000f00:	b490      	push	{r4, r7}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
{
	I2C = dev;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	601a      	str	r2, [r3, #0]
	airspeed = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
	dif_pressure = 0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
	temperature = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
	dp_raw = 0; //raw pressure data
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	821a      	strh	r2, [r3, #16]
	dt_raw = 0; //raw temperature data
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	825a      	strh	r2, [r3, #18]
	strcpy((char*)msg, "NotStarted\r\n");
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3314      	adds	r3, #20
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <_ZN17Airspeed_MS4525DOC1EP19__I2C_HandleTypeDef+0x58>)
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f40:	6020      	str	r0, [r4, #0]
 8000f42:	6061      	str	r1, [r4, #4]
 8000f44:	60a2      	str	r2, [r4, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	7323      	strb	r3, [r4, #12]
}
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc90      	pop	{r4, r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	080088d0 	.word	0x080088d0

08000f5c <_ZN17Airspeed_MS4525DOD1Ev>:

Airspeed_MS4525DO::~Airspeed_MS4525DO()
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
{

}
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <_ZN17Airspeed_MS4525DO4initEv>:

bool Airspeed_MS4525DO::init()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
		uint8_t buf[4];
		buf[0] = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	733b      	strb	r3, [r7, #12]
		HAL_StatusTypeDef ret;
		ret = HAL_I2C_Master_Transmit(I2C, (uint16_t)MS4525D0_I2C_ADDR1 << 1, buf, 1, 50);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	2332      	movs	r3, #50	; 0x32
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2150      	movs	r1, #80	; 0x50
 8000f90:	f002 fc22 	bl	80037d8 <HAL_I2C_Master_Transmit>
 8000f94:	4603      	mov	r3, r0
 8000f96:	74fb      	strb	r3, [r7, #19]
	    if ( ret != HAL_OK ) {
 8000f98:	7cfb      	ldrb	r3, [r7, #19]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00d      	beq.n	8000fba <_ZN17Airspeed_MS4525DO4initEv+0x46>
	      strcpy((char*)msg, "Error Tx\r\n");
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3314      	adds	r3, #20
 8000fa2:	4948      	ldr	r1, [pc, #288]	; (80010c4 <_ZN17Airspeed_MS4525DO4initEv+0x150>)
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	cb03      	ldmia	r3!, {r0, r1}
 8000faa:	6010      	str	r0, [r2, #0]
 8000fac:	6051      	str	r1, [r2, #4]
 8000fae:	8819      	ldrh	r1, [r3, #0]
 8000fb0:	789b      	ldrb	r3, [r3, #2]
 8000fb2:	8111      	strh	r1, [r2, #8]
 8000fb4:	7293      	strb	r3, [r2, #10]
	      return false;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e07f      	b.n	80010ba <_ZN17Airspeed_MS4525DO4initEv+0x146>
	    } else {

	      for(int i = 0; i < 5000; i++);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	dc03      	bgt.n	8000fd0 <_ZN17Airspeed_MS4525DO4initEv+0x5c>
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e7f6      	b.n	8000fbe <_ZN17Airspeed_MS4525DO4initEv+0x4a>
	      // Read 4 bytes from the airspeed register
	      ret = HAL_I2C_Master_Receive(I2C, ((uint16_t)MS4525D0_I2C_ADDR1 << 1 )| 0x01, buf, 4, 50);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	2332      	movs	r3, #50	; 0x32
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2304      	movs	r3, #4
 8000fde:	2151      	movs	r1, #81	; 0x51
 8000fe0:	f002 fcee 	bl	80039c0 <HAL_I2C_Master_Receive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	74fb      	strb	r3, [r7, #19]
	      if ( ret != HAL_OK ) {
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00d      	beq.n	800100a <_ZN17Airspeed_MS4525DO4initEv+0x96>
	        strcpy((char*)msg, "Error Rx\r\n");
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3314      	adds	r3, #20
 8000ff2:	4935      	ldr	r1, [pc, #212]	; (80010c8 <_ZN17Airspeed_MS4525DO4initEv+0x154>)
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	cb03      	ldmia	r3!, {r0, r1}
 8000ffa:	6010      	str	r0, [r2, #0]
 8000ffc:	6051      	str	r1, [r2, #4]
 8000ffe:	8819      	ldrh	r1, [r3, #0]
 8001000:	789b      	ldrb	r3, [r3, #2]
 8001002:	8111      	strh	r1, [r2, #8]
 8001004:	7293      	strb	r3, [r2, #10]
	        return false;
 8001006:	2300      	movs	r3, #0
 8001008:	e057      	b.n	80010ba <_ZN17Airspeed_MS4525DO4initEv+0x146>
	      } else {

	        //interpreting raw data
	    	  dp_raw = ((int16_t)buf[0] << 8) + (int16_t)buf[1];
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	b29b      	uxth	r3, r3
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29a      	uxth	r2, r3
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	821a      	strh	r2, [r3, #16]
	    	  dp_raw = 0x3FFF & dp_raw;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001026:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800102a:	b21a      	sxth	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	821a      	strh	r2, [r3, #16]

	    	  dt_raw = ((int16_t)buf[2] << 8) + (int16_t)buf[3];
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	b29b      	uxth	r3, r3
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b29a      	uxth	r2, r3
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	825a      	strh	r2, [r3, #18]
	    	  dt_raw = (0xFFE0 & dt_raw) >> 5;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800104c:	115b      	asrs	r3, r3, #5
 800104e:	b21b      	sxth	r3, r3
 8001050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001054:	b21a      	sxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	825a      	strh	r2, [r3, #18]

	    	  if (dp_raw  == 0x3FFF || dp_raw  == 0 || dt_raw  == 0x7FF || dt_raw == 0)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001060:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001064:	4293      	cmp	r3, r2
 8001066:	d010      	beq.n	800108a <_ZN17Airspeed_MS4525DO4initEv+0x116>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <_ZN17Airspeed_MS4525DO4initEv+0x116>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001078:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800107c:	4293      	cmp	r3, r2
 800107e:	d004      	beq.n	800108a <_ZN17Airspeed_MS4525DO4initEv+0x116>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10d      	bne.n	80010a6 <_ZN17Airspeed_MS4525DO4initEv+0x132>
			  {
				  strcpy((char*)msg, "Error Dx\r\n");
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3314      	adds	r3, #20
 800108e:	490f      	ldr	r1, [pc, #60]	; (80010cc <_ZN17Airspeed_MS4525DO4initEv+0x158>)
 8001090:	461a      	mov	r2, r3
 8001092:	460b      	mov	r3, r1
 8001094:	cb03      	ldmia	r3!, {r0, r1}
 8001096:	6010      	str	r0, [r2, #0]
 8001098:	6051      	str	r1, [r2, #4]
 800109a:	8819      	ldrh	r1, [r3, #0]
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	8111      	strh	r1, [r2, #8]
 80010a0:	7293      	strb	r3, [r2, #10]
				  return false;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e009      	b.n	80010ba <_ZN17Airspeed_MS4525DO4initEv+0x146>
			  }
	      }
	    }
	    calculate_pressure();
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f812 	bl	80010d0 <_ZN17Airspeed_MS4525DO18calculate_pressureEv>
	    calculate_temperature();
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f853 	bl	8001158 <_ZN17Airspeed_MS4525DO21calculate_temperatureEv>
	    calculate_airspeed();
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f876 	bl	80011a4 <_ZN17Airspeed_MS4525DO18calculate_airspeedEv>

	    return true;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	080088e0 	.word	0x080088e0
 80010c8:	080088ec 	.word	0x080088ec
 80010cc:	080088f8 	.word	0x080088f8

080010d0 <_ZN17Airspeed_MS4525DO18calculate_pressureEv>:

void Airspeed_MS4525DO::calculate_pressure()
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	const float P_max = 150;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x68>)
 80010da:	617b      	str	r3, [r7, #20]
	const float P_min = -P_max;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x6c>)
 80010de:	613b      	str	r3, [r7, #16]
	// pound-force per square inch to pascal(newton per square meter)
	const float PSI_to_Pa = 6894.757f;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x70>)
 80010e2:	60fb      	str	r3, [r7, #12]

	//calculation can be different depend on the output type(A/B)
	float press_PSI  = -((dp_raw - 0.1f*16383) * (P_max-P_min)/(0.8f*16383) + P_min);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001144 <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x74>
 80010f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001148 <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x78>
 80010fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001102:	eddf 6a12 	vldr	s13, [pc, #72]	; 800114c <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x7c>
 8001106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001150 <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x80>
 800110e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001112:	eef1 7a67 	vneg.f32	s15, s15
 8001116:	edc7 7a02 	vstr	s15, [r7, #8]
	dif_pressure  = press_PSI * PSI_to_Pa;
 800111a:	edd7 7a02 	vldr	s15, [r7, #8]
 800111e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001154 <_ZN17Airspeed_MS4525DO18calculate_pressureEv+0x84>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	43160000 	.word	0x43160000
 800113c:	c3160000 	.word	0xc3160000
 8001140:	45d7760e 	.word	0x45d7760e
 8001144:	44ccc99a 	.word	0x44ccc99a
 8001148:	43960000 	.word	0x43960000
 800114c:	464cc99a 	.word	0x464cc99a
 8001150:	43160000 	.word	0x43160000
 8001154:	45d7760e 	.word	0x45d7760e

08001158 <_ZN17Airspeed_MS4525DO21calculate_temperatureEv>:

void Airspeed_MS4525DO::calculate_temperature()
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	//temperature in Celsius
	temperature  = ((200.0f * dt_raw) / 2047) - 50;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001198 <_ZN17Airspeed_MS4525DO21calculate_temperatureEv+0x40>
 8001172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001176:	eddf 6a09 	vldr	s13, [pc, #36]	; 800119c <_ZN17Airspeed_MS4525DO21calculate_temperatureEv+0x44>
 800117a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011a0 <_ZN17Airspeed_MS4525DO21calculate_temperatureEv+0x48>
 8001182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	43480000 	.word	0x43480000
 800119c:	44ffe000 	.word	0x44ffe000
 80011a0:	42480000 	.word	0x42480000

080011a4 <_ZN17Airspeed_MS4525DO18calculate_airspeedEv>:

void Airspeed_MS4525DO::calculate_airspeed()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

	const float RHO = 1.225; // air density
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <_ZN17Airspeed_MS4525DO18calculate_airspeedEv+0x38>)
 80011ae:	60fb      	str	r3, [r7, #12]
	airspeed = sqrt((2*dif_pressure) / RHO); //km/hr
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ba:	eddf 6a09 	vldr	s13, [pc, #36]	; 80011e0 <_ZN17Airspeed_MS4525DO18calculate_airspeedEv+0x3c>
 80011be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011c2:	eeb0 0a47 	vmov.f32	s0, s14
 80011c6:	f7ff fe8b 	bl	8000ee0 <_ZSt4sqrtf>
 80011ca:	eef0 7a40 	vmov.f32	s15, s0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	3f9ccccd 	.word	0x3f9ccccd
 80011e0:	3f9ccccd 	.word	0x3f9ccccd

080011e4 <_ZNK17Airspeed_MS4525DO12get_pressureEv>:


float Airspeed_MS4525DO::get_pressure() const
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	sprintf((char*)msg, "%u Pre\r\n",((unsigned int)dif_pressure));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f103 0014 	add.w	r0, r3, #20
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fc:	ee17 2a90 	vmov	r2, s15
 8001200:	4905      	ldr	r1, [pc, #20]	; (8001218 <_ZNK17Airspeed_MS4525DO12get_pressureEv+0x34>)
 8001202:	f006 fe4d 	bl	8007ea0 <siprintf>
	return dif_pressure;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	08008904 	.word	0x08008904

0800121c <_ZNK17Airspeed_MS4525DO15get_temperatureEv>:

float Airspeed_MS4525DO::get_temperature() const
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	sprintf((char*)msg, "%u Temp\r\n",((unsigned int)temperature));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f103 0014 	add.w	r0, r3, #20
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	4905      	ldr	r1, [pc, #20]	; (8001250 <_ZNK17Airspeed_MS4525DO15get_temperatureEv+0x34>)
 800123a:	f006 fe31 	bl	8007ea0 <siprintf>
	return temperature;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	ee07 3a90 	vmov	s15, r3
}
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	08008910 	.word	0x08008910

08001254 <_ZNK17Airspeed_MS4525DO12get_airspeedEv>:
float Airspeed_MS4525DO::get_airspeed( ) const
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	sprintf((char*)msg, "%u AirS\r\n",((unsigned int)airspeed));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f103 0014 	add.w	r0, r3, #20
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a01 	vldr	s15, [r3, #4]
 8001268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126c:	ee17 2a90 	vmov	r2, s15
 8001270:	4905      	ldr	r1, [pc, #20]	; (8001288 <_ZNK17Airspeed_MS4525DO12get_airspeedEv+0x34>)
 8001272:	f006 fe15 	bl	8007ea0 <siprintf>
	return airspeed;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	ee07 3a90 	vmov	s15, r3
}
 800127e:	eeb0 0a67 	vmov.f32	s0, s15
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800891c 	.word	0x0800891c

0800128c <_ZN7NEO_GPSC1EP20__UART_HandleTypeDef>:
#include "GPS.hpp"
#include "string.h"



NEO_GPS::NEO_GPS(UART_HandleTypeDef* dev)
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
{
	UART = dev;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
}
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_ZN7NEO_GPSD1Ev>:

NEO_GPS::~NEO_GPS()
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
{

}
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_ZN7NEO_GPS12get_sentenseEPKcPci>:
/*
 * private function that get the GGA or RMC sentence from raw data
 * then it can be sent for parsing
 */
bool NEO_GPS::get_sentense(const char* string, char* container, int length)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b08b      	sub	sp, #44	; 0x2c
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
	int counter = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
	int len = length;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	61bb      	str	r3, [r7, #24]
	bool new_sentense = false;
 80012d8:	2300      	movs	r3, #0
 80012da:	75fb      	strb	r3, [r7, #23]
	while(counter < 512 && !new_sentense)
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e2:	da49      	bge.n	8001378 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xb6>
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d146      	bne.n	8001378 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xb6>
	{
		if(rx_raw[counter] == string[0])
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	4413      	add	r3, r2
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d13a      	bne.n	8001370 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xae>
		{
			int i = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
			bool same = true;
 80012fe:	2301      	movs	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]
			while(i < len && same)
 8001302:	6a3a      	ldr	r2, [r7, #32]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	429a      	cmp	r2, r3
 8001308:	da16      	bge.n	8001338 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x76>
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d110      	bne.n	8001338 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x76>
			{
				if(rx_raw[counter + i] != string[i])
 8001316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	4413      	add	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	5cd2      	ldrb	r2, [r2, r3]
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	440b      	add	r3, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x6e>
					same = false;
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
				i++;
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	3301      	adds	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
			while(i < len && same)
 8001336:	e7e4      	b.n	8001302 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x40>
			}
			if(same)
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d018      	beq.n	8001370 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xae>
			{
				while(rx_raw[counter + i] != '*')
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	4413      	add	r3, r2
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	2b2a      	cmp	r3, #42	; 0x2a
 800134a:	d00f      	beq.n	800136c <_ZN7NEO_GPS12get_sentenseEPKcPci+0xaa>
				{
					container[i - len] = rx_raw[counter + i];
 800134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	441a      	add	r2, r3
 8001352:	6a39      	ldr	r1, [r7, #32]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1acb      	subs	r3, r1, r3
 8001358:	4619      	mov	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	440b      	add	r3, r1
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	5c8a      	ldrb	r2, [r1, r2]
 8001362:	701a      	strb	r2, [r3, #0]
					i++;
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	3301      	adds	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
				while(rx_raw[counter + i] != '*')
 800136a:	e7e8      	b.n	800133e <_ZN7NEO_GPS12get_sentenseEPKcPci+0x7c>
				}
				//new_sentense = true;
				return true;
 800136c:	2301      	movs	r3, #1
 800136e:	e004      	b.n	800137a <_ZN7NEO_GPS12get_sentenseEPKcPci+0xb8>
			}

		}

		counter++;
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	3301      	adds	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
	while(counter < 512 && !new_sentense)
 8001376:	e7b1      	b.n	80012dc <_ZN7NEO_GPS12get_sentenseEPKcPci+0x1a>
	}

	return false;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	372c      	adds	r7, #44	; 0x2c
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_ZN7NEO_GPS10refreshGPSEv>:

bool NEO_GPS::refreshGPS()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(UART, rx_raw, 512);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fc2f 	bl	8005c00 <HAL_UART_Receive_DMA>
	const char GGAs[3] = {'G', 'G', 'A'};
 80013a2:	4a30      	ldr	r2, [pc, #192]	; (8001464 <_ZN7NEO_GPS10refreshGPSEv+0xdc>)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	4611      	mov	r1, r2
 80013ac:	8019      	strh	r1, [r3, #0]
 80013ae:	3302      	adds	r3, #2
 80013b0:	0c12      	lsrs	r2, r2, #16
 80013b2:	701a      	strb	r2, [r3, #0]
	const char RMCs[3] = {'R', 'M', 'C'};
 80013b4:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <_ZN7NEO_GPS10refreshGPSEv+0xe0>)
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	4611      	mov	r1, r2
 80013be:	8019      	strh	r1, [r3, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	0c12      	lsrs	r2, r2, #16
 80013c4:	701a      	strb	r2, [r3, #0]

	if(!get_sentense(GGAs, GGA, 3))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	2303      	movs	r3, #3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff75 	bl	80012c2 <_ZN7NEO_GPS12get_sentenseEPKcPci>
 80013d8:	4603      	mov	r3, r0
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <_ZN7NEO_GPS10refreshGPSEv+0x60>
		return false;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e039      	b.n	800145c <_ZN7NEO_GPS10refreshGPSEv+0xd4>
	if(!get_sentense(RMCs, RMC, 3))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f503 7219 	add.w	r2, r3, #612	; 0x264
 80013ee:	f107 0108 	add.w	r1, r7, #8
 80013f2:	2303      	movs	r3, #3
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff64 	bl	80012c2 <_ZN7NEO_GPS12get_sentenseEPKcPci>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZN7NEO_GPS10refreshGPSEv+0x82>
		return false;
 8001406:	2300      	movs	r3, #0
 8001408:	e028      	b.n	800145c <_ZN7NEO_GPS10refreshGPSEv+0xd4>
	if(decodeGGA(GGA, &gpsData.ggastruct) != 0)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f000 f847 	bl	80014ac <_Z9decodeGGAPcP9GGASTRUCT>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_ZN7NEO_GPS10refreshGPSEv+0xaa>
		return false;
 800142e:	2300      	movs	r3, #0
 8001430:	e014      	b.n	800145c <_ZN7NEO_GPS10refreshGPSEv+0xd4>
	if(decodeRMC(RMC, &gpsData.rmcstruct) != 0)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f503 7219 	add.w	r2, r3, #612	; 0x264
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f000 fbb5 	bl	8001bb0 <_Z9decodeRMCPcP9RMCSTRUCT>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <_ZN7NEO_GPS10refreshGPSEv+0xd2>
		return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <_ZN7NEO_GPS10refreshGPSEv+0xd4>

	return true;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08008928 	.word	0x08008928
 8001468:	0800892c 	.word	0x0800892c

0800146c <_ZN7NEO_GPS12get_locationEv>:

LOCATION NEO_GPS::get_location()
{
 800146c:	b490      	push	{r4, r7}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	return gpsData.ggastruct.lcation;
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4614      	mov	r4, r2
 800147c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bc90      	pop	{r4, r7}
 800148e:	4770      	bx	lr

08001490 <_ZN7NEO_GPS17get_number_of_satEv>:
float NEO_GPS::get_course()
{
	return gpsData.rmcstruct.course;
}
int NEO_GPS::get_number_of_sat()
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	return gpsData.ggastruct.numofsat;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <_Z9decodeGGAPcP9GGASTRUCT>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 80014ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014b0:	b08c      	sub	sp, #48	; 0x30
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
	inx = 0;
 80014b8:	4b69      	ldr	r3, [pc, #420]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b2c      	cmp	r3, #44	; 0x2c
 80014d0:	d005      	beq.n	80014de <_Z9decodeGGAPcP9GGASTRUCT+0x32>
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a61      	ldr	r2, [pc, #388]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e7f1      	b.n	80014c2 <_Z9decodeGGAPcP9GGASTRUCT+0x16>
	inx++;
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014e6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 80014e8:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b2c      	cmp	r3, #44	; 0x2c
 80014f6:	d005      	beq.n	8001504 <_Z9decodeGGAPcP9GGASTRUCT+0x58>
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a58      	ldr	r2, [pc, #352]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e7f1      	b.n	80014e8 <_Z9decodeGGAPcP9GGASTRUCT+0x3c>
	inx++;
 8001504:	4b56      	ldr	r3, [pc, #344]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800150c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b2c      	cmp	r3, #44	; 0x2c
 800151c:	d005      	beq.n	800152a <_Z9decodeGGAPcP9GGASTRUCT+0x7e>
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e7f1      	b.n	800150e <_Z9decodeGGAPcP9GGASTRUCT+0x62>
	inx++;
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001532:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001534:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b2c      	cmp	r3, #44	; 0x2c
 8001542:	d005      	beq.n	8001550 <_Z9decodeGGAPcP9GGASTRUCT+0xa4>
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a45      	ldr	r2, [pc, #276]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e7f1      	b.n	8001534 <_Z9decodeGGAPcP9GGASTRUCT+0x88>
	inx++;
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a42      	ldr	r2, [pc, #264]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001558:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b2c      	cmp	r3, #44	; 0x2c
 8001568:	d005      	beq.n	8001576 <_Z9decodeGGAPcP9GGASTRUCT+0xca>
 800156a:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e7f1      	b.n	800155a <_Z9decodeGGAPcP9GGASTRUCT+0xae>
	inx++;
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800157e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001580:	4b37      	ldr	r3, [pc, #220]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b2c      	cmp	r3, #44	; 0x2c
 800158e:	d005      	beq.n	800159c <_Z9decodeGGAPcP9GGASTRUCT+0xf0>
 8001590:	4b33      	ldr	r3, [pc, #204]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a32      	ldr	r2, [pc, #200]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e7f1      	b.n	8001580 <_Z9decodeGGAPcP9GGASTRUCT+0xd4>
	inx++;  // reached the character to identify the fix
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80015a4:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b31      	cmp	r3, #49	; 0x31
 80015b4:	d00f      	beq.n	80015d6 <_Z9decodeGGAPcP9GGASTRUCT+0x12a>
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b32      	cmp	r3, #50	; 0x32
 80015c4:	d007      	beq.n	80015d6 <_Z9decodeGGAPcP9GGASTRUCT+0x12a>
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b36      	cmp	r3, #54	; 0x36
 80015d4:	d106      	bne.n	80015e4 <_Z9decodeGGAPcP9GGASTRUCT+0x138>
	{
		gga->isfixValid = 1;   // fix available
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e004      	b.n	80015ee <_Z9decodeGGAPcP9GGASTRUCT+0x142>
	}
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 80015ea:	2301      	movs	r3, #1
 80015ec:	e2d7      	b.n	8001b9e <_Z9decodeGGAPcP9GGASTRUCT+0x6f2>
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b2c      	cmp	r3, #44	; 0x2c
 80015fc:	d005      	beq.n	800160a <_Z9decodeGGAPcP9GGASTRUCT+0x15e>
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e7f1      	b.n	80015ee <_Z9decodeGGAPcP9GGASTRUCT+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001612:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	220c      	movs	r2, #12
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f006 fc37 	bl	8007e90 <memset>
	i=0;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b2c      	cmp	r3, #44	; 0x2c
 8001634:	d016      	beq.n	8001664 <_Z9decodeGGAPcP9GGASTRUCT+0x1b8>
	{
		buffer[i] = GGAbuffer[inx];
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	7819      	ldrb	r1, [r3, #0]
 8001642:	f107 020c 	add.w	r2, r7, #12
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	4413      	add	r3, r2
 800164a:	460a      	mov	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
		i++;
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	3301      	adds	r3, #1
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a01      	ldr	r2, [pc, #4]	; (8001660 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800165c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 800165e:	e7e2      	b.n	8001626 <_Z9decodeGGAPcP9GGASTRUCT+0x17a>
 8001660:	20000090 	.word	0x20000090
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fbe3 	bl	8007e34 <atoi>
 800166e:	4603      	mov	r3, r0
 8001670:	4aab      	ldr	r2, [pc, #684]	; (8001920 <_Z9decodeGGAPcP9GGASTRUCT+0x474>)
 8001672:	fb82 1203 	smull	r1, r2, r2, r3
 8001676:	1312      	asrs	r2, r2, #12
 8001678:	17db      	asrs	r3, r3, #31
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	4ba9      	ldr	r3, [pc, #676]	; (8001924 <_Z9decodeGGAPcP9GGASTRUCT+0x478>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	49a9      	ldr	r1, [pc, #676]	; (8001928 <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 8001682:	fb81 0103 	smull	r0, r1, r1, r3
 8001686:	1149      	asrs	r1, r1, #5
 8001688:	17db      	asrs	r3, r3, #31
 800168a:	1acb      	subs	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	4aa7      	ldr	r2, [pc, #668]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001690:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4618      	mov	r0, r3
 8001698:	f006 fbcc 	bl	8007e34 <atoi>
 800169c:	4603      	mov	r3, r0
 800169e:	4aa2      	ldr	r2, [pc, #648]	; (8001928 <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1152      	asrs	r2, r2, #5
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a9f      	ldr	r2, [pc, #636]	; (8001928 <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1151      	asrs	r1, r2, #5
 80016b2:	17da      	asrs	r2, r3, #31
 80016b4:	1a8a      	subs	r2, r1, r2
 80016b6:	2164      	movs	r1, #100	; 0x64
 80016b8:	fb01 f202 	mul.w	r2, r1, r2
 80016bc:	1a9a      	subs	r2, r3, r2
 80016be:	4b99      	ldr	r3, [pc, #612]	; (8001924 <_Z9decodeGGAPcP9GGASTRUCT+0x478>)
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	4b99      	ldr	r3, [pc, #612]	; (8001928 <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 80016c4:	fb83 0301 	smull	r0, r3, r3, r1
 80016c8:	1158      	asrs	r0, r3, #5
 80016ca:	17cb      	asrs	r3, r1, #31
 80016cc:	1ac3      	subs	r3, r0, r3
 80016ce:	2064      	movs	r0, #100	; 0x64
 80016d0:	fb00 f303 	mul.w	r3, r0, r3
 80016d4:	1acb      	subs	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	4a95      	ldr	r2, [pc, #596]	; (8001930 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 80016da:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 80016dc:	4b94      	ldr	r3, [pc, #592]	; (8001930 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b3b      	cmp	r3, #59	; 0x3b
 80016e2:	dd09      	ble.n	80016f8 <_Z9decodeGGAPcP9GGASTRUCT+0x24c>
	{
		min = min-60;
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3b3c      	subs	r3, #60	; 0x3c
 80016ea:	4a91      	ldr	r2, [pc, #580]	; (8001930 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 80016ec:	6013      	str	r3, [r2, #0]
		hr++;
 80016ee:	4b8f      	ldr	r3, [pc, #572]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a8d      	ldr	r2, [pc, #564]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80016f6:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 80016f8:	4b8c      	ldr	r3, [pc, #560]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da09      	bge.n	8001714 <_Z9decodeGGAPcP9GGASTRUCT+0x268>
	{
		hr=24+hr;
 8001700:	4b8a      	ldr	r3, [pc, #552]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3318      	adds	r3, #24
 8001706:	4a89      	ldr	r2, [pc, #548]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001708:	6013      	str	r3, [r2, #0]
		daychange--;
 800170a:	4b8a      	ldr	r3, [pc, #552]	; (8001934 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3b01      	subs	r3, #1
 8001710:	4a88      	ldr	r2, [pc, #544]	; (8001934 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 8001712:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001714:	4b85      	ldr	r3, [pc, #532]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b17      	cmp	r3, #23
 800171a:	dd09      	ble.n	8001730 <_Z9decodeGGAPcP9GGASTRUCT+0x284>
	{
		hr=hr-24;
 800171c:	4b83      	ldr	r3, [pc, #524]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b18      	subs	r3, #24
 8001722:	4a82      	ldr	r2, [pc, #520]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001724:	6013      	str	r3, [r2, #0]
		daychange++;
 8001726:	4b83      	ldr	r3, [pc, #524]	; (8001934 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a81      	ldr	r2, [pc, #516]	; (8001934 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 800172e:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001738:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4618      	mov	r0, r3
 8001746:	f006 fb75 	bl	8007e34 <atoi>
 800174a:	4602      	mov	r2, r0
 800174c:	4b76      	ldr	r3, [pc, #472]	; (8001928 <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 800174e:	fb83 1302 	smull	r1, r3, r3, r2
 8001752:	1159      	asrs	r1, r3, #5
 8001754:	17d3      	asrs	r3, r2, #31
 8001756:	1acb      	subs	r3, r1, r3
 8001758:	2164      	movs	r1, #100	; 0x64
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001764:	4b74      	ldr	r3, [pc, #464]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a73      	ldr	r2, [pc, #460]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800176c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	220c      	movs	r2, #12
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f006 fb8a 	bl	8007e90 <memset>
	i=0;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b2c      	cmp	r3, #44	; 0x2c
 800178e:	d014      	beq.n	80017ba <_Z9decodeGGAPcP9GGASTRUCT+0x30e>
	{
		buffer[i] = GGAbuffer[inx];
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	7819      	ldrb	r1, [r3, #0]
 800179c:	f107 020c 	add.w	r2, r7, #12
 80017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a2:	4413      	add	r3, r2
 80017a4:	460a      	mov	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
		i++;
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	3301      	adds	r3, #1
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80017ae:	4b62      	ldr	r3, [pc, #392]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a60      	ldr	r2, [pc, #384]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80017b6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80017b8:	e7e2      	b.n	8001780 <_Z9decodeGGAPcP9GGASTRUCT+0x2d4>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd3a 	bl	8000238 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d801      	bhi.n	80017ce <_Z9decodeGGAPcP9GGASTRUCT+0x322>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e1e7      	b.n	8001b9e <_Z9decodeGGAPcP9GGASTRUCT+0x6f2>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fb2e 	bl	8007e34 <atoi>
 80017d8:	4603      	mov	r3, r0
 80017da:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 80017e0:	f107 020c 	add.w	r2, r7, #12
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b2e      	cmp	r3, #46	; 0x2e
 80017ec:	d003      	beq.n	80017f6 <_Z9decodeGGAPcP9GGASTRUCT+0x34a>
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	3301      	adds	r3, #1
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f4:	e7f4      	b.n	80017e0 <_Z9decodeGGAPcP9GGASTRUCT+0x334>
	j++;
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	3301      	adds	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fd19 	bl	8000238 <strlen>
 8001806:	4602      	mov	r2, r0
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4413      	add	r3, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fb0c 	bl	8007e34 <atoi>
 800181c:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800181e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe62 	bl	80004ec <__aeabi_i2d>
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <_Z9decodeGGAPcP9GGASTRUCT+0x490>)
 800182e:	f7fe fff1 	bl	8000814 <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4690      	mov	r8, r2
 8001838:	4699      	mov	r9, r3
 800183a:	69f8      	ldr	r0, [r7, #28]
 800183c:	f7fe fe56 	bl	80004ec <__aeabi_i2d>
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	3302      	adds	r3, #2
 8001848:	4619      	mov	r1, r3
 800184a:	200a      	movs	r0, #10
 800184c:	f000 fbd8 	bl	8002000 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001850:	ec53 2b10 	vmov	r2, r3, d0
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe ffdc 	bl	8000814 <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4640      	mov	r0, r8
 8001862:	4649      	mov	r1, r9
 8001864:	f7fe fcf6 	bl	8000254 <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f956 	bl	8000b20 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	601a      	str	r2, [r3, #0]
	inx++;  
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001886:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018a0:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018aa:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	220c      	movs	r2, #12
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f006 faeb 	bl	8007e90 <memset>
	i=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b2c      	cmp	r3, #44	; 0x2c
 80018cc:	d014      	beq.n	80018f8 <_Z9decodeGGAPcP9GGASTRUCT+0x44c>
	{
		buffer[i] = GGAbuffer[inx];
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	7819      	ldrb	r1, [r3, #0]
 80018da:	f107 020c 	add.w	r2, r7, #12
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	4413      	add	r3, r2
 80018e2:	460a      	mov	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
		i++;
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	3301      	adds	r3, #1
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80018f4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80018f6:	e7e2      	b.n	80018be <_Z9decodeGGAPcP9GGASTRUCT+0x412>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 fa99 	bl	8007e34 <atoi>
 8001902:	4603      	mov	r3, r0
 8001904:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800190a:	f107 020c 	add.w	r2, r7, #12
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b2e      	cmp	r3, #46	; 0x2e
 8001916:	d013      	beq.n	8001940 <_Z9decodeGGAPcP9GGASTRUCT+0x494>
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	3301      	adds	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	e7f4      	b.n	800190a <_Z9decodeGGAPcP9GGASTRUCT+0x45e>
 8001920:	68db8bad 	.word	0x68db8bad
 8001924:	20000000 	.word	0x20000000
 8001928:	51eb851f 	.word	0x51eb851f
 800192c:	20000094 	.word	0x20000094
 8001930:	20000098 	.word	0x20000098
 8001934:	200000a8 	.word	0x200000a8
 8001938:	20000090 	.word	0x20000090
 800193c:	40590000 	.word	0x40590000
	j++;
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	3301      	adds	r3, #1
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc74 	bl	8000238 <strlen>
 8001950:	4602      	mov	r2, r0
 8001952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	f107 020c 	add.w	r2, r7, #12
 800195e:	4413      	add	r3, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f006 fa67 	bl	8007e34 <atoi>
 8001966:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001968:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fdbd 	bl	80004ec <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b8c      	ldr	r3, [pc, #560]	; (8001ba8 <_Z9decodeGGAPcP9GGASTRUCT+0x6fc>)
 8001978:	f7fe ff4c 	bl	8000814 <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4690      	mov	r8, r2
 8001982:	4699      	mov	r9, r3
 8001984:	69f8      	ldr	r0, [r7, #28]
 8001986:	f7fe fdb1 	bl	80004ec <__aeabi_i2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	3302      	adds	r3, #2
 8001992:	4619      	mov	r1, r3
 8001994:	200a      	movs	r0, #10
 8001996:	f000 fb33 	bl	8002000 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800199a:	ec53 2b10 	vmov	r2, r3, d0
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f7fe ff37 	bl	8000814 <__aeabi_ddiv>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4640      	mov	r0, r8
 80019ac:	4649      	mov	r1, r9
 80019ae:	f7fe fc51 	bl	8000254 <__adddf3>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f8b1 	bl	8000b20 <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	609a      	str	r2, [r3, #8]
	inx++;
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a77      	ldr	r2, [pc, #476]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019d0:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a70      	ldr	r2, [pc, #448]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019ea:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80019ec:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019f4:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80019f6:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a6b      	ldr	r2, [pc, #428]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80019fe:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a69      	ldr	r2, [pc, #420]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a08:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	220c      	movs	r2, #12
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f006 fa3c 	bl	8007e90 <memset>
	i=0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001a1c:	4b63      	ldr	r3, [pc, #396]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b2c      	cmp	r3, #44	; 0x2c
 8001a2a:	d014      	beq.n	8001a56 <_Z9decodeGGAPcP9GGASTRUCT+0x5aa>
	{
		buffer[i] = GGAbuffer[inx];
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	7819      	ldrb	r1, [r3, #0]
 8001a38:	f107 020c 	add.w	r2, r7, #12
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
		i++;
 8001a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a46:	3301      	adds	r3, #1
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001a4a:	4b58      	ldr	r3, [pc, #352]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a56      	ldr	r2, [pc, #344]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a52:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001a54:	e7e2      	b.n	8001a1c <_Z9decodeGGAPcP9GGASTRUCT+0x570>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f006 f9ea 	bl	8007e34 <atoi>
 8001a60:	4602      	mov	r2, r0
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001a66:	4b51      	ldr	r3, [pc, #324]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a6e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001a7e:	d005      	beq.n	8001a8c <_Z9decodeGGAPcP9GGASTRUCT+0x5e0>
 8001a80:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a49      	ldr	r2, [pc, #292]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e7f1      	b.n	8001a70 <_Z9decodeGGAPcP9GGASTRUCT+0x5c4>


	/*************** Altitude calculation ********************/
	inx++;
 8001a8c:	4b47      	ldr	r3, [pc, #284]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a46      	ldr	r2, [pc, #280]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001a94:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 f9f6 	bl	8007e90 <memset>
	i=0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ab6:	d014      	beq.n	8001ae2 <_Z9decodeGGAPcP9GGASTRUCT+0x636>
	{
		buffer[i] = GGAbuffer[inx];
 8001ab8:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	7819      	ldrb	r1, [r3, #0]
 8001ac4:	f107 020c 	add.w	r2, r7, #12
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	4413      	add	r3, r2
 8001acc:	460a      	mov	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
		i++;
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a33      	ldr	r2, [pc, #204]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001ade:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001ae0:	e7e2      	b.n	8001aa8 <_Z9decodeGGAPcP9GGASTRUCT+0x5fc>
	}
	num = (atoi(buffer));
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 f9a4 	bl	8007e34 <atoi>
 8001aec:	4603      	mov	r3, r0
 8001aee:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001af4:	f107 020c 	add.w	r2, r7, #12
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b2e      	cmp	r3, #46	; 0x2e
 8001b00:	d003      	beq.n	8001b0a <_Z9decodeGGAPcP9GGASTRUCT+0x65e>
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	3301      	adds	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	e7f4      	b.n	8001af4 <_Z9decodeGGAPcP9GGASTRUCT+0x648>
	j++;
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fb8f 	bl	8000238 <strlen>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	f107 020c 	add.w	r2, r7, #12
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f006 f982 	bl	8007e34 <atoi>
 8001b30:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001b32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcd8 	bl	80004ec <__aeabi_i2d>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
 8001b40:	69f8      	ldr	r0, [r7, #28]
 8001b42:	f7fe fcd3 	bl	80004ec <__aeabi_i2d>
 8001b46:	4680      	mov	r8, r0
 8001b48:	4689      	mov	r9, r1
 8001b4a:	6a39      	ldr	r1, [r7, #32]
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f000 fa57 	bl	8002000 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b52:	ec53 2b10 	vmov	r2, r3, d0
 8001b56:	4640      	mov	r0, r8
 8001b58:	4649      	mov	r1, r9
 8001b5a:	f7fe fe5b 	bl	8000814 <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fb75 	bl	8000254 <__adddf3>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ffd5 	bl	8000b20 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	621a      	str	r2, [r3, #32]

	inx++;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001b88:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001b9c:	2300      	movs	r3, #0

}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3730      	adds	r7, #48	; 0x30
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ba8:	40590000 	.word	0x40590000
 8001bac:	20000090 	.word	0x20000090

08001bb0 <_Z9decodeRMCPcP9RMCSTRUCT>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bb4:	b090      	sub	sp, #64	; 0x40
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001bbc:	4b9d      	ldr	r3, [pc, #628]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001bc6:	4b9b      	ldr	r3, [pc, #620]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b2c      	cmp	r3, #44	; 0x2c
 8001bd4:	d005      	beq.n	8001be2 <_Z9decodeRMCPcP9RMCSTRUCT+0x32>
 8001bd6:	4b97      	ldr	r3, [pc, #604]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a95      	ldr	r2, [pc, #596]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e7f1      	b.n	8001bc6 <_Z9decodeRMCPcP9RMCSTRUCT+0x16>
	inx++;
 8001be2:	4b94      	ldr	r3, [pc, #592]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a92      	ldr	r2, [pc, #584]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001bec:	4b91      	ldr	r3, [pc, #580]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b2c      	cmp	r3, #44	; 0x2c
 8001bfa:	d005      	beq.n	8001c08 <_Z9decodeRMCPcP9RMCSTRUCT+0x58>
 8001bfc:	4b8d      	ldr	r3, [pc, #564]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a8c      	ldr	r2, [pc, #560]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e7f1      	b.n	8001bec <_Z9decodeRMCPcP9RMCSTRUCT+0x3c>
	inx++;
 8001c08:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a89      	ldr	r2, [pc, #548]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c10:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001c12:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b41      	cmp	r3, #65	; 0x41
 8001c20:	d10d      	bne.n	8001c3e <_Z9decodeRMCPcP9RMCSTRUCT+0x8e>
	{
		rmc->isValid = 1;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001c28:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a81      	ldr	r2, [pc, #516]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c30:	6013      	str	r3, [r2, #0]
	inx++;
 8001c32:	4b80      	ldr	r3, [pc, #512]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a7e      	ldr	r2, [pc, #504]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e004      	b.n	8001c48 <_Z9decodeRMCPcP9RMCSTRUCT+0x98>
		rmc->isValid =0;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
		return 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e1c7      	b.n	8001fd8 <_Z9decodeRMCPcP9RMCSTRUCT+0x428>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001c48:	4b7a      	ldr	r3, [pc, #488]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b2c      	cmp	r3, #44	; 0x2c
 8001c56:	d005      	beq.n	8001c64 <_Z9decodeRMCPcP9RMCSTRUCT+0xb4>
 8001c58:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a75      	ldr	r2, [pc, #468]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e7f1      	b.n	8001c48 <_Z9decodeRMCPcP9RMCSTRUCT+0x98>
	inx++;
 8001c64:	4b73      	ldr	r3, [pc, #460]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a72      	ldr	r2, [pc, #456]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c6c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001c6e:	4b71      	ldr	r3, [pc, #452]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b2c      	cmp	r3, #44	; 0x2c
 8001c7c:	d005      	beq.n	8001c8a <_Z9decodeRMCPcP9RMCSTRUCT+0xda>
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a6b      	ldr	r2, [pc, #428]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e7f1      	b.n	8001c6e <_Z9decodeRMCPcP9RMCSTRUCT+0xbe>
	inx++;
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4a68      	ldr	r2, [pc, #416]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c92:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001c94:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca2:	d005      	beq.n	8001cb0 <_Z9decodeRMCPcP9RMCSTRUCT+0x100>
 8001ca4:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4a62      	ldr	r2, [pc, #392]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e7f1      	b.n	8001c94 <_Z9decodeRMCPcP9RMCSTRUCT+0xe4>
	inx++;
 8001cb0:	4b60      	ldr	r3, [pc, #384]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a5f      	ldr	r2, [pc, #380]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cb8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001cba:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b2c      	cmp	r3, #44	; 0x2c
 8001cc8:	d005      	beq.n	8001cd6 <_Z9decodeRMCPcP9RMCSTRUCT+0x126>
 8001cca:	4b5a      	ldr	r3, [pc, #360]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e7f1      	b.n	8001cba <_Z9decodeRMCPcP9RMCSTRUCT+0x10a>

	// Get Speed
	inx++;
 8001cd6:	4b57      	ldr	r3, [pc, #348]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cde:	6013      	str	r3, [r2, #0]
	i=0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	220c      	movs	r2, #12
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f006 f8cf 	bl	8007e90 <memset>
	while (RMCbuffer[inx] != ',')
 8001cf2:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b2c      	cmp	r3, #44	; 0x2c
 8001d00:	d014      	beq.n	8001d2c <_Z9decodeRMCPcP9RMCSTRUCT+0x17c>
	{
		buffer[i] = RMCbuffer[inx];
 8001d02:	4b4c      	ldr	r3, [pc, #304]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	7819      	ldrb	r1, [r3, #0]
 8001d0e:	f107 0208 	add.w	r2, r7, #8
 8001d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d14:	4413      	add	r3, r2
 8001d16:	460a      	mov	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
		i++;
 8001d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001d20:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001d28:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001d2a:	e7e2      	b.n	8001cf2 <_Z9decodeRMCPcP9RMCSTRUCT+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d04f      	beq.n	8001dd6 <_Z9decodeRMCPcP9RMCSTRUCT+0x226>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f006 f87a 	bl	8007e34 <atoi>
 8001d40:	4603      	mov	r3, r0
 8001d42:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001d48:	f107 0208 	add.w	r2, r7, #8
 8001d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b2e      	cmp	r3, #46	; 0x2e
 8001d54:	d003      	beq.n	8001d5e <_Z9decodeRMCPcP9RMCSTRUCT+0x1ae>
 8001d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d58:	3301      	adds	r3, #1
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5c:	e7f4      	b.n	8001d48 <_Z9decodeRMCPcP9RMCSTRUCT+0x198>
		j++;
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	3301      	adds	r3, #1
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fa65 	bl	8000238 <strlen>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d78:	f107 0208 	add.w	r2, r7, #8
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f006 f858 	bl	8007e34 <atoi>
 8001d84:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001d86:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbae 	bl	80004ec <__aeabi_i2d>
 8001d90:	4604      	mov	r4, r0
 8001d92:	460d      	mov	r5, r1
 8001d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d96:	f7fe fba9 	bl	80004ec <__aeabi_i2d>
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	4689      	mov	r9, r1
 8001d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001da0:	200a      	movs	r0, #10
 8001da2:	f000 f92d 	bl	8002000 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001da6:	ec53 2b10 	vmov	r2, r3, d0
 8001daa:	4640      	mov	r0, r8
 8001dac:	4649      	mov	r1, r9
 8001dae:	f7fe fd31 	bl	8000814 <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fa4b 	bl	8000254 <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe feab 	bl	8000b20 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	e003      	b.n	8001dde <_Z9decodeRMCPcP9RMCSTRUCT+0x22e>
	}
	else rmc->speed = 0;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001de6:	6013      	str	r3, [r2, #0]
	i=0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	220c      	movs	r2, #12
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 f84b 	bl	8007e90 <memset>
	while (RMCbuffer[inx] != ',')
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b2c      	cmp	r3, #44	; 0x2c
 8001e08:	d016      	beq.n	8001e38 <_Z9decodeRMCPcP9RMCSTRUCT+0x288>
	{
		buffer[i] = RMCbuffer[inx];
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	7819      	ldrb	r1, [r3, #0]
 8001e16:	f107 0208 	add.w	r2, r7, #8
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1c:	4413      	add	r3, r2
 8001e1e:	460a      	mov	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
		i++;
 8001e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e24:	3301      	adds	r3, #1
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a01      	ldr	r2, [pc, #4]	; (8001e34 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001e30:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001e32:	e7e2      	b.n	8001dfa <_Z9decodeRMCPcP9RMCSTRUCT+0x24a>
 8001e34:	20000090 	.word	0x20000090
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d04f      	beq.n	8001ee2 <_Z9decodeRMCPcP9RMCSTRUCT+0x332>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fff4 	bl	8007e34 <atoi>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001e54:	f107 0208 	add.w	r2, r7, #8
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e60:	d003      	beq.n	8001e6a <_Z9decodeRMCPcP9RMCSTRUCT+0x2ba>
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	3301      	adds	r3, #1
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	e7f4      	b.n	8001e54 <_Z9decodeRMCPcP9RMCSTRUCT+0x2a4>
		j++;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe f9df 	bl	8000238 <strlen>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	f107 0208 	add.w	r2, r7, #8
 8001e88:	4413      	add	r3, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f005 ffd2 	bl	8007e34 <atoi>
 8001e90:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001e92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb28 	bl	80004ec <__aeabi_i2d>
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	460d      	mov	r5, r1
 8001ea0:	69b8      	ldr	r0, [r7, #24]
 8001ea2:	f7fe fb23 	bl	80004ec <__aeabi_i2d>
 8001ea6:	4680      	mov	r8, r0
 8001ea8:	4689      	mov	r9, r1
 8001eaa:	69f9      	ldr	r1, [r7, #28]
 8001eac:	200a      	movs	r0, #10
 8001eae:	f000 f8a7 	bl	8002000 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001eb2:	ec53 2b10 	vmov	r2, r3, d0
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	4649      	mov	r1, r9
 8001eba:	f7fe fcab 	bl	8000814 <__aeabi_ddiv>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f7fe f9c5 	bl	8000254 <__adddf3>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe25 	bl	8000b20 <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	e003      	b.n	8001eea <_Z9decodeRMCPcP9RMCSTRUCT+0x33a>
	}
	else
		{
			rmc->course = 0;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001ef2:	6013      	str	r3, [r2, #0]
	i=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	220c      	movs	r2, #12
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 ffc5 	bl	8007e90 <memset>
	while (RMCbuffer[inx] != ',')
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b2c      	cmp	r3, #44	; 0x2c
 8001f14:	d014      	beq.n	8001f40 <_Z9decodeRMCPcP9RMCSTRUCT+0x390>
	{
		buffer[i] = RMCbuffer[inx];
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	7819      	ldrb	r1, [r3, #0]
 8001f22:	f107 0208 	add.w	r2, r7, #8
 8001f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f28:	4413      	add	r3, r2
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
		i++;
 8001f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f30:	3301      	adds	r3, #1
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001f3c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001f3e:	e7e2      	b.n	8001f06 <_Z9decodeRMCPcP9RMCSTRUCT+0x356>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 ff75 	bl	8007e34 <atoi>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <_Z9decodeRMCPcP9RMCSTRUCT+0x438>)
 8001f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f52:	1312      	asrs	r2, r2, #12
 8001f54:	17db      	asrs	r3, r3, #31
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001f5a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 ff67 	bl	8007e34 <atoi>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8001f6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f6e:	1152      	asrs	r2, r2, #5
 8001f70:	17db      	asrs	r3, r3, #31
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8001f76:	fb83 1302 	smull	r1, r3, r3, r2
 8001f7a:	1159      	asrs	r1, r3, #5
 8001f7c:	17d3      	asrs	r3, r2, #31
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	2164      	movs	r1, #100	; 0x64
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <_Z9decodeRMCPcP9RMCSTRUCT+0x444>)
 8001f8a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4618      	mov	r0, r3
 8001f92:	f005 ff4f 	bl	8007e34 <atoi>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8001f9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f9e:	1159      	asrs	r1, r3, #5
 8001fa0:	17d3      	asrs	r3, r2, #31
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	2164      	movs	r1, #100	; 0x64
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <_Z9decodeRMCPcP9RMCSTRUCT+0x448>)
 8001fae:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_Z9decodeRMCPcP9RMCSTRUCT+0x44c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001fbc:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <_Z9decodeRMCPcP9RMCSTRUCT+0x444>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_Z9decodeRMCPcP9RMCSTRUCT+0x448>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	609a      	str	r2, [r3, #8]

	return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3740      	adds	r7, #64	; 0x40
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000090 	.word	0x20000090
 8001fe8:	68db8bad 	.word	0x68db8bad
 8001fec:	2000009c 	.word	0x2000009c
 8001ff0:	51eb851f 	.word	0x51eb851f
 8001ff4:	200000a0 	.word	0x200000a0
 8001ff8:	200000a4 	.word	0x200000a4
 8001ffc:	200000a8 	.word	0x200000a8

08002000 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fa6e 	bl	80004ec <__aeabi_i2d>
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f7fe fa69 	bl	80004ec <__aeabi_i2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	ec43 2b11 	vmov	d1, r2, r3
 8002022:	ec45 4b10 	vmov	d0, r4, r5
 8002026:	f004 ffbf 	bl	8006fa8 <pow>
 800202a:	eeb0 7a40 	vmov.f32	s14, s0
 800202e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002032:	eeb0 0a47 	vmov.f32	s0, s14
 8002036:	eef0 0a67 	vmov.f32	s1, s15
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}

08002040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002044:	f000 fc5f 	bl	8002906 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002048:	f000 f811 	bl	800206e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204c:	f000 f93c 	bl	80022c8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002050:	f000 f910 	bl	8002274 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002054:	f000 f860 	bl	8002118 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8002058:	f000 f8ac 	bl	80021b4 <_ZL19MX_USART2_UART_Initv>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //toggle this on for driver testing
	  	airspeed_test();
 800205c:	f000 f970 	bl	8002340 <_Z13airspeed_testv>

	  gps_test();
 8002060:	f000 f99a 	bl	8002398 <_Z8gps_testv>
	  HAL_Delay(500);
 8002064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002068:	f000 fcc4 	bl	80029f4 <HAL_Delay>
	  	airspeed_test();
 800206c:	e7f6      	b.n	800205c <main+0x1c>

0800206e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b098      	sub	sp, #96	; 0x60
 8002072:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	2248      	movs	r2, #72	; 0x48
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f005 ff07 	bl	8007e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8002090:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002094:	f002 f810 	bl	80040b8 <HAL_PWREx_ControlVoltageScaling>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80020a8:	f000 f9ae 	bl	8002408 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80020ac:	2310      	movs	r3, #16
 80020ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020b0:	2301      	movs	r3, #1
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020b8:	2360      	movs	r3, #96	; 0x60
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 f877 	bl	80041b8 <HAL_RCC_OscConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80020da:	f000 f995 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020de:	230f      	movs	r3, #15
 80020e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 fd40 	bl	8004b7c <HAL_RCC_ClockConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800210c:	f000 f97c 	bl	8002408 <Error_Handler>
  }
}
 8002110:	bf00      	nop
 8002112:	3760      	adds	r7, #96	; 0x60
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 800211e:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <_ZL12MX_I2C1_Initv+0x98>)
 8002120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002124:	f640 6214 	movw	r2, #3604	; 0xe14
 8002128:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 80;
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 800212c:	2250      	movs	r2, #80	; 0x50
 800212e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002132:	2201      	movs	r2, #1
 8002134:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002154:	4815      	ldr	r0, [pc, #84]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002156:	f001 faaf 	bl	80036b8 <HAL_I2C_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800216a:	f000 f94d 	bl	8002408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216e:	2100      	movs	r1, #0
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 8002172:	f001 fefb 	bl	8003f6c <HAL_I2CEx_ConfigAnalogFilter>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 8002186:	f000 f93f 	bl	8002408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800218a:	2100      	movs	r1, #0
 800218c:	4807      	ldr	r0, [pc, #28]	; (80021ac <_ZL12MX_I2C1_Initv+0x94>)
 800218e:	f001 ff38 	bl	8004002 <HAL_I2CEx_ConfigDigitalFilter>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 80021a2:	f000 f931 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200000ac 	.word	0x200000ac
 80021b0:	40005400 	.word	0x40005400

080021b4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fc:	481b      	ldr	r0, [pc, #108]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021fe:	f003 fcaf 	bl	8005b60 <HAL_UART_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8002212:	f000 f8f9 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002216:	2100      	movs	r1, #0
 8002218:	4814      	ldr	r0, [pc, #80]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800221a:	f004 fdfb 	bl	8006e14 <HAL_UARTEx_SetTxFifoThreshold>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800222e:	f000 f8eb 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002236:	f004 fe2b 	bl	8006e90 <HAL_UARTEx_SetRxFifoThreshold>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800224a:	f000 f8dd 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002250:	f004 fda7 	bl	8006da2 <HAL_UARTEx_DisableFifoMode>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf14      	ite	ne
 800225a:	2301      	movne	r3, #1
 800225c:	2300      	moveq	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8002264:	f000 f8d0 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200000f8 	.word	0x200000f8
 8002270:	40004400 	.word	0x40004400

08002274 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <_ZL11MX_DMA_Initv+0x50>)
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <_ZL11MX_DMA_Initv+0x50>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6493      	str	r3, [r2, #72]	; 0x48
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <_ZL11MX_DMA_Initv+0x50>)
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <_ZL11MX_DMA_Initv+0x50>)
 8002294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <_ZL11MX_DMA_Initv+0x50>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6493      	str	r3, [r2, #72]	; 0x48
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <_ZL11MX_DMA_Initv+0x50>)
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	201d      	movs	r0, #29
 80022b0:	f000 fc9f 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022b4:	201d      	movs	r0, #29
 80022b6:	f000 fcb6 	bl	8002c26 <HAL_NVIC_EnableIRQ>

}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000

080022c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 80022ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <_ZL12MX_GPIO_Initv+0x74>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <_Z13airspeed_testv>:

/* USER CODE BEGIN 4 */

void airspeed_test()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	; 0x30
 8002344:	af00      	add	r7, sp, #0
	Airspeed_MS4525DO My_AS_Sensor(&hi2c1);
 8002346:	463b      	mov	r3, r7
 8002348:	4912      	ldr	r1, [pc, #72]	; (8002394 <_Z13airspeed_testv+0x54>)
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fdd8 	bl	8000f00 <_ZN17Airspeed_MS4525DOC1EP19__I2C_HandleTypeDef>
	bool isWorking = My_AS_Sensor.init();
 8002350:	463b      	mov	r3, r7
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe0e 	bl	8000f74 <_ZN17Airspeed_MS4525DO4initEv>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	float temp = My_AS_Sensor.get_temperature();
 800235e:	463b      	mov	r3, r7
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff5b 	bl	800121c <_ZNK17Airspeed_MS4525DO15get_temperatureEv>
 8002366:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float pres = My_AS_Sensor.get_pressure();
 800236a:	463b      	mov	r3, r7
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe ff39 	bl	80011e4 <_ZNK17Airspeed_MS4525DO12get_pressureEv>
 8002372:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float as = My_AS_Sensor.get_airspeed( );
 8002376:	463b      	mov	r3, r7
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe ff6b 	bl	8001254 <_ZNK17Airspeed_MS4525DO12get_airspeedEv>
 800237e:	ed87 0a08 	vstr	s0, [r7, #32]
	Airspeed_MS4525DO My_AS_Sensor(&hi2c1);
 8002382:	463b      	mov	r3, r7
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fde9 	bl	8000f5c <_ZN17Airspeed_MS4525DOD1Ev>

}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	; 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200000ac 	.word	0x200000ac

08002398 <_Z8gps_testv>:

void gps_test()
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 800239e:	af00      	add	r7, sp, #0
	NEO_GPS My_GPS(&huart2);
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4917      	ldr	r1, [pc, #92]	; (8002404 <_Z8gps_testv+0x6c>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe ff70 	bl	800128c <_ZN7NEO_GPSC1EP20__UART_HandleTypeDef>
	LOCATION loc;
	bool isWorking = My_GPS.refreshGPS();
 80023ac:	f107 0320 	add.w	r3, r7, #32
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe ffe9 	bl	8001388 <_ZN7NEO_GPS10refreshGPSEv>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	loc = My_GPS.get_location();
 80023bc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80023c0:	f5a3 744a 	sub.w	r4, r3, #808	; 0x328
 80023c4:	463b      	mov	r3, r7
 80023c6:	f107 0220 	add.w	r2, r7, #32
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff f84d 	bl	800146c <_ZN7NEO_GPS12get_locationEv>
 80023d2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80023d6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80023da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int numofsat = My_GPS.get_number_of_sat();
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f853 	bl	8001490 <_ZN7NEO_GPS17get_number_of_satEv>
 80023ea:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
	NEO_GPS My_GPS(&huart2);
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe ff5a 	bl	80012ac <_ZN7NEO_GPSD1Ev>
}
 80023f8:	bf00      	nop
 80023fa:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	200000f8 	.word	0x200000f8

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	e7fe      	b.n	8002410 <Error_Handler+0x8>
	...

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x44>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_MspInit+0x44>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6613      	str	r3, [r2, #96]	; 0x60
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_MspInit+0x44>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x44>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x44>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x44>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0ae      	sub	sp, #184	; 0xb8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	2294      	movs	r2, #148	; 0x94
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f005 fd07 	bl	8007e90 <memset>
  if(hi2c->Instance==I2C1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_I2C_MspInit+0xb0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d13b      	bne.n	8002504 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800248c:	2340      	movs	r3, #64	; 0x40
 800248e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002490:	2300      	movs	r3, #0
 8002492:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fe4b 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024a4:	f7ff ffb0 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_I2C_MspInit+0xb4>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_I2C_MspInit+0xb4>)
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_I2C_MspInit+0xb4>)
 80024b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c8:	2312      	movs	r3, #18
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024da:	2304      	movs	r3, #4
 80024dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024e4:	4619      	mov	r1, r3
 80024e6:	480b      	ldr	r0, [pc, #44]	; (8002514 <HAL_I2C_MspInit+0xb8>)
 80024e8:	f000 ff66 	bl	80033b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_I2C_MspInit+0xb4>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_I2C_MspInit+0xb4>)
 80024f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f6:	6593      	str	r3, [r2, #88]	; 0x58
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_I2C_MspInit+0xb4>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	37b8      	adds	r7, #184	; 0xb8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40005400 	.word	0x40005400
 8002510:	40021000 	.word	0x40021000
 8002514:	42020400 	.word	0x42020400

08002518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ae      	sub	sp, #184	; 0xb8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	2294      	movs	r2, #148	; 0x94
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f005 fca9 	bl	8007e90 <memset>
  if(huart->Instance==USART2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3e      	ldr	r2, [pc, #248]	; (800263c <HAL_UART_MspInit+0x124>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d174      	bne.n	8002632 <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002548:	2302      	movs	r3, #2
 800254a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800254c:	2300      	movs	r3, #0
 800254e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fded 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002560:	f7ff ff52 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_UART_MspInit+0x128>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a35      	ldr	r2, [pc, #212]	; (8002640 <HAL_UART_MspInit+0x128>)
 800256a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_UART_MspInit+0x128>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_UART_MspInit+0x128>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <HAL_UART_MspInit+0x128>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_UART_MspInit+0x128>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002594:	230c      	movs	r3, #12
 8002596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4822      	ldr	r0, [pc, #136]	; (8002644 <HAL_UART_MspInit+0x12c>)
 80025ba:	f000 fefd 	bl	80033b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025c0:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_UART_MspInit+0x134>)
 80025c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025c6:	221b      	movs	r2, #27
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025ea:	2220      	movs	r2, #32
 80025ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <HAL_UART_MspInit+0x130>)
 80025f6:	f000 fb31 	bl	8002c5c <HAL_DMA_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002600:	f7ff ff02 	bl	8002408 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002604:	2110      	movs	r1, #16
 8002606:	4810      	ldr	r0, [pc, #64]	; (8002648 <HAL_UART_MspInit+0x130>)
 8002608:	f000 fe06 	bl	8003218 <HAL_DMA_ConfigChannelAttributes>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8002612:	f7ff fef9 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_UART_MspInit+0x130>)
 800261a:	67da      	str	r2, [r3, #124]	; 0x7c
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_UART_MspInit+0x130>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	203e      	movs	r0, #62	; 0x3e
 8002628:	f000 fae3 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800262c:	203e      	movs	r0, #62	; 0x3e
 800262e:	f000 fafa 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	37b8      	adds	r7, #184	; 0xb8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40004400 	.word	0x40004400
 8002640:	40021000 	.word	0x40021000
 8002644:	42020000 	.word	0x42020000
 8002648:	20000188 	.word	0x20000188
 800264c:	40020008 	.word	0x40020008

08002650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <NMI_Handler+0x4>

08002656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <MemManage_Handler+0x4>

08002662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <UsageFault_Handler+0x4>

0800266e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269c:	f000 f98a 	bl	80029b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <DMA1_Channel1_IRQHandler+0x10>)
 80026aa:	f000 fcb5 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000188 	.word	0x20000188

080026b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USART2_IRQHandler+0x10>)
 80026be:	f003 fae5 	bl	8005c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200000f8 	.word	0x200000f8

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f005 fb9e 	bl	8007e3c <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20030000 	.word	0x20030000
 800272c:	00000400 	.word	0x00000400
 8002730:	200001f0 	.word	0x200001f0
 8002734:	20000208 	.word	0x20000208

08002738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8002762:	4b4f      	ldr	r3, [pc, #316]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800276e:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e005      	b.n	800278a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800278a:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <SystemCoreClockUpdate+0x148>)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002794:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d866      	bhi.n	800286e <SystemCoreClockUpdate+0x112>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <SystemCoreClockUpdate+0x4c>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	0800286f 	.word	0x0800286f
 80027b0:	0800286f 	.word	0x0800286f
 80027b4:	0800286f 	.word	0x0800286f
 80027b8:	080027e5 	.word	0x080027e5
 80027bc:	0800286f 	.word	0x0800286f
 80027c0:	0800286f 	.word	0x0800286f
 80027c4:	0800286f 	.word	0x0800286f
 80027c8:	080027ed 	.word	0x080027ed
 80027cc:	0800286f 	.word	0x0800286f
 80027d0:	0800286f 	.word	0x0800286f
 80027d4:	0800286f 	.word	0x0800286f
 80027d8:	080027f5 	.word	0x080027f5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80027dc:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	6013      	str	r3, [r2, #0]
      break;
 80027e2:	e048      	b.n	8002876 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 80027e6:	4a31      	ldr	r2, [pc, #196]	; (80028ac <SystemCoreClockUpdate+0x150>)
 80027e8:	601a      	str	r2, [r3, #0]
      break;
 80027ea:	e044      	b.n	8002876 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80027ec:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 80027ee:	4a2f      	ldr	r2, [pc, #188]	; (80028ac <SystemCoreClockUpdate+0x150>)
 80027f0:	601a      	str	r2, [r3, #0]
      break;
 80027f2:	e040      	b.n	8002876 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	3301      	adds	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <SystemCoreClockUpdate+0xbe>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d006      	beq.n	8002826 <SystemCoreClockUpdate+0xca>
 8002818:	e00b      	b.n	8002832 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800281a:	4a24      	ldr	r2, [pc, #144]	; (80028ac <SystemCoreClockUpdate+0x150>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	613b      	str	r3, [r7, #16]
          break;
 8002824:	e00b      	b.n	800283e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <SystemCoreClockUpdate+0x150>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	613b      	str	r3, [r7, #16]
          break;
 8002830:	e005      	b.n	800283e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	613b      	str	r3, [r7, #16]
          break;
 800283c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0e5b      	lsrs	r3, r3, #25
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 800286a:	6013      	str	r3, [r2, #0]
      break;
 800286c:	e003      	b.n	8002876 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	6013      	str	r3, [r2, #0]
      break;
 8002874:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <SystemCoreClockUpdate+0x144>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <SystemCoreClockUpdate+0x154>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <SystemCoreClockUpdate+0x14c>)
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08008948 	.word	0x08008948
 80028a8:	20000004 	.word	0x20000004
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	08008930 	.word	0x08008930

080028b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80028b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028b8:	f7ff ff3e 	bl	8002738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028be:	e003      	b.n	80028c8 <LoopCopyDataInit>

080028c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028c6:	3104      	adds	r1, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028c8:	480a      	ldr	r0, [pc, #40]	; (80028f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80028d0:	d3f6      	bcc.n	80028c0 <CopyDataInit>
	ldr	r2, =_sbss
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80028d4:	e002      	b.n	80028dc <LoopFillZerobss>

080028d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80028d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80028d8:	f842 3b04 	str.w	r3, [r2], #4

080028dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <LoopForever+0x16>)
	cmp	r2, r3
 80028de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80028e0:	d3f9      	bcc.n	80028d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028e2:	f005 fab1 	bl	8007e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028e6:	f7ff fbab 	bl	8002040 <main>

080028ea <LoopForever>:

LoopForever:
    b LoopForever
 80028ea:	e7fe      	b.n	80028ea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80028ec:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80028f0:	08008b24 	.word	0x08008b24
	ldr	r0, =_sdata
 80028f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028f8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80028fc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002900:	20000208 	.word	0x20000208

08002904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC1_2_IRQHandler>

08002906 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002910:	2004      	movs	r0, #4
 8002912:	f000 f963 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002916:	f7ff ff21 	bl	800275c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800291a:	2007      	movs	r0, #7
 800291c:	f000 f80e 	bl	800293c <HAL_InitTick>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	71fb      	strb	r3, [r7, #7]
 800292a:	e001      	b.n	8002930 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800292c:	f7ff fd72 	bl	8002414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002930:	79fb      	ldrb	r3, [r7, #7]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_InitTick+0x6c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_InitTick+0x70>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_InitTick+0x6c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f96b 	bl	8002c42 <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10f      	bne.n	8002992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b07      	cmp	r3, #7
 8002976:	d809      	bhi.n	800298c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	2200      	movs	r2, #0
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 f937 	bl	8002bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_InitTick+0x74>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e007      	b.n	800299c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e004      	b.n	800299c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e001      	b.n	800299c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000000c 	.word	0x2000000c
 80029ac:	20000004 	.word	0x20000004
 80029b0:	20000008 	.word	0x20000008

080029b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_IncTick+0x20>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_IncTick+0x24>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_IncTick+0x24>)
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	2000000c 	.word	0x2000000c
 80029d8:	200001f4 	.word	0x200001f4

080029dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_GetTick+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	200001f4 	.word	0x200001f4

080029f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff ffee 	bl	80029dc <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d005      	beq.n	8002a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_Delay+0x44>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1a:	bf00      	nop
 8002a1c:	f7ff ffde 	bl	80029dc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d8f7      	bhi.n	8002a1c <HAL_Delay+0x28>
  {
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	2000000c 	.word	0x2000000c

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0152      	lsls	r2, r2, #5
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0152      	lsls	r2, r2, #5
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	bf28      	it	cs
 8002b4e:	2303      	movcs	r3, #3
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3303      	adds	r3, #3
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	2107      	movs	r1, #7
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff40 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff90 	bl	8002b30 <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5f 	bl	8002adc <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff33 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa4 	bl	8002b98 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e08d      	b.n	8002d8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_DMA_Init+0x138>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d80f      	bhi.n	8002c9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_DMA_Init+0x13c>)
 8002c82:	4413      	add	r3, r2
 8002c84:	4a45      	ldr	r2, [pc, #276]	; (8002d9c <HAL_DMA_Init+0x140>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	009a      	lsls	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_DMA_Init+0x144>)
 8002c96:	649a      	str	r2, [r3, #72]	; 0x48
 8002c98:	e00e      	b.n	8002cb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <HAL_DMA_Init+0x148>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <HAL_DMA_Init+0x140>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <HAL_DMA_Init+0x14c>)
 8002cb6:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002cce:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002cd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 faf2 	bl	80032f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d18:	d102      	bne.n	8002d20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d34:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_DMA_Init+0x104>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d80c      	bhi.n	8002d60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb12 	bl	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	e008      	b.n	8002d72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40020407 	.word	0x40020407
 8002d98:	bffdfff8 	.word	0xbffdfff8
 8002d9c:	cccccccd 	.word	0xcccccccd
 8002da0:	40020000 	.word	0x40020000
 8002da4:	bffdfbf8 	.word	0xbffdfbf8
 8002da8:	40020400 	.word	0x40020400

08002dac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_Start_IT+0x20>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e066      	b.n	8002e9a <HAL_DMA_Start_IT+0xee>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d155      	bne.n	8002e8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fa37 	bl	8003278 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 020e 	orr.w	r2, r2, #14
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e00f      	b.n	8002e44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 020a 	orr.w	r2, r2, #10
 8002e42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e60:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e005      	b.n	8002e98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
 8002e96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d008      	beq.n	8002ecc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e040      	b.n	8002f4e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020e 	bic.w	r2, r2, #14
 8002eda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	f003 021c 	and.w	r2, r3, #28
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002f3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d005      	beq.n	8002f7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2204      	movs	r2, #4
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e047      	b.n	800300e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 020e 	bic.w	r2, r2, #14
 8002f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	f003 021c 	and.w	r2, r3, #28
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002fca:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002fec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
    }
  }
  return status;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	f003 031c 	and.w	r3, r3, #28
 8003038:	2204      	movs	r2, #4
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d053      	beq.n	80030ec <HAL_DMA_IRQHandler+0xd4>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d04e      	beq.n	80030ec <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d024      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003060:	f003 021c 	and.w	r2, r3, #28
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	2104      	movs	r1, #4
 800306a:	fa01 f202 	lsl.w	r2, r1, r2
 800306e:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80c0 	beq.w	8003208 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003090:	e0ba      	b.n	8003208 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80b6 	beq.w	8003208 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80030a4:	e0b0      	b.n	8003208 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	f003 021c 	and.w	r2, r3, #28
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	2104      	movs	r1, #4
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8093 	beq.w	8003208 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80030ea:	e08d      	b.n	8003208 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	f003 031c 	and.w	r3, r3, #28
 80030f4:	2202      	movs	r2, #2
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d04e      	beq.n	800319e <HAL_DMA_IRQHandler+0x186>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d049      	beq.n	800319e <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d018      	beq.n	800314a <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06e      	beq.n	800320c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003136:	e069      	b.n	800320c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d065      	beq.n	800320c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003148:	e060      	b.n	800320c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020a 	bic.w	r2, r2, #10
 8003166:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003174:	f003 021c 	and.w	r2, r3, #28
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317c:	2102      	movs	r1, #2
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03b      	beq.n	800320c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800319c:	e036      	b.n	800320c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	f003 031c 	and.w	r3, r3, #28
 80031a6:	2208      	movs	r2, #8
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02e      	beq.n	8003210 <HAL_DMA_IRQHandler+0x1f8>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d029      	beq.n	8003210 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020e 	bic.w	r2, r2, #14
 80031ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	f003 021c 	and.w	r2, r3, #28
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003206:	e002      	b.n	800320e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800320c:	bf00      	nop
  return;
 800320e:	bf00      	nop
 8003210:	bf00      	nop
}
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	72fb      	strb	r3, [r7, #11]
    return status;
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	e01b      	b.n	800326c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e003      	b.n	8003262 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003260:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	601a      	str	r2, [r3, #0]

  return status;
 800326a:	7afb      	ldrb	r3, [r7, #11]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800328e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80032a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	f003 021c 	and.w	r2, r3, #28
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d108      	bne.n	80032d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80032d6:	e007      	b.n	80032e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d80a      	bhi.n	800331e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003314:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6513      	str	r3, [r2, #80]	; 0x50
 800331c:	e007      	b.n	800332e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	009a      	lsls	r2, r3, #2
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003328:	4413      	add	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	3b08      	subs	r3, #8
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40020407 	.word	0x40020407
 8003364:	40020820 	.word	0x40020820
 8003368:	cccccccd 	.word	0xcccccccd
 800336c:	40020880 	.word	0x40020880

08003370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003392:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b01      	subs	r3, #1
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	1000823f 	.word	0x1000823f
 80033b4:	40020940 	.word	0x40020940

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033c6:	e158      	b.n	800367a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 814a 	beq.w	8003674 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d00b      	beq.n	8003400 <HAL_GPIO_Init+0x48>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f4:	2b11      	cmp	r3, #17
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b12      	cmp	r3, #18
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0xea>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d123      	bne.n	80034ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	220f      	movs	r2, #15
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	6939      	ldr	r1, [r7, #16]
 80034e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	2203      	movs	r2, #3
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0203 	and.w	r2, r3, #3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80a4 	beq.w	8003674 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800352c:	4a5a      	ldr	r2, [pc, #360]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3318      	adds	r3, #24
 8003534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_GPIO_Init+0x2e4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d025      	beq.n	80035a4 <HAL_GPIO_Init+0x1ec>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_GPIO_Init+0x2e8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01f      	beq.n	80035a0 <HAL_GPIO_Init+0x1e8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_GPIO_Init+0x2ec>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d019      	beq.n	800359c <HAL_GPIO_Init+0x1e4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x2f0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_GPIO_Init+0x1e0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a4e      	ldr	r2, [pc, #312]	; (80036ac <HAL_GPIO_Init+0x2f4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00d      	beq.n	8003594 <HAL_GPIO_Init+0x1dc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_GPIO_Init+0x2f8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <HAL_GPIO_Init+0x1d8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_GPIO_Init+0x2fc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_GPIO_Init+0x1d4>
 8003588:	2306      	movs	r3, #6
 800358a:	e00c      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 800358c:	2307      	movs	r3, #7
 800358e:	e00a      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 8003590:	2305      	movs	r3, #5
 8003592:	e008      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 8003594:	2304      	movs	r3, #4
 8003596:	e006      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 8003598:	2303      	movs	r3, #3
 800359a:	e004      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 800359c:	2302      	movs	r3, #2
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_GPIO_Init+0x1ee>
 80035a4:	2300      	movs	r3, #0
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	f002 0203 	and.w	r2, r2, #3
 80035ac:	00d2      	lsls	r2, r2, #3
 80035ae:	4093      	lsls	r3, r2
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80035b6:	4938      	ldr	r1, [pc, #224]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3318      	adds	r3, #24
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 80035c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003618:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <HAL_GPIO_Init+0x2e0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f ae9f 	bne.w	80033c8 <HAL_GPIO_Init+0x10>
  }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	4002f400 	.word	0x4002f400
 800369c:	42020000 	.word	0x42020000
 80036a0:	42020400 	.word	0x42020400
 80036a4:	42020800 	.word	0x42020800
 80036a8:	42020c00 	.word	0x42020c00
 80036ac:	42021000 	.word	0x42021000
 80036b0:	42021400 	.word	0x42021400
 80036b4:	42021800 	.word	0x42021800

080036b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e081      	b.n	80037ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe febc 	bl	800245c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	e006      	b.n	8003740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800373e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d104      	bne.n	8003752 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	ea42 0103 	orr.w	r1, r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69d9      	ldr	r1, [r3, #28]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	460b      	mov	r3, r1
 80037e6:	817b      	strh	r3, [r7, #10]
 80037e8:	4613      	mov	r3, r2
 80037ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	f040 80da 	bne.w	80039ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_I2C_Master_Transmit+0x30>
 8003804:	2302      	movs	r3, #2
 8003806:	e0d3      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1d8>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003810:	f7ff f8e4 	bl	80029dc <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2319      	movs	r3, #25
 800381c:	2201      	movs	r2, #1
 800381e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f9e6 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0be      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2210      	movs	r2, #16
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2bff      	cmp	r3, #255	; 0xff
 8003862:	d90e      	bls.n	8003882 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	22ff      	movs	r2, #255	; 0xff
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fb48 	bl	8003f10 <I2C_TransferConfig>
 8003880:	e06c      	b.n	800395c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	b2da      	uxtb	r2, r3
 8003892:	8979      	ldrh	r1, [r7, #10]
 8003894:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fb37 	bl	8003f10 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80038a2:	e05b      	b.n	800395c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	6a39      	ldr	r1, [r7, #32]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f9e3 	bl	8003c74 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e07b      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d034      	beq.n	800395c <HAL_I2C_Master_Transmit+0x184>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d130      	bne.n	800395c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f975 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e04d      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2bff      	cmp	r3, #255	; 0xff
 800391c:	d90e      	bls.n	800393c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	b2da      	uxtb	r2, r3
 800392a:	8979      	ldrh	r1, [r7, #10]
 800392c:	2300      	movs	r3, #0
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 faeb 	bl	8003f10 <I2C_TransferConfig>
 800393a:	e00f      	b.n	800395c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	b2da      	uxtb	r2, r3
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	2300      	movs	r3, #0
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fada 	bl	8003f10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d19e      	bne.n	80038a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f9c2 	bl	8003cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e01a      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_I2C_Master_Transmit+0x1e4>)
 800398e:	400b      	ands	r3, r1
 8003990:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	80002000 	.word	0x80002000
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	461a      	mov	r2, r3
 80039cc:	460b      	mov	r3, r1
 80039ce:	817b      	strh	r3, [r7, #10]
 80039d0:	4613      	mov	r3, r2
 80039d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b20      	cmp	r3, #32
 80039de:	f040 80db 	bne.w	8003b98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_I2C_Master_Receive+0x30>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e0d4      	b.n	8003b9a <HAL_I2C_Master_Receive+0x1da>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe fff0 	bl	80029dc <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2319      	movs	r3, #25
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8f2 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0bf      	b.n	8003b9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2222      	movs	r2, #34	; 0x22
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2210      	movs	r2, #16
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	893a      	ldrh	r2, [r7, #8]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2bff      	cmp	r3, #255	; 0xff
 8003a4a:	d90e      	bls.n	8003a6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	8979      	ldrh	r1, [r7, #10]
 8003a5a:	4b52      	ldr	r3, [pc, #328]	; (8003ba4 <HAL_I2C_Master_Receive+0x1e4>)
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa54 	bl	8003f10 <I2C_TransferConfig>
 8003a68:	e06d      	b.n	8003b46 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	4b49      	ldr	r3, [pc, #292]	; (8003ba4 <HAL_I2C_Master_Receive+0x1e4>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fa43 	bl	8003f10 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003a8a:	e05c      	b.n	8003b46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	6a39      	ldr	r1, [r7, #32]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f96b 	bl	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e07c      	b.n	8003b9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d034      	beq.n	8003b46 <HAL_I2C_Master_Receive+0x186>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d130      	bne.n	8003b46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2200      	movs	r2, #0
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f880 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e04d      	b.n	8003b9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2bff      	cmp	r3, #255	; 0xff
 8003b06:	d90e      	bls.n	8003b26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	8979      	ldrh	r1, [r7, #10]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f9f6 	bl	8003f10 <I2C_TransferConfig>
 8003b24:	e00f      	b.n	8003b46 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	8979      	ldrh	r1, [r7, #10]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f9e5 	bl	8003f10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d19d      	bne.n	8003a8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	6a39      	ldr	r1, [r7, #32]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f8cd 	bl	8003cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e01a      	b.n	8003b9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_I2C_Master_Receive+0x1e8>)
 8003b78:	400b      	ands	r3, r1
 8003b7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	80002400 	.word	0x80002400
 8003ba8:	fe00e800 	.word	0xfe00e800

08003bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d103      	bne.n	8003bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d007      	beq.n	8003be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	619a      	str	r2, [r3, #24]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c04:	e022      	b.n	8003c4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d01e      	beq.n	8003c4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fe fee5 	bl	80029dc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d113      	bne.n	8003c4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e00f      	b.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d0cd      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c80:	e02c      	b.n	8003cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f8dc 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e02a      	b.n	8003cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d01e      	beq.n	8003cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe fe9d 	bl	80029dc <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d113      	bne.n	8003cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e007      	b.n	8003cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d1cb      	bne.n	8003c82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d00:	e028      	b.n	8003d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f89c 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e026      	b.n	8003d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d16:	f7fe fe61 	bl	80029dc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e007      	b.n	8003d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d1cf      	bne.n	8003d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d78:	e055      	b.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f860 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e053      	b.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d129      	bne.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d105      	bne.n	8003db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e03f      	b.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e022      	b.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df0:	f7fe fdf4 	bl	80029dc <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e007      	b.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d1a2      	bne.n	8003d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	fe00e800 	.word	0xfe00e800

08003e44 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d151      	bne.n	8003f02 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5e:	e022      	b.n	8003ea6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d01e      	beq.n	8003ea6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fe fdb8 	bl	80029dc <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <I2C_IsAcknowledgeFailed+0x3a>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d113      	bne.n	8003ea6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02e      	b.n	8003f04 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d1d5      	bne.n	8003e60 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fe71 	bl	8003bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <I2C_IsAcknowledgeFailed+0xc8>)
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0204 	orr.w	r2, r3, #4
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	fe00e800 	.word	0xfe00e800

08003f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	0d5b      	lsrs	r3, r3, #21
 8003f2c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <I2C_TransferConfig+0x58>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	43db      	mvns	r3, r3
 8003f36:	ea02 0103 	and.w	r1, r2, r3
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f40:	7a7b      	ldrb	r3, [r7, #9]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	03ff63ff 	.word	0x03ff63ff

08003f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d138      	bne.n	8003ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e032      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b20      	cmp	r3, #32
 8004016:	d139      	bne.n	800408c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004022:	2302      	movs	r3, #2
 8004024:	e033      	b.n	800408e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2224      	movs	r2, #36	; 0x24
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40007000 	.word	0x40007000

080040b8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80040ca:	f000 f851 	bl	8004170 <HAL_PWREx_SMPS_GetEffectiveMode>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d4:	d101      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e03e      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80040da:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e6:	d101      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e035      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d101      	bne.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e02f      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004100:	4917      	ldr	r1, [pc, #92]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	09db      	lsrs	r3, r3, #7
 8004116:	2232      	movs	r2, #50	; 0x32
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004128:	e002      	b.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b01      	subs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d102      	bne.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f2      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d101      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e000      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40007000 	.word	0x40007000
 8004164:	20000004 	.word	0x20000004
 8004168:	0a7c5ac5 	.word	0x0a7c5ac5
 800416c:	cccccccd 	.word	0xcccccccd

08004170 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	e00a      	b.n	80041a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	e001      	b.n	80041a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80041a0:	2300      	movs	r3, #0
 80041a2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80041a4:	687b      	ldr	r3, [r7, #4]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40007000 	.word	0x40007000

080041b8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f000 bcd0 	b.w	8004b6c <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041cc:	4b99      	ldr	r3, [pc, #612]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d6:	4b97      	ldr	r3, [pc, #604]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80e9 	beq.w	80043c0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <HAL_RCC_OscConfig+0x4a>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	f040 8083 	bne.w	8004302 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d17f      	bne.n	8004302 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004202:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <HAL_RCC_OscConfig+0x64>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f000 bca8 	b.w	8004b6c <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004220:	4b84      	ldr	r3, [pc, #528]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_RCC_OscConfig+0x7e>
 800422c:	4b81      	ldr	r3, [pc, #516]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004234:	e005      	b.n	8004242 <HAL_RCC_OscConfig+0x8a>
 8004236:	4b7f      	ldr	r3, [pc, #508]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004242:	4293      	cmp	r3, r2
 8004244:	d224      	bcs.n	8004290 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fe96 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f000 bc88 	b.w	8004b6c <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425c:	4b75      	ldr	r3, [pc, #468]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a74      	ldr	r2, [pc, #464]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b72      	ldr	r3, [pc, #456]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	496f      	ldr	r1, [pc, #444]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427a:	4b6e      	ldr	r3, [pc, #440]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	496a      	ldr	r1, [pc, #424]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	e026      	b.n	80042de <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a67      	ldr	r2, [pc, #412]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	4962      	ldr	r1, [pc, #392]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ae:	4b61      	ldr	r3, [pc, #388]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	495d      	ldr	r1, [pc, #372]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fe55 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f000 bc47 	b.w	8004b6c <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042de:	f000 fe11 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4a54      	ldr	r2, [pc, #336]	; (8004438 <HAL_RCC_OscConfig+0x280>)
 80042e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042e8:	4b54      	ldr	r3, [pc, #336]	; (800443c <HAL_RCC_OscConfig+0x284>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fb25 	bl	800293c <HAL_InitTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d060      	beq.n	80043be <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	f000 bc35 	b.w	8004b6c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d039      	beq.n	800437e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a49      	ldr	r2, [pc, #292]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004316:	f7fe fb61 	bl	80029dc <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800431c:	e00f      	b.n	800433e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800431e:	f7fe fb5d 	bl	80029dc <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d908      	bls.n	800433e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800432c:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	f000 bc17 	b.w	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800433e:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0e9      	beq.n	800431e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434a:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a39      	ldr	r2, [pc, #228]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004350:	f043 0308 	orr.w	r3, r3, #8
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	4934      	ldr	r1, [pc, #208]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	492f      	ldr	r1, [pc, #188]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
 800437c:	e020      	b.n	80043c0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800437e:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800438a:	f7fe fb27 	bl	80029dc <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004390:	e00e      	b.n	80043b0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004392:	f7fe fb23 	bl	80029dc <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d907      	bls.n	80043b0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e3dd      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ea      	bne.n	8004392 <HAL_RCC_OscConfig+0x1da>
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d07e      	beq.n	80044ca <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x226>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d10e      	bne.n	80043f6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d10b      	bne.n	80043f6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d06e      	beq.n	80044c8 <HAL_RCC_OscConfig+0x310>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d16a      	bne.n	80044c8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e3ba      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x256>
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e024      	b.n	8004458 <HAL_RCC_OscConfig+0x2a0>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004416:	d113      	bne.n	8004440 <HAL_RCC_OscConfig+0x288>
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800441e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a02      	ldr	r2, [pc, #8]	; (8004434 <HAL_RCC_OscConfig+0x27c>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e012      	b.n	8004458 <HAL_RCC_OscConfig+0x2a0>
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	20000004 	.word	0x20000004
 800443c:	20000008 	.word	0x20000008
 8004440:	4b8b      	ldr	r3, [pc, #556]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a8a      	ldr	r2, [pc, #552]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b88      	ldr	r3, [pc, #544]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a87      	ldr	r2, [pc, #540]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d019      	beq.n	8004494 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fabc 	bl	80029dc <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004466:	e00e      	b.n	8004486 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fe fab8 	bl	80029dc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d907      	bls.n	8004486 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004476:	4b7e      	ldr	r3, [pc, #504]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e372      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004486:	4b7a      	ldr	r3, [pc, #488]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ea      	beq.n	8004468 <HAL_RCC_OscConfig+0x2b0>
 8004492:	e01a      	b.n	80044ca <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe faa2 	bl	80029dc <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449a:	e00e      	b.n	80044ba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fe fa9e 	bl	80029dc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d907      	bls.n	80044ba <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044aa:	4b71      	ldr	r3, [pc, #452]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e358      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ba:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ea      	bne.n	800449c <HAL_RCC_OscConfig+0x2e4>
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d06c      	beq.n	80045b0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x330>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d119      	bne.n	8004516 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d116      	bne.n	8004516 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e8:	4b61      	ldr	r3, [pc, #388]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_OscConfig+0x348>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e335      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	4958      	ldr	r1, [pc, #352]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004514:	e04c      	b.n	80045b0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d029      	beq.n	8004572 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800451e:	4b54      	ldr	r3, [pc, #336]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a53      	ldr	r2, [pc, #332]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fe fa57 	bl	80029dc <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004530:	e00e      	b.n	8004550 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004532:	f7fe fa53 	bl	80029dc <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d907      	bls.n	8004550 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004540:	4b4b      	ldr	r3, [pc, #300]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e30d      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004550:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ea      	beq.n	8004532 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b44      	ldr	r3, [pc, #272]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	4941      	ldr	r1, [pc, #260]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
 8004570:	e01e      	b.n	80045b0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3e      	ldr	r2, [pc, #248]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800457c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fe fa2d 	bl	80029dc <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004584:	e00e      	b.n	80045a4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7fe fa29 	bl	80029dc <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d907      	bls.n	80045a4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e2e3      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a4:	4b32      	ldr	r3, [pc, #200]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d062      	beq.n	8004682 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d038      	beq.n	8004636 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	4a27      	ldr	r2, [pc, #156]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f023 0310 	bic.w	r3, r3, #16
 80045d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80045dc:	e007      	b.n	80045ee <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e4:	4a22      	ldr	r2, [pc, #136]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045e6:	f043 0310 	orr.w	r3, r3, #16
 80045ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fe f9ed 	bl	80029dc <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004604:	e00f      	b.n	8004626 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004606:	f7fe f9e9 	bl	80029dc <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b07      	cmp	r3, #7
 8004612:	d908      	bls.n	8004626 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e2a2      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0e8      	beq.n	8004606 <HAL_RCC_OscConfig+0x44e>
 8004634:	e025      	b.n	8004682 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463c:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fe f9c9 	bl	80029dc <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800464c:	e012      	b.n	8004674 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464e:	f7fe f9c5 	bl	80029dc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b07      	cmp	r3, #7
 800465a:	d90b      	bls.n	8004674 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e27e      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004674:	4ba8      	ldr	r3, [pc, #672]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 812d 	beq.w	80048ea <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004694:	4ba0      	ldr	r3, [pc, #640]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b9d      	ldr	r3, [pc, #628]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4a9c      	ldr	r2, [pc, #624]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6593      	str	r3, [r2, #88]	; 0x58
 80046ac:	4b9a      	ldr	r3, [pc, #616]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	4b97      	ldr	r3, [pc, #604]	; (800491c <HAL_RCC_OscConfig+0x764>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11e      	bne.n	8004706 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c8:	4b94      	ldr	r3, [pc, #592]	; (800491c <HAL_RCC_OscConfig+0x764>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a93      	ldr	r2, [pc, #588]	; (800491c <HAL_RCC_OscConfig+0x764>)
 80046ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d4:	f7fe f982 	bl	80029dc <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046da:	e00e      	b.n	80046fa <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046dc:	f7fe f97e 	bl	80029dc <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d907      	bls.n	80046fa <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ea:	4b8c      	ldr	r3, [pc, #560]	; (800491c <HAL_RCC_OscConfig+0x764>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e238      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fa:	4b88      	ldr	r3, [pc, #544]	; (800491c <HAL_RCC_OscConfig+0x764>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ea      	beq.n	80046dc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01f      	beq.n	8004752 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800471e:	4b7e      	ldr	r3, [pc, #504]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	4a7c      	ldr	r2, [pc, #496]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800472e:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	4a78      	ldr	r2, [pc, #480]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473e:	e018      	b.n	8004772 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004740:	4b75      	ldr	r3, [pc, #468]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a74      	ldr	r2, [pc, #464]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004750:	e00f      	b.n	8004772 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004752:	4b71      	ldr	r3, [pc, #452]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	4a6f      	ldr	r2, [pc, #444]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004762:	4b6d      	ldr	r3, [pc, #436]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	4a6b      	ldr	r2, [pc, #428]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d068      	beq.n	800484c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477a:	f7fe f92f 	bl	80029dc <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004780:	e011      	b.n	80047a6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fe f92b 	bl	80029dc <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d908      	bls.n	80047a6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004794:	4b60      	ldr	r3, [pc, #384]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e1e2      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	4b5c      	ldr	r3, [pc, #368]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0e6      	beq.n	8004782 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047c0:	4b55      	ldr	r3, [pc, #340]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a54      	ldr	r2, [pc, #336]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047d0:	e011      	b.n	80047f6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fe f903 	bl	80029dc <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d908      	bls.n	80047f6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047e4:	4b4c      	ldr	r3, [pc, #304]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e1ba      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047f6:	4b48      	ldr	r3, [pc, #288]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0e6      	beq.n	80047d2 <HAL_RCC_OscConfig+0x61a>
 8004804:	e068      	b.n	80048d8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004806:	4b44      	ldr	r3, [pc, #272]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	4a42      	ldr	r2, [pc, #264]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004816:	e011      	b.n	800483c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fe f8e0 	bl	80029dc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d908      	bls.n	800483c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800482a:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e197      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <HAL_RCC_OscConfig+0x660>
 800484a:	e045      	b.n	80048d8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fe f8c6 	bl	80029dc <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004852:	e011      	b.n	8004878 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fe f8c2 	bl	80029dc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d908      	bls.n	8004878 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004866:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e179      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004878:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e6      	bne.n	8004854 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d021      	beq.n	80048d8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 800489c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048a4:	e011      	b.n	80048ca <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a6:	f7fe f899 	bl	80029dc <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d908      	bls.n	80048ca <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e150      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d105      	bne.n	80048ea <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 80048e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d04f      	beq.n	8004996 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d028      	beq.n	8004950 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_RCC_OscConfig+0x760>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fe f865 	bl	80029dc <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004914:	e014      	b.n	8004940 <HAL_RCC_OscConfig+0x788>
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004920:	f7fe f85c 	bl	80029dc <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d908      	bls.n	8004940 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492e:	4b91      	ldr	r3, [pc, #580]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e115      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0e8      	beq.n	8004920 <HAL_RCC_OscConfig+0x768>
 800494e:	e022      	b.n	8004996 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004950:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004956:	4a87      	ldr	r2, [pc, #540]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fe f83c 	bl	80029dc <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004966:	e00f      	b.n	8004988 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004968:	f7fe f838 	bl	80029dc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d908      	bls.n	8004988 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004976:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0f1      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004988:	4b7a      	ldr	r3, [pc, #488]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 800498a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e8      	bne.n	8004968 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80e5 	beq.w	8004b6a <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a0:	4b74      	ldr	r3, [pc, #464]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	f000 809f 	beq.w	8004aec <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d166      	bne.n	8004a84 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b6f      	ldr	r3, [pc, #444]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a6e      	ldr	r2, [pc, #440]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 80049bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fe f80b 	bl	80029dc <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c8:	e00e      	b.n	80049e8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fe f807 	bl	80029dc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d907      	bls.n	80049e8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d8:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0c1      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e8:	4b62      	ldr	r3, [pc, #392]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ea      	bne.n	80049ca <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f4:	4b5f      	ldr	r3, [pc, #380]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <HAL_RCC_OscConfig+0x9c0>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a0e:	0212      	lsls	r2, r2, #8
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a16:	0852      	lsrs	r2, r2, #1
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	0552      	lsls	r2, r2, #21
 8004a1c:	4311      	orrs	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0652      	lsls	r2, r2, #25
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a2e:	06d2      	lsls	r2, r2, #27
 8004a30:	430a      	orrs	r2, r1
 8004a32:	4950      	ldr	r1, [pc, #320]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a38:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a4d      	ldr	r2, [pc, #308]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a4a      	ldr	r2, [pc, #296]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd ffc4 	bl	80029dc <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	e00e      	b.n	8004a76 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd ffc0 	bl	80029dc <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d907      	bls.n	8004a76 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a66:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e07a      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ea      	beq.n	8004a58 <HAL_RCC_OscConfig+0x8a0>
 8004a82:	e072      	b.n	8004b6a <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3a      	ldr	r2, [pc, #232]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a90:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004aae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd ff90 	bl	80029dc <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abe:	e00e      	b.n	8004ade <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd ff8c 	bl	80029dc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d907      	bls.n	8004ade <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ace:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e046      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ade:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1ea      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x908>
 8004aea:	e03e      	b.n	8004b6a <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e039      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <HAL_RCC_OscConfig+0x9bc>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0203 	and.w	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d12c      	bne.n	8004b66 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	3b01      	subs	r3, #1
 8004b18:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d123      	bne.n	8004b66 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d11b      	bne.n	8004b66 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d113      	bne.n	8004b66 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	019f800c 	.word	0x019f800c

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e10d      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d910      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b85      	ldr	r3, [pc, #532]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 020f 	bic.w	r2, r3, #15
 8004baa:	4983      	ldr	r1, [pc, #524]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b81      	ldr	r3, [pc, #516]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0f5      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8094 	beq.w	8004cfa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d134      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	4b78      	ldr	r3, [pc, #480]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0e2      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bea:	f000 fa2b 	bl	8005044 <RCC_GetSysClockFreqFromPLLSource>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <HAL_RCC_ClockConfig+0x244>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d956      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bf8:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c04:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0c:	4a6b      	ldr	r2, [pc, #428]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e045      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d03f      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d13b      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c2e:	4b63      	ldr	r3, [pc, #396]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c36:	4a61      	ldr	r2, [pc, #388]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e030      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4c:	4b5b      	ldr	r3, [pc, #364]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0a9      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c64:	4b55      	ldr	r3, [pc, #340]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e09d      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c74:	4b51      	ldr	r3, [pc, #324]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e095      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c84:	f000 f8a2 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4a4c      	ldr	r2, [pc, #304]	; (8004dc0 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d909      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9a:	4a48      	ldr	r2, [pc, #288]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ca6:	4b45      	ldr	r3, [pc, #276]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 0203 	bic.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4942      	ldr	r1, [pc, #264]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fd fe90 	bl	80029dc <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	e013      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7fd fe8c 	bl	80029dc <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d90a      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	4b3a      	ldr	r3, [pc, #232]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 020c 	and.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e063      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce8:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 020c 	and.w	r2, r3, #12
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1e2      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d06:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	492a      	ldr	r1, [pc, #168]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	608b      	str	r3, [r1, #8]
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d105      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d20:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4a25      	ldr	r2, [pc, #148]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d2a:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d210      	bcs.n	8004d5c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 020f 	bic.w	r2, r3, #15
 8004d42:	491d      	ldr	r1, [pc, #116]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_ClockConfig+0x23c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e029      	b.n	8004db0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d68:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4911      	ldr	r1, [pc, #68]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4909      	ldr	r1, [pc, #36]	; (8004dbc <HAL_RCC_ClockConfig+0x240>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d9a:	f000 f8b3 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_RCC_ClockConfig+0x248>)
 8004da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_RCC_ClockConfig+0x24c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fd fdc7 	bl	800293c <HAL_InitTick>
 8004dae:	4603      	mov	r3, r0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40022000 	.word	0x40022000
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	04c4b400 	.word	0x04c4b400
 8004dc4:	20000004 	.word	0x20000004
 8004dc8:	20000008 	.word	0x20000008

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dda:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de4:	4b44      	ldr	r3, [pc, #272]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x34>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d121      	bne.n	8004e3e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d11e      	bne.n	8004e3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e00:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e0c:	4b3a      	ldr	r3, [pc, #232]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e005      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004e28:	4a34      	ldr	r2, [pc, #208]	; (8004efc <HAL_RCC_GetSysClockFreq+0x130>)
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e30:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10d      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d102      	bne.n	8004e4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e44:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e004      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d146      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004e5a:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3301      	adds	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d003      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0xb4>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d00d      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0xce>
 8004e7e:	e019      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e80:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e8a:	68d2      	ldr	r2, [r2, #12]
 8004e8c:	0a12      	lsrs	r2, r2, #8
 8004e8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]
        break;
 8004e98:	e019      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ea4:	68d2      	ldr	r2, [r2, #12]
 8004ea6:	0a12      	lsrs	r2, r2, #8
 8004ea8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	617b      	str	r3, [r7, #20]
        break;
 8004eb2:	e00c      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ebe:	68d2      	ldr	r2, [r2, #12]
 8004ec0:	0a12      	lsrs	r2, r2, #8
 8004ec2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
        break;
 8004ecc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	0e5b      	lsrs	r3, r3, #25
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	08008948 	.word	0x08008948
 8004f00:	00f42400 	.word	0x00f42400

08004f04 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004f08:	f7ff ff60 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetHCLKFreq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	08008930 	.word	0x08008930

08004f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f30:	f7ff ffe8 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4903      	ldr	r1, [pc, #12]	; (8004f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	08008940 	.word	0x08008940

08004f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f58:	f7ff ffd4 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0adb      	lsrs	r3, r3, #11
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4903      	ldr	r1, [pc, #12]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	08008940 	.word	0x08008940

08004f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f94:	f7ff f882 	bl	800409c <HAL_PWREx_GetVoltageRange>
 8004f98:	6138      	str	r0, [r7, #16]
 8004f9a:	e014      	b.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	4a26      	ldr	r2, [pc, #152]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa8:	4b24      	ldr	r3, [pc, #144]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb4:	f7ff f872 	bl	800409c <HAL_PWREx_GetVoltageRange>
 8004fb8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd2:	d10b      	bne.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d919      	bls.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2ba0      	cmp	r3, #160	; 0xa0
 8004fde:	d902      	bls.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004fe4:	e013      	b.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004fea:	e010      	b.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d902      	bls.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e00a      	b.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d102      	bne.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ffe:	2302      	movs	r3, #2
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e004      	b.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b70      	cmp	r3, #112	; 0x70
 8005008:	d101      	bne.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800500a:	2301      	movs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 020f 	bic.w	r2, r3, #15
 8005016:	490a      	ldr	r1, [pc, #40]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	40022000 	.word	0x40022000

08005044 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800504e:	4b36      	ldr	r3, [pc, #216]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d118      	bne.n	800508c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800505a:	4b33      	ldr	r3, [pc, #204]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	0a1b      	lsrs	r3, r3, #8
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e005      	b.n	8005082 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005076:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005082:	4a2a      	ldr	r2, [pc, #168]	; (800512c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	3301      	adds	r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d003      	beq.n	80050b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d00d      	beq.n	80050cc <RCC_GetSysClockFreqFromPLLSource+0x88>
 80050b0:	e019      	b.n	80050e6 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	0a12      	lsrs	r2, r2, #8
 80050c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	613b      	str	r3, [r7, #16]
      break;
 80050ca:	e019      	b.n	8005100 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80050d6:	68d2      	ldr	r2, [r2, #12]
 80050d8:	0a12      	lsrs	r2, r2, #8
 80050da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	613b      	str	r3, [r7, #16]
      break;
 80050e4:	e00c      	b.n	8005100 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	4a0e      	ldr	r2, [pc, #56]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	0a12      	lsrs	r2, r2, #8
 80050f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	613b      	str	r3, [r7, #16]
      break;
 80050fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0e5b      	lsrs	r3, r3, #25
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	3301      	adds	r3, #1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800511a:	683b      	ldr	r3, [r7, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40021000 	.word	0x40021000
 800512c:	08008948 	.word	0x08008948
 8005130:	00f42400 	.word	0x00f42400

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800513c:	2300      	movs	r3, #0
 800513e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005140:	2300      	movs	r3, #0
 8005142:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514c:	2b00      	cmp	r3, #0
 800514e:	d040      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d02a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d825      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800515c:	2b60      	cmp	r3, #96	; 0x60
 800515e:	d026      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005160:	2b60      	cmp	r3, #96	; 0x60
 8005162:	d821      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d006      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d81d      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d010      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005174:	e018      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005176:	4b8f      	ldr	r3, [pc, #572]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4a8e      	ldr	r2, [pc, #568]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005182:	e015      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fb56 	bl	800583c <RCCEx_PLLSAI1_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005194:	e00c      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3320      	adds	r3, #32
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fc33 	bl	8005a08 <RCCEx_PLLSAI2_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051a6:	e003      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	77fb      	strb	r3, [r7, #31]
        break;
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80051ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b0:	7ffb      	ldrb	r3, [r7, #31]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10b      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051b6:	4b7f      	ldr	r3, [pc, #508]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051bc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c4:	497b      	ldr	r1, [pc, #492]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80051cc:	e001      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ce:	7ffb      	ldrb	r3, [r7, #31]
 80051d0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d047      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e6:	d030      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ec:	d82a      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f2:	d02a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f8:	d824      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fe:	d008      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005204:	d81e      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	d010      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005210:	e018      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005212:	4b68      	ldr	r3, [pc, #416]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	4a67      	ldr	r2, [pc, #412]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800521e:	e015      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fb08 	bl	800583c <RCCEx_PLLSAI1_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005230:	e00c      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3320      	adds	r3, #32
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fbe5 	bl	8005a08 <RCCEx_PLLSAI2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005242:	e003      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	77fb      	strb	r3, [r7, #31]
        break;
 8005248:	e000      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800524a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524c:	7ffb      	ldrb	r3, [r7, #31]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005252:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	4954      	ldr	r1, [pc, #336]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005268:	e001      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	7ffb      	ldrb	r3, [r7, #31]
 800526c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80ab 	beq.w	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527c:	2300      	movs	r3, #0
 800527e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005280:	4b4c      	ldr	r3, [pc, #304]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528c:	4b49      	ldr	r3, [pc, #292]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	4a48      	ldr	r2, [pc, #288]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005296:	6593      	str	r3, [r2, #88]	; 0x58
 8005298:	4b46      	ldr	r3, [pc, #280]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a8:	4b43      	ldr	r3, [pc, #268]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a42      	ldr	r2, [pc, #264]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b4:	f7fd fb92 	bl	80029dc <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ba:	e00f      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fd fb8e 	bl	80029dc <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d908      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80052da:	e006      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052dc:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0e9      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x188>
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80052ea:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80052ec:	7ffb      	ldrb	r3, [r7, #31]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d164      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052f2:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01f      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	429a      	cmp	r2, r3
 800530e:	d019      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005310:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01f      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fd fb45 	bl	80029dc <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005354:	e012      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005356:	f7fd fb41 	bl	80029dc <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f241 3288 	movw	r2, #5000	; 0x1388
 8005364:	4293      	cmp	r3, r2
 8005366:	d909      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005368:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800537a:	e007      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0e5      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800538c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10c      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	4903      	ldr	r1, [pc, #12]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053ac:	e008      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	77bb      	strb	r3, [r7, #30]
 80053b2:	e005      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d105      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c6:	4b9c      	ldr	r3, [pc, #624]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	4a9b      	ldr	r2, [pc, #620]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053de:	4b96      	ldr	r3, [pc, #600]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	f023 0203 	bic.w	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4992      	ldr	r1, [pc, #584]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005400:	4b8d      	ldr	r3, [pc, #564]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f023 020c 	bic.w	r2, r3, #12
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	498a      	ldr	r1, [pc, #552]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005422:	4b85      	ldr	r3, [pc, #532]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	4981      	ldr	r1, [pc, #516]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005444:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	4979      	ldr	r1, [pc, #484]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005466:	4b74      	ldr	r3, [pc, #464]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	4970      	ldr	r1, [pc, #448]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005488:	4b6b      	ldr	r3, [pc, #428]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005496:	4968      	ldr	r1, [pc, #416]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054aa:	4b63      	ldr	r3, [pc, #396]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	495f      	ldr	r1, [pc, #380]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054cc:	4b5a      	ldr	r3, [pc, #360]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	4957      	ldr	r1, [pc, #348]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80054ee:	4b52      	ldr	r3, [pc, #328]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fc:	494e      	ldr	r1, [pc, #312]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d031      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005518:	d00e      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800551a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800551e:	d814      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005528:	d10f      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552a:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4a42      	ldr	r2, [pc, #264]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005534:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005536:	e00c      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f97c 	bl	800583c <RCCEx_PLLSAI1_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005548:	e003      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	77fb      	strb	r3, [r7, #31]
        break;
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005558:	4b37      	ldr	r3, [pc, #220]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005566:	4934      	ldr	r1, [pc, #208]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800556e:	e001      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	7ffb      	ldrb	r3, [r7, #31]
 8005572:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005580:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558e:	492a      	ldr	r1, [pc, #168]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055a2:	4b25      	ldr	r3, [pc, #148]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	4921      	ldr	r1, [pc, #132]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	4919      	ldr	r1, [pc, #100]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ec:	f023 0203 	bic.w	r2, r3, #3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	4910      	ldr	r1, [pc, #64]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02b      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005616:	4908      	ldr	r1, [pc, #32]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005626:	d109      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a02      	ldr	r2, [pc, #8]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800562e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005632:	60d3      	str	r3, [r2, #12]
 8005634:	e014      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005644:	d10c      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3304      	adds	r3, #4
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f000 f8f5 	bl	800583c <RCCEx_PLLSAI1_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005656:	7ffb      	ldrb	r3, [r7, #31]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d04a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005674:	d108      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005676:	4b70      	ldr	r3, [pc, #448]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800567c:	4a6e      	ldr	r2, [pc, #440]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800567e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005682:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005686:	e012      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005688:	4b6b      	ldr	r3, [pc, #428]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005696:	4968      	ldr	r1, [pc, #416]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800569e:	4b66      	ldr	r3, [pc, #408]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a4:	4a64      	ldr	r2, [pc, #400]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f8bc 	bl	800583c <RCCEx_PLLSAI1_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80056c8:	7ffb      	ldrb	r3, [r7, #31]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d019      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	77bb      	strb	r3, [r7, #30]
 80056d2:	e016      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056de:	4b56      	ldr	r3, [pc, #344]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	4a55      	ldr	r2, [pc, #340]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e8:	60d3      	str	r3, [r2, #12]
 80056ea:	e00a      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f4:	d105      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056f6:	4b50      	ldr	r3, [pc, #320]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	4a4f      	ldr	r2, [pc, #316]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d028      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800570e:	4b4a      	ldr	r3, [pc, #296]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800571c:	4946      	ldr	r1, [pc, #280]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572c:	d106      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800572e:	4b42      	ldr	r3, [pc, #264]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4a41      	ldr	r2, [pc, #260]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005738:	60d3      	str	r3, [r2, #12]
 800573a:	e011      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005744:	d10c      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	2101      	movs	r1, #1
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f875 	bl	800583c <RCCEx_PLLSAI1_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005756:	7ffb      	ldrb	r3, [r7, #31]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
 800575e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01e      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800576c:	4b32      	ldr	r3, [pc, #200]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577c:	492e      	ldr	r1, [pc, #184]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800578a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800578e:	d10c      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	2102      	movs	r1, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f850 	bl	800583c <RCCEx_PLLSAI1_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057b6:	4b20      	ldr	r3, [pc, #128]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057bc:	f023 0204 	bic.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	491c      	ldr	r1, [pc, #112]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e0:	f023 0218 	bic.w	r2, r3, #24
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	4913      	ldr	r1, [pc, #76]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005800:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580e:	490a      	ldr	r1, [pc, #40]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005820:	d105      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800582c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800582e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40021000 	.word	0x40021000

0800583c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d018      	beq.n	8005884 <RCCEx_PLLSAI1_Config+0x48>
 8005852:	2b03      	cmp	r3, #3
 8005854:	d81f      	bhi.n	8005896 <RCCEx_PLLSAI1_Config+0x5a>
 8005856:	2b01      	cmp	r3, #1
 8005858:	d002      	beq.n	8005860 <RCCEx_PLLSAI1_Config+0x24>
 800585a:	2b02      	cmp	r3, #2
 800585c:	d009      	beq.n	8005872 <RCCEx_PLLSAI1_Config+0x36>
 800585e:	e01a      	b.n	8005896 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005860:	4b65      	ldr	r3, [pc, #404]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d117      	bne.n	800589c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005870:	e014      	b.n	800589c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005872:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587a:	2b00      	cmp	r3, #0
 800587c:	d110      	bne.n	80058a0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005882:	e00d      	b.n	80058a0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005884:	4b5c      	ldr	r3, [pc, #368]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005894:	e006      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
      break;
 800589a:	e004      	b.n	80058a6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80058a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f040 809f 	bne.w	80059ec <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058ae:	4b52      	ldr	r3, [pc, #328]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a51      	ldr	r2, [pc, #324]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ba:	f7fd f88f 	bl	80029dc <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058c0:	e00f      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058c2:	f7fd f88b 	bl	80029dc <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d908      	bls.n	80058e2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058d0:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e0:	e006      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058e2:	4b45      	ldr	r3, [pc, #276]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e9      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0x86>
 80058ee:	e000      	b.n	80058f2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80058f0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d179      	bne.n	80059ec <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	4b3e      	ldr	r3, [pc, #248]	; (80059fc <RCCEx_PLLSAI1_Config+0x1c0>)
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	0211      	lsls	r1, r2, #8
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68d2      	ldr	r2, [r2, #12]
 8005910:	06d2      	lsls	r2, r2, #27
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	3a01      	subs	r2, #1
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	4934      	ldr	r1, [pc, #208]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	610b      	str	r3, [r1, #16]
 800592a:	e033      	b.n	8005994 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d118      	bne.n	8005964 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6892      	ldr	r2, [r2, #8]
 800593e:	0211      	lsls	r1, r2, #8
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6912      	ldr	r2, [r2, #16]
 8005944:	0852      	lsrs	r2, r2, #1
 8005946:	3a01      	subs	r2, #1
 8005948:	0552      	lsls	r2, r2, #21
 800594a:	4311      	orrs	r1, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6852      	ldr	r2, [r2, #4]
 8005950:	3a01      	subs	r2, #1
 8005952:	0112      	lsls	r2, r2, #4
 8005954:	4311      	orrs	r1, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	4926      	ldr	r1, [pc, #152]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	610b      	str	r3, [r1, #16]
 8005962:	e017      	b.n	8005994 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	4b26      	ldr	r3, [pc, #152]	; (8005a04 <RCCEx_PLLSAI1_Config+0x1c8>)
 800596a:	4013      	ands	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6892      	ldr	r2, [r2, #8]
 8005970:	0211      	lsls	r1, r2, #8
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6952      	ldr	r2, [r2, #20]
 8005976:	0852      	lsrs	r2, r2, #1
 8005978:	3a01      	subs	r2, #1
 800597a:	0652      	lsls	r2, r2, #25
 800597c:	4311      	orrs	r1, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6852      	ldr	r2, [r2, #4]
 8005982:	3a01      	subs	r2, #1
 8005984:	0112      	lsls	r2, r2, #4
 8005986:	4311      	orrs	r1, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	491a      	ldr	r1, [pc, #104]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005994:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800599a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800599e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a0:	f7fd f81c 	bl	80029dc <HAL_GetTick>
 80059a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059a6:	e00f      	b.n	80059c8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059a8:	f7fd f818 	bl	80029dc <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d908      	bls.n	80059c8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059b6:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80059c6:	e006      	b.n	80059d6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0e9      	beq.n	80059a8 <RCCEx_PLLSAI1_Config+0x16c>
 80059d4:	e000      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80059d6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4904      	ldr	r1, [pc, #16]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000
 80059fc:	07ff800c 	.word	0x07ff800c
 8005a00:	ff9f800c 	.word	0xff9f800c
 8005a04:	f9ff800c 	.word	0xf9ff800c

08005a08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d018      	beq.n	8005a50 <RCCEx_PLLSAI2_Config+0x48>
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d81f      	bhi.n	8005a62 <RCCEx_PLLSAI2_Config+0x5a>
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d002      	beq.n	8005a2c <RCCEx_PLLSAI2_Config+0x24>
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d009      	beq.n	8005a3e <RCCEx_PLLSAI2_Config+0x36>
 8005a2a:	e01a      	b.n	8005a62 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a2c:	4b4a      	ldr	r3, [pc, #296]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d117      	bne.n	8005a68 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3c:	e014      	b.n	8005a68 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a3e:	4b46      	ldr	r3, [pc, #280]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d110      	bne.n	8005a6c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a4e:	e00d      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005a50:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a60:	e006      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
      break;
 8005a66:	e004      	b.n	8005a72 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005a70:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d169      	bne.n	8005b4c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a78:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a36      	ldr	r2, [pc, #216]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a84:	f7fc ffaa 	bl	80029dc <HAL_GetTick>
 8005a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a8a:	e00f      	b.n	8005aac <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a8c:	f7fc ffa6 	bl	80029dc <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d908      	bls.n	8005aac <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aaa:	e006      	b.n	8005aba <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e9      	bne.n	8005a8c <RCCEx_PLLSAI2_Config+0x84>
 8005ab8:	e000      	b.n	8005abc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005aba:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d144      	bne.n	8005b4c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d115      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	4b23      	ldr	r3, [pc, #140]	; (8005b5c <RCCEx_PLLSAI2_Config+0x154>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6892      	ldr	r2, [r2, #8]
 8005ad4:	0211      	lsls	r1, r2, #8
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68d2      	ldr	r2, [r2, #12]
 8005ada:	06d2      	lsls	r2, r2, #27
 8005adc:	4311      	orrs	r1, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6852      	ldr	r2, [r2, #4]
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	0112      	lsls	r2, r2, #4
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	491a      	ldr	r1, [pc, #104]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005af4:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc ff6c 	bl	80029dc <HAL_GetTick>
 8005b04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b06:	e00f      	b.n	8005b28 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b08:	f7fc ff68 	bl	80029dc <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d908      	bls.n	8005b28 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005b26:	e006      	b.n	8005b36 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0e9      	beq.n	8005b08 <RCCEx_PLLSAI2_Config+0x100>
 8005b34:	e000      	b.n	8005b38 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005b36:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005b3e:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	4904      	ldr	r1, [pc, #16]	; (8005b58 <RCCEx_PLLSAI2_Config+0x150>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	07ff800c 	.word	0x07ff800c

08005b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e042      	b.n	8005bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fc fcc7 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2224      	movs	r2, #36	; 0x24
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fada 	bl	800615c <UART_SetConfig>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e022      	b.n	8005bf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fdce 	bl	800675c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fe55 	bl	80068a0 <UART_CheckIdleState>
 8005bf6:	4603      	mov	r3, r0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d131      	bne.n	8005c7c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_UART_Receive_DMA+0x24>
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e02a      	b.n	8005c7e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Receive_DMA+0x36>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e023      	b.n	8005c7e <HAL_UART_Receive_DMA+0x7e>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0f      	ldr	r2, [pc, #60]	; (8005c88 <HAL_UART_Receive_DMA+0x88>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005c6a:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fee0 	bl	8006a38 <UART_Start_Receive_DMA>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	e000      	b.n	8005c7e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40008000 	.word	0x40008000

08005c8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d118      	bne.n	8005cee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d013      	beq.n	8005cee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 81fb 	beq.w	80060da <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
      }
      return;
 8005cec:	e1f5      	b.n	80060da <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80ef 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4b73      	ldr	r3, [pc, #460]	; (8005ec8 <HAL_UART_IRQHandler+0x23c>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4b72      	ldr	r3, [pc, #456]	; (8005ecc <HAL_UART_IRQHandler+0x240>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80e4 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d010      	beq.n	8005d38 <HAL_UART_IRQHandler+0xac>
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2201      	movs	r2, #1
 8005d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d010      	beq.n	8005d64 <HAL_UART_IRQHandler+0xd8>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2202      	movs	r2, #2
 8005d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5a:	f043 0204 	orr.w	r2, r3, #4
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d010      	beq.n	8005d90 <HAL_UART_IRQHandler+0x104>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d86:	f043 0202 	orr.w	r2, r3, #2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d015      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <HAL_UART_IRQHandler+0x23c>)
 8005da8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2208      	movs	r2, #8
 8005db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbc:	f043 0208 	orr.w	r2, r3, #8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d011      	beq.n	8005df4 <HAL_UART_IRQHandler+0x168>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 816f 	beq.w	80060de <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d011      	beq.n	8005e2e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d004      	beq.n	8005e4e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d031      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fe7e 	bl	8006b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d123      	bne.n	8005eaa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d013      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e7e:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <HAL_UART_IRQHandler+0x244>)
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd f867 	bl	8002f5a <HAL_DMA_Abort_IT>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	e00f      	b.n	8005ec2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f944 	bl	8006130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	e00b      	b.n	8005ec2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f940 	bl	8006130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e007      	b.n	8005ec2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f93c 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005ec0:	e10d      	b.n	80060de <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec2:	bf00      	nop
    return;
 8005ec4:	e10b      	b.n	80060de <HAL_UART_IRQHandler+0x452>
 8005ec6:	bf00      	nop
 8005ec8:	10000001 	.word	0x10000001
 8005ecc:	04000120 	.word	0x04000120
 8005ed0:	08006d07 	.word	0x08006d07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 80ab 	bne.w	8006034 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80a5 	beq.w	8006034 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 809f 	beq.w	8006034 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2210      	movs	r2, #16
 8005efc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d155      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005f16:	893b      	ldrh	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80e2 	beq.w	80060e2 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f24:	893a      	ldrh	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	f080 80db 	bcs.w	80060e2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	893a      	ldrh	r2, [r7, #8]
 8005f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d12b      	bne.n	8005f9c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f72:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0210 	bic.w	r2, r2, #16
 8005f90:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fc ff83 	bl	8002ea2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8c7 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fb6:	e094      	b.n	80060e2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8087 	beq.w	80060e6 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005fd8:	897b      	ldrh	r3, [r7, #10]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8083 	beq.w	80060e6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0210 	bic.w	r2, r2, #16
 8006026:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006028:	897b      	ldrh	r3, [r7, #10]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f889 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006032:	e058      	b.n	80060e6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <HAL_UART_IRQHandler+0x3ce>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fe87 	bl	8006d66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006058:	e048      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607c:	2b00      	cmp	r3, #0
 800607e:	d034      	beq.n	80060ea <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
    }
    return;
 8006088:	e02f      	b.n	80060ea <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_UART_IRQHandler+0x41a>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fe47 	bl	8006d32 <UART_EndTransmit_IT>
    return;
 80060a4:	e022      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_UART_IRQHandler+0x436>
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fe67 	bl	8006d8e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c0:	e014      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <HAL_UART_IRQHandler+0x460>
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da0c      	bge.n	80060ec <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fe51 	bl	8006d7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060d8:	e008      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
      return;
 80060da:	bf00      	nop
 80060dc:	e006      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
    return;
 80060de:	bf00      	nop
 80060e0:	e004      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
      return;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
      return;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_UART_IRQHandler+0x460>
    return;
 80060ea:	bf00      	nop
  }
}
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop

080060f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b08c      	sub	sp, #48	; 0x30
 8006162:	af00      	add	r7, sp, #0
 8006164:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	431a      	orrs	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	431a      	orrs	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	4313      	orrs	r3, r2
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4baa      	ldr	r3, [pc, #680]	; (8006434 <UART_SetConfig+0x2d8>)
 800618c:	4013      	ands	r3, r2
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006194:	430b      	orrs	r3, r1
 8006196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a9f      	ldr	r2, [pc, #636]	; (8006438 <UART_SetConfig+0x2dc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80061d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061dc:	430b      	orrs	r3, r1
 80061de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	f023 010f 	bic.w	r1, r3, #15
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a90      	ldr	r2, [pc, #576]	; (800643c <UART_SetConfig+0x2e0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d125      	bne.n	800624c <UART_SetConfig+0xf0>
 8006200:	4b8f      	ldr	r3, [pc, #572]	; (8006440 <UART_SetConfig+0x2e4>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b03      	cmp	r3, #3
 800620c:	d81a      	bhi.n	8006244 <UART_SetConfig+0xe8>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <UART_SetConfig+0xb8>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	08006235 	.word	0x08006235
 800621c:	0800622d 	.word	0x0800622d
 8006220:	0800623d 	.word	0x0800623d
 8006224:	2301      	movs	r3, #1
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622a:	e116      	b.n	800645a <UART_SetConfig+0x2fe>
 800622c:	2302      	movs	r3, #2
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e112      	b.n	800645a <UART_SetConfig+0x2fe>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e10e      	b.n	800645a <UART_SetConfig+0x2fe>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e10a      	b.n	800645a <UART_SetConfig+0x2fe>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e106      	b.n	800645a <UART_SetConfig+0x2fe>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7c      	ldr	r2, [pc, #496]	; (8006444 <UART_SetConfig+0x2e8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d138      	bne.n	80062c8 <UART_SetConfig+0x16c>
 8006256:	4b7a      	ldr	r3, [pc, #488]	; (8006440 <UART_SetConfig+0x2e4>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b0c      	cmp	r3, #12
 8006262:	d82d      	bhi.n	80062c0 <UART_SetConfig+0x164>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x110>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062c1 	.word	0x080062c1
 8006274:	080062c1 	.word	0x080062c1
 8006278:	080062c1 	.word	0x080062c1
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080062c1 	.word	0x080062c1
 8006284:	080062c1 	.word	0x080062c1
 8006288:	080062c1 	.word	0x080062c1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062c1 	.word	0x080062c1
 8006294:	080062c1 	.word	0x080062c1
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062b9 	.word	0x080062b9
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a6:	e0d8      	b.n	800645a <UART_SetConfig+0x2fe>
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ae:	e0d4      	b.n	800645a <UART_SetConfig+0x2fe>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062b6:	e0d0      	b.n	800645a <UART_SetConfig+0x2fe>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062be:	e0cc      	b.n	800645a <UART_SetConfig+0x2fe>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c6:	e0c8      	b.n	800645a <UART_SetConfig+0x2fe>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a5e      	ldr	r2, [pc, #376]	; (8006448 <UART_SetConfig+0x2ec>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d125      	bne.n	800631e <UART_SetConfig+0x1c2>
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <UART_SetConfig+0x2e4>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d016      	beq.n	800630e <UART_SetConfig+0x1b2>
 80062e0:	2b30      	cmp	r3, #48	; 0x30
 80062e2:	d818      	bhi.n	8006316 <UART_SetConfig+0x1ba>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d00a      	beq.n	80062fe <UART_SetConfig+0x1a2>
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d814      	bhi.n	8006316 <UART_SetConfig+0x1ba>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <UART_SetConfig+0x19a>
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d008      	beq.n	8006306 <UART_SetConfig+0x1aa>
 80062f4:	e00f      	b.n	8006316 <UART_SetConfig+0x1ba>
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fc:	e0ad      	b.n	800645a <UART_SetConfig+0x2fe>
 80062fe:	2302      	movs	r3, #2
 8006300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006304:	e0a9      	b.n	800645a <UART_SetConfig+0x2fe>
 8006306:	2304      	movs	r3, #4
 8006308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800630c:	e0a5      	b.n	800645a <UART_SetConfig+0x2fe>
 800630e:	2308      	movs	r3, #8
 8006310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006314:	e0a1      	b.n	800645a <UART_SetConfig+0x2fe>
 8006316:	2310      	movs	r3, #16
 8006318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631c:	e09d      	b.n	800645a <UART_SetConfig+0x2fe>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a4a      	ldr	r2, [pc, #296]	; (800644c <UART_SetConfig+0x2f0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d125      	bne.n	8006374 <UART_SetConfig+0x218>
 8006328:	4b45      	ldr	r3, [pc, #276]	; (8006440 <UART_SetConfig+0x2e4>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006332:	2bc0      	cmp	r3, #192	; 0xc0
 8006334:	d016      	beq.n	8006364 <UART_SetConfig+0x208>
 8006336:	2bc0      	cmp	r3, #192	; 0xc0
 8006338:	d818      	bhi.n	800636c <UART_SetConfig+0x210>
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d00a      	beq.n	8006354 <UART_SetConfig+0x1f8>
 800633e:	2b80      	cmp	r3, #128	; 0x80
 8006340:	d814      	bhi.n	800636c <UART_SetConfig+0x210>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <UART_SetConfig+0x1f0>
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d008      	beq.n	800635c <UART_SetConfig+0x200>
 800634a:	e00f      	b.n	800636c <UART_SetConfig+0x210>
 800634c:	2300      	movs	r3, #0
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006352:	e082      	b.n	800645a <UART_SetConfig+0x2fe>
 8006354:	2302      	movs	r3, #2
 8006356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800635a:	e07e      	b.n	800645a <UART_SetConfig+0x2fe>
 800635c:	2304      	movs	r3, #4
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006362:	e07a      	b.n	800645a <UART_SetConfig+0x2fe>
 8006364:	2308      	movs	r3, #8
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800636a:	e076      	b.n	800645a <UART_SetConfig+0x2fe>
 800636c:	2310      	movs	r3, #16
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006372:	e072      	b.n	800645a <UART_SetConfig+0x2fe>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a35      	ldr	r2, [pc, #212]	; (8006450 <UART_SetConfig+0x2f4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d12a      	bne.n	80063d4 <UART_SetConfig+0x278>
 800637e:	4b30      	ldr	r3, [pc, #192]	; (8006440 <UART_SetConfig+0x2e4>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800638c:	d01a      	beq.n	80063c4 <UART_SetConfig+0x268>
 800638e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006392:	d81b      	bhi.n	80063cc <UART_SetConfig+0x270>
 8006394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006398:	d00c      	beq.n	80063b4 <UART_SetConfig+0x258>
 800639a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639e:	d815      	bhi.n	80063cc <UART_SetConfig+0x270>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <UART_SetConfig+0x250>
 80063a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a8:	d008      	beq.n	80063bc <UART_SetConfig+0x260>
 80063aa:	e00f      	b.n	80063cc <UART_SetConfig+0x270>
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b2:	e052      	b.n	800645a <UART_SetConfig+0x2fe>
 80063b4:	2302      	movs	r3, #2
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ba:	e04e      	b.n	800645a <UART_SetConfig+0x2fe>
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063c2:	e04a      	b.n	800645a <UART_SetConfig+0x2fe>
 80063c4:	2308      	movs	r3, #8
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ca:	e046      	b.n	800645a <UART_SetConfig+0x2fe>
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e042      	b.n	800645a <UART_SetConfig+0x2fe>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a17      	ldr	r2, [pc, #92]	; (8006438 <UART_SetConfig+0x2dc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d13a      	bne.n	8006454 <UART_SetConfig+0x2f8>
 80063de:	4b18      	ldr	r3, [pc, #96]	; (8006440 <UART_SetConfig+0x2e4>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ec:	d01a      	beq.n	8006424 <UART_SetConfig+0x2c8>
 80063ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f2:	d81b      	bhi.n	800642c <UART_SetConfig+0x2d0>
 80063f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f8:	d00c      	beq.n	8006414 <UART_SetConfig+0x2b8>
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	d815      	bhi.n	800642c <UART_SetConfig+0x2d0>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <UART_SetConfig+0x2b0>
 8006404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006408:	d008      	beq.n	800641c <UART_SetConfig+0x2c0>
 800640a:	e00f      	b.n	800642c <UART_SetConfig+0x2d0>
 800640c:	2300      	movs	r3, #0
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006412:	e022      	b.n	800645a <UART_SetConfig+0x2fe>
 8006414:	2302      	movs	r3, #2
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641a:	e01e      	b.n	800645a <UART_SetConfig+0x2fe>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e01a      	b.n	800645a <UART_SetConfig+0x2fe>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e016      	b.n	800645a <UART_SetConfig+0x2fe>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e012      	b.n	800645a <UART_SetConfig+0x2fe>
 8006434:	cfff69f3 	.word	0xcfff69f3
 8006438:	40008000 	.word	0x40008000
 800643c:	40013800 	.word	0x40013800
 8006440:	40021000 	.word	0x40021000
 8006444:	40004400 	.word	0x40004400
 8006448:	40004800 	.word	0x40004800
 800644c:	40004c00 	.word	0x40004c00
 8006450:	40005000 	.word	0x40005000
 8006454:	2310      	movs	r3, #16
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4ab0      	ldr	r2, [pc, #704]	; (8006720 <UART_SetConfig+0x5c4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	f040 809b 	bne.w	800659c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800646a:	2b08      	cmp	r3, #8
 800646c:	d827      	bhi.n	80064be <UART_SetConfig+0x362>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x318>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	080064bf 	.word	0x080064bf
 8006484:	080064af 	.word	0x080064af
 8006488:	080064bf 	.word	0x080064bf
 800648c:	080064bf 	.word	0x080064bf
 8006490:	080064bf 	.word	0x080064bf
 8006494:	080064b7 	.word	0x080064b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fe fd48 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 800649c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800649e:	e014      	b.n	80064ca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a0:	f7fe fd58 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064a6:	e010      	b.n	80064ca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a8:	4b9e      	ldr	r3, [pc, #632]	; (8006724 <UART_SetConfig+0x5c8>)
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064ac:	e00d      	b.n	80064ca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ae:	f7fe fc8d 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064b4:	e009      	b.n	80064ca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064bc:	e005      	b.n	80064ca <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8130 	beq.w	8006732 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	4a94      	ldr	r2, [pc, #592]	; (8006728 <UART_SetConfig+0x5cc>)
 80064d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064dc:	461a      	mov	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d305      	bcc.n	8006502 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d903      	bls.n	800650a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006508:	e113      	b.n	8006732 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	2200      	movs	r2, #0
 800650e:	60bb      	str	r3, [r7, #8]
 8006510:	60fa      	str	r2, [r7, #12]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	4a84      	ldr	r2, [pc, #528]	; (8006728 <UART_SetConfig+0x5cc>)
 8006518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800651c:	b29b      	uxth	r3, r3
 800651e:	2200      	movs	r2, #0
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006528:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800652c:	f7fa fb48 	bl	8000bc0 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	020b      	lsls	r3, r1, #8
 8006542:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006546:	0202      	lsls	r2, r0, #8
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	6849      	ldr	r1, [r1, #4]
 800654c:	0849      	lsrs	r1, r1, #1
 800654e:	2000      	movs	r0, #0
 8006550:	460c      	mov	r4, r1
 8006552:	4605      	mov	r5, r0
 8006554:	eb12 0804 	adds.w	r8, r2, r4
 8006558:	eb43 0905 	adc.w	r9, r3, r5
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	469a      	mov	sl, r3
 8006564:	4693      	mov	fp, r2
 8006566:	4652      	mov	r2, sl
 8006568:	465b      	mov	r3, fp
 800656a:	4640      	mov	r0, r8
 800656c:	4649      	mov	r1, r9
 800656e:	f7fa fb27 	bl	8000bc0 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4613      	mov	r3, r2
 8006578:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006580:	d308      	bcc.n	8006594 <UART_SetConfig+0x438>
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006588:	d204      	bcs.n	8006594 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	e0ce      	b.n	8006732 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800659a:	e0ca      	b.n	8006732 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a4:	d167      	bne.n	8006676 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 80065a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d827      	bhi.n	80065fe <UART_SetConfig+0x4a2>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <UART_SetConfig+0x458>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065d9 	.word	0x080065d9
 80065b8:	080065e1 	.word	0x080065e1
 80065bc:	080065e9 	.word	0x080065e9
 80065c0:	080065ff 	.word	0x080065ff
 80065c4:	080065ef 	.word	0x080065ef
 80065c8:	080065ff 	.word	0x080065ff
 80065cc:	080065ff 	.word	0x080065ff
 80065d0:	080065ff 	.word	0x080065ff
 80065d4:	080065f7 	.word	0x080065f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d8:	f7fe fca8 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 80065dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065de:	e014      	b.n	800660a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7fe fcb8 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065e6:	e010      	b.n	800660a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e8:	4b4e      	ldr	r3, [pc, #312]	; (8006724 <UART_SetConfig+0x5c8>)
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065ec:	e00d      	b.n	800660a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ee:	f7fe fbed 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065f4:	e009      	b.n	800660a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065fc:	e005      	b.n	800660a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8090 	beq.w	8006732 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	4a44      	ldr	r2, [pc, #272]	; (8006728 <UART_SetConfig+0x5cc>)
 8006618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800661c:	461a      	mov	r2, r3
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	fbb3 f3f2 	udiv	r3, r3, r2
 8006624:	005a      	lsls	r2, r3, #1
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	441a      	add	r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	b29b      	uxth	r3, r3
 8006638:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2b0f      	cmp	r3, #15
 800663e:	d916      	bls.n	800666e <UART_SetConfig+0x512>
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006646:	d212      	bcs.n	800666e <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f023 030f 	bic.w	r3, r3, #15
 8006650:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	085b      	lsrs	r3, r3, #1
 8006656:	b29b      	uxth	r3, r3
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	b29a      	uxth	r2, r3
 800665e:	8bfb      	ldrh	r3, [r7, #30]
 8006660:	4313      	orrs	r3, r2
 8006662:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	8bfa      	ldrh	r2, [r7, #30]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e061      	b.n	8006732 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006674:	e05d      	b.n	8006732 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800667a:	2b08      	cmp	r3, #8
 800667c:	d827      	bhi.n	80066ce <UART_SetConfig+0x572>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x528>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066b1 	.word	0x080066b1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066cf 	.word	0x080066cf
 8006694:	080066bf 	.word	0x080066bf
 8006698:	080066cf 	.word	0x080066cf
 800669c:	080066cf 	.word	0x080066cf
 80066a0:	080066cf 	.word	0x080066cf
 80066a4:	080066c7 	.word	0x080066c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a8:	f7fe fc40 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 80066ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ae:	e014      	b.n	80066da <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7fe fc50 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 80066b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066b6:	e010      	b.n	80066da <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <UART_SetConfig+0x5c8>)
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066bc:	e00d      	b.n	80066da <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066be:	f7fe fb85 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066c4:	e009      	b.n	80066da <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066cc:	e005      	b.n	80066da <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066d8:	bf00      	nop
    }

    if (pclk != 0U)
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d028      	beq.n	8006732 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	4a10      	ldr	r2, [pc, #64]	; (8006728 <UART_SetConfig+0x5cc>)
 80066e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	441a      	add	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	2b0f      	cmp	r3, #15
 800670a:	d90f      	bls.n	800672c <UART_SetConfig+0x5d0>
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d20b      	bcs.n	800672c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	60da      	str	r2, [r3, #12]
 800671c:	e009      	b.n	8006732 <UART_SetConfig+0x5d6>
 800671e:	bf00      	nop
 8006720:	40008000 	.word	0x40008000
 8006724:	00f42400 	.word	0x00f42400
 8006728:	08008988 	.word	0x08008988
      }
      else
      {
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2201      	movs	r2, #1
 8006736:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2201      	movs	r2, #1
 800673e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2200      	movs	r2, #0
 8006746:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800674e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006752:	4618      	mov	r0, r3
 8006754:	3730      	adds	r7, #48	; 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800675c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01a      	beq.n	8006872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685a:	d10a      	bne.n	8006872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b0:	f7fc f894 	bl	80029dc <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d10e      	bne.n	80068e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f82f 	bl	8006936 <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e025      	b.n	800692e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d10e      	bne.n	800690e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f819 	bl	8006936 <UART_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e00f      	b.n	800692e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006946:	e062      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d05e      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006950:	f7fc f844 	bl	80029dc <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <UART_WaitOnFlagUntilTimeout+0x30>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11d      	bne.n	80069a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006974:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e045      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d02e      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069be:	d126      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e00f      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d08d      	beq.n	8006948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2222      	movs	r2, #34	; 0x22
 8006a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d02c      	beq.n	8006ac6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a70:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <UART_Start_Receive_DMA+0xd0>)
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a78:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <UART_Start_Receive_DMA+0xd4>)
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a80:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <UART_Start_Receive_DMA+0xd8>)
 8006a82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a88:	2200      	movs	r2, #0
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3324      	adds	r3, #36	; 0x24
 8006a96:	4619      	mov	r1, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	f7fc f984 	bl	8002dac <HAL_DMA_Start_IT>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2210      	movs	r2, #16
 8006aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e01c      	b.n	8006b00 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006adc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	08006bb5 	.word	0x08006bb5
 8006b0c:	08006c4f 	.word	0x08006c4f
 8006b10:	08006c87 	.word	0x08006c87

08006b14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b2a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006b3a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d107      	bne.n	8006b94 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0210 	bic.w	r2, r2, #16
 8006b92:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d12b      	bne.n	8006c28 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c06:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0210 	bic.w	r2, r2, #16
 8006c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d107      	bne.n	8006c40 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fa83 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c3e:	e002      	b.n	8006c46 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff fa61 	bl	8006108 <HAL_UART_RxCpltCallback>
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d109      	bne.n	8006c78 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fa67 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c76:	e002      	b.n	8006c7e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fa4f 	bl	800611c <HAL_UART_RxHalfCpltCallback>
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	d109      	bne.n	8006cc6 <UART_DMAError+0x40>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b21      	cmp	r3, #33	; 0x21
 8006cb6:	d106      	bne.n	8006cc6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006cc0:	6978      	ldr	r0, [r7, #20]
 8006cc2:	f7ff ff27 	bl	8006b14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d109      	bne.n	8006ce8 <UART_DMAError+0x62>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b22      	cmp	r3, #34	; 0x22
 8006cd8:	d106      	bne.n	8006ce8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f7ff ff34 	bl	8006b50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cee:	f043 0210 	orr.w	r2, r3, #16
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf8:	6978      	ldr	r0, [r7, #20]
 8006cfa:	f7ff fa19 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fa03 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d48:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff f9cb 	bl	80060f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_UARTEx_DisableFifoMode+0x16>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e027      	b.n	8006e08 <HAL_UARTEx_DisableFifoMode+0x66>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2224      	movs	r2, #36	; 0x24
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006de6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e02d      	b.n	8006e88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2224      	movs	r2, #36	; 0x24
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0201 	bic.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f84f 	bl	8006f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e02d      	b.n	8006f04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2224      	movs	r2, #36	; 0x24
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f811 	bl	8006f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f2c:	e031      	b.n	8006f92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f32:	2308      	movs	r3, #8
 8006f34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	0e5b      	lsrs	r3, r3, #25
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	0f5b      	lsrs	r3, r3, #29
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	7b3a      	ldrb	r2, [r7, #12]
 8006f5a:	4911      	ldr	r1, [pc, #68]	; (8006fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8006f5c:	5c8a      	ldrb	r2, [r1, r2]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	7b3a      	ldrb	r2, [r7, #12]
 8006f64:	490f      	ldr	r1, [pc, #60]	; (8006fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8006f66:	5c8a      	ldrb	r2, [r1, r2]
 8006f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	7b7a      	ldrb	r2, [r7, #13]
 8006f78:	4909      	ldr	r1, [pc, #36]	; (8006fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8006f7a:	5c8a      	ldrb	r2, [r1, r2]
 8006f7c:	fb02 f303 	mul.w	r3, r2, r3
 8006f80:	7b7a      	ldrb	r2, [r7, #13]
 8006f82:	4908      	ldr	r1, [pc, #32]	; (8006fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8006f84:	5c8a      	ldrb	r2, [r1, r2]
 8006f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	080089a0 	.word	0x080089a0
 8006fa4:	080089a8 	.word	0x080089a8

08006fa8 <pow>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	ec55 4b11 	vmov	r4, r5, d1
 8006fae:	ed2d 8b02 	vpush	{d8}
 8006fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8006fb6:	eef0 8a60 	vmov.f32	s17, s1
 8006fba:	f000 f885 	bl	80070c8 <__ieee754_pow>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	ec57 6b10 	vmov	r6, r7, d0
 8006fca:	f7f9 fd93 	bl	8000af4 <__aeabi_dcmpun>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d13b      	bne.n	800704a <pow+0xa2>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	ec51 0b18 	vmov	r0, r1, d8
 8006fda:	f7f9 fd59 	bl	8000a90 <__aeabi_dcmpeq>
 8006fde:	b1b8      	cbz	r0, 8007010 <pow+0x68>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	f7f9 fd52 	bl	8000a90 <__aeabi_dcmpeq>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d146      	bne.n	800707e <pow+0xd6>
 8006ff0:	ec45 4b10 	vmov	d0, r4, r5
 8006ff4:	f000 fe8a 	bl	8007d0c <finite>
 8006ff8:	b338      	cbz	r0, 800704a <pow+0xa2>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 fd4f 	bl	8000aa4 <__aeabi_dcmplt>
 8007006:	b300      	cbz	r0, 800704a <pow+0xa2>
 8007008:	f000 ff18 	bl	8007e3c <__errno>
 800700c:	2322      	movs	r3, #34	; 0x22
 800700e:	e01b      	b.n	8007048 <pow+0xa0>
 8007010:	ec47 6b10 	vmov	d0, r6, r7
 8007014:	f000 fe7a 	bl	8007d0c <finite>
 8007018:	b9e0      	cbnz	r0, 8007054 <pow+0xac>
 800701a:	eeb0 0a48 	vmov.f32	s0, s16
 800701e:	eef0 0a68 	vmov.f32	s1, s17
 8007022:	f000 fe73 	bl	8007d0c <finite>
 8007026:	b1a8      	cbz	r0, 8007054 <pow+0xac>
 8007028:	ec45 4b10 	vmov	d0, r4, r5
 800702c:	f000 fe6e 	bl	8007d0c <finite>
 8007030:	b180      	cbz	r0, 8007054 <pow+0xac>
 8007032:	4632      	mov	r2, r6
 8007034:	463b      	mov	r3, r7
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 fd5b 	bl	8000af4 <__aeabi_dcmpun>
 800703e:	2800      	cmp	r0, #0
 8007040:	d0e2      	beq.n	8007008 <pow+0x60>
 8007042:	f000 fefb 	bl	8007e3c <__errno>
 8007046:	2321      	movs	r3, #33	; 0x21
 8007048:	6003      	str	r3, [r0, #0]
 800704a:	ecbd 8b02 	vpop	{d8}
 800704e:	ec47 6b10 	vmov	d0, r6, r7
 8007052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007054:	2200      	movs	r2, #0
 8007056:	2300      	movs	r3, #0
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fd18 	bl	8000a90 <__aeabi_dcmpeq>
 8007060:	2800      	cmp	r0, #0
 8007062:	d0f2      	beq.n	800704a <pow+0xa2>
 8007064:	eeb0 0a48 	vmov.f32	s0, s16
 8007068:	eef0 0a68 	vmov.f32	s1, s17
 800706c:	f000 fe4e 	bl	8007d0c <finite>
 8007070:	2800      	cmp	r0, #0
 8007072:	d0ea      	beq.n	800704a <pow+0xa2>
 8007074:	ec45 4b10 	vmov	d0, r4, r5
 8007078:	f000 fe48 	bl	8007d0c <finite>
 800707c:	e7c3      	b.n	8007006 <pow+0x5e>
 800707e:	2600      	movs	r6, #0
 8007080:	4f00      	ldr	r7, [pc, #0]	; (8007084 <pow+0xdc>)
 8007082:	e7e2      	b.n	800704a <pow+0xa2>
 8007084:	3ff00000 	.word	0x3ff00000

08007088 <sqrtf>:
 8007088:	b508      	push	{r3, lr}
 800708a:	ed2d 8b02 	vpush	{d8}
 800708e:	eeb0 8a40 	vmov.f32	s16, s0
 8007092:	f000 fdff 	bl	8007c94 <__ieee754_sqrtf>
 8007096:	eeb4 8a48 	vcmp.f32	s16, s16
 800709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709e:	d60c      	bvs.n	80070ba <sqrtf+0x32>
 80070a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80070c0 <sqrtf+0x38>
 80070a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80070a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ac:	d505      	bpl.n	80070ba <sqrtf+0x32>
 80070ae:	f000 fec5 	bl	8007e3c <__errno>
 80070b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80070b6:	2321      	movs	r3, #33	; 0x21
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	ecbd 8b02 	vpop	{d8}
 80070be:	bd08      	pop	{r3, pc}
	...

080070c8 <__ieee754_pow>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	ed2d 8b06 	vpush	{d8-d10}
 80070d0:	b089      	sub	sp, #36	; 0x24
 80070d2:	ed8d 1b00 	vstr	d1, [sp]
 80070d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80070da:	ec57 6b10 	vmov	r6, r7, d0
 80070de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80070e2:	ea58 0102 	orrs.w	r1, r8, r2
 80070e6:	d115      	bne.n	8007114 <__ieee754_pow+0x4c>
 80070e8:	19b3      	adds	r3, r6, r6
 80070ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80070ee:	4152      	adcs	r2, r2
 80070f0:	4299      	cmp	r1, r3
 80070f2:	4b89      	ldr	r3, [pc, #548]	; (8007318 <__ieee754_pow+0x250>)
 80070f4:	4193      	sbcs	r3, r2
 80070f6:	f080 84d3 	bcs.w	8007aa0 <__ieee754_pow+0x9d8>
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007102:	f7f9 f8a7 	bl	8000254 <__adddf3>
 8007106:	ec41 0b10 	vmov	d0, r0, r1
 800710a:	b009      	add	sp, #36	; 0x24
 800710c:	ecbd 8b06 	vpop	{d8-d10}
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007118:	4b80      	ldr	r3, [pc, #512]	; (800731c <__ieee754_pow+0x254>)
 800711a:	463d      	mov	r5, r7
 800711c:	ee10 aa10 	vmov	sl, s0
 8007120:	429c      	cmp	r4, r3
 8007122:	dc06      	bgt.n	8007132 <__ieee754_pow+0x6a>
 8007124:	d101      	bne.n	800712a <__ieee754_pow+0x62>
 8007126:	2e00      	cmp	r6, #0
 8007128:	d1e7      	bne.n	80070fa <__ieee754_pow+0x32>
 800712a:	4598      	cmp	r8, r3
 800712c:	dc01      	bgt.n	8007132 <__ieee754_pow+0x6a>
 800712e:	d10f      	bne.n	8007150 <__ieee754_pow+0x88>
 8007130:	b172      	cbz	r2, 8007150 <__ieee754_pow+0x88>
 8007132:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007136:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800713a:	ea55 050a 	orrs.w	r5, r5, sl
 800713e:	d1dc      	bne.n	80070fa <__ieee754_pow+0x32>
 8007140:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007144:	18db      	adds	r3, r3, r3
 8007146:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800714a:	4152      	adcs	r2, r2
 800714c:	429d      	cmp	r5, r3
 800714e:	e7d0      	b.n	80070f2 <__ieee754_pow+0x2a>
 8007150:	2d00      	cmp	r5, #0
 8007152:	da3b      	bge.n	80071cc <__ieee754_pow+0x104>
 8007154:	4b72      	ldr	r3, [pc, #456]	; (8007320 <__ieee754_pow+0x258>)
 8007156:	4598      	cmp	r8, r3
 8007158:	dc51      	bgt.n	80071fe <__ieee754_pow+0x136>
 800715a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800715e:	4598      	cmp	r8, r3
 8007160:	f340 84ad 	ble.w	8007abe <__ieee754_pow+0x9f6>
 8007164:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007168:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800716c:	2b14      	cmp	r3, #20
 800716e:	dd0f      	ble.n	8007190 <__ieee754_pow+0xc8>
 8007170:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007174:	fa22 f103 	lsr.w	r1, r2, r3
 8007178:	fa01 f303 	lsl.w	r3, r1, r3
 800717c:	4293      	cmp	r3, r2
 800717e:	f040 849e 	bne.w	8007abe <__ieee754_pow+0x9f6>
 8007182:	f001 0101 	and.w	r1, r1, #1
 8007186:	f1c1 0302 	rsb	r3, r1, #2
 800718a:	9304      	str	r3, [sp, #16]
 800718c:	b182      	cbz	r2, 80071b0 <__ieee754_pow+0xe8>
 800718e:	e05f      	b.n	8007250 <__ieee754_pow+0x188>
 8007190:	2a00      	cmp	r2, #0
 8007192:	d15b      	bne.n	800724c <__ieee754_pow+0x184>
 8007194:	f1c3 0314 	rsb	r3, r3, #20
 8007198:	fa48 f103 	asr.w	r1, r8, r3
 800719c:	fa01 f303 	lsl.w	r3, r1, r3
 80071a0:	4543      	cmp	r3, r8
 80071a2:	f040 8489 	bne.w	8007ab8 <__ieee754_pow+0x9f0>
 80071a6:	f001 0101 	and.w	r1, r1, #1
 80071aa:	f1c1 0302 	rsb	r3, r1, #2
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	4b5c      	ldr	r3, [pc, #368]	; (8007324 <__ieee754_pow+0x25c>)
 80071b2:	4598      	cmp	r8, r3
 80071b4:	d132      	bne.n	800721c <__ieee754_pow+0x154>
 80071b6:	f1b9 0f00 	cmp.w	r9, #0
 80071ba:	f280 8479 	bge.w	8007ab0 <__ieee754_pow+0x9e8>
 80071be:	4632      	mov	r2, r6
 80071c0:	463b      	mov	r3, r7
 80071c2:	2000      	movs	r0, #0
 80071c4:	4957      	ldr	r1, [pc, #348]	; (8007324 <__ieee754_pow+0x25c>)
 80071c6:	f7f9 fb25 	bl	8000814 <__aeabi_ddiv>
 80071ca:	e79c      	b.n	8007106 <__ieee754_pow+0x3e>
 80071cc:	2300      	movs	r3, #0
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	d13d      	bne.n	8007250 <__ieee754_pow+0x188>
 80071d4:	4b51      	ldr	r3, [pc, #324]	; (800731c <__ieee754_pow+0x254>)
 80071d6:	4598      	cmp	r8, r3
 80071d8:	d1ea      	bne.n	80071b0 <__ieee754_pow+0xe8>
 80071da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80071de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80071e2:	ea53 030a 	orrs.w	r3, r3, sl
 80071e6:	f000 845b 	beq.w	8007aa0 <__ieee754_pow+0x9d8>
 80071ea:	4b4f      	ldr	r3, [pc, #316]	; (8007328 <__ieee754_pow+0x260>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	dd08      	ble.n	8007202 <__ieee754_pow+0x13a>
 80071f0:	f1b9 0f00 	cmp.w	r9, #0
 80071f4:	f2c0 8458 	blt.w	8007aa8 <__ieee754_pow+0x9e0>
 80071f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071fc:	e783      	b.n	8007106 <__ieee754_pow+0x3e>
 80071fe:	2302      	movs	r3, #2
 8007200:	e7e5      	b.n	80071ce <__ieee754_pow+0x106>
 8007202:	f1b9 0f00 	cmp.w	r9, #0
 8007206:	f04f 0000 	mov.w	r0, #0
 800720a:	f04f 0100 	mov.w	r1, #0
 800720e:	f6bf af7a 	bge.w	8007106 <__ieee754_pow+0x3e>
 8007212:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007216:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800721a:	e774      	b.n	8007106 <__ieee754_pow+0x3e>
 800721c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007220:	d106      	bne.n	8007230 <__ieee754_pow+0x168>
 8007222:	4632      	mov	r2, r6
 8007224:	463b      	mov	r3, r7
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f9 f9c9 	bl	80005c0 <__aeabi_dmul>
 800722e:	e76a      	b.n	8007106 <__ieee754_pow+0x3e>
 8007230:	4b3e      	ldr	r3, [pc, #248]	; (800732c <__ieee754_pow+0x264>)
 8007232:	4599      	cmp	r9, r3
 8007234:	d10c      	bne.n	8007250 <__ieee754_pow+0x188>
 8007236:	2d00      	cmp	r5, #0
 8007238:	db0a      	blt.n	8007250 <__ieee754_pow+0x188>
 800723a:	ec47 6b10 	vmov	d0, r6, r7
 800723e:	b009      	add	sp, #36	; 0x24
 8007240:	ecbd 8b06 	vpop	{d8-d10}
 8007244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	f000 bc6c 	b.w	8007b24 <__ieee754_sqrt>
 800724c:	2300      	movs	r3, #0
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	ec47 6b10 	vmov	d0, r6, r7
 8007254:	f000 fd51 	bl	8007cfa <fabs>
 8007258:	ec51 0b10 	vmov	r0, r1, d0
 800725c:	f1ba 0f00 	cmp.w	sl, #0
 8007260:	d129      	bne.n	80072b6 <__ieee754_pow+0x1ee>
 8007262:	b124      	cbz	r4, 800726e <__ieee754_pow+0x1a6>
 8007264:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007268:	4b2e      	ldr	r3, [pc, #184]	; (8007324 <__ieee754_pow+0x25c>)
 800726a:	429a      	cmp	r2, r3
 800726c:	d123      	bne.n	80072b6 <__ieee754_pow+0x1ee>
 800726e:	f1b9 0f00 	cmp.w	r9, #0
 8007272:	da05      	bge.n	8007280 <__ieee754_pow+0x1b8>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	2000      	movs	r0, #0
 800727a:	492a      	ldr	r1, [pc, #168]	; (8007324 <__ieee754_pow+0x25c>)
 800727c:	f7f9 faca 	bl	8000814 <__aeabi_ddiv>
 8007280:	2d00      	cmp	r5, #0
 8007282:	f6bf af40 	bge.w	8007106 <__ieee754_pow+0x3e>
 8007286:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800728a:	9b04      	ldr	r3, [sp, #16]
 800728c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007290:	4323      	orrs	r3, r4
 8007292:	d108      	bne.n	80072a6 <__ieee754_pow+0x1de>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4610      	mov	r0, r2
 800729a:	4619      	mov	r1, r3
 800729c:	f7f8 ffd8 	bl	8000250 <__aeabi_dsub>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	e78f      	b.n	80071c6 <__ieee754_pow+0xfe>
 80072a6:	9b04      	ldr	r3, [sp, #16]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	f47f af2c 	bne.w	8007106 <__ieee754_pow+0x3e>
 80072ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072b2:	4619      	mov	r1, r3
 80072b4:	e727      	b.n	8007106 <__ieee754_pow+0x3e>
 80072b6:	0feb      	lsrs	r3, r5, #31
 80072b8:	3b01      	subs	r3, #1
 80072ba:	9306      	str	r3, [sp, #24]
 80072bc:	9a06      	ldr	r2, [sp, #24]
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	d102      	bne.n	80072ca <__ieee754_pow+0x202>
 80072c4:	4632      	mov	r2, r6
 80072c6:	463b      	mov	r3, r7
 80072c8:	e7e6      	b.n	8007298 <__ieee754_pow+0x1d0>
 80072ca:	4b19      	ldr	r3, [pc, #100]	; (8007330 <__ieee754_pow+0x268>)
 80072cc:	4598      	cmp	r8, r3
 80072ce:	f340 80fb 	ble.w	80074c8 <__ieee754_pow+0x400>
 80072d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80072d6:	4598      	cmp	r8, r3
 80072d8:	4b13      	ldr	r3, [pc, #76]	; (8007328 <__ieee754_pow+0x260>)
 80072da:	dd0c      	ble.n	80072f6 <__ieee754_pow+0x22e>
 80072dc:	429c      	cmp	r4, r3
 80072de:	dc0f      	bgt.n	8007300 <__ieee754_pow+0x238>
 80072e0:	f1b9 0f00 	cmp.w	r9, #0
 80072e4:	da0f      	bge.n	8007306 <__ieee754_pow+0x23e>
 80072e6:	2000      	movs	r0, #0
 80072e8:	b009      	add	sp, #36	; 0x24
 80072ea:	ecbd 8b06 	vpop	{d8-d10}
 80072ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f2:	f000 bcf9 	b.w	8007ce8 <__math_oflow>
 80072f6:	429c      	cmp	r4, r3
 80072f8:	dbf2      	blt.n	80072e0 <__ieee754_pow+0x218>
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <__ieee754_pow+0x25c>)
 80072fc:	429c      	cmp	r4, r3
 80072fe:	dd19      	ble.n	8007334 <__ieee754_pow+0x26c>
 8007300:	f1b9 0f00 	cmp.w	r9, #0
 8007304:	dcef      	bgt.n	80072e6 <__ieee754_pow+0x21e>
 8007306:	2000      	movs	r0, #0
 8007308:	b009      	add	sp, #36	; 0x24
 800730a:	ecbd 8b06 	vpop	{d8-d10}
 800730e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007312:	f000 bce0 	b.w	8007cd6 <__math_uflow>
 8007316:	bf00      	nop
 8007318:	fff00000 	.word	0xfff00000
 800731c:	7ff00000 	.word	0x7ff00000
 8007320:	433fffff 	.word	0x433fffff
 8007324:	3ff00000 	.word	0x3ff00000
 8007328:	3fefffff 	.word	0x3fefffff
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	41e00000 	.word	0x41e00000
 8007334:	2200      	movs	r2, #0
 8007336:	4b60      	ldr	r3, [pc, #384]	; (80074b8 <__ieee754_pow+0x3f0>)
 8007338:	f7f8 ff8a 	bl	8000250 <__aeabi_dsub>
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	a353      	add	r3, pc, #332	; (adr r3, 8007490 <__ieee754_pow+0x3c8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f93b 	bl	80005c0 <__aeabi_dmul>
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	a351      	add	r3, pc, #324	; (adr r3, 8007498 <__ieee754_pow+0x3d0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f9 f932 	bl	80005c0 <__aeabi_dmul>
 800735c:	2200      	movs	r2, #0
 800735e:	4682      	mov	sl, r0
 8007360:	468b      	mov	fp, r1
 8007362:	4b56      	ldr	r3, [pc, #344]	; (80074bc <__ieee754_pow+0x3f4>)
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f9 f92a 	bl	80005c0 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	a14b      	add	r1, pc, #300	; (adr r1, 80074a0 <__ieee754_pow+0x3d8>)
 8007372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007376:	f7f8 ff6b 	bl	8000250 <__aeabi_dsub>
 800737a:	4622      	mov	r2, r4
 800737c:	462b      	mov	r3, r5
 800737e:	f7f9 f91f 	bl	80005c0 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	2000      	movs	r0, #0
 8007388:	494d      	ldr	r1, [pc, #308]	; (80074c0 <__ieee754_pow+0x3f8>)
 800738a:	f7f8 ff61 	bl	8000250 <__aeabi_dsub>
 800738e:	4680      	mov	r8, r0
 8007390:	4689      	mov	r9, r1
 8007392:	4622      	mov	r2, r4
 8007394:	462b      	mov	r3, r5
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 f911 	bl	80005c0 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f9 f90b 	bl	80005c0 <__aeabi_dmul>
 80073aa:	a33f      	add	r3, pc, #252	; (adr r3, 80074a8 <__ieee754_pow+0x3e0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f9 f906 	bl	80005c0 <__aeabi_dmul>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f8 ff48 	bl	8000250 <__aeabi_dsub>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f8 ff42 	bl	8000254 <__adddf3>
 80073d0:	2000      	movs	r0, #0
 80073d2:	4632      	mov	r2, r6
 80073d4:	463b      	mov	r3, r7
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	f7f8 ff39 	bl	8000250 <__aeabi_dsub>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f8 ff33 	bl	8000250 <__aeabi_dsub>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	9a06      	ldr	r2, [sp, #24]
 80073ee:	4682      	mov	sl, r0
 80073f0:	3b01      	subs	r3, #1
 80073f2:	468b      	mov	fp, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f040 81e7 	bne.w	80077c8 <__ieee754_pow+0x700>
 80073fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80074b0 <__ieee754_pow+0x3e8>
 80073fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007402:	2600      	movs	r6, #0
 8007404:	eeb0 8a47 	vmov.f32	s16, s14
 8007408:	eef0 8a67 	vmov.f32	s17, s15
 800740c:	463b      	mov	r3, r7
 800740e:	4632      	mov	r2, r6
 8007410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007414:	f7f8 ff1c 	bl	8000250 <__aeabi_dsub>
 8007418:	4622      	mov	r2, r4
 800741a:	462b      	mov	r3, r5
 800741c:	f7f9 f8d0 	bl	80005c0 <__aeabi_dmul>
 8007420:	4680      	mov	r8, r0
 8007422:	4689      	mov	r9, r1
 8007424:	4650      	mov	r0, sl
 8007426:	4659      	mov	r1, fp
 8007428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742c:	f7f9 f8c8 	bl	80005c0 <__aeabi_dmul>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4640      	mov	r0, r8
 8007436:	4649      	mov	r1, r9
 8007438:	f7f8 ff0c 	bl	8000254 <__adddf3>
 800743c:	4680      	mov	r8, r0
 800743e:	4689      	mov	r9, r1
 8007440:	4632      	mov	r2, r6
 8007442:	463b      	mov	r3, r7
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 f8ba 	bl	80005c0 <__aeabi_dmul>
 800744c:	460b      	mov	r3, r1
 800744e:	4604      	mov	r4, r0
 8007450:	460d      	mov	r5, r1
 8007452:	4602      	mov	r2, r0
 8007454:	4649      	mov	r1, r9
 8007456:	4640      	mov	r0, r8
 8007458:	f7f8 fefc 	bl	8000254 <__adddf3>
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <__ieee754_pow+0x3fc>)
 800745e:	4606      	mov	r6, r0
 8007460:	460f      	mov	r7, r1
 8007462:	4299      	cmp	r1, r3
 8007464:	468b      	mov	fp, r1
 8007466:	ec45 4b19 	vmov	d9, r4, r5
 800746a:	f340 82f2 	ble.w	8007a52 <__ieee754_pow+0x98a>
 800746e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007476:	4303      	orrs	r3, r0
 8007478:	f000 81e4 	beq.w	8007844 <__ieee754_pow+0x77c>
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	ec51 0b18 	vmov	r0, r1, d8
 8007484:	f7f9 fb0e 	bl	8000aa4 <__aeabi_dcmplt>
 8007488:	3800      	subs	r0, #0
 800748a:	bf18      	it	ne
 800748c:	2001      	movne	r0, #1
 800748e:	e72b      	b.n	80072e8 <__ieee754_pow+0x220>
 8007490:	60000000 	.word	0x60000000
 8007494:	3ff71547 	.word	0x3ff71547
 8007498:	f85ddf44 	.word	0xf85ddf44
 800749c:	3e54ae0b 	.word	0x3e54ae0b
 80074a0:	55555555 	.word	0x55555555
 80074a4:	3fd55555 	.word	0x3fd55555
 80074a8:	652b82fe 	.word	0x652b82fe
 80074ac:	3ff71547 	.word	0x3ff71547
 80074b0:	00000000 	.word	0x00000000
 80074b4:	bff00000 	.word	0xbff00000
 80074b8:	3ff00000 	.word	0x3ff00000
 80074bc:	3fd00000 	.word	0x3fd00000
 80074c0:	3fe00000 	.word	0x3fe00000
 80074c4:	408fffff 	.word	0x408fffff
 80074c8:	4bd5      	ldr	r3, [pc, #852]	; (8007820 <__ieee754_pow+0x758>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	402b      	ands	r3, r5
 80074ce:	b92b      	cbnz	r3, 80074dc <__ieee754_pow+0x414>
 80074d0:	4bd4      	ldr	r3, [pc, #848]	; (8007824 <__ieee754_pow+0x75c>)
 80074d2:	f7f9 f875 	bl	80005c0 <__aeabi_dmul>
 80074d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80074da:	460c      	mov	r4, r1
 80074dc:	1523      	asrs	r3, r4, #20
 80074de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80074e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80074ea:	4413      	add	r3, r2
 80074ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80074f0:	9305      	str	r3, [sp, #20]
 80074f2:	4bcd      	ldr	r3, [pc, #820]	; (8007828 <__ieee754_pow+0x760>)
 80074f4:	429c      	cmp	r4, r3
 80074f6:	dd08      	ble.n	800750a <__ieee754_pow+0x442>
 80074f8:	4bcc      	ldr	r3, [pc, #816]	; (800782c <__ieee754_pow+0x764>)
 80074fa:	429c      	cmp	r4, r3
 80074fc:	f340 8162 	ble.w	80077c4 <__ieee754_pow+0x6fc>
 8007500:	9b05      	ldr	r3, [sp, #20]
 8007502:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007506:	3301      	adds	r3, #1
 8007508:	9305      	str	r3, [sp, #20]
 800750a:	2400      	movs	r4, #0
 800750c:	00e3      	lsls	r3, r4, #3
 800750e:	4682      	mov	sl, r0
 8007510:	4629      	mov	r1, r5
 8007512:	46ab      	mov	fp, r5
 8007514:	9307      	str	r3, [sp, #28]
 8007516:	4bc6      	ldr	r3, [pc, #792]	; (8007830 <__ieee754_pow+0x768>)
 8007518:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800751c:	ed93 7b00 	vldr	d7, [r3]
 8007520:	eeb0 9a47 	vmov.f32	s18, s14
 8007524:	eef0 9a67 	vmov.f32	s19, s15
 8007528:	ec53 2b17 	vmov	r2, r3, d7
 800752c:	f7f8 fe90 	bl	8000250 <__aeabi_dsub>
 8007530:	4652      	mov	r2, sl
 8007532:	4606      	mov	r6, r0
 8007534:	460f      	mov	r7, r1
 8007536:	462b      	mov	r3, r5
 8007538:	106d      	asrs	r5, r5, #1
 800753a:	ec51 0b19 	vmov	r0, r1, d9
 800753e:	f7f8 fe89 	bl	8000254 <__adddf3>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	2000      	movs	r0, #0
 8007548:	49ba      	ldr	r1, [pc, #744]	; (8007834 <__ieee754_pow+0x76c>)
 800754a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800754e:	f7f9 f961 	bl	8000814 <__aeabi_ddiv>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800755a:	ec41 0b1a 	vmov	d10, r0, r1
 800755e:	4630      	mov	r0, r6
 8007560:	4639      	mov	r1, r7
 8007562:	f7f9 f82d 	bl	80005c0 <__aeabi_dmul>
 8007566:	2300      	movs	r3, #0
 8007568:	2200      	movs	r2, #0
 800756a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756e:	9302      	str	r3, [sp, #8]
 8007570:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007574:	4614      	mov	r4, r2
 8007576:	461d      	mov	r5, r3
 8007578:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800757c:	ec41 0b18 	vmov	d8, r0, r1
 8007580:	4640      	mov	r0, r8
 8007582:	4649      	mov	r1, r9
 8007584:	f7f9 f81c 	bl	80005c0 <__aeabi_dmul>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f8 fe5e 	bl	8000250 <__aeabi_dsub>
 8007594:	4606      	mov	r6, r0
 8007596:	460f      	mov	r7, r1
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	ec53 2b19 	vmov	r2, r3, d9
 80075a0:	f7f8 fe56 	bl	8000250 <__aeabi_dsub>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4650      	mov	r0, sl
 80075aa:	4659      	mov	r1, fp
 80075ac:	f7f8 fe50 	bl	8000250 <__aeabi_dsub>
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	f7f9 f804 	bl	80005c0 <__aeabi_dmul>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f8 fe46 	bl	8000250 <__aeabi_dsub>
 80075c4:	ec53 2b1a 	vmov	r2, r3, d10
 80075c8:	f7f8 fffa 	bl	80005c0 <__aeabi_dmul>
 80075cc:	ec53 2b18 	vmov	r2, r3, d8
 80075d0:	ec41 0b19 	vmov	d9, r0, r1
 80075d4:	ec51 0b18 	vmov	r0, r1, d8
 80075d8:	f7f8 fff2 	bl	80005c0 <__aeabi_dmul>
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	a37b      	add	r3, pc, #492	; (adr r3, 80077d0 <__ieee754_pow+0x708>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f7f8 ffeb 	bl	80005c0 <__aeabi_dmul>
 80075ea:	a37b      	add	r3, pc, #492	; (adr r3, 80077d8 <__ieee754_pow+0x710>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f8 fe30 	bl	8000254 <__adddf3>
 80075f4:	4622      	mov	r2, r4
 80075f6:	462b      	mov	r3, r5
 80075f8:	f7f8 ffe2 	bl	80005c0 <__aeabi_dmul>
 80075fc:	a378      	add	r3, pc, #480	; (adr r3, 80077e0 <__ieee754_pow+0x718>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fe27 	bl	8000254 <__adddf3>
 8007606:	4622      	mov	r2, r4
 8007608:	462b      	mov	r3, r5
 800760a:	f7f8 ffd9 	bl	80005c0 <__aeabi_dmul>
 800760e:	a376      	add	r3, pc, #472	; (adr r3, 80077e8 <__ieee754_pow+0x720>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f8 fe1e 	bl	8000254 <__adddf3>
 8007618:	4622      	mov	r2, r4
 800761a:	462b      	mov	r3, r5
 800761c:	f7f8 ffd0 	bl	80005c0 <__aeabi_dmul>
 8007620:	a373      	add	r3, pc, #460	; (adr r3, 80077f0 <__ieee754_pow+0x728>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f7f8 fe15 	bl	8000254 <__adddf3>
 800762a:	4622      	mov	r2, r4
 800762c:	462b      	mov	r3, r5
 800762e:	f7f8 ffc7 	bl	80005c0 <__aeabi_dmul>
 8007632:	a371      	add	r3, pc, #452	; (adr r3, 80077f8 <__ieee754_pow+0x730>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f7f8 fe0c 	bl	8000254 <__adddf3>
 800763c:	4606      	mov	r6, r0
 800763e:	460f      	mov	r7, r1
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	4620      	mov	r0, r4
 8007646:	4629      	mov	r1, r5
 8007648:	f7f8 ffba 	bl	80005c0 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4630      	mov	r0, r6
 8007652:	4639      	mov	r1, r7
 8007654:	f7f8 ffb4 	bl	80005c0 <__aeabi_dmul>
 8007658:	4642      	mov	r2, r8
 800765a:	4604      	mov	r4, r0
 800765c:	460d      	mov	r5, r1
 800765e:	464b      	mov	r3, r9
 8007660:	ec51 0b18 	vmov	r0, r1, d8
 8007664:	f7f8 fdf6 	bl	8000254 <__adddf3>
 8007668:	ec53 2b19 	vmov	r2, r3, d9
 800766c:	f7f8 ffa8 	bl	80005c0 <__aeabi_dmul>
 8007670:	4622      	mov	r2, r4
 8007672:	462b      	mov	r3, r5
 8007674:	f7f8 fdee 	bl	8000254 <__adddf3>
 8007678:	4642      	mov	r2, r8
 800767a:	4682      	mov	sl, r0
 800767c:	468b      	mov	fp, r1
 800767e:	464b      	mov	r3, r9
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	f7f8 ff9c 	bl	80005c0 <__aeabi_dmul>
 8007688:	2200      	movs	r2, #0
 800768a:	4b6b      	ldr	r3, [pc, #428]	; (8007838 <__ieee754_pow+0x770>)
 800768c:	4606      	mov	r6, r0
 800768e:	460f      	mov	r7, r1
 8007690:	f7f8 fde0 	bl	8000254 <__adddf3>
 8007694:	4652      	mov	r2, sl
 8007696:	465b      	mov	r3, fp
 8007698:	f7f8 fddc 	bl	8000254 <__adddf3>
 800769c:	2000      	movs	r0, #0
 800769e:	460d      	mov	r5, r1
 80076a0:	460b      	mov	r3, r1
 80076a2:	4604      	mov	r4, r0
 80076a4:	4602      	mov	r2, r0
 80076a6:	4649      	mov	r1, r9
 80076a8:	4640      	mov	r0, r8
 80076aa:	f7f8 ff89 	bl	80005c0 <__aeabi_dmul>
 80076ae:	2200      	movs	r2, #0
 80076b0:	4680      	mov	r8, r0
 80076b2:	4689      	mov	r9, r1
 80076b4:	4b60      	ldr	r3, [pc, #384]	; (8007838 <__ieee754_pow+0x770>)
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f8 fdc9 	bl	8000250 <__aeabi_dsub>
 80076be:	4632      	mov	r2, r6
 80076c0:	463b      	mov	r3, r7
 80076c2:	f7f8 fdc5 	bl	8000250 <__aeabi_dsub>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4650      	mov	r0, sl
 80076cc:	4659      	mov	r1, fp
 80076ce:	f7f8 fdbf 	bl	8000250 <__aeabi_dsub>
 80076d2:	ec53 2b18 	vmov	r2, r3, d8
 80076d6:	f7f8 ff73 	bl	80005c0 <__aeabi_dmul>
 80076da:	4606      	mov	r6, r0
 80076dc:	460f      	mov	r7, r1
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	ec51 0b19 	vmov	r0, r1, d9
 80076e6:	f7f8 ff6b 	bl	80005c0 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4630      	mov	r0, r6
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f8 fdaf 	bl	8000254 <__adddf3>
 80076f6:	4606      	mov	r6, r0
 80076f8:	460f      	mov	r7, r1
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4640      	mov	r0, r8
 8007700:	4649      	mov	r1, r9
 8007702:	f7f8 fda7 	bl	8000254 <__adddf3>
 8007706:	2000      	movs	r0, #0
 8007708:	460d      	mov	r5, r1
 800770a:	4604      	mov	r4, r0
 800770c:	a33c      	add	r3, pc, #240	; (adr r3, 8007800 <__ieee754_pow+0x738>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	f7f8 ff55 	bl	80005c0 <__aeabi_dmul>
 8007716:	4642      	mov	r2, r8
 8007718:	464b      	mov	r3, r9
 800771a:	ec41 0b18 	vmov	d8, r0, r1
 800771e:	4620      	mov	r0, r4
 8007720:	4629      	mov	r1, r5
 8007722:	f7f8 fd95 	bl	8000250 <__aeabi_dsub>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4630      	mov	r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	f7f8 fd8f 	bl	8000250 <__aeabi_dsub>
 8007732:	a335      	add	r3, pc, #212	; (adr r3, 8007808 <__ieee754_pow+0x740>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 ff42 	bl	80005c0 <__aeabi_dmul>
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	a332      	add	r3, pc, #200	; (adr r3, 8007810 <__ieee754_pow+0x748>)
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f7f8 ff39 	bl	80005c0 <__aeabi_dmul>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f8 fd7d 	bl	8000254 <__adddf3>
 800775a:	9a07      	ldr	r2, [sp, #28]
 800775c:	4b37      	ldr	r3, [pc, #220]	; (800783c <__ieee754_pow+0x774>)
 800775e:	4413      	add	r3, r2
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f8 fd76 	bl	8000254 <__adddf3>
 8007768:	4682      	mov	sl, r0
 800776a:	9805      	ldr	r0, [sp, #20]
 800776c:	468b      	mov	fp, r1
 800776e:	f7f8 febd 	bl	80004ec <__aeabi_i2d>
 8007772:	9a07      	ldr	r2, [sp, #28]
 8007774:	4b32      	ldr	r3, [pc, #200]	; (8007840 <__ieee754_pow+0x778>)
 8007776:	4606      	mov	r6, r0
 8007778:	460f      	mov	r7, r1
 800777a:	4413      	add	r3, r2
 800777c:	4652      	mov	r2, sl
 800777e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007782:	ec51 0b18 	vmov	r0, r1, d8
 8007786:	465b      	mov	r3, fp
 8007788:	f7f8 fd64 	bl	8000254 <__adddf3>
 800778c:	4642      	mov	r2, r8
 800778e:	464b      	mov	r3, r9
 8007790:	f7f8 fd60 	bl	8000254 <__adddf3>
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	f7f8 fd5c 	bl	8000254 <__adddf3>
 800779c:	2000      	movs	r0, #0
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	4604      	mov	r4, r0
 80077a4:	460d      	mov	r5, r1
 80077a6:	f7f8 fd53 	bl	8000250 <__aeabi_dsub>
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	f7f8 fd4f 	bl	8000250 <__aeabi_dsub>
 80077b2:	ec53 2b18 	vmov	r2, r3, d8
 80077b6:	f7f8 fd4b 	bl	8000250 <__aeabi_dsub>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4650      	mov	r0, sl
 80077c0:	4659      	mov	r1, fp
 80077c2:	e610      	b.n	80073e6 <__ieee754_pow+0x31e>
 80077c4:	2401      	movs	r4, #1
 80077c6:	e6a1      	b.n	800750c <__ieee754_pow+0x444>
 80077c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007818 <__ieee754_pow+0x750>
 80077cc:	e617      	b.n	80073fe <__ieee754_pow+0x336>
 80077ce:	bf00      	nop
 80077d0:	4a454eef 	.word	0x4a454eef
 80077d4:	3fca7e28 	.word	0x3fca7e28
 80077d8:	93c9db65 	.word	0x93c9db65
 80077dc:	3fcd864a 	.word	0x3fcd864a
 80077e0:	a91d4101 	.word	0xa91d4101
 80077e4:	3fd17460 	.word	0x3fd17460
 80077e8:	518f264d 	.word	0x518f264d
 80077ec:	3fd55555 	.word	0x3fd55555
 80077f0:	db6fabff 	.word	0xdb6fabff
 80077f4:	3fdb6db6 	.word	0x3fdb6db6
 80077f8:	33333303 	.word	0x33333303
 80077fc:	3fe33333 	.word	0x3fe33333
 8007800:	e0000000 	.word	0xe0000000
 8007804:	3feec709 	.word	0x3feec709
 8007808:	dc3a03fd 	.word	0xdc3a03fd
 800780c:	3feec709 	.word	0x3feec709
 8007810:	145b01f5 	.word	0x145b01f5
 8007814:	be3e2fe0 	.word	0xbe3e2fe0
 8007818:	00000000 	.word	0x00000000
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	7ff00000 	.word	0x7ff00000
 8007824:	43400000 	.word	0x43400000
 8007828:	0003988e 	.word	0x0003988e
 800782c:	000bb679 	.word	0x000bb679
 8007830:	080089b0 	.word	0x080089b0
 8007834:	3ff00000 	.word	0x3ff00000
 8007838:	40080000 	.word	0x40080000
 800783c:	080089d0 	.word	0x080089d0
 8007840:	080089c0 	.word	0x080089c0
 8007844:	a3b5      	add	r3, pc, #724	; (adr r3, 8007b1c <__ieee754_pow+0xa54>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f8 fd01 	bl	8000254 <__adddf3>
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	ec41 0b1a 	vmov	d10, r0, r1
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f8 fcf7 	bl	8000250 <__aeabi_dsub>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	ec51 0b1a 	vmov	r0, r1, d10
 800786a:	f7f9 f939 	bl	8000ae0 <__aeabi_dcmpgt>
 800786e:	2800      	cmp	r0, #0
 8007870:	f47f ae04 	bne.w	800747c <__ieee754_pow+0x3b4>
 8007874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007878:	4aa3      	ldr	r2, [pc, #652]	; (8007b08 <__ieee754_pow+0xa40>)
 800787a:	4293      	cmp	r3, r2
 800787c:	f340 8109 	ble.w	8007a92 <__ieee754_pow+0x9ca>
 8007880:	151b      	asrs	r3, r3, #20
 8007882:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007886:	4ea1      	ldr	r6, [pc, #644]	; (8007b0c <__ieee754_pow+0xa44>)
 8007888:	2000      	movs	r0, #0
 800788a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800788e:	f1bb 0f00 	cmp.w	fp, #0
 8007892:	fa4a f303 	asr.w	r3, sl, r3
 8007896:	445b      	add	r3, fp
 8007898:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800789c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80078a0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80078a4:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80078a8:	fa46 f602 	asr.w	r6, r6, r2
 80078ac:	f1c2 0214 	rsb	r2, r2, #20
 80078b0:	ea23 0106 	bic.w	r1, r3, r6
 80078b4:	fa4a fa02 	asr.w	sl, sl, r2
 80078b8:	4602      	mov	r2, r0
 80078ba:	4620      	mov	r0, r4
 80078bc:	460b      	mov	r3, r1
 80078be:	4629      	mov	r1, r5
 80078c0:	bfb8      	it	lt
 80078c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80078c6:	f7f8 fcc3 	bl	8000250 <__aeabi_dsub>
 80078ca:	ec41 0b19 	vmov	d9, r0, r1
 80078ce:	4642      	mov	r2, r8
 80078d0:	464b      	mov	r3, r9
 80078d2:	ec51 0b19 	vmov	r0, r1, d9
 80078d6:	f7f8 fcbd 	bl	8000254 <__adddf3>
 80078da:	2000      	movs	r0, #0
 80078dc:	460d      	mov	r5, r1
 80078de:	4604      	mov	r4, r0
 80078e0:	a379      	add	r3, pc, #484	; (adr r3, 8007ac8 <__ieee754_pow+0xa00>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fe6b 	bl	80005c0 <__aeabi_dmul>
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	ec53 2b19 	vmov	r2, r3, d9
 80078f6:	f7f8 fcab 	bl	8000250 <__aeabi_dsub>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f8 fca5 	bl	8000250 <__aeabi_dsub>
 8007906:	a372      	add	r3, pc, #456	; (adr r3, 8007ad0 <__ieee754_pow+0xa08>)
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f7f8 fe58 	bl	80005c0 <__aeabi_dmul>
 8007910:	4680      	mov	r8, r0
 8007912:	4689      	mov	r9, r1
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	a36f      	add	r3, pc, #444	; (adr r3, 8007ad8 <__ieee754_pow+0xa10>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fe4f 	bl	80005c0 <__aeabi_dmul>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f8 fc93 	bl	8000254 <__adddf3>
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f8 fc8b 	bl	8000254 <__adddf3>
 800793e:	4632      	mov	r2, r6
 8007940:	4680      	mov	r8, r0
 8007942:	4689      	mov	r9, r1
 8007944:	463b      	mov	r3, r7
 8007946:	f7f8 fc83 	bl	8000250 <__aeabi_dsub>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f8 fc7d 	bl	8000250 <__aeabi_dsub>
 8007956:	4642      	mov	r2, r8
 8007958:	4606      	mov	r6, r0
 800795a:	460f      	mov	r7, r1
 800795c:	464b      	mov	r3, r9
 800795e:	4640      	mov	r0, r8
 8007960:	4649      	mov	r1, r9
 8007962:	f7f8 fe2d 	bl	80005c0 <__aeabi_dmul>
 8007966:	4604      	mov	r4, r0
 8007968:	460d      	mov	r5, r1
 800796a:	a35d      	add	r3, pc, #372	; (adr r3, 8007ae0 <__ieee754_pow+0xa18>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fe26 	bl	80005c0 <__aeabi_dmul>
 8007974:	a35c      	add	r3, pc, #368	; (adr r3, 8007ae8 <__ieee754_pow+0xa20>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fc69 	bl	8000250 <__aeabi_dsub>
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	f7f8 fe1d 	bl	80005c0 <__aeabi_dmul>
 8007986:	a35a      	add	r3, pc, #360	; (adr r3, 8007af0 <__ieee754_pow+0xa28>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 fc62 	bl	8000254 <__adddf3>
 8007990:	4622      	mov	r2, r4
 8007992:	462b      	mov	r3, r5
 8007994:	f7f8 fe14 	bl	80005c0 <__aeabi_dmul>
 8007998:	a357      	add	r3, pc, #348	; (adr r3, 8007af8 <__ieee754_pow+0xa30>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fc57 	bl	8000250 <__aeabi_dsub>
 80079a2:	4622      	mov	r2, r4
 80079a4:	462b      	mov	r3, r5
 80079a6:	f7f8 fe0b 	bl	80005c0 <__aeabi_dmul>
 80079aa:	a355      	add	r3, pc, #340	; (adr r3, 8007b00 <__ieee754_pow+0xa38>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fc50 	bl	8000254 <__adddf3>
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fe02 	bl	80005c0 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f8 fc44 	bl	8000250 <__aeabi_dsub>
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f8 fdf4 	bl	80005c0 <__aeabi_dmul>
 80079d8:	2200      	movs	r2, #0
 80079da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079de:	ec41 0b19 	vmov	d9, r0, r1
 80079e2:	4620      	mov	r0, r4
 80079e4:	4629      	mov	r1, r5
 80079e6:	f7f8 fc33 	bl	8000250 <__aeabi_dsub>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	ec51 0b19 	vmov	r0, r1, d9
 80079f2:	f7f8 ff0f 	bl	8000814 <__aeabi_ddiv>
 80079f6:	4632      	mov	r2, r6
 80079f8:	4604      	mov	r4, r0
 80079fa:	460d      	mov	r5, r1
 80079fc:	463b      	mov	r3, r7
 80079fe:	4640      	mov	r0, r8
 8007a00:	4649      	mov	r1, r9
 8007a02:	f7f8 fddd 	bl	80005c0 <__aeabi_dmul>
 8007a06:	4632      	mov	r2, r6
 8007a08:	463b      	mov	r3, r7
 8007a0a:	f7f8 fc23 	bl	8000254 <__adddf3>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4620      	mov	r0, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7f8 fc1b 	bl	8000250 <__aeabi_dsub>
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	f7f8 fc17 	bl	8000250 <__aeabi_dsub>
 8007a22:	460b      	mov	r3, r1
 8007a24:	4602      	mov	r2, r0
 8007a26:	493a      	ldr	r1, [pc, #232]	; (8007b10 <__ieee754_pow+0xa48>)
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7f8 fc11 	bl	8000250 <__aeabi_dsub>
 8007a2e:	ec41 0b10 	vmov	d0, r0, r1
 8007a32:	ee10 3a90 	vmov	r3, s1
 8007a36:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a3e:	da2b      	bge.n	8007a98 <__ieee754_pow+0x9d0>
 8007a40:	4650      	mov	r0, sl
 8007a42:	f000 f971 	bl	8007d28 <scalbn>
 8007a46:	ec51 0b10 	vmov	r0, r1, d0
 8007a4a:	ec53 2b18 	vmov	r2, r3, d8
 8007a4e:	f7ff bbec 	b.w	800722a <__ieee754_pow+0x162>
 8007a52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a56:	4b2f      	ldr	r3, [pc, #188]	; (8007b14 <__ieee754_pow+0xa4c>)
 8007a58:	429e      	cmp	r6, r3
 8007a5a:	f77f af0b 	ble.w	8007874 <__ieee754_pow+0x7ac>
 8007a5e:	4b2e      	ldr	r3, [pc, #184]	; (8007b18 <__ieee754_pow+0xa50>)
 8007a60:	440b      	add	r3, r1
 8007a62:	4303      	orrs	r3, r0
 8007a64:	d009      	beq.n	8007a7a <__ieee754_pow+0x9b2>
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	ec51 0b18 	vmov	r0, r1, d8
 8007a6e:	f7f9 f819 	bl	8000aa4 <__aeabi_dcmplt>
 8007a72:	3800      	subs	r0, #0
 8007a74:	bf18      	it	ne
 8007a76:	2001      	movne	r0, #1
 8007a78:	e446      	b.n	8007308 <__ieee754_pow+0x240>
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	f7f8 fbe7 	bl	8000250 <__aeabi_dsub>
 8007a82:	4642      	mov	r2, r8
 8007a84:	464b      	mov	r3, r9
 8007a86:	f7f9 f821 	bl	8000acc <__aeabi_dcmpge>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f43f aef2 	beq.w	8007874 <__ieee754_pow+0x7ac>
 8007a90:	e7e9      	b.n	8007a66 <__ieee754_pow+0x99e>
 8007a92:	f04f 0a00 	mov.w	sl, #0
 8007a96:	e71a      	b.n	80078ce <__ieee754_pow+0x806>
 8007a98:	ec51 0b10 	vmov	r0, r1, d0
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	e7d4      	b.n	8007a4a <__ieee754_pow+0x982>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	491b      	ldr	r1, [pc, #108]	; (8007b10 <__ieee754_pow+0xa48>)
 8007aa4:	f7ff bb2f 	b.w	8007106 <__ieee754_pow+0x3e>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	f7ff bb2b 	b.w	8007106 <__ieee754_pow+0x3e>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	f7ff bb27 	b.w	8007106 <__ieee754_pow+0x3e>
 8007ab8:	9204      	str	r2, [sp, #16]
 8007aba:	f7ff bb79 	b.w	80071b0 <__ieee754_pow+0xe8>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f7ff bb63 	b.w	800718a <__ieee754_pow+0xc2>
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	3fe62e43 	.word	0x3fe62e43
 8007ad0:	fefa39ef 	.word	0xfefa39ef
 8007ad4:	3fe62e42 	.word	0x3fe62e42
 8007ad8:	0ca86c39 	.word	0x0ca86c39
 8007adc:	be205c61 	.word	0xbe205c61
 8007ae0:	72bea4d0 	.word	0x72bea4d0
 8007ae4:	3e663769 	.word	0x3e663769
 8007ae8:	c5d26bf1 	.word	0xc5d26bf1
 8007aec:	3ebbbd41 	.word	0x3ebbbd41
 8007af0:	af25de2c 	.word	0xaf25de2c
 8007af4:	3f11566a 	.word	0x3f11566a
 8007af8:	16bebd93 	.word	0x16bebd93
 8007afc:	3f66c16c 	.word	0x3f66c16c
 8007b00:	5555553e 	.word	0x5555553e
 8007b04:	3fc55555 	.word	0x3fc55555
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	000fffff 	.word	0x000fffff
 8007b10:	3ff00000 	.word	0x3ff00000
 8007b14:	4090cbff 	.word	0x4090cbff
 8007b18:	3f6f3400 	.word	0x3f6f3400
 8007b1c:	652b82fe 	.word	0x652b82fe
 8007b20:	3c971547 	.word	0x3c971547

08007b24 <__ieee754_sqrt>:
 8007b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b28:	4e59      	ldr	r6, [pc, #356]	; (8007c90 <__ieee754_sqrt+0x16c>)
 8007b2a:	ee10 0a10 	vmov	r0, s0
 8007b2e:	ee10 3a10 	vmov	r3, s0
 8007b32:	ec55 4b10 	vmov	r4, r5, d0
 8007b36:	43ae      	bics	r6, r5
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	d110      	bne.n	8007b60 <__ieee754_sqrt+0x3c>
 8007b3e:	ee10 2a10 	vmov	r2, s0
 8007b42:	462b      	mov	r3, r5
 8007b44:	f7f8 fd3c 	bl	80005c0 <__aeabi_dmul>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	f7f8 fb80 	bl	8000254 <__adddf3>
 8007b54:	4604      	mov	r4, r0
 8007b56:	460d      	mov	r5, r1
 8007b58:	ec45 4b10 	vmov	d0, r4, r5
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	dc10      	bgt.n	8007b86 <__ieee754_sqrt+0x62>
 8007b64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b68:	4330      	orrs	r0, r6
 8007b6a:	d0f5      	beq.n	8007b58 <__ieee754_sqrt+0x34>
 8007b6c:	b15d      	cbz	r5, 8007b86 <__ieee754_sqrt+0x62>
 8007b6e:	ee10 2a10 	vmov	r2, s0
 8007b72:	462b      	mov	r3, r5
 8007b74:	ee10 0a10 	vmov	r0, s0
 8007b78:	f7f8 fb6a 	bl	8000250 <__aeabi_dsub>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	f7f8 fe48 	bl	8000814 <__aeabi_ddiv>
 8007b84:	e7e6      	b.n	8007b54 <__ieee754_sqrt+0x30>
 8007b86:	1512      	asrs	r2, r2, #20
 8007b88:	d07a      	beq.n	8007c80 <__ieee754_sqrt+0x15c>
 8007b8a:	07d4      	lsls	r4, r2, #31
 8007b8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007b90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	bf58      	it	pl
 8007b9a:	0fda      	lsrpl	r2, r3, #31
 8007b9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007ba0:	bf58      	it	pl
 8007ba2:	005b      	lslpl	r3, r3, #1
 8007ba4:	f04f 0516 	mov.w	r5, #22
 8007ba8:	bf58      	it	pl
 8007baa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007bae:	4620      	mov	r0, r4
 8007bb0:	0fda      	lsrs	r2, r3, #31
 8007bb2:	107f      	asrs	r7, r7, #1
 8007bb4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007bb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	1886      	adds	r6, r0, r2
 8007bc0:	428e      	cmp	r6, r1
 8007bc2:	bfde      	ittt	le
 8007bc4:	1b89      	suble	r1, r1, r6
 8007bc6:	18b0      	addle	r0, r6, r2
 8007bc8:	18a4      	addle	r4, r4, r2
 8007bca:	3d01      	subs	r5, #1
 8007bcc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007bd0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007bd4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bdc:	d1ef      	bne.n	8007bbe <__ieee754_sqrt+0x9a>
 8007bde:	462a      	mov	r2, r5
 8007be0:	f04f 0e20 	mov.w	lr, #32
 8007be4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007be8:	4281      	cmp	r1, r0
 8007bea:	eb06 0c05 	add.w	ip, r6, r5
 8007bee:	dc02      	bgt.n	8007bf6 <__ieee754_sqrt+0xd2>
 8007bf0:	d113      	bne.n	8007c1a <__ieee754_sqrt+0xf6>
 8007bf2:	459c      	cmp	ip, r3
 8007bf4:	d811      	bhi.n	8007c1a <__ieee754_sqrt+0xf6>
 8007bf6:	f1bc 0f00 	cmp.w	ip, #0
 8007bfa:	eb0c 0506 	add.w	r5, ip, r6
 8007bfe:	da44      	bge.n	8007c8a <__ieee754_sqrt+0x166>
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	db42      	blt.n	8007c8a <__ieee754_sqrt+0x166>
 8007c04:	f100 0801 	add.w	r8, r0, #1
 8007c08:	1a09      	subs	r1, r1, r0
 8007c0a:	459c      	cmp	ip, r3
 8007c0c:	4432      	add	r2, r6
 8007c0e:	eba3 030c 	sub.w	r3, r3, ip
 8007c12:	bf88      	it	hi
 8007c14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007c18:	4640      	mov	r0, r8
 8007c1a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007c1e:	f1be 0e01 	subs.w	lr, lr, #1
 8007c22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c26:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007c2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007c2e:	d1db      	bne.n	8007be8 <__ieee754_sqrt+0xc4>
 8007c30:	430b      	orrs	r3, r1
 8007c32:	d006      	beq.n	8007c42 <__ieee754_sqrt+0x11e>
 8007c34:	1c50      	adds	r0, r2, #1
 8007c36:	bf13      	iteet	ne
 8007c38:	3201      	addne	r2, #1
 8007c3a:	3401      	addeq	r4, #1
 8007c3c:	4672      	moveq	r2, lr
 8007c3e:	f022 0201 	bicne.w	r2, r2, #1
 8007c42:	1063      	asrs	r3, r4, #1
 8007c44:	07e1      	lsls	r1, r4, #31
 8007c46:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007c4a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c4e:	bf48      	it	mi
 8007c50:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007c54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c58:	4614      	mov	r4, r2
 8007c5a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007c5e:	e77b      	b.n	8007b58 <__ieee754_sqrt+0x34>
 8007c60:	0ad9      	lsrs	r1, r3, #11
 8007c62:	3815      	subs	r0, #21
 8007c64:	055b      	lsls	r3, r3, #21
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d0fa      	beq.n	8007c60 <__ieee754_sqrt+0x13c>
 8007c6a:	02cd      	lsls	r5, r1, #11
 8007c6c:	d50a      	bpl.n	8007c84 <__ieee754_sqrt+0x160>
 8007c6e:	f1c2 0420 	rsb	r4, r2, #32
 8007c72:	1e55      	subs	r5, r2, #1
 8007c74:	fa23 f404 	lsr.w	r4, r3, r4
 8007c78:	4093      	lsls	r3, r2
 8007c7a:	1b42      	subs	r2, r0, r5
 8007c7c:	4321      	orrs	r1, r4
 8007c7e:	e784      	b.n	8007b8a <__ieee754_sqrt+0x66>
 8007c80:	4610      	mov	r0, r2
 8007c82:	e7f0      	b.n	8007c66 <__ieee754_sqrt+0x142>
 8007c84:	0049      	lsls	r1, r1, #1
 8007c86:	3201      	adds	r2, #1
 8007c88:	e7ef      	b.n	8007c6a <__ieee754_sqrt+0x146>
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	e7bc      	b.n	8007c08 <__ieee754_sqrt+0xe4>
 8007c8e:	bf00      	nop
 8007c90:	7ff00000 	.word	0x7ff00000

08007c94 <__ieee754_sqrtf>:
 8007c94:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007c98:	4770      	bx	lr

08007c9a <with_errno>:
 8007c9a:	b570      	push	{r4, r5, r6, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	f000 f8cb 	bl	8007e3c <__errno>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	6006      	str	r6, [r0, #0]
 8007caa:	4620      	mov	r0, r4
 8007cac:	bd70      	pop	{r4, r5, r6, pc}

08007cae <xflow>:
 8007cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	b108      	cbz	r0, 8007cba <xflow+0xc>
 8007cb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8007cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cc6:	f7f8 fc7b 	bl	80005c0 <__aeabi_dmul>
 8007cca:	2222      	movs	r2, #34	; 0x22
 8007ccc:	b003      	add	sp, #12
 8007cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cd2:	f7ff bfe2 	b.w	8007c9a <with_errno>

08007cd6 <__math_uflow>:
 8007cd6:	b508      	push	{r3, lr}
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cde:	f7ff ffe6 	bl	8007cae <xflow>
 8007ce2:	ec41 0b10 	vmov	d0, r0, r1
 8007ce6:	bd08      	pop	{r3, pc}

08007ce8 <__math_oflow>:
 8007ce8:	b508      	push	{r3, lr}
 8007cea:	2200      	movs	r2, #0
 8007cec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007cf0:	f7ff ffdd 	bl	8007cae <xflow>
 8007cf4:	ec41 0b10 	vmov	d0, r0, r1
 8007cf8:	bd08      	pop	{r3, pc}

08007cfa <fabs>:
 8007cfa:	ec51 0b10 	vmov	r0, r1, d0
 8007cfe:	ee10 2a10 	vmov	r2, s0
 8007d02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d06:	ec43 2b10 	vmov	d0, r2, r3
 8007d0a:	4770      	bx	lr

08007d0c <finite>:
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	ed8d 0b00 	vstr	d0, [sp]
 8007d12:	9801      	ldr	r0, [sp, #4]
 8007d14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007d1c:	0fc0      	lsrs	r0, r0, #31
 8007d1e:	b002      	add	sp, #8
 8007d20:	4770      	bx	lr
 8007d22:	0000      	movs	r0, r0
 8007d24:	0000      	movs	r0, r0
	...

08007d28 <scalbn>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	ec55 4b10 	vmov	r4, r5, d0
 8007d2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007d32:	4606      	mov	r6, r0
 8007d34:	462b      	mov	r3, r5
 8007d36:	b99a      	cbnz	r2, 8007d60 <scalbn+0x38>
 8007d38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d3c:	4323      	orrs	r3, r4
 8007d3e:	d036      	beq.n	8007dae <scalbn+0x86>
 8007d40:	4b39      	ldr	r3, [pc, #228]	; (8007e28 <scalbn+0x100>)
 8007d42:	4629      	mov	r1, r5
 8007d44:	2200      	movs	r2, #0
 8007d46:	ee10 0a10 	vmov	r0, s0
 8007d4a:	f7f8 fc39 	bl	80005c0 <__aeabi_dmul>
 8007d4e:	4b37      	ldr	r3, [pc, #220]	; (8007e2c <scalbn+0x104>)
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	429e      	cmp	r6, r3
 8007d56:	da10      	bge.n	8007d7a <scalbn+0x52>
 8007d58:	a32b      	add	r3, pc, #172	; (adr r3, 8007e08 <scalbn+0xe0>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	e03a      	b.n	8007dd6 <scalbn+0xae>
 8007d60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d64:	428a      	cmp	r2, r1
 8007d66:	d10c      	bne.n	8007d82 <scalbn+0x5a>
 8007d68:	ee10 2a10 	vmov	r2, s0
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fa70 	bl	8000254 <__adddf3>
 8007d74:	4604      	mov	r4, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	e019      	b.n	8007dae <scalbn+0x86>
 8007d7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d7e:	460b      	mov	r3, r1
 8007d80:	3a36      	subs	r2, #54	; 0x36
 8007d82:	4432      	add	r2, r6
 8007d84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d88:	428a      	cmp	r2, r1
 8007d8a:	dd08      	ble.n	8007d9e <scalbn+0x76>
 8007d8c:	2d00      	cmp	r5, #0
 8007d8e:	a120      	add	r1, pc, #128	; (adr r1, 8007e10 <scalbn+0xe8>)
 8007d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d94:	da1c      	bge.n	8007dd0 <scalbn+0xa8>
 8007d96:	a120      	add	r1, pc, #128	; (adr r1, 8007e18 <scalbn+0xf0>)
 8007d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d9c:	e018      	b.n	8007dd0 <scalbn+0xa8>
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	dd08      	ble.n	8007db4 <scalbn+0x8c>
 8007da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007da6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007daa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007dae:	ec45 4b10 	vmov	d0, r4, r5
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007db8:	da19      	bge.n	8007dee <scalbn+0xc6>
 8007dba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007dbe:	429e      	cmp	r6, r3
 8007dc0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007dc4:	dd0a      	ble.n	8007ddc <scalbn+0xb4>
 8007dc6:	a112      	add	r1, pc, #72	; (adr r1, 8007e10 <scalbn+0xe8>)
 8007dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e2      	bne.n	8007d96 <scalbn+0x6e>
 8007dd0:	a30f      	add	r3, pc, #60	; (adr r3, 8007e10 <scalbn+0xe8>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fbf3 	bl	80005c0 <__aeabi_dmul>
 8007dda:	e7cb      	b.n	8007d74 <scalbn+0x4c>
 8007ddc:	a10a      	add	r1, pc, #40	; (adr r1, 8007e08 <scalbn+0xe0>)
 8007dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0b8      	beq.n	8007d58 <scalbn+0x30>
 8007de6:	a10e      	add	r1, pc, #56	; (adr r1, 8007e20 <scalbn+0xf8>)
 8007de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dec:	e7b4      	b.n	8007d58 <scalbn+0x30>
 8007dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007df2:	3236      	adds	r2, #54	; 0x36
 8007df4:	4620      	mov	r0, r4
 8007df6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dfa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <scalbn+0x108>)
 8007e02:	e7e8      	b.n	8007dd6 <scalbn+0xae>
 8007e04:	f3af 8000 	nop.w
 8007e08:	c2f8f359 	.word	0xc2f8f359
 8007e0c:	01a56e1f 	.word	0x01a56e1f
 8007e10:	8800759c 	.word	0x8800759c
 8007e14:	7e37e43c 	.word	0x7e37e43c
 8007e18:	8800759c 	.word	0x8800759c
 8007e1c:	fe37e43c 	.word	0xfe37e43c
 8007e20:	c2f8f359 	.word	0xc2f8f359
 8007e24:	81a56e1f 	.word	0x81a56e1f
 8007e28:	43500000 	.word	0x43500000
 8007e2c:	ffff3cb0 	.word	0xffff3cb0
 8007e30:	3c900000 	.word	0x3c900000

08007e34 <atoi>:
 8007e34:	220a      	movs	r2, #10
 8007e36:	2100      	movs	r1, #0
 8007e38:	f000 b8d4 	b.w	8007fe4 <strtol>

08007e3c <__errno>:
 8007e3c:	4b01      	ldr	r3, [pc, #4]	; (8007e44 <__errno+0x8>)
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000010 	.word	0x20000010

08007e48 <__libc_init_array>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4d0d      	ldr	r5, [pc, #52]	; (8007e80 <__libc_init_array+0x38>)
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	4c0d      	ldr	r4, [pc, #52]	; (8007e84 <__libc_init_array+0x3c>)
 8007e50:	1b64      	subs	r4, r4, r5
 8007e52:	10a4      	asrs	r4, r4, #2
 8007e54:	42a6      	cmp	r6, r4
 8007e56:	d109      	bne.n	8007e6c <__libc_init_array+0x24>
 8007e58:	4d0b      	ldr	r5, [pc, #44]	; (8007e88 <__libc_init_array+0x40>)
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	4c0b      	ldr	r4, [pc, #44]	; (8007e8c <__libc_init_array+0x44>)
 8007e5e:	f000 fd29 	bl	80088b4 <_init>
 8007e62:	1b64      	subs	r4, r4, r5
 8007e64:	10a4      	asrs	r4, r4, #2
 8007e66:	42a6      	cmp	r6, r4
 8007e68:	d105      	bne.n	8007e76 <__libc_init_array+0x2e>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e70:	3601      	adds	r6, #1
 8007e72:	4798      	blx	r3
 8007e74:	e7ee      	b.n	8007e54 <__libc_init_array+0xc>
 8007e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7a:	3601      	adds	r6, #1
 8007e7c:	4798      	blx	r3
 8007e7e:	e7f2      	b.n	8007e66 <__libc_init_array+0x1e>
 8007e80:	08008b1c 	.word	0x08008b1c
 8007e84:	08008b1c 	.word	0x08008b1c
 8007e88:	08008b1c 	.word	0x08008b1c
 8007e8c:	08008b20 	.word	0x08008b20

08007e90 <memset>:
 8007e90:	4402      	add	r2, r0
 8007e92:	4603      	mov	r3, r0
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d100      	bne.n	8007e9a <memset+0xa>
 8007e98:	4770      	bx	lr
 8007e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e9e:	e7f9      	b.n	8007e94 <memset+0x4>

08007ea0 <siprintf>:
 8007ea0:	b40e      	push	{r1, r2, r3}
 8007ea2:	b500      	push	{lr}
 8007ea4:	b09c      	sub	sp, #112	; 0x70
 8007ea6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8007eac:	9002      	str	r0, [sp, #8]
 8007eae:	9006      	str	r0, [sp, #24]
 8007eb0:	9107      	str	r1, [sp, #28]
 8007eb2:	9104      	str	r1, [sp, #16]
 8007eb4:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <siprintf+0x38>)
 8007eb6:	4909      	ldr	r1, [pc, #36]	; (8007edc <siprintf+0x3c>)
 8007eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ebc:	9105      	str	r1, [sp, #20]
 8007ebe:	a902      	add	r1, sp, #8
 8007ec0:	6800      	ldr	r0, [r0, #0]
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	f000 f8f4 	bl	80080b0 <_svfiprintf_r>
 8007ec8:	9b02      	ldr	r3, [sp, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	b01c      	add	sp, #112	; 0x70
 8007ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed4:	b003      	add	sp, #12
 8007ed6:	4770      	bx	lr
 8007ed8:	20000010 	.word	0x20000010
 8007edc:	ffff0208 	.word	0xffff0208

08007ee0 <_strtol_l.constprop.0>:
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee6:	d001      	beq.n	8007eec <_strtol_l.constprop.0+0xc>
 8007ee8:	2b24      	cmp	r3, #36	; 0x24
 8007eea:	d906      	bls.n	8007efa <_strtol_l.constprop.0+0x1a>
 8007eec:	f7ff ffa6 	bl	8007e3c <__errno>
 8007ef0:	2316      	movs	r3, #22
 8007ef2:	6003      	str	r3, [r0, #0]
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efa:	460d      	mov	r5, r1
 8007efc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8007fe0 <_strtol_l.constprop.0+0x100>
 8007f00:	462e      	mov	r6, r5
 8007f02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f06:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f0a:	f017 0708 	ands.w	r7, r7, #8
 8007f0e:	d1f7      	bne.n	8007f00 <_strtol_l.constprop.0+0x20>
 8007f10:	2c2d      	cmp	r4, #45	; 0x2d
 8007f12:	d132      	bne.n	8007f7a <_strtol_l.constprop.0+0x9a>
 8007f14:	782c      	ldrb	r4, [r5, #0]
 8007f16:	2701      	movs	r7, #1
 8007f18:	1cb5      	adds	r5, r6, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d05b      	beq.n	8007fd6 <_strtol_l.constprop.0+0xf6>
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d109      	bne.n	8007f36 <_strtol_l.constprop.0+0x56>
 8007f22:	2c30      	cmp	r4, #48	; 0x30
 8007f24:	d107      	bne.n	8007f36 <_strtol_l.constprop.0+0x56>
 8007f26:	782c      	ldrb	r4, [r5, #0]
 8007f28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f2c:	2c58      	cmp	r4, #88	; 0x58
 8007f2e:	d14d      	bne.n	8007fcc <_strtol_l.constprop.0+0xec>
 8007f30:	786c      	ldrb	r4, [r5, #1]
 8007f32:	2310      	movs	r3, #16
 8007f34:	3502      	adds	r5, #2
 8007f36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f3a:	f04f 0c00 	mov.w	ip, #0
 8007f3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f42:	4666      	mov	r6, ip
 8007f44:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f48:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f50:	f1be 0f09 	cmp.w	lr, #9
 8007f54:	d816      	bhi.n	8007f84 <_strtol_l.constprop.0+0xa4>
 8007f56:	4674      	mov	r4, lr
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	dd24      	ble.n	8007fa6 <_strtol_l.constprop.0+0xc6>
 8007f5c:	f1bc 0f00 	cmp.w	ip, #0
 8007f60:	db1e      	blt.n	8007fa0 <_strtol_l.constprop.0+0xc0>
 8007f62:	45b1      	cmp	r9, r6
 8007f64:	d31c      	bcc.n	8007fa0 <_strtol_l.constprop.0+0xc0>
 8007f66:	d101      	bne.n	8007f6c <_strtol_l.constprop.0+0x8c>
 8007f68:	45a2      	cmp	sl, r4
 8007f6a:	db19      	blt.n	8007fa0 <_strtol_l.constprop.0+0xc0>
 8007f6c:	fb06 4603 	mla	r6, r6, r3, r4
 8007f70:	f04f 0c01 	mov.w	ip, #1
 8007f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f78:	e7e8      	b.n	8007f4c <_strtol_l.constprop.0+0x6c>
 8007f7a:	2c2b      	cmp	r4, #43	; 0x2b
 8007f7c:	bf04      	itt	eq
 8007f7e:	782c      	ldrbeq	r4, [r5, #0]
 8007f80:	1cb5      	addeq	r5, r6, #2
 8007f82:	e7ca      	b.n	8007f1a <_strtol_l.constprop.0+0x3a>
 8007f84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007f88:	f1be 0f19 	cmp.w	lr, #25
 8007f8c:	d801      	bhi.n	8007f92 <_strtol_l.constprop.0+0xb2>
 8007f8e:	3c37      	subs	r4, #55	; 0x37
 8007f90:	e7e2      	b.n	8007f58 <_strtol_l.constprop.0+0x78>
 8007f92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007f96:	f1be 0f19 	cmp.w	lr, #25
 8007f9a:	d804      	bhi.n	8007fa6 <_strtol_l.constprop.0+0xc6>
 8007f9c:	3c57      	subs	r4, #87	; 0x57
 8007f9e:	e7db      	b.n	8007f58 <_strtol_l.constprop.0+0x78>
 8007fa0:	f04f 3cff 	mov.w	ip, #4294967295
 8007fa4:	e7e6      	b.n	8007f74 <_strtol_l.constprop.0+0x94>
 8007fa6:	f1bc 0f00 	cmp.w	ip, #0
 8007faa:	da05      	bge.n	8007fb8 <_strtol_l.constprop.0+0xd8>
 8007fac:	2322      	movs	r3, #34	; 0x22
 8007fae:	4646      	mov	r6, r8
 8007fb0:	6003      	str	r3, [r0, #0]
 8007fb2:	b942      	cbnz	r2, 8007fc6 <_strtol_l.constprop.0+0xe6>
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	e79e      	b.n	8007ef6 <_strtol_l.constprop.0+0x16>
 8007fb8:	b107      	cbz	r7, 8007fbc <_strtol_l.constprop.0+0xdc>
 8007fba:	4276      	negs	r6, r6
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	d0f9      	beq.n	8007fb4 <_strtol_l.constprop.0+0xd4>
 8007fc0:	f1bc 0f00 	cmp.w	ip, #0
 8007fc4:	d000      	beq.n	8007fc8 <_strtol_l.constprop.0+0xe8>
 8007fc6:	1e69      	subs	r1, r5, #1
 8007fc8:	6011      	str	r1, [r2, #0]
 8007fca:	e7f3      	b.n	8007fb4 <_strtol_l.constprop.0+0xd4>
 8007fcc:	2430      	movs	r4, #48	; 0x30
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1b1      	bne.n	8007f36 <_strtol_l.constprop.0+0x56>
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	e7af      	b.n	8007f36 <_strtol_l.constprop.0+0x56>
 8007fd6:	2c30      	cmp	r4, #48	; 0x30
 8007fd8:	d0a5      	beq.n	8007f26 <_strtol_l.constprop.0+0x46>
 8007fda:	230a      	movs	r3, #10
 8007fdc:	e7ab      	b.n	8007f36 <_strtol_l.constprop.0+0x56>
 8007fde:	bf00      	nop
 8007fe0:	080089e1 	.word	0x080089e1

08007fe4 <strtol>:
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <strtol+0x10>)
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f7ff bf77 	b.w	8007ee0 <_strtol_l.constprop.0>
 8007ff2:	bf00      	nop
 8007ff4:	20000010 	.word	0x20000010

08007ff8 <__ssputs_r>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	688e      	ldr	r6, [r1, #8]
 8007ffe:	4682      	mov	sl, r0
 8008000:	460c      	mov	r4, r1
 8008002:	4690      	mov	r8, r2
 8008004:	429e      	cmp	r6, r3
 8008006:	461f      	mov	r7, r3
 8008008:	d838      	bhi.n	800807c <__ssputs_r+0x84>
 800800a:	898a      	ldrh	r2, [r1, #12]
 800800c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008010:	d032      	beq.n	8008078 <__ssputs_r+0x80>
 8008012:	6825      	ldr	r5, [r4, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	6909      	ldr	r1, [r1, #16]
 8008018:	eba5 0901 	sub.w	r9, r5, r1
 800801c:	6965      	ldr	r5, [r4, #20]
 800801e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008022:	444b      	add	r3, r9
 8008024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008028:	106d      	asrs	r5, r5, #1
 800802a:	429d      	cmp	r5, r3
 800802c:	bf38      	it	cc
 800802e:	461d      	movcc	r5, r3
 8008030:	0553      	lsls	r3, r2, #21
 8008032:	d531      	bpl.n	8008098 <__ssputs_r+0xa0>
 8008034:	4629      	mov	r1, r5
 8008036:	f000 fb73 	bl	8008720 <_malloc_r>
 800803a:	4606      	mov	r6, r0
 800803c:	b950      	cbnz	r0, 8008054 <__ssputs_r+0x5c>
 800803e:	230c      	movs	r3, #12
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	f8ca 3000 	str.w	r3, [sl]
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008054:	464a      	mov	r2, r9
 8008056:	6921      	ldr	r1, [r4, #16]
 8008058:	f000 face 	bl	80085f8 <memcpy>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	6126      	str	r6, [r4, #16]
 800806a:	444e      	add	r6, r9
 800806c:	6165      	str	r5, [r4, #20]
 800806e:	eba5 0509 	sub.w	r5, r5, r9
 8008072:	6026      	str	r6, [r4, #0]
 8008074:	463e      	mov	r6, r7
 8008076:	60a5      	str	r5, [r4, #8]
 8008078:	42be      	cmp	r6, r7
 800807a:	d900      	bls.n	800807e <__ssputs_r+0x86>
 800807c:	463e      	mov	r6, r7
 800807e:	4632      	mov	r2, r6
 8008080:	4641      	mov	r1, r8
 8008082:	6820      	ldr	r0, [r4, #0]
 8008084:	f000 fac5 	bl	8008612 <memmove>
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	2000      	movs	r0, #0
 800808c:	1b9b      	subs	r3, r3, r6
 800808e:	60a3      	str	r3, [r4, #8]
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	4433      	add	r3, r6
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	e7db      	b.n	8008050 <__ssputs_r+0x58>
 8008098:	462a      	mov	r2, r5
 800809a:	f000 fbb5 	bl	8008808 <_realloc_r>
 800809e:	4606      	mov	r6, r0
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d1e1      	bne.n	8008068 <__ssputs_r+0x70>
 80080a4:	6921      	ldr	r1, [r4, #16]
 80080a6:	4650      	mov	r0, sl
 80080a8:	f000 face 	bl	8008648 <_free_r>
 80080ac:	e7c7      	b.n	800803e <__ssputs_r+0x46>
	...

080080b0 <_svfiprintf_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	4698      	mov	r8, r3
 80080b6:	898b      	ldrh	r3, [r1, #12]
 80080b8:	b09d      	sub	sp, #116	; 0x74
 80080ba:	4607      	mov	r7, r0
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	460d      	mov	r5, r1
 80080c0:	4614      	mov	r4, r2
 80080c2:	d50e      	bpl.n	80080e2 <_svfiprintf_r+0x32>
 80080c4:	690b      	ldr	r3, [r1, #16]
 80080c6:	b963      	cbnz	r3, 80080e2 <_svfiprintf_r+0x32>
 80080c8:	2140      	movs	r1, #64	; 0x40
 80080ca:	f000 fb29 	bl	8008720 <_malloc_r>
 80080ce:	6028      	str	r0, [r5, #0]
 80080d0:	6128      	str	r0, [r5, #16]
 80080d2:	b920      	cbnz	r0, 80080de <_svfiprintf_r+0x2e>
 80080d4:	230c      	movs	r3, #12
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	e0d1      	b.n	8008282 <_svfiprintf_r+0x1d2>
 80080de:	2340      	movs	r3, #64	; 0x40
 80080e0:	616b      	str	r3, [r5, #20]
 80080e2:	2300      	movs	r3, #0
 80080e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e8:	f04f 0901 	mov.w	r9, #1
 80080ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800829c <_svfiprintf_r+0x1ec>
 80080f0:	9309      	str	r3, [sp, #36]	; 0x24
 80080f2:	2320      	movs	r3, #32
 80080f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f8:	2330      	movs	r3, #48	; 0x30
 80080fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080fe:	4623      	mov	r3, r4
 8008100:	469a      	mov	sl, r3
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	b10a      	cbz	r2, 800810c <_svfiprintf_r+0x5c>
 8008108:	2a25      	cmp	r2, #37	; 0x25
 800810a:	d1f9      	bne.n	8008100 <_svfiprintf_r+0x50>
 800810c:	ebba 0b04 	subs.w	fp, sl, r4
 8008110:	d00b      	beq.n	800812a <_svfiprintf_r+0x7a>
 8008112:	465b      	mov	r3, fp
 8008114:	4622      	mov	r2, r4
 8008116:	4629      	mov	r1, r5
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ff6d 	bl	8007ff8 <__ssputs_r>
 800811e:	3001      	adds	r0, #1
 8008120:	f000 80aa 	beq.w	8008278 <_svfiprintf_r+0x1c8>
 8008124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008126:	445a      	add	r2, fp
 8008128:	9209      	str	r2, [sp, #36]	; 0x24
 800812a:	f89a 3000 	ldrb.w	r3, [sl]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80a2 	beq.w	8008278 <_svfiprintf_r+0x1c8>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	f10a 0a01 	add.w	sl, sl, #1
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	9307      	str	r3, [sp, #28]
 8008142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008146:	931a      	str	r3, [sp, #104]	; 0x68
 8008148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814c:	4654      	mov	r4, sl
 800814e:	2205      	movs	r2, #5
 8008150:	4852      	ldr	r0, [pc, #328]	; (800829c <_svfiprintf_r+0x1ec>)
 8008152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008156:	f000 fa41 	bl	80085dc <memchr>
 800815a:	9a04      	ldr	r2, [sp, #16]
 800815c:	b9d8      	cbnz	r0, 8008196 <_svfiprintf_r+0xe6>
 800815e:	06d0      	lsls	r0, r2, #27
 8008160:	bf44      	itt	mi
 8008162:	2320      	movmi	r3, #32
 8008164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008168:	0711      	lsls	r1, r2, #28
 800816a:	bf44      	itt	mi
 800816c:	232b      	movmi	r3, #43	; 0x2b
 800816e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b2a      	cmp	r3, #42	; 0x2a
 8008178:	d015      	beq.n	80081a6 <_svfiprintf_r+0xf6>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	4654      	mov	r4, sl
 800817e:	2000      	movs	r0, #0
 8008180:	f04f 0c0a 	mov.w	ip, #10
 8008184:	4621      	mov	r1, r4
 8008186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800818a:	3b30      	subs	r3, #48	; 0x30
 800818c:	2b09      	cmp	r3, #9
 800818e:	d94e      	bls.n	800822e <_svfiprintf_r+0x17e>
 8008190:	b1b0      	cbz	r0, 80081c0 <_svfiprintf_r+0x110>
 8008192:	9207      	str	r2, [sp, #28]
 8008194:	e014      	b.n	80081c0 <_svfiprintf_r+0x110>
 8008196:	eba0 0308 	sub.w	r3, r0, r8
 800819a:	46a2      	mov	sl, r4
 800819c:	fa09 f303 	lsl.w	r3, r9, r3
 80081a0:	4313      	orrs	r3, r2
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	e7d2      	b.n	800814c <_svfiprintf_r+0x9c>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	9103      	str	r1, [sp, #12]
 80081b0:	bfbb      	ittet	lt
 80081b2:	425b      	neglt	r3, r3
 80081b4:	f042 0202 	orrlt.w	r2, r2, #2
 80081b8:	9307      	strge	r3, [sp, #28]
 80081ba:	9307      	strlt	r3, [sp, #28]
 80081bc:	bfb8      	it	lt
 80081be:	9204      	strlt	r2, [sp, #16]
 80081c0:	7823      	ldrb	r3, [r4, #0]
 80081c2:	2b2e      	cmp	r3, #46	; 0x2e
 80081c4:	d10c      	bne.n	80081e0 <_svfiprintf_r+0x130>
 80081c6:	7863      	ldrb	r3, [r4, #1]
 80081c8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ca:	d135      	bne.n	8008238 <_svfiprintf_r+0x188>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	3402      	adds	r4, #2
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	9203      	str	r2, [sp, #12]
 80081d8:	bfb8      	it	lt
 80081da:	f04f 33ff 	movlt.w	r3, #4294967295
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082ac <_svfiprintf_r+0x1fc>
 80081e4:	2203      	movs	r2, #3
 80081e6:	7821      	ldrb	r1, [r4, #0]
 80081e8:	4650      	mov	r0, sl
 80081ea:	f000 f9f7 	bl	80085dc <memchr>
 80081ee:	b140      	cbz	r0, 8008202 <_svfiprintf_r+0x152>
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	eba0 000a 	sub.w	r0, r0, sl
 80081f6:	3401      	adds	r4, #1
 80081f8:	fa03 f000 	lsl.w	r0, r3, r0
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	4303      	orrs	r3, r0
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008206:	2206      	movs	r2, #6
 8008208:	4825      	ldr	r0, [pc, #148]	; (80082a0 <_svfiprintf_r+0x1f0>)
 800820a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800820e:	f000 f9e5 	bl	80085dc <memchr>
 8008212:	2800      	cmp	r0, #0
 8008214:	d038      	beq.n	8008288 <_svfiprintf_r+0x1d8>
 8008216:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <_svfiprintf_r+0x1f4>)
 8008218:	bb1b      	cbnz	r3, 8008262 <_svfiprintf_r+0x1b2>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	3307      	adds	r3, #7
 800821e:	f023 0307 	bic.w	r3, r3, #7
 8008222:	3308      	adds	r3, #8
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	4433      	add	r3, r6
 800822a:	9309      	str	r3, [sp, #36]	; 0x24
 800822c:	e767      	b.n	80080fe <_svfiprintf_r+0x4e>
 800822e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008232:	460c      	mov	r4, r1
 8008234:	2001      	movs	r0, #1
 8008236:	e7a5      	b.n	8008184 <_svfiprintf_r+0xd4>
 8008238:	2300      	movs	r3, #0
 800823a:	3401      	adds	r4, #1
 800823c:	f04f 0c0a 	mov.w	ip, #10
 8008240:	4619      	mov	r1, r3
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	4620      	mov	r0, r4
 8008246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824a:	3a30      	subs	r2, #48	; 0x30
 800824c:	2a09      	cmp	r2, #9
 800824e:	d903      	bls.n	8008258 <_svfiprintf_r+0x1a8>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0c5      	beq.n	80081e0 <_svfiprintf_r+0x130>
 8008254:	9105      	str	r1, [sp, #20]
 8008256:	e7c3      	b.n	80081e0 <_svfiprintf_r+0x130>
 8008258:	fb0c 2101 	mla	r1, ip, r1, r2
 800825c:	4604      	mov	r4, r0
 800825e:	2301      	movs	r3, #1
 8008260:	e7f0      	b.n	8008244 <_svfiprintf_r+0x194>
 8008262:	ab03      	add	r3, sp, #12
 8008264:	462a      	mov	r2, r5
 8008266:	a904      	add	r1, sp, #16
 8008268:	4638      	mov	r0, r7
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	4b0e      	ldr	r3, [pc, #56]	; (80082a8 <_svfiprintf_r+0x1f8>)
 800826e:	e000      	b.n	8008272 <_svfiprintf_r+0x1c2>
 8008270:	bf00      	nop
 8008272:	1c42      	adds	r2, r0, #1
 8008274:	4606      	mov	r6, r0
 8008276:	d1d6      	bne.n	8008226 <_svfiprintf_r+0x176>
 8008278:	89ab      	ldrh	r3, [r5, #12]
 800827a:	065b      	lsls	r3, r3, #25
 800827c:	f53f af2c 	bmi.w	80080d8 <_svfiprintf_r+0x28>
 8008280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008282:	b01d      	add	sp, #116	; 0x74
 8008284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008288:	ab03      	add	r3, sp, #12
 800828a:	462a      	mov	r2, r5
 800828c:	a904      	add	r1, sp, #16
 800828e:	4638      	mov	r0, r7
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <_svfiprintf_r+0x1f8>)
 8008294:	f000 f87c 	bl	8008390 <_printf_i>
 8008298:	e7eb      	b.n	8008272 <_svfiprintf_r+0x1c2>
 800829a:	bf00      	nop
 800829c:	08008ae1 	.word	0x08008ae1
 80082a0:	08008aeb 	.word	0x08008aeb
 80082a4:	00000000 	.word	0x00000000
 80082a8:	08007ff9 	.word	0x08007ff9
 80082ac:	08008ae7 	.word	0x08008ae7

080082b0 <_printf_common>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	4699      	mov	r9, r3
 80082b8:	688a      	ldr	r2, [r1, #8]
 80082ba:	4607      	mov	r7, r0
 80082bc:	690b      	ldr	r3, [r1, #16]
 80082be:	460c      	mov	r4, r1
 80082c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082c4:	4293      	cmp	r3, r2
 80082c6:	bfb8      	it	lt
 80082c8:	4613      	movlt	r3, r2
 80082ca:	6033      	str	r3, [r6, #0]
 80082cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082d0:	b10a      	cbz	r2, 80082d6 <_printf_common+0x26>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	0699      	lsls	r1, r3, #26
 80082da:	bf42      	ittt	mi
 80082dc:	6833      	ldrmi	r3, [r6, #0]
 80082de:	3302      	addmi	r3, #2
 80082e0:	6033      	strmi	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d106      	bne.n	80082f8 <_printf_common+0x48>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc29      	bgt.n	800834c <_printf_common+0x9c>
 80082f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082fc:	1e13      	subs	r3, r2, #0
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	bf18      	it	ne
 8008302:	2301      	movne	r3, #1
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d42e      	bmi.n	8008366 <_printf_common+0xb6>
 8008308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800830c:	4649      	mov	r1, r9
 800830e:	4638      	mov	r0, r7
 8008310:	47c0      	blx	r8
 8008312:	3001      	adds	r0, #1
 8008314:	d021      	beq.n	800835a <_printf_common+0xaa>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	341a      	adds	r4, #26
 800831a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800831e:	f003 0306 	and.w	r3, r3, #6
 8008322:	6832      	ldr	r2, [r6, #0]
 8008324:	2600      	movs	r6, #0
 8008326:	2b04      	cmp	r3, #4
 8008328:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800832c:	bf08      	it	eq
 800832e:	1aad      	subeq	r5, r5, r2
 8008330:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008334:	bf14      	ite	ne
 8008336:	2500      	movne	r5, #0
 8008338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800833c:	4293      	cmp	r3, r2
 800833e:	bfc4      	itt	gt
 8008340:	1a9b      	subgt	r3, r3, r2
 8008342:	18ed      	addgt	r5, r5, r3
 8008344:	42b5      	cmp	r5, r6
 8008346:	d11a      	bne.n	800837e <_printf_common+0xce>
 8008348:	2000      	movs	r0, #0
 800834a:	e008      	b.n	800835e <_printf_common+0xae>
 800834c:	2301      	movs	r3, #1
 800834e:	4652      	mov	r2, sl
 8008350:	4649      	mov	r1, r9
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d103      	bne.n	8008362 <_printf_common+0xb2>
 800835a:	f04f 30ff 	mov.w	r0, #4294967295
 800835e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008362:	3501      	adds	r5, #1
 8008364:	e7c3      	b.n	80082ee <_printf_common+0x3e>
 8008366:	18e1      	adds	r1, r4, r3
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	2030      	movs	r0, #48	; 0x30
 800836c:	3302      	adds	r3, #2
 800836e:	4422      	add	r2, r4
 8008370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800837c:	e7c4      	b.n	8008308 <_printf_common+0x58>
 800837e:	2301      	movs	r3, #1
 8008380:	4622      	mov	r2, r4
 8008382:	4649      	mov	r1, r9
 8008384:	4638      	mov	r0, r7
 8008386:	47c0      	blx	r8
 8008388:	3001      	adds	r0, #1
 800838a:	d0e6      	beq.n	800835a <_printf_common+0xaa>
 800838c:	3601      	adds	r6, #1
 800838e:	e7d9      	b.n	8008344 <_printf_common+0x94>

08008390 <_printf_i>:
 8008390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008394:	7e0f      	ldrb	r7, [r1, #24]
 8008396:	4691      	mov	r9, r2
 8008398:	4680      	mov	r8, r0
 800839a:	460c      	mov	r4, r1
 800839c:	2f78      	cmp	r7, #120	; 0x78
 800839e:	469a      	mov	sl, r3
 80083a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083a6:	d807      	bhi.n	80083b8 <_printf_i+0x28>
 80083a8:	2f62      	cmp	r7, #98	; 0x62
 80083aa:	d80a      	bhi.n	80083c2 <_printf_i+0x32>
 80083ac:	2f00      	cmp	r7, #0
 80083ae:	f000 80d8 	beq.w	8008562 <_printf_i+0x1d2>
 80083b2:	2f58      	cmp	r7, #88	; 0x58
 80083b4:	f000 80a3 	beq.w	80084fe <_printf_i+0x16e>
 80083b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083c0:	e03a      	b.n	8008438 <_printf_i+0xa8>
 80083c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083c6:	2b15      	cmp	r3, #21
 80083c8:	d8f6      	bhi.n	80083b8 <_printf_i+0x28>
 80083ca:	a101      	add	r1, pc, #4	; (adr r1, 80083d0 <_printf_i+0x40>)
 80083cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d0:	08008429 	.word	0x08008429
 80083d4:	0800843d 	.word	0x0800843d
 80083d8:	080083b9 	.word	0x080083b9
 80083dc:	080083b9 	.word	0x080083b9
 80083e0:	080083b9 	.word	0x080083b9
 80083e4:	080083b9 	.word	0x080083b9
 80083e8:	0800843d 	.word	0x0800843d
 80083ec:	080083b9 	.word	0x080083b9
 80083f0:	080083b9 	.word	0x080083b9
 80083f4:	080083b9 	.word	0x080083b9
 80083f8:	080083b9 	.word	0x080083b9
 80083fc:	08008549 	.word	0x08008549
 8008400:	0800846d 	.word	0x0800846d
 8008404:	0800852b 	.word	0x0800852b
 8008408:	080083b9 	.word	0x080083b9
 800840c:	080083b9 	.word	0x080083b9
 8008410:	0800856b 	.word	0x0800856b
 8008414:	080083b9 	.word	0x080083b9
 8008418:	0800846d 	.word	0x0800846d
 800841c:	080083b9 	.word	0x080083b9
 8008420:	080083b9 	.word	0x080083b9
 8008424:	08008533 	.word	0x08008533
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	1d1a      	adds	r2, r3, #4
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	602a      	str	r2, [r5, #0]
 8008430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008438:	2301      	movs	r3, #1
 800843a:	e0a3      	b.n	8008584 <_printf_i+0x1f4>
 800843c:	6820      	ldr	r0, [r4, #0]
 800843e:	6829      	ldr	r1, [r5, #0]
 8008440:	0606      	lsls	r6, r0, #24
 8008442:	f101 0304 	add.w	r3, r1, #4
 8008446:	d50a      	bpl.n	800845e <_printf_i+0xce>
 8008448:	680e      	ldr	r6, [r1, #0]
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	2e00      	cmp	r6, #0
 800844e:	da03      	bge.n	8008458 <_printf_i+0xc8>
 8008450:	232d      	movs	r3, #45	; 0x2d
 8008452:	4276      	negs	r6, r6
 8008454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008458:	485e      	ldr	r0, [pc, #376]	; (80085d4 <_printf_i+0x244>)
 800845a:	230a      	movs	r3, #10
 800845c:	e019      	b.n	8008492 <_printf_i+0x102>
 800845e:	680e      	ldr	r6, [r1, #0]
 8008460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	bf18      	it	ne
 8008468:	b236      	sxthne	r6, r6
 800846a:	e7ef      	b.n	800844c <_printf_i+0xbc>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	6820      	ldr	r0, [r4, #0]
 8008470:	1d19      	adds	r1, r3, #4
 8008472:	6029      	str	r1, [r5, #0]
 8008474:	0601      	lsls	r1, r0, #24
 8008476:	d501      	bpl.n	800847c <_printf_i+0xec>
 8008478:	681e      	ldr	r6, [r3, #0]
 800847a:	e002      	b.n	8008482 <_printf_i+0xf2>
 800847c:	0646      	lsls	r6, r0, #25
 800847e:	d5fb      	bpl.n	8008478 <_printf_i+0xe8>
 8008480:	881e      	ldrh	r6, [r3, #0]
 8008482:	2f6f      	cmp	r7, #111	; 0x6f
 8008484:	4853      	ldr	r0, [pc, #332]	; (80085d4 <_printf_i+0x244>)
 8008486:	bf0c      	ite	eq
 8008488:	2308      	moveq	r3, #8
 800848a:	230a      	movne	r3, #10
 800848c:	2100      	movs	r1, #0
 800848e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008492:	6865      	ldr	r5, [r4, #4]
 8008494:	2d00      	cmp	r5, #0
 8008496:	60a5      	str	r5, [r4, #8]
 8008498:	bfa2      	ittt	ge
 800849a:	6821      	ldrge	r1, [r4, #0]
 800849c:	f021 0104 	bicge.w	r1, r1, #4
 80084a0:	6021      	strge	r1, [r4, #0]
 80084a2:	b90e      	cbnz	r6, 80084a8 <_printf_i+0x118>
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	d04d      	beq.n	8008544 <_printf_i+0x1b4>
 80084a8:	4615      	mov	r5, r2
 80084aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ae:	fb03 6711 	mls	r7, r3, r1, r6
 80084b2:	5dc7      	ldrb	r7, [r0, r7]
 80084b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084b8:	4637      	mov	r7, r6
 80084ba:	460e      	mov	r6, r1
 80084bc:	42bb      	cmp	r3, r7
 80084be:	d9f4      	bls.n	80084aa <_printf_i+0x11a>
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d10b      	bne.n	80084dc <_printf_i+0x14c>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07de      	lsls	r6, r3, #31
 80084c8:	d508      	bpl.n	80084dc <_printf_i+0x14c>
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	6861      	ldr	r1, [r4, #4]
 80084ce:	4299      	cmp	r1, r3
 80084d0:	bfde      	ittt	le
 80084d2:	2330      	movle	r3, #48	; 0x30
 80084d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084dc:	1b52      	subs	r2, r2, r5
 80084de:	6122      	str	r2, [r4, #16]
 80084e0:	464b      	mov	r3, r9
 80084e2:	aa03      	add	r2, sp, #12
 80084e4:	4621      	mov	r1, r4
 80084e6:	4640      	mov	r0, r8
 80084e8:	f8cd a000 	str.w	sl, [sp]
 80084ec:	f7ff fee0 	bl	80082b0 <_printf_common>
 80084f0:	3001      	adds	r0, #1
 80084f2:	d14c      	bne.n	800858e <_printf_i+0x1fe>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	b004      	add	sp, #16
 80084fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fe:	4835      	ldr	r0, [pc, #212]	; (80085d4 <_printf_i+0x244>)
 8008500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008504:	6829      	ldr	r1, [r5, #0]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f851 6b04 	ldr.w	r6, [r1], #4
 800850c:	6029      	str	r1, [r5, #0]
 800850e:	061d      	lsls	r5, r3, #24
 8008510:	d514      	bpl.n	800853c <_printf_i+0x1ac>
 8008512:	07df      	lsls	r7, r3, #31
 8008514:	bf44      	itt	mi
 8008516:	f043 0320 	orrmi.w	r3, r3, #32
 800851a:	6023      	strmi	r3, [r4, #0]
 800851c:	b91e      	cbnz	r6, 8008526 <_printf_i+0x196>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f023 0320 	bic.w	r3, r3, #32
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	2310      	movs	r3, #16
 8008528:	e7b0      	b.n	800848c <_printf_i+0xfc>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	f043 0320 	orr.w	r3, r3, #32
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	2378      	movs	r3, #120	; 0x78
 8008534:	4828      	ldr	r0, [pc, #160]	; (80085d8 <_printf_i+0x248>)
 8008536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800853a:	e7e3      	b.n	8008504 <_printf_i+0x174>
 800853c:	0659      	lsls	r1, r3, #25
 800853e:	bf48      	it	mi
 8008540:	b2b6      	uxthmi	r6, r6
 8008542:	e7e6      	b.n	8008512 <_printf_i+0x182>
 8008544:	4615      	mov	r5, r2
 8008546:	e7bb      	b.n	80084c0 <_printf_i+0x130>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	6826      	ldr	r6, [r4, #0]
 800854c:	1d18      	adds	r0, r3, #4
 800854e:	6961      	ldr	r1, [r4, #20]
 8008550:	6028      	str	r0, [r5, #0]
 8008552:	0635      	lsls	r5, r6, #24
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	d501      	bpl.n	800855c <_printf_i+0x1cc>
 8008558:	6019      	str	r1, [r3, #0]
 800855a:	e002      	b.n	8008562 <_printf_i+0x1d2>
 800855c:	0670      	lsls	r0, r6, #25
 800855e:	d5fb      	bpl.n	8008558 <_printf_i+0x1c8>
 8008560:	8019      	strh	r1, [r3, #0]
 8008562:	2300      	movs	r3, #0
 8008564:	4615      	mov	r5, r2
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	e7ba      	b.n	80084e0 <_printf_i+0x150>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	2100      	movs	r1, #0
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	602a      	str	r2, [r5, #0]
 8008572:	681d      	ldr	r5, [r3, #0]
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f830 	bl	80085dc <memchr>
 800857c:	b108      	cbz	r0, 8008582 <_printf_i+0x1f2>
 800857e:	1b40      	subs	r0, r0, r5
 8008580:	6060      	str	r0, [r4, #4]
 8008582:	6863      	ldr	r3, [r4, #4]
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	2300      	movs	r3, #0
 8008588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800858c:	e7a8      	b.n	80084e0 <_printf_i+0x150>
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	462a      	mov	r2, r5
 8008592:	4649      	mov	r1, r9
 8008594:	4640      	mov	r0, r8
 8008596:	47d0      	blx	sl
 8008598:	3001      	adds	r0, #1
 800859a:	d0ab      	beq.n	80084f4 <_printf_i+0x164>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	079b      	lsls	r3, r3, #30
 80085a0:	d413      	bmi.n	80085ca <_printf_i+0x23a>
 80085a2:	68e0      	ldr	r0, [r4, #12]
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	4298      	cmp	r0, r3
 80085a8:	bfb8      	it	lt
 80085aa:	4618      	movlt	r0, r3
 80085ac:	e7a4      	b.n	80084f8 <_printf_i+0x168>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4632      	mov	r2, r6
 80085b2:	4649      	mov	r1, r9
 80085b4:	4640      	mov	r0, r8
 80085b6:	47d0      	blx	sl
 80085b8:	3001      	adds	r0, #1
 80085ba:	d09b      	beq.n	80084f4 <_printf_i+0x164>
 80085bc:	3501      	adds	r5, #1
 80085be:	68e3      	ldr	r3, [r4, #12]
 80085c0:	9903      	ldr	r1, [sp, #12]
 80085c2:	1a5b      	subs	r3, r3, r1
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dcf2      	bgt.n	80085ae <_printf_i+0x21e>
 80085c8:	e7eb      	b.n	80085a2 <_printf_i+0x212>
 80085ca:	2500      	movs	r5, #0
 80085cc:	f104 0619 	add.w	r6, r4, #25
 80085d0:	e7f5      	b.n	80085be <_printf_i+0x22e>
 80085d2:	bf00      	nop
 80085d4:	08008af2 	.word	0x08008af2
 80085d8:	08008b03 	.word	0x08008b03

080085dc <memchr>:
 80085dc:	b2c9      	uxtb	r1, r1
 80085de:	4402      	add	r2, r0
 80085e0:	b510      	push	{r4, lr}
 80085e2:	4290      	cmp	r0, r2
 80085e4:	4603      	mov	r3, r0
 80085e6:	d101      	bne.n	80085ec <memchr+0x10>
 80085e8:	2300      	movs	r3, #0
 80085ea:	e003      	b.n	80085f4 <memchr+0x18>
 80085ec:	781c      	ldrb	r4, [r3, #0]
 80085ee:	3001      	adds	r0, #1
 80085f0:	428c      	cmp	r4, r1
 80085f2:	d1f6      	bne.n	80085e2 <memchr+0x6>
 80085f4:	4618      	mov	r0, r3
 80085f6:	bd10      	pop	{r4, pc}

080085f8 <memcpy>:
 80085f8:	440a      	add	r2, r1
 80085fa:	1e43      	subs	r3, r0, #1
 80085fc:	4291      	cmp	r1, r2
 80085fe:	d100      	bne.n	8008602 <memcpy+0xa>
 8008600:	4770      	bx	lr
 8008602:	b510      	push	{r4, lr}
 8008604:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008608:	4291      	cmp	r1, r2
 800860a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800860e:	d1f9      	bne.n	8008604 <memcpy+0xc>
 8008610:	bd10      	pop	{r4, pc}

08008612 <memmove>:
 8008612:	4288      	cmp	r0, r1
 8008614:	b510      	push	{r4, lr}
 8008616:	eb01 0402 	add.w	r4, r1, r2
 800861a:	d902      	bls.n	8008622 <memmove+0x10>
 800861c:	4284      	cmp	r4, r0
 800861e:	4623      	mov	r3, r4
 8008620:	d807      	bhi.n	8008632 <memmove+0x20>
 8008622:	1e43      	subs	r3, r0, #1
 8008624:	42a1      	cmp	r1, r4
 8008626:	d008      	beq.n	800863a <memmove+0x28>
 8008628:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008630:	e7f8      	b.n	8008624 <memmove+0x12>
 8008632:	4402      	add	r2, r0
 8008634:	4601      	mov	r1, r0
 8008636:	428a      	cmp	r2, r1
 8008638:	d100      	bne.n	800863c <memmove+0x2a>
 800863a:	bd10      	pop	{r4, pc}
 800863c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008640:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008644:	e7f7      	b.n	8008636 <memmove+0x24>
	...

08008648 <_free_r>:
 8008648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800864a:	2900      	cmp	r1, #0
 800864c:	d043      	beq.n	80086d6 <_free_r+0x8e>
 800864e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008652:	1f0c      	subs	r4, r1, #4
 8008654:	9001      	str	r0, [sp, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfb8      	it	lt
 800865a:	18e4      	addlt	r4, r4, r3
 800865c:	f000 f914 	bl	8008888 <__malloc_lock>
 8008660:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <_free_r+0x94>)
 8008662:	9801      	ldr	r0, [sp, #4]
 8008664:	6813      	ldr	r3, [r2, #0]
 8008666:	b933      	cbnz	r3, 8008676 <_free_r+0x2e>
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	6014      	str	r4, [r2, #0]
 800866c:	b003      	add	sp, #12
 800866e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008672:	f000 b90f 	b.w	8008894 <__malloc_unlock>
 8008676:	42a3      	cmp	r3, r4
 8008678:	d908      	bls.n	800868c <_free_r+0x44>
 800867a:	6825      	ldr	r5, [r4, #0]
 800867c:	1961      	adds	r1, r4, r5
 800867e:	428b      	cmp	r3, r1
 8008680:	bf01      	itttt	eq
 8008682:	6819      	ldreq	r1, [r3, #0]
 8008684:	685b      	ldreq	r3, [r3, #4]
 8008686:	1949      	addeq	r1, r1, r5
 8008688:	6021      	streq	r1, [r4, #0]
 800868a:	e7ed      	b.n	8008668 <_free_r+0x20>
 800868c:	461a      	mov	r2, r3
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	b10b      	cbz	r3, 8008696 <_free_r+0x4e>
 8008692:	42a3      	cmp	r3, r4
 8008694:	d9fa      	bls.n	800868c <_free_r+0x44>
 8008696:	6811      	ldr	r1, [r2, #0]
 8008698:	1855      	adds	r5, r2, r1
 800869a:	42a5      	cmp	r5, r4
 800869c:	d10b      	bne.n	80086b6 <_free_r+0x6e>
 800869e:	6824      	ldr	r4, [r4, #0]
 80086a0:	4421      	add	r1, r4
 80086a2:	1854      	adds	r4, r2, r1
 80086a4:	6011      	str	r1, [r2, #0]
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	d1e0      	bne.n	800866c <_free_r+0x24>
 80086aa:	681c      	ldr	r4, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	4421      	add	r1, r4
 80086b0:	6053      	str	r3, [r2, #4]
 80086b2:	6011      	str	r1, [r2, #0]
 80086b4:	e7da      	b.n	800866c <_free_r+0x24>
 80086b6:	d902      	bls.n	80086be <_free_r+0x76>
 80086b8:	230c      	movs	r3, #12
 80086ba:	6003      	str	r3, [r0, #0]
 80086bc:	e7d6      	b.n	800866c <_free_r+0x24>
 80086be:	6825      	ldr	r5, [r4, #0]
 80086c0:	1961      	adds	r1, r4, r5
 80086c2:	428b      	cmp	r3, r1
 80086c4:	bf02      	ittt	eq
 80086c6:	6819      	ldreq	r1, [r3, #0]
 80086c8:	685b      	ldreq	r3, [r3, #4]
 80086ca:	1949      	addeq	r1, r1, r5
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	bf08      	it	eq
 80086d0:	6021      	streq	r1, [r4, #0]
 80086d2:	6054      	str	r4, [r2, #4]
 80086d4:	e7ca      	b.n	800866c <_free_r+0x24>
 80086d6:	b003      	add	sp, #12
 80086d8:	bd30      	pop	{r4, r5, pc}
 80086da:	bf00      	nop
 80086dc:	200001f8 	.word	0x200001f8

080086e0 <sbrk_aligned>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	4e0e      	ldr	r6, [pc, #56]	; (800871c <sbrk_aligned+0x3c>)
 80086e4:	460c      	mov	r4, r1
 80086e6:	4605      	mov	r5, r0
 80086e8:	6831      	ldr	r1, [r6, #0]
 80086ea:	b911      	cbnz	r1, 80086f2 <sbrk_aligned+0x12>
 80086ec:	f000 f8bc 	bl	8008868 <_sbrk_r>
 80086f0:	6030      	str	r0, [r6, #0]
 80086f2:	4621      	mov	r1, r4
 80086f4:	4628      	mov	r0, r5
 80086f6:	f000 f8b7 	bl	8008868 <_sbrk_r>
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	d00a      	beq.n	8008714 <sbrk_aligned+0x34>
 80086fe:	1cc4      	adds	r4, r0, #3
 8008700:	f024 0403 	bic.w	r4, r4, #3
 8008704:	42a0      	cmp	r0, r4
 8008706:	d007      	beq.n	8008718 <sbrk_aligned+0x38>
 8008708:	1a21      	subs	r1, r4, r0
 800870a:	4628      	mov	r0, r5
 800870c:	f000 f8ac 	bl	8008868 <_sbrk_r>
 8008710:	3001      	adds	r0, #1
 8008712:	d101      	bne.n	8008718 <sbrk_aligned+0x38>
 8008714:	f04f 34ff 	mov.w	r4, #4294967295
 8008718:	4620      	mov	r0, r4
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	200001fc 	.word	0x200001fc

08008720 <_malloc_r>:
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	1ccd      	adds	r5, r1, #3
 8008726:	4607      	mov	r7, r0
 8008728:	f025 0503 	bic.w	r5, r5, #3
 800872c:	3508      	adds	r5, #8
 800872e:	2d0c      	cmp	r5, #12
 8008730:	bf38      	it	cc
 8008732:	250c      	movcc	r5, #12
 8008734:	2d00      	cmp	r5, #0
 8008736:	db01      	blt.n	800873c <_malloc_r+0x1c>
 8008738:	42a9      	cmp	r1, r5
 800873a:	d905      	bls.n	8008748 <_malloc_r+0x28>
 800873c:	230c      	movs	r3, #12
 800873e:	2600      	movs	r6, #0
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4630      	mov	r0, r6
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	4e2e      	ldr	r6, [pc, #184]	; (8008804 <_malloc_r+0xe4>)
 800874a:	f000 f89d 	bl	8008888 <__malloc_lock>
 800874e:	6833      	ldr	r3, [r6, #0]
 8008750:	461c      	mov	r4, r3
 8008752:	bb34      	cbnz	r4, 80087a2 <_malloc_r+0x82>
 8008754:	4629      	mov	r1, r5
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ffc2 	bl	80086e0 <sbrk_aligned>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	4604      	mov	r4, r0
 8008760:	d14d      	bne.n	80087fe <_malloc_r+0xde>
 8008762:	6834      	ldr	r4, [r6, #0]
 8008764:	4626      	mov	r6, r4
 8008766:	2e00      	cmp	r6, #0
 8008768:	d140      	bne.n	80087ec <_malloc_r+0xcc>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	4631      	mov	r1, r6
 800876e:	4638      	mov	r0, r7
 8008770:	eb04 0803 	add.w	r8, r4, r3
 8008774:	f000 f878 	bl	8008868 <_sbrk_r>
 8008778:	4580      	cmp	r8, r0
 800877a:	d13a      	bne.n	80087f2 <_malloc_r+0xd2>
 800877c:	6821      	ldr	r1, [r4, #0]
 800877e:	3503      	adds	r5, #3
 8008780:	4638      	mov	r0, r7
 8008782:	1a6d      	subs	r5, r5, r1
 8008784:	f025 0503 	bic.w	r5, r5, #3
 8008788:	3508      	adds	r5, #8
 800878a:	2d0c      	cmp	r5, #12
 800878c:	bf38      	it	cc
 800878e:	250c      	movcc	r5, #12
 8008790:	4629      	mov	r1, r5
 8008792:	f7ff ffa5 	bl	80086e0 <sbrk_aligned>
 8008796:	3001      	adds	r0, #1
 8008798:	d02b      	beq.n	80087f2 <_malloc_r+0xd2>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	442b      	add	r3, r5
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	e00e      	b.n	80087c0 <_malloc_r+0xa0>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	1b52      	subs	r2, r2, r5
 80087a6:	d41e      	bmi.n	80087e6 <_malloc_r+0xc6>
 80087a8:	2a0b      	cmp	r2, #11
 80087aa:	d916      	bls.n	80087da <_malloc_r+0xba>
 80087ac:	1961      	adds	r1, r4, r5
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	bf18      	it	ne
 80087b4:	6059      	strne	r1, [r3, #4]
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	bf08      	it	eq
 80087ba:	6031      	streq	r1, [r6, #0]
 80087bc:	5162      	str	r2, [r4, r5]
 80087be:	604b      	str	r3, [r1, #4]
 80087c0:	f104 060b 	add.w	r6, r4, #11
 80087c4:	4638      	mov	r0, r7
 80087c6:	f000 f865 	bl	8008894 <__malloc_unlock>
 80087ca:	1d23      	adds	r3, r4, #4
 80087cc:	f026 0607 	bic.w	r6, r6, #7
 80087d0:	1af2      	subs	r2, r6, r3
 80087d2:	d0b6      	beq.n	8008742 <_malloc_r+0x22>
 80087d4:	1b9b      	subs	r3, r3, r6
 80087d6:	50a3      	str	r3, [r4, r2]
 80087d8:	e7b3      	b.n	8008742 <_malloc_r+0x22>
 80087da:	6862      	ldr	r2, [r4, #4]
 80087dc:	42a3      	cmp	r3, r4
 80087de:	bf0c      	ite	eq
 80087e0:	6032      	streq	r2, [r6, #0]
 80087e2:	605a      	strne	r2, [r3, #4]
 80087e4:	e7ec      	b.n	80087c0 <_malloc_r+0xa0>
 80087e6:	4623      	mov	r3, r4
 80087e8:	6864      	ldr	r4, [r4, #4]
 80087ea:	e7b2      	b.n	8008752 <_malloc_r+0x32>
 80087ec:	4634      	mov	r4, r6
 80087ee:	6876      	ldr	r6, [r6, #4]
 80087f0:	e7b9      	b.n	8008766 <_malloc_r+0x46>
 80087f2:	230c      	movs	r3, #12
 80087f4:	4638      	mov	r0, r7
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	f000 f84c 	bl	8008894 <__malloc_unlock>
 80087fc:	e7a1      	b.n	8008742 <_malloc_r+0x22>
 80087fe:	6025      	str	r5, [r4, #0]
 8008800:	e7de      	b.n	80087c0 <_malloc_r+0xa0>
 8008802:	bf00      	nop
 8008804:	200001f8 	.word	0x200001f8

08008808 <_realloc_r>:
 8008808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880c:	4680      	mov	r8, r0
 800880e:	4614      	mov	r4, r2
 8008810:	460e      	mov	r6, r1
 8008812:	b921      	cbnz	r1, 800881e <_realloc_r+0x16>
 8008814:	4611      	mov	r1, r2
 8008816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800881a:	f7ff bf81 	b.w	8008720 <_malloc_r>
 800881e:	b92a      	cbnz	r2, 800882c <_realloc_r+0x24>
 8008820:	4625      	mov	r5, r4
 8008822:	f7ff ff11 	bl	8008648 <_free_r>
 8008826:	4628      	mov	r0, r5
 8008828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882c:	f000 f838 	bl	80088a0 <_malloc_usable_size_r>
 8008830:	4284      	cmp	r4, r0
 8008832:	4607      	mov	r7, r0
 8008834:	d802      	bhi.n	800883c <_realloc_r+0x34>
 8008836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800883a:	d812      	bhi.n	8008862 <_realloc_r+0x5a>
 800883c:	4621      	mov	r1, r4
 800883e:	4640      	mov	r0, r8
 8008840:	f7ff ff6e 	bl	8008720 <_malloc_r>
 8008844:	4605      	mov	r5, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	d0ed      	beq.n	8008826 <_realloc_r+0x1e>
 800884a:	42bc      	cmp	r4, r7
 800884c:	4622      	mov	r2, r4
 800884e:	4631      	mov	r1, r6
 8008850:	bf28      	it	cs
 8008852:	463a      	movcs	r2, r7
 8008854:	f7ff fed0 	bl	80085f8 <memcpy>
 8008858:	4631      	mov	r1, r6
 800885a:	4640      	mov	r0, r8
 800885c:	f7ff fef4 	bl	8008648 <_free_r>
 8008860:	e7e1      	b.n	8008826 <_realloc_r+0x1e>
 8008862:	4635      	mov	r5, r6
 8008864:	e7df      	b.n	8008826 <_realloc_r+0x1e>
	...

08008868 <_sbrk_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	2300      	movs	r3, #0
 800886c:	4d05      	ldr	r5, [pc, #20]	; (8008884 <_sbrk_r+0x1c>)
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f9 ff2a 	bl	80026cc <_sbrk>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_sbrk_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_sbrk_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	20000200 	.word	0x20000200

08008888 <__malloc_lock>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__malloc_lock+0x8>)
 800888a:	f000 b811 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	20000204 	.word	0x20000204

08008894 <__malloc_unlock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_unlock+0x8>)
 8008896:	f000 b80c 	b.w	80088b2 <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	20000204 	.word	0x20000204

080088a0 <_malloc_usable_size_r>:
 80088a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a4:	1f18      	subs	r0, r3, #4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfbc      	itt	lt
 80088aa:	580b      	ldrlt	r3, [r1, r0]
 80088ac:	18c0      	addlt	r0, r0, r3
 80088ae:	4770      	bx	lr

080088b0 <__retarget_lock_acquire_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <__retarget_lock_release_recursive>:
 80088b2:	4770      	bx	lr

080088b4 <_init>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr

080088c0 <_fini>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr
