
ZP_AirSpeed_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b1c  08005b1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b24  08005b24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08005b9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005b9c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e21d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  0002e2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00030fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282b0  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f03d  00000000  00000000  00059ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff6df  00000000  00000000  00068f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001685fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  0016864c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a24 	.word	0x08005a24

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08005a24 	.word	0x08005a24

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b982 	b.w	8000edc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d148      	bne.n	8000c90 <__udivmoddi4+0xa0>
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	4694      	mov	ip, r2
 8000c02:	d961      	bls.n	8000cc8 <__udivmoddi4+0xd8>
 8000c04:	fab2 f382 	clz	r3, r2
 8000c08:	b143      	cbz	r3, 8000c1c <__udivmoddi4+0x2c>
 8000c0a:	f1c3 0120 	rsb	r1, r3, #32
 8000c0e:	409f      	lsls	r7, r3
 8000c10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c14:	409c      	lsls	r4, r3
 8000c16:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1a:	430f      	orrs	r7, r1
 8000c1c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c20:	fa1f fe8c 	uxth.w	lr, ip
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c2a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c2e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c32:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c36:	4290      	cmp	r0, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x5c>
 8000c3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x5a>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f200 8137 	bhi.w	8000eb8 <__udivmoddi4+0x2c8>
 8000c4a:	463e      	mov	r6, r7
 8000c4c:	1a12      	subs	r2, r2, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c54:	fb01 2210 	mls	r2, r1, r0, r2
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x86>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x84>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 811c 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000c74:	4610      	mov	r0, r2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	2600      	movs	r6, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0x9a>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0xb8>
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	f000 80fd 	beq.w	8000e94 <__udivmoddi4+0x2a4>
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca8:	fab3 f683 	clz	r6, r3
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d14b      	bne.n	8000d48 <__udivmoddi4+0x158>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	f0c0 80f2 	bcc.w	8000e9a <__udivmoddi4+0x2aa>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f240 80ef 	bls.w	8000e9a <__udivmoddi4+0x2aa>
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e3      	beq.n	8000c8a <__udivmoddi4+0x9a>
 8000cc2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cc6:	e7e0      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xdc>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f382 	clz	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 809d 	bne.w	8000e10 <__udivmoddi4+0x220>
 8000cd6:	1a89      	subs	r1, r1, r2
 8000cd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cdc:	b297      	uxth	r7, r2
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000ce6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb07 f002 	mul.w	r0, r7, r2
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d90f      	bls.n	8000d16 <__udivmoddi4+0x126>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cfe:	bf2c      	ite	cs
 8000d00:	f04f 0901 	movcs.w	r9, #1
 8000d04:	f04f 0900 	movcc.w	r9, #0
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	d903      	bls.n	8000d14 <__udivmoddi4+0x124>
 8000d0c:	f1b9 0f00 	cmp.w	r9, #0
 8000d10:	f000 80cf 	beq.w	8000eb2 <__udivmoddi4+0x2c2>
 8000d14:	4642      	mov	r2, r8
 8000d16:	1a09      	subs	r1, r1, r0
 8000d18:	b2a4      	uxth	r4, r4
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x150>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x14e>
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	f200 80b4 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	1be4      	subs	r4, r4, r7
 8000d42:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d46:	e79b      	b.n	8000c80 <__udivmoddi4+0x90>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	40f9      	lsrs	r1, r7
 8000d58:	40b2      	lsls	r2, r6
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	431c      	orrs	r4, r3
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d76:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x1b6>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0b01 	movcs.w	fp, #1
 8000d94:	f04f 0b00 	movcc.w	fp, #0
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x1b4>
 8000d9c:	f1bb 0f00 	cmp.w	fp, #0
 8000da0:	f000 808d 	beq.w	8000ebe <__udivmoddi4+0x2ce>
 8000da4:	46d0      	mov	r8, sl
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dae:	fb09 1110 	mls	r1, r9, r0, r1
 8000db2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dba:	458e      	cmp	lr, r1
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1de>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d201      	bcs.n	8000dcc <__udivmoddi4+0x1dc>
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d87f      	bhi.n	8000ecc <__udivmoddi4+0x2dc>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dda:	4541      	cmp	r1, r8
 8000ddc:	464c      	mov	r4, r9
 8000dde:	46c6      	mov	lr, r8
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x1f8>
 8000de2:	d106      	bne.n	8000df2 <__udivmoddi4+0x202>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d204      	bcs.n	8000df2 <__udivmoddi4+0x202>
 8000de8:	3801      	subs	r0, #1
 8000dea:	ebb9 0402 	subs.w	r4, r9, r2
 8000dee:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d070      	beq.n	8000ed8 <__udivmoddi4+0x2e8>
 8000df6:	1b1a      	subs	r2, r3, r4
 8000df8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfc:	fa22 f306 	lsr.w	r3, r2, r6
 8000e00:	fa01 f707 	lsl.w	r7, r1, r7
 8000e04:	40f1      	lsrs	r1, r6
 8000e06:	2600      	movs	r6, #0
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	e73c      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0020 	rsb	r0, r3, #32
 8000e18:	fa01 f203 	lsl.w	r2, r1, r3
 8000e1c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e20:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e24:	fa24 f100 	lsr.w	r1, r4, r0
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	409c      	lsls	r4, r3
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e34:	0c0a      	lsrs	r2, r1, #16
 8000e36:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e3a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e3e:	fb00 f607 	mul.w	r6, r0, r7
 8000e42:	4296      	cmp	r6, r2
 8000e44:	d90e      	bls.n	8000e64 <__udivmoddi4+0x274>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4296      	cmp	r6, r2
 8000e5a:	d902      	bls.n	8000e62 <__udivmoddi4+0x272>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	d031      	beq.n	8000ec6 <__udivmoddi4+0x2d6>
 8000e62:	4640      	mov	r0, r8
 8000e64:	1b92      	subs	r2, r2, r6
 8000e66:	b289      	uxth	r1, r1
 8000e68:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e6c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e74:	fb06 f207 	mul.w	r2, r6, r7
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x29c>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e84:	d201      	bcs.n	8000e8a <__udivmoddi4+0x29a>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d823      	bhi.n	8000ed2 <__udivmoddi4+0x2e2>
 8000e8a:	4646      	mov	r6, r8
 8000e8c:	1a89      	subs	r1, r1, r2
 8000e8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e92:	e725      	b.n	8000ce0 <__udivmoddi4+0xf0>
 8000e94:	462e      	mov	r6, r5
 8000e96:	4628      	mov	r0, r5
 8000e98:	e6f7      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e9a:	1a84      	subs	r4, r0, r2
 8000e9c:	eb61 0303 	sbc.w	r3, r1, r3
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	461f      	mov	r7, r3
 8000ea4:	e70b      	b.n	8000cbe <__udivmoddi4+0xce>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e749      	b.n	8000d40 <__udivmoddi4+0x150>
 8000eac:	4464      	add	r4, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	e6e1      	b.n	8000c76 <__udivmoddi4+0x86>
 8000eb2:	3a02      	subs	r2, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	e72e      	b.n	8000d16 <__udivmoddi4+0x126>
 8000eb8:	3e02      	subs	r6, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	e6c6      	b.n	8000c4c <__udivmoddi4+0x5c>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e76f      	b.n	8000da6 <__udivmoddi4+0x1b6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	e7cb      	b.n	8000e64 <__udivmoddi4+0x274>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e77d      	b.n	8000dce <__udivmoddi4+0x1de>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	e7d9      	b.n	8000e8c <__udivmoddi4+0x29c>
 8000ed8:	462e      	mov	r6, r5
 8000eda:	e6d6      	b.n	8000c8a <__udivmoddi4+0x9a>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b092      	sub	sp, #72	; 0x48
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fc60 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f93d 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fa0b 	bl	8001308 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f97f 	bl	80011f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 f9bb 	bl	8001270 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Tell AIRSPEED that we want to read from the airspeed sensor
    buf[0] = DF_COMMAND;
 8000efa:	2300      	movs	r3, #0
 8000efc:	703b      	strb	r3, [r7, #0]

    ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)AIRSPEED_ADDR, buf, 1, 50);
 8000efe:	2350      	movs	r3, #80	; 0x50
 8000f00:	b299      	uxth	r1, r3
 8000f02:	463a      	mov	r2, r7
 8000f04:	2332      	movs	r3, #50	; 0x32
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4889      	ldr	r0, [pc, #548]	; (8001130 <main+0x250>)
 8000f0c:	f000 ffdc 	bl	8001ec8 <HAL_I2C_Master_Transmit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ( ret != HAL_OK ) {
 8000f16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d008      	beq.n	8000f30 <main+0x50>
      strcpy((char*)buf, "Error Tx\r\n");
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4a84      	ldr	r2, [pc, #528]	; (8001134 <main+0x254>)
 8000f22:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f24:	c303      	stmia	r3!, {r0, r1}
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	0c12      	lsrs	r2, r2, #16
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e0e7      	b.n	8001100 <main+0x220>
    } else {

      for(int i = 0; i < 5000; i++);
 8000f30:	2300      	movs	r3, #0
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f34:	e002      	b.n	8000f3c <main+0x5c>
 8000f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f38:	3301      	adds	r3, #1
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f42:	4293      	cmp	r3, r2
 8000f44:	ddf7      	ble.n	8000f36 <main+0x56>
      // Read 4 bytes from the airspeed register
      ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)AIRSPEED_ADDR | 0x01, buf, 4, HAL_MAX_DELAY);
 8000f46:	2350      	movs	r3, #80	; 0x50
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b299      	uxth	r1, r3
 8000f50:	463a      	mov	r2, r7
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2304      	movs	r3, #4
 8000f5a:	4875      	ldr	r0, [pc, #468]	; (8001130 <main+0x250>)
 8000f5c:	f001 f8a8 	bl	80020b0 <HAL_I2C_Master_Receive>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if ( ret != HAL_OK ) {
 8000f66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <main+0xa0>
        strcpy((char*)buf, "Error Rx\r\n");
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4a71      	ldr	r2, [pc, #452]	; (8001138 <main+0x258>)
 8000f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f74:	c303      	stmia	r3!, {r0, r1}
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	0c12      	lsrs	r2, r2, #16
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e0bf      	b.n	8001100 <main+0x220>
      } else {

        //interpreting raw data
    	  dp_raw = ((int16_t)buf[0] << 8) + (int16_t)buf[1];
 8000f80:	783b      	ldrb	r3, [r7, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	873b      	strh	r3, [r7, #56]	; 0x38
    	  dp_raw = 0x3FFF & dp_raw;
 8000f92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f98:	873b      	strh	r3, [r7, #56]	; 0x38

    	  dt_raw = ((int16_t)buf[2] << 8) + (int16_t)buf[3];
 8000f9a:	78bb      	ldrb	r3, [r7, #2]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	86fb      	strh	r3, [r7, #54]	; 0x36
    	  dt_raw = (0xFFE0 & dt_raw) >> 5;
 8000fac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fb0:	115b      	asrs	r3, r3, #5
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb8:	86fb      	strh	r3, [r7, #54]	; 0x36

    	//call error when either of the those data is at the max or min value
    	  if (dp_raw  == 0x3FFF || dp_raw  == 0 || dt_raw  == 0x7FF || dt_raw == 0)
 8000fba:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000fbe:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <main+0x102>
 8000fc6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d009      	beq.n	8000fe2 <main+0x102>
 8000fce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fd2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d003      	beq.n	8000fe2 <main+0x102>
 8000fda:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d107      	bne.n	8000ff2 <main+0x112>
    	  {
    		  strcpy((char*)buf, "Error Dx\r\n");
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4a55      	ldr	r2, [pc, #340]	; (800113c <main+0x25c>)
 8000fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe8:	c303      	stmia	r3!, {r0, r1}
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	0c12      	lsrs	r2, r2, #16
 8000ff0:	701a      	strb	r2, [r3, #0]
    	  }

    	//pressure measurement
    	  const float P_max = 100; //what is the range?!!
 8000ff2:	4b53      	ldr	r3, [pc, #332]	; (8001140 <main+0x260>)
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    	  const float P_min = - P_max;
 8000ff6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000ffa:	eef1 7a67 	vneg.f32	s15, s15
 8000ffe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    	  const float PSI_to_Pa = 6894.757f;
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <main+0x264>)
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28

    	  //calculation can be different depend on the output type(A/B)
    	  float diff_press_PSI  = -((dp_raw - 0.1f*16383) * (P_max-P_min)/(0.9f*16383) + P_min);
 8001006:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001148 <main+0x268>
 8001016:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800101a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800101e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001022:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800114c <main+0x26c>
 800102e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001032:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	eef1 7a67 	vneg.f32	s15, s15
 800103e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	  pressure  = diff_press_PSI * PSI_to_Pa;
 8001042:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001046:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800104a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104e:	edc7 7a08 	vstr	s15, [r7, #32]

    	//temperature measurement
    	  temperature  = ((200.0f * dt_raw) / 2047) - 50;
 8001052:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001150 <main+0x270>
 8001062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001066:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001154 <main+0x274>
 800106a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001158 <main+0x278>
 8001072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001076:	edc7 7a07 	vstr	s15, [r7, #28]

    	//airspeed calculation
    	  const float R = 287.5; //some kind of air constant
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <main+0x27c>)
 800107c:	61bb      	str	r3, [r7, #24]
    	  float K = temperature + 273.15; //temp in kelvin
 800107e:	69f8      	ldr	r0, [r7, #28]
 8001080:	f7ff fa46 	bl	8000510 <__aeabi_f2d>
 8001084:	a328      	add	r3, pc, #160	; (adr r3, 8001128 <main+0x248>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff f8e3 	bl	8000254 <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fd43 	bl	8000b20 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	617b      	str	r3, [r7, #20]
    	  float rho = pressure / (R * K); // air density
 800109e:	ed97 7a06 	vldr	s14, [r7, #24]
 80010a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80010ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b2:	edc7 7a04 	vstr	s15, [r7, #16]
    	  airspeed = sqrt((2*pressure) / rho);
 80010b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80010ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010be:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010c6:	ee16 0a90 	vmov	r0, s13
 80010ca:	f7ff fa21 	bl	8000510 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	ec43 2b10 	vmov	d0, r2, r3
 80010d6:	f003 ff11 	bl	8004efc <sqrt>
 80010da:	ec53 2b10 	vmov	r2, r3, d0
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fd1d 	bl	8000b20 <__aeabi_d2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]

        sprintf((char*)buf,
 80010ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f2:	463b      	mov	r3, r7
 80010f4:	ee17 2a90 	vmov	r2, s15
 80010f8:	4919      	ldr	r1, [pc, #100]	; (8001160 <main+0x280>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f814 	bl	8005128 <siprintf>
              ((unsigned int)airspeed));
      }
    }

    // Send out buffer (temperature or error message)
    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001100:	463b      	mov	r3, r7
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f898 	bl	8000238 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	4639      	mov	r1, r7
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	4814      	ldr	r0, [pc, #80]	; (8001164 <main+0x284>)
 8001114:	f003 f8ec 	bl	80042f0 <HAL_UART_Transmit>

    // Wait
    HAL_Delay(500);
 8001118:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111c:	f000 fbbc 	bl	8001898 <HAL_Delay>
    buf[0] = DF_COMMAND;
 8001120:	e6eb      	b.n	8000efa <main+0x1a>
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	66666666 	.word	0x66666666
 800112c:	40711266 	.word	0x40711266
 8001130:	2000008c 	.word	0x2000008c
 8001134:	08005a3c 	.word	0x08005a3c
 8001138:	08005a48 	.word	0x08005a48
 800113c:	08005a54 	.word	0x08005a54
 8001140:	42c80000 	.word	0x42c80000
 8001144:	45d7760e 	.word	0x45d7760e
 8001148:	44ccc99a 	.word	0x44ccc99a
 800114c:	466662cc 	.word	0x466662cc
 8001150:	43480000 	.word	0x43480000
 8001154:	44ffe000 	.word	0x44ffe000
 8001158:	42480000 	.word	0x42480000
 800115c:	438fc000 	.word	0x438fc000
 8001160:	08005a60 	.word	0x08005a60
 8001164:	200000d8 	.word	0x200000d8

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b098      	sub	sp, #96	; 0x60
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2248      	movs	r2, #72	; 0x48
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 ffce 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800118a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800118e:	f001 fb0b 	bl	80027a8 <HAL_PWREx_ControlVoltageScaling>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001198:	f000 f8da 	bl	8001350 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800119c:	2310      	movs	r3, #16
 800119e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fb77 	bl	80028a8 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011c0:	f000 f8c6 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 f845 	bl	800326c <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011e8:	f000 f8b2 	bl	8001350 <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3760      	adds	r7, #96	; 0x60
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_I2C1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <MX_I2C1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_I2C1_Init+0x74>)
 8001200:	f640 6214 	movw	r2, #3604	; 0xe14
 8001204:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 80;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_I2C1_Init+0x74>)
 8001208:	2250      	movs	r2, #80	; 0x50
 800120a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_I2C1_Init+0x74>)
 800120e:	2201      	movs	r2, #1
 8001210:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_I2C1_Init+0x74>)
 8001232:	f000 fdb9 	bl	8001da8 <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f000 f888 	bl	8001350 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_I2C1_Init+0x74>)
 8001244:	f001 fa0a 	bl	800265c <HAL_I2CEx_ConfigAnalogFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800124e:	f000 f87f 	bl	8001350 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_I2C1_Init+0x74>)
 8001256:	f001 fa4c 	bl	80026f2 <HAL_I2CEx_ConfigDigitalFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 f876 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000008c 	.word	0x2000008c
 800126c:	40005400 	.word	0x40005400

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_USART2_UART_Init+0x90>)
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <MX_USART2_UART_Init+0x94>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_USART2_UART_Init+0x90>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_USART2_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_USART2_UART_Init+0x90>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_USART2_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_USART2_UART_Init+0x90>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_USART2_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b8:	4811      	ldr	r0, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012ba:	f002 ffc9 	bl	8004250 <HAL_UART_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012c4:	f000 f844 	bl	8001350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012cc:	f003 fd4c 	bl	8004d68 <HAL_UARTEx_SetTxFifoThreshold>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012d6:	f000 f83b 	bl	8001350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012da:	2100      	movs	r1, #0
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012de:	f003 fd81 	bl	8004de4 <HAL_UARTEx_SetRxFifoThreshold>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012e8:	f000 f832 	bl	8001350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_USART2_UART_Init+0x90>)
 80012ee:	f003 fd02 	bl	8004cf6 <HAL_UARTEx_DisableFifoMode>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012f8:	f000 f82a 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000d8 	.word	0x200000d8
 8001304:	40004400 	.word	0x40004400

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_GPIO_Init+0x44>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <MX_GPIO_Init+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_GPIO_Init+0x44>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_GPIO_Init+0x44>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <MX_GPIO_Init+0x44>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_GPIO_Init+0x44>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0ae      	sub	sp, #184	; 0xb8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2294      	movs	r2, #148	; 0x94
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fea7 	bl	8005118 <memset>
  if(hi2c->Instance==I2C1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_I2C_MspInit+0xb0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d13b      	bne.n	800144c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fa1f 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013ec:	f7ff ffb0 	bl	8001350 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001408:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001422:	2304      	movs	r3, #4
 8001424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800142c:	4619      	mov	r1, r3
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_I2C_MspInit+0xb8>)
 8001430:	f000 fb3a 	bl	8001aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	37b8      	adds	r7, #184	; 0xb8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40021000 	.word	0x40021000
 800145c:	42020400 	.word	0x42020400

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0ae      	sub	sp, #184	; 0xb8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2294      	movs	r2, #148	; 0x94
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fe49 	bl	8005118 <memset>
  if(huart->Instance==USART2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_UART_MspInit+0xb0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d13a      	bne.n	8001506 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001494:	2300      	movs	r3, #0
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4618      	mov	r0, r3
 800149e:	f002 f9c1 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a8:	f7ff ff52 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_UART_MspInit+0xb4>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_UART_MspInit+0xb4>)
 80014b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b6:	6593      	str	r3, [r2, #88]	; 0x58
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_UART_MspInit+0xb4>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_UART_MspInit+0xb4>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <HAL_UART_MspInit+0xb4>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_UART_MspInit+0xb4>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014dc:	230c      	movs	r3, #12
 80014de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f4:	2307      	movs	r3, #7
 80014f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_UART_MspInit+0xb8>)
 8001502:	f000 fad1 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	37b8      	adds	r7, #184	; 0xb8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40004400 	.word	0x40004400
 8001514:	40021000 	.word	0x40021000
 8001518:	42020000 	.word	0x42020000

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f976 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f003 fd90 	bl	80050c4 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20030000 	.word	0x20030000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000168 	.word	0x20000168
 80015d8:	20000180 	.word	0x20000180

080015dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <SystemCoreClockUpdate+0x144>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d107      	bne.n	8001622 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001612:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <SystemCoreClockUpdate+0x144>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e005      	b.n	800162e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001622:	4b48      	ldr	r3, [pc, #288]	; (8001744 <SystemCoreClockUpdate+0x144>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800162e:	4a46      	ldr	r2, [pc, #280]	; (8001748 <SystemCoreClockUpdate+0x148>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <SystemCoreClockUpdate+0x144>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b0c      	cmp	r3, #12
 8001642:	d866      	bhi.n	8001712 <SystemCoreClockUpdate+0x112>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <SystemCoreClockUpdate+0x4c>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	08001681 	.word	0x08001681
 8001650:	08001713 	.word	0x08001713
 8001654:	08001713 	.word	0x08001713
 8001658:	08001713 	.word	0x08001713
 800165c:	08001689 	.word	0x08001689
 8001660:	08001713 	.word	0x08001713
 8001664:	08001713 	.word	0x08001713
 8001668:	08001713 	.word	0x08001713
 800166c:	08001691 	.word	0x08001691
 8001670:	08001713 	.word	0x08001713
 8001674:	08001713 	.word	0x08001713
 8001678:	08001713 	.word	0x08001713
 800167c:	08001699 	.word	0x08001699
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <SystemCoreClockUpdate+0x14c>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6013      	str	r3, [r2, #0]
      break;
 8001686:	e048      	b.n	800171a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <SystemCoreClockUpdate+0x14c>)
 800168a:	4a31      	ldr	r2, [pc, #196]	; (8001750 <SystemCoreClockUpdate+0x150>)
 800168c:	601a      	str	r2, [r3, #0]
      break;
 800168e:	e044      	b.n	800171a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <SystemCoreClockUpdate+0x14c>)
 8001692:	4a2f      	ldr	r2, [pc, #188]	; (8001750 <SystemCoreClockUpdate+0x150>)
 8001694:	601a      	str	r2, [r3, #0]
      break;
 8001696:	e040      	b.n	800171a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <SystemCoreClockUpdate+0x144>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <SystemCoreClockUpdate+0x144>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	3301      	adds	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d003      	beq.n	80016be <SystemCoreClockUpdate+0xbe>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d006      	beq.n	80016ca <SystemCoreClockUpdate+0xca>
 80016bc:	e00b      	b.n	80016d6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80016be:	4a24      	ldr	r2, [pc, #144]	; (8001750 <SystemCoreClockUpdate+0x150>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	613b      	str	r3, [r7, #16]
          break;
 80016c8:	e00b      	b.n	80016e2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <SystemCoreClockUpdate+0x150>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	613b      	str	r3, [r7, #16]
          break;
 80016d4:	e005      	b.n	80016e2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	613b      	str	r3, [r7, #16]
          break;
 80016e0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <SystemCoreClockUpdate+0x144>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <SystemCoreClockUpdate+0x144>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0e5b      	lsrs	r3, r3, #25
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	3301      	adds	r3, #1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	4a0f      	ldr	r2, [pc, #60]	; (800174c <SystemCoreClockUpdate+0x14c>)
 800170e:	6013      	str	r3, [r2, #0]
      break;
 8001710:	e003      	b.n	800171a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <SystemCoreClockUpdate+0x14c>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	6013      	str	r3, [r2, #0]
      break;
 8001718:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <SystemCoreClockUpdate+0x144>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <SystemCoreClockUpdate+0x154>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <SystemCoreClockUpdate+0x14c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <SystemCoreClockUpdate+0x14c>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	08005a80 	.word	0x08005a80
 800174c:	20000000 	.word	0x20000000
 8001750:	00f42400 	.word	0x00f42400
 8001754:	08005a68 	.word	0x08005a68

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800175c:	f7ff ff3e 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001760:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001772:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
	ldr	r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800177a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001782:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001786:	f003 fca3 	bl	80050d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fba9 	bl	8000ee0 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001790:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001794:	08005b2c 	.word	0x08005b2c
	ldr	r0, =_sdata
 8001798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800179c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80017a0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80017a4:	20000180 	.word	0x20000180

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80017b4:	2004      	movs	r0, #4
 80017b6:	f000 f945 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80017ba:	f7ff ff21 	bl	8001600 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017be:	2007      	movs	r0, #7
 80017c0:	f000 f80e 	bl	80017e0 <HAL_InitTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e001      	b.n	80017d4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d0:	f7ff fdc4 	bl	800135c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_InitTick+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_InitTick+0x70>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_InitTick+0x6c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f93f 	bl	8001a8e <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b07      	cmp	r3, #7
 800181a:	d809      	bhi.n	8001830 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f919 	bl	8001a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_InitTick+0x74>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e007      	b.n	8001840 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e004      	b.n	8001840 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	e001      	b.n	8001840 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	2000016c 	.word	0x2000016c

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000016c 	.word	0x2000016c

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0152      	lsls	r2, r2, #5
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0152      	lsls	r2, r2, #5
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	bf28      	it	cs
 80019b6:	2303      	movcs	r3, #3
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3303      	adds	r3, #3
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b04      	subs	r3, #4
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	2107      	movs	r1, #7
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff47 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff5e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff90 	bl	8001998 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5f 	bl	8001944 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb2 	bl	8001a00 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ab6:	e158      	b.n	8001d6a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 814a 	beq.w	8001d64 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d00b      	beq.n	8001af0 <HAL_GPIO_Init+0x48>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d007      	beq.n	8001af0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae4:	2b11      	cmp	r3, #17
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b12      	cmp	r3, #18
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0xea>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d123      	bne.n	8001bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	6939      	ldr	r1, [r7, #16]
 8001bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0203 	and.w	r2, r3, #3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80a4 	beq.w	8001d64 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001c1c:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3318      	adds	r3, #24
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_GPIO_Init+0x2e4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d025      	beq.n	8001c94 <HAL_GPIO_Init+0x1ec>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_GPIO_Init+0x2e8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d01f      	beq.n	8001c90 <HAL_GPIO_Init+0x1e8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_GPIO_Init+0x2ec>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d019      	beq.n	8001c8c <HAL_GPIO_Init+0x1e4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_GPIO_Init+0x1e0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <HAL_GPIO_Init+0x2f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00d      	beq.n	8001c84 <HAL_GPIO_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x2f8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d007      	beq.n	8001c80 <HAL_GPIO_Init+0x1d8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2fc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_GPIO_Init+0x1d4>
 8001c78:	2306      	movs	r3, #6
 8001c7a:	e00c      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	e00a      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c80:	2305      	movs	r3, #5
 8001c82:	e008      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e006      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e004      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_GPIO_Init+0x1ee>
 8001c94:	2300      	movs	r3, #0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	f002 0203 	and.w	r2, r2, #3
 8001c9c:	00d2      	lsls	r2, r2, #3
 8001c9e:	4093      	lsls	r3, r2
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001ca6:	4938      	ldr	r1, [pc, #224]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3318      	adds	r3, #24
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cda:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f ae9f 	bne.w	8001ab8 <HAL_GPIO_Init+0x10>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	4002f400 	.word	0x4002f400
 8001d8c:	42020000 	.word	0x42020000
 8001d90:	42020400 	.word	0x42020400
 8001d94:	42020800 	.word	0x42020800
 8001d98:	42020c00 	.word	0x42020c00
 8001d9c:	42021000 	.word	0x42021000
 8001da0:	42021400 	.word	0x42021400
 8001da4:	42021800 	.word	0x42021800

08001da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e081      	b.n	8001ebe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fae8 	bl	80013a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d104      	bne.n	8001e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	ea42 0103 	orr.w	r1, r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	021a      	lsls	r2, r3, #8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69d9      	ldr	r1, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1a      	ldr	r2, [r3, #32]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	817b      	strh	r3, [r7, #10]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	f040 80da 	bne.w	800209e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0x30>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e0d3      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1d8>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f00:	f7ff fcbe 	bl	8001880 <HAL_GetTick>
 8001f04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2319      	movs	r3, #25
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f9e6 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0be      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2221      	movs	r2, #33	; 0x21
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	893a      	ldrh	r2, [r7, #8]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2bff      	cmp	r3, #255	; 0xff
 8001f52:	d90e      	bls.n	8001f72 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fb48 	bl	8002600 <I2C_TransferConfig>
 8001f70:	e06c      	b.n	800204c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fb37 	bl	8002600 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f92:	e05b      	b.n	800204c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f9e3 	bl	8002364 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e07b      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d034      	beq.n	800204c <HAL_I2C_Master_Transmit+0x184>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d130      	bne.n	800204c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f975 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e04d      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d90e      	bls.n	800202c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	b2da      	uxtb	r2, r3
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	2300      	movs	r3, #0
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 faeb 	bl	8002600 <I2C_TransferConfig>
 800202a:	e00f      	b.n	800204c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	b2da      	uxtb	r2, r3
 800203c:	8979      	ldrh	r1, [r7, #10]
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fada 	bl	8002600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d19e      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f9c2 	bl	80023e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e01a      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2220      	movs	r2, #32
 8002070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_I2C_Master_Transmit+0x1e4>)
 800207e:	400b      	ands	r3, r1
 8002080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	e000      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	80002000 	.word	0x80002000
 80020ac:	fe00e800 	.word	0xfe00e800

080020b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
 80020c0:	4613      	mov	r3, r2
 80020c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	f040 80db 	bne.w	8002288 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Receive+0x30>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0d4      	b.n	800228a <HAL_I2C_Master_Receive+0x1da>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e8:	f7ff fbca 	bl	8001880 <HAL_GetTick>
 80020ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2319      	movs	r3, #25
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f8f2 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0bf      	b.n	800228a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2222      	movs	r2, #34	; 0x22
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2210      	movs	r2, #16
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2bff      	cmp	r3, #255	; 0xff
 800213a:	d90e      	bls.n	800215a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	22ff      	movs	r2, #255	; 0xff
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	b2da      	uxtb	r2, r3
 8002148:	8979      	ldrh	r1, [r7, #10]
 800214a:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_I2C_Master_Receive+0x1e4>)
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fa54 	bl	8002600 <I2C_TransferConfig>
 8002158:	e06d      	b.n	8002236 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_I2C_Master_Receive+0x1e4>)
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fa43 	bl	8002600 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800217a:	e05c      	b.n	8002236 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6a39      	ldr	r1, [r7, #32]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f96b 	bl	800245c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07c      	b.n	800228a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d034      	beq.n	8002236 <HAL_I2C_Master_Receive+0x186>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d130      	bne.n	8002236 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2200      	movs	r2, #0
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f880 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e04d      	b.n	800228a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2bff      	cmp	r3, #255	; 0xff
 80021f6:	d90e      	bls.n	8002216 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	b2da      	uxtb	r2, r3
 8002204:	8979      	ldrh	r1, [r7, #10]
 8002206:	2300      	movs	r3, #0
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f9f6 	bl	8002600 <I2C_TransferConfig>
 8002214:	e00f      	b.n	8002236 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	b2da      	uxtb	r2, r3
 8002226:	8979      	ldrh	r1, [r7, #10]
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f9e5 	bl	8002600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d19d      	bne.n	800217c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	6a39      	ldr	r1, [r7, #32]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f8cd 	bl	80023e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e01a      	b.n	800228a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2220      	movs	r2, #32
 800225a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_I2C_Master_Receive+0x1e8>)
 8002268:	400b      	ands	r3, r1
 800226a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	80002400 	.word	0x80002400
 8002298:	fe00e800 	.word	0xfe00e800

0800229c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d007      	beq.n	80022d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	619a      	str	r2, [r3, #24]
  }
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f4:	e022      	b.n	800233c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d01e      	beq.n	800233c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7ff fabf 	bl	8001880 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d113      	bne.n	800233c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e00f      	b.n	800235c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	429a      	cmp	r2, r3
 8002358:	d0cd      	beq.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002370:	e02c      	b.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f8dc 	bl	8002534 <I2C_IsAcknowledgeFailed>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e02a      	b.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d01e      	beq.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff fa77 	bl	8001880 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d113      	bne.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d1cb      	bne.n	8002372 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f0:	e028      	b.n	8002444 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f89c 	bl	8002534 <I2C_IsAcknowledgeFailed>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e026      	b.n	8002454 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7ff fa3b 	bl	8001880 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d113      	bne.n	8002444 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b20      	cmp	r3, #32
 8002450:	d1cf      	bne.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002468:	e055      	b.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f860 	bl	8002534 <I2C_IsAcknowledgeFailed>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e053      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b20      	cmp	r3, #32
 800248a:	d129      	bne.n	80024e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d105      	bne.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e03f      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e022      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e0:	f7ff f9ce 	bl	8001880 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d302      	bcc.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e007      	b.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d1a2      	bne.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	fe00e800 	.word	0xfe00e800

08002534 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d151      	bne.n	80025f2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800254e:	e022      	b.n	8002596 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d01e      	beq.n	8002596 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002558:	f7ff f992 	bl	8001880 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	d302      	bcc.n	800256e <I2C_IsAcknowledgeFailed+0x3a>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e02e      	b.n	80025f4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d1d5      	bne.n	8002550 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fe71 	bl	800229c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <I2C_IsAcknowledgeFailed+0xc8>)
 80025c6:	400b      	ands	r3, r1
 80025c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fe00e800 	.word	0xfe00e800

08002600 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	4613      	mov	r3, r2
 8002610:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	0d5b      	lsrs	r3, r3, #21
 800261c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <I2C_TransferConfig+0x58>)
 8002622:	430b      	orrs	r3, r1
 8002624:	43db      	mvns	r3, r3
 8002626:	ea02 0103 	and.w	r1, r2, r3
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002630:	7a7b      	ldrb	r3, [r7, #9]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	03ff63ff 	.word	0x03ff63ff

0800265c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	d138      	bne.n	80026e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800267c:	2302      	movs	r3, #2
 800267e:	e032      	b.n	80026e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d139      	bne.n	800277c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002712:	2302      	movs	r3, #2
 8002714:	e033      	b.n	800277e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2224      	movs	r2, #36	; 0x24
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002744:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40007000 	.word	0x40007000

080027a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027b8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80027ba:	f000 f851 	bl	8002860 <HAL_PWREx_SMPS_GetEffectiveMode>
 80027be:	4603      	mov	r3, r0
 80027c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c4:	d101      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e03e      	b.n	8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	d101      	bne.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e035      	b.n	8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d101      	bne.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e02f      	b.n	8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80027f0:	4917      	ldr	r1, [pc, #92]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	09db      	lsrs	r3, r3, #7
 8002806:	2232      	movs	r2, #50	; 0x32
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002818:	e002      	b.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282c:	d102      	bne.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f2      	bne.n	800281a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002840:	d101      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e000      	b.n	8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40007000 	.word	0x40007000
 8002854:	20000000 	.word	0x20000000
 8002858:	0a7c5ac5 	.word	0x0a7c5ac5
 800285c:	cccccccd 	.word	0xcccccccd

08002860 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	e00a      	b.n	8002894 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	e001      	b.n	8002894 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002890:	2300      	movs	r3, #0
 8002892:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40007000 	.word	0x40007000

080028a8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f000 bcd0 	b.w	800325c <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028bc:	4b99      	ldr	r3, [pc, #612]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c6:	4b97      	ldr	r3, [pc, #604]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80e9 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_RCC_OscConfig+0x4a>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	f040 8083 	bne.w	80029f2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d17f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f2:	4b8c      	ldr	r3, [pc, #560]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_RCC_OscConfig+0x64>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f000 bca8 	b.w	800325c <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002910:	4b84      	ldr	r3, [pc, #528]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <HAL_RCC_OscConfig+0x7e>
 800291c:	4b81      	ldr	r3, [pc, #516]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002924:	e005      	b.n	8002932 <HAL_RCC_OscConfig+0x8a>
 8002926:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002932:	4293      	cmp	r3, r2
 8002934:	d224      	bcs.n	8002980 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fe96 	bl	800366c <RCC_SetFlashLatencyFromMSIRange>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f000 bc88 	b.w	800325c <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a74      	ldr	r2, [pc, #464]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b72      	ldr	r3, [pc, #456]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	496f      	ldr	r1, [pc, #444]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296a:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	496a      	ldr	r1, [pc, #424]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
 800297e:	e026      	b.n	80029ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a67      	ldr	r2, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4962      	ldr	r1, [pc, #392]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	495d      	ldr	r1, [pc, #372]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fe55 	bl	800366c <RCC_SetFlashLatencyFromMSIRange>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f000 bc47 	b.w	800325c <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029ce:	f000 fe11 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a54      	ldr	r2, [pc, #336]	; (8002b28 <HAL_RCC_OscConfig+0x280>)
 80029d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d8:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_RCC_OscConfig+0x284>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe feff 	bl	80017e0 <HAL_InitTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d060      	beq.n	8002aae <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	f000 bc35 	b.w	800325c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d039      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a06:	f7fe ff3b 	bl	8001880 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0c:	e00f      	b.n	8002a2e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a0e:	f7fe ff37 	bl	8001880 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d908      	bls.n	8002a2e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f000 bc17 	b.w	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0e9      	beq.n	8002a0e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a39      	ldr	r2, [pc, #228]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	f043 0308 	orr.w	r3, r3, #8
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	4934      	ldr	r1, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	492f      	ldr	r1, [pc, #188]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	e020      	b.n	8002ab0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe ff01 	bl	8001880 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a80:	e00e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a82:	f7fe fefd 	bl	8001880 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d907      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e3dd      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ea      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1da>
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d07e      	beq.n	8002bba <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x226>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d10e      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d10b      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06e      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x310>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d16a      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e3ba      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x256>
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e024      	b.n	8002b48 <HAL_RCC_OscConfig+0x2a0>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b06:	d113      	bne.n	8002b30 <HAL_RCC_OscConfig+0x288>
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a02      	ldr	r2, [pc, #8]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e012      	b.n	8002b48 <HAL_RCC_OscConfig+0x2a0>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	4b8b      	ldr	r3, [pc, #556]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8a      	ldr	r2, [pc, #552]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a87      	ldr	r2, [pc, #540]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fe96 	bl	8001880 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	e00e      	b.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fe92 	bl	8001880 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d907      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b66:	4b7e      	ldr	r3, [pc, #504]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e372      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b76:	4b7a      	ldr	r3, [pc, #488]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ea      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2b0>
 8002b82:	e01a      	b.n	8002bba <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fe7c 	bl	8001880 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	e00e      	b.n	8002baa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fe78 	bl	8001880 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d907      	bls.n	8002baa <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	4b71      	ldr	r3, [pc, #452]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e358      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ea      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2e4>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x330>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d119      	bne.n	8002c06 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d116      	bne.n	8002c06 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd8:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x348>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e335      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4958      	ldr	r1, [pc, #352]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	e04c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d029      	beq.n	8002c62 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a53      	ldr	r2, [pc, #332]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fe31 	bl	8001880 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c20:	e00e      	b.n	8002c40 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fe2d 	bl	8001880 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d907      	bls.n	8002c40 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e30d      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c40:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ea      	beq.n	8002c22 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b44      	ldr	r3, [pc, #272]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	4941      	ldr	r1, [pc, #260]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e01e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fe07 	bl	8001880 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c74:	e00e      	b.n	8002c94 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe fe03 	bl	8001880 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d907      	bls.n	8002c94 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e2e3      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c94:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ea      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d062      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d038      	beq.n	8002d26 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	f023 0310 	bic.w	r3, r3, #16
 8002cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ccc:	e007      	b.n	8002cde <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fe fdc7 	bl	8001880 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fdc3 	bl	8001880 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d908      	bls.n	8002d16 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e2a2      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0e8      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x44e>
 8002d24:	e025      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7fe fda3 	bl	8001880 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3c:	e012      	b.n	8002d64 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fd9f 	bl	8001880 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d90b      	bls.n	8002d64 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <HAL_RCC_OscConfig+0x4b8>)
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e27e      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d64:	4ba8      	ldr	r3, [pc, #672]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e5      	bne.n	8002d3e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 812d 	beq.w	8002fda <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d84:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b9d      	ldr	r3, [pc, #628]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	4a9c      	ldr	r2, [pc, #624]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d9c:	4b9a      	ldr	r3, [pc, #616]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dac:	4b97      	ldr	r3, [pc, #604]	; (800300c <HAL_RCC_OscConfig+0x764>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11e      	bne.n	8002df6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db8:	4b94      	ldr	r3, [pc, #592]	; (800300c <HAL_RCC_OscConfig+0x764>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a93      	ldr	r2, [pc, #588]	; (800300c <HAL_RCC_OscConfig+0x764>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fd5c 	bl	8001880 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dca:	e00e      	b.n	8002dea <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe fd58 	bl	8001880 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d907      	bls.n	8002dea <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x764>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e238      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dea:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0x764>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ea      	beq.n	8002dcc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01f      	beq.n	8002e42 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e0e:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e1e:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	4a78      	ldr	r2, [pc, #480]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2e:	e018      	b.n	8002e62 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e30:	4b75      	ldr	r3, [pc, #468]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a74      	ldr	r2, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	e00f      	b.n	8002e62 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e42:	4b71      	ldr	r3, [pc, #452]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	4a6f      	ldr	r2, [pc, #444]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	4a6b      	ldr	r2, [pc, #428]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e5a:	f023 0304 	bic.w	r3, r3, #4
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d068      	beq.n	8002f3c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fd09 	bl	8001880 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e70:	e011      	b.n	8002e96 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe fd05 	bl	8001880 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d908      	bls.n	8002e96 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e84:	4b60      	ldr	r3, [pc, #384]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1e2      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0e6      	beq.n	8002e72 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d022      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002eb0:	4b55      	ldr	r3, [pc, #340]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a54      	ldr	r2, [pc, #336]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ec0:	e011      	b.n	8002ee6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fcdd 	bl	8001880 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1ba      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ee6:	4b48      	ldr	r3, [pc, #288]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0e6      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x61a>
 8002ef4:	e068      	b.n	8002fc8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ef6:	4b44      	ldr	r3, [pc, #272]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	4a42      	ldr	r2, [pc, #264]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f06:	e011      	b.n	8002f2c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fcba 	bl	8001880 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e197      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e6      	bne.n	8002f08 <HAL_RCC_OscConfig+0x660>
 8002f3a:	e045      	b.n	8002fc8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fca0 	bl	8001880 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f42:	e011      	b.n	8002f68 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fc9c 	bl	8001880 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d908      	bls.n	8002f68 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e179      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e6      	bne.n	8002f44 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d021      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f94:	e011      	b.n	8002fba <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fc73 	bl	8001880 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d908      	bls.n	8002fba <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e150      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e6      	bne.n	8002f96 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04f      	beq.n	8003086 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_RCC_OscConfig+0x760>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fc3f 	bl	8001880 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003004:	e014      	b.n	8003030 <HAL_RCC_OscConfig+0x788>
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003010:	f7fe fc36 	bl	8001880 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d908      	bls.n	8003030 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301e:	4b91      	ldr	r3, [pc, #580]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e115      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003030:	4b8c      	ldr	r3, [pc, #560]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0e8      	beq.n	8003010 <HAL_RCC_OscConfig+0x768>
 800303e:	e022      	b.n	8003086 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003040:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003046:	4a87      	ldr	r2, [pc, #540]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe fc16 	bl	8001880 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003058:	f7fe fc12 	bl	8001880 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d908      	bls.n	8003078 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003066:	4b7f      	ldr	r3, [pc, #508]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0f1      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003078:	4b7a      	ldr	r3, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800307a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e8      	bne.n	8003058 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80e5 	beq.w	800325a <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	4b74      	ldr	r3, [pc, #464]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b0c      	cmp	r3, #12
 800309a:	f000 809f 	beq.w	80031dc <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d166      	bne.n	8003174 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80030ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fbe5 	bl	8001880 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e00e      	b.n	80030d8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fbe1 	bl	8001880 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d907      	bls.n	80030d8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	4b66      	ldr	r3, [pc, #408]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0c1      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d8:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ea      	bne.n	80030ba <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x9c0>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030fe:	0212      	lsls	r2, r2, #8
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003106:	0852      	lsrs	r2, r2, #1
 8003108:	3a01      	subs	r2, #1
 800310a:	0552      	lsls	r2, r2, #21
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0652      	lsls	r2, r2, #25
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800311e:	06d2      	lsls	r2, r2, #27
 8003120:	430a      	orrs	r2, r1
 8003122:	4950      	ldr	r1, [pc, #320]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a4d      	ldr	r2, [pc, #308]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a4a      	ldr	r2, [pc, #296]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fb9e 	bl	8001880 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	e00e      	b.n	8003166 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fb9a 	bl	8001880 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d907      	bls.n	8003166 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e07a      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ea      	beq.n	8003148 <HAL_RCC_OscConfig+0x8a0>
 8003172:	e072      	b.n	800325a <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800317a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003180:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800318c:	4b35      	ldr	r3, [pc, #212]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 800319e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fb6a 	bl	8001880 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	e00e      	b.n	80031ce <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fb66 	bl	8001880 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d907      	bls.n	80031ce <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e046      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ce:	4b25      	ldr	r3, [pc, #148]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ea      	bne.n	80031b0 <HAL_RCC_OscConfig+0x908>
 80031da:	e03e      	b.n	800325a <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e039      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_RCC_OscConfig+0x9bc>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d12c      	bne.n	8003256 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	3b01      	subs	r3, #1
 8003208:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d123      	bne.n	8003256 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11b      	bne.n	8003256 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d113      	bne.n	8003256 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d109      	bne.n	8003256 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	019f800c 	.word	0x019f800c

0800326c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e10d      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d910      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b85      	ldr	r3, [pc, #532]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	4983      	ldr	r1, [pc, #524]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b81      	ldr	r3, [pc, #516]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0f5      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8094 	beq.w	80033ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d134      	bne.n	8003334 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	4b78      	ldr	r3, [pc, #480]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e2      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032da:	f000 fa2b 	bl	8003734 <RCC_GetSysClockFreqFromPLLSource>
 80032de:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4a73      	ldr	r2, [pc, #460]	; (80034b0 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d956      	bls.n	8003396 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032e8:	4b70      	ldr	r3, [pc, #448]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fc:	4a6b      	ldr	r2, [pc, #428]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e045      	b.n	8003396 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03f      	beq.n	8003396 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d13b      	bne.n	8003396 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003326:	4a61      	ldr	r2, [pc, #388]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e030      	b.n	8003396 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333c:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d115      	bne.n	8003374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0a9      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003354:	4b55      	ldr	r3, [pc, #340]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e09d      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	4b51      	ldr	r3, [pc, #324]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e095      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003374:	f000 f8a2 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8003378:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4a4c      	ldr	r2, [pc, #304]	; (80034b0 <HAL_RCC_ClockConfig+0x244>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d909      	bls.n	8003396 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003382:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338a:	4a48      	ldr	r2, [pc, #288]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4942      	ldr	r1, [pc, #264]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fe fa6a 	bl	8001880 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e013      	b.n	80033d8 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe fa66 	bl	8001880 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d90a      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 020c 	and.w	r2, r3, #12
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e063      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 020c 	and.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1e2      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	492a      	ldr	r1, [pc, #168]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
 8003408:	e008      	b.n	800341c <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d105      	bne.n	800341c <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003410:	4b26      	ldr	r3, [pc, #152]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341a:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d210      	bcs.n	800344c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 020f 	bic.w	r2, r3, #15
 8003432:	491d      	ldr	r1, [pc, #116]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_ClockConfig+0x23c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e029      	b.n	80034a0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4911      	ldr	r1, [pc, #68]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4909      	ldr	r1, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x240>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800348a:	f000 f8b3 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 800348e:	4603      	mov	r3, r0
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_RCC_ClockConfig+0x248>)
 8003492:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_ClockConfig+0x24c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe f9a1 	bl	80017e0 <HAL_InitTick>
 800349e:	4603      	mov	r3, r0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40022000 	.word	0x40022000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	04c4b400 	.word	0x04c4b400
 80034b4:	20000000 	.word	0x20000000
 80034b8:	20000004 	.word	0x20000004

080034bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d4:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x34>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d121      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d11e      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034f0:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034fc:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	e005      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800350c:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003518:	4a34      	ldr	r2, [pc, #208]	; (80035ec <HAL_RCC_GetSysClockFreq+0x130>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003520:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d102      	bne.n	800353a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	e004      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d101      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003542:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d146      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800354a:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3301      	adds	r3, #1
 8003560:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d003      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0xb4>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d00d      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0xce>
 800356e:	e019      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003570:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800357a:	68d2      	ldr	r2, [r2, #12]
 800357c:	0a12      	lsrs	r2, r2, #8
 800357e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
        break;
 8003588:	e019      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x134>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003594:	68d2      	ldr	r2, [r2, #12]
 8003596:	0a12      	lsrs	r2, r2, #8
 8003598:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
        break;
 80035a2:	e00c      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035ae:	68d2      	ldr	r2, [r2, #12]
 80035b0:	0a12      	lsrs	r2, r2, #8
 80035b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	617b      	str	r3, [r7, #20]
        break;
 80035bc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	0e5b      	lsrs	r3, r3, #25
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	3301      	adds	r3, #1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035d8:	69bb      	ldr	r3, [r7, #24]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08005a80 	.word	0x08005a80
 80035f0:	00f42400 	.word	0x00f42400

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80035f8:	f7ff ff60 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetHCLKFreq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetHCLKFreq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	08005a68 	.word	0x08005a68

0800361c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003620:	f7ff ffe8 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	08005a78 	.word	0x08005a78

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003648:	f7ff ffd4 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	0adb      	lsrs	r3, r3, #11
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08005a78 	.word	0x08005a78

0800366c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003678:	4b2c      	ldr	r3, [pc, #176]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003684:	f7ff f882 	bl	800278c <HAL_PWREx_GetVoltageRange>
 8003688:	6138      	str	r0, [r7, #16]
 800368a:	e014      	b.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a26      	ldr	r2, [pc, #152]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a4:	f7ff f872 	bl	800278c <HAL_PWREx_GetVoltageRange>
 80036a8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c2:	d10b      	bne.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d919      	bls.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2ba0      	cmp	r3, #160	; 0xa0
 80036ce:	d902      	bls.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036d0:	2302      	movs	r3, #2
 80036d2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80036d4:	e013      	b.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80036da:	e010      	b.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d902      	bls.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036e2:	2303      	movs	r3, #3
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e00a      	b.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d102      	bne.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ee:	2302      	movs	r3, #2
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e004      	b.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b70      	cmp	r3, #112	; 0x70
 80036f8:	d101      	bne.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036fa:	2301      	movs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 020f 	bic.w	r2, r3, #15
 8003706:	490a      	ldr	r1, [pc, #40]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40022000 	.word	0x40022000

08003734 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d118      	bne.n	800377c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003756:	4b30      	ldr	r3, [pc, #192]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e005      	b.n	8003772 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800377c:	4b26      	ldr	r3, [pc, #152]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	3301      	adds	r3, #1
 8003792:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d00d      	beq.n	80037bc <RCC_GetSysClockFreqFromPLLSource+0x88>
 80037a0:	e019      	b.n	80037d6 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a2:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	0a12      	lsrs	r2, r2, #8
 80037b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	613b      	str	r3, [r7, #16]
      break;
 80037ba:	e019      	b.n	80037f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037c6:	68d2      	ldr	r2, [r2, #12]
 80037c8:	0a12      	lsrs	r2, r2, #8
 80037ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	613b      	str	r3, [r7, #16]
      break;
 80037d4:	e00c      	b.n	80037f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037e0:	68d2      	ldr	r2, [r2, #12]
 80037e2:	0a12      	lsrs	r2, r2, #8
 80037e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	613b      	str	r3, [r7, #16]
      break;
 80037ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0e5b      	lsrs	r3, r3, #25
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	3301      	adds	r3, #1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800380a:	683b      	ldr	r3, [r7, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40021000 	.word	0x40021000
 800381c:	08005a80 	.word	0x08005a80
 8003820:	00f42400 	.word	0x00f42400

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003830:	2300      	movs	r3, #0
 8003832:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383c:	2b00      	cmp	r3, #0
 800383e:	d040      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d02a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d825      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d026      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003850:	2b60      	cmp	r3, #96	; 0x60
 8003852:	d821      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d006      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d81d      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d010      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003864:	e018      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003866:	4b8f      	ldr	r3, [pc, #572]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4a8e      	ldr	r2, [pc, #568]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003872:	e015      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb56 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003884:	e00c      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3320      	adds	r3, #32
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fc33 	bl	80040f8 <RCCEx_PLLSAI2_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003896:	e003      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
        break;
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800389e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a0:	7ffb      	ldrb	r3, [r7, #31]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a6:	4b7f      	ldr	r3, [pc, #508]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b4:	497b      	ldr	r1, [pc, #492]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80038bc:	e001      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d047      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d030      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d82a      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e2:	d02a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e8:	d824      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f4:	d81e      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d010      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003900:	e018      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003902:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800390e:	e015      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fb08 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003920:	e00c      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3320      	adds	r3, #32
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fbe5 	bl	80040f8 <RCCEx_PLLSAI2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	77fb      	strb	r3, [r7, #31]
        break;
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	7ffb      	ldrb	r3, [r7, #31]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003942:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003944:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4954      	ldr	r1, [pc, #336]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003958:	e001      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	7ffb      	ldrb	r3, [r7, #31]
 800395c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80ab 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003970:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	4a48      	ldr	r2, [pc, #288]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	6593      	str	r3, [r2, #88]	; 0x58
 8003988:	4b46      	ldr	r3, [pc, #280]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800399e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039a4:	f7fd ff6c 	bl	8001880 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039aa:	e00f      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fd ff68 	bl	8001880 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d908      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80039ca:	e006      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0e9      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x188>
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80039da:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d164      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01f      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d019      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a00:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01f      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd ff1f 	bl	8001880 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a44:	e012      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fd ff1b 	bl	8001880 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d909      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003a6a:	e007      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0e5      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003a7c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a84:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	77bb      	strb	r3, [r7, #30]
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7ffb      	ldrb	r3, [r7, #31]
 8003aae:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b9c      	ldr	r3, [pc, #624]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a9b      	ldr	r2, [pc, #620]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ace:	4b96      	ldr	r3, [pc, #600]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f023 0203 	bic.w	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	4992      	ldr	r1, [pc, #584]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003af0:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 020c 	bic.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	498a      	ldr	r1, [pc, #552]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b12:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	4981      	ldr	r1, [pc, #516]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b34:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4979      	ldr	r1, [pc, #484]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b56:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	4970      	ldr	r1, [pc, #448]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b78:	4b6b      	ldr	r3, [pc, #428]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	4968      	ldr	r1, [pc, #416]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	495f      	ldr	r1, [pc, #380]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bca:	4957      	ldr	r1, [pc, #348]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003bde:	4b52      	ldr	r3, [pc, #328]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bec:	494e      	ldr	r1, [pc, #312]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d031      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c08:	d00e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c0e:	d814      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c18:	d10f      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1a:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a42      	ldr	r2, [pc, #264]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c24:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f97c 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77fb      	strb	r3, [r7, #31]
        break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c48:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c56:	4934      	ldr	r1, [pc, #208]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5e:	e001      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c70:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	492a      	ldr	r1, [pc, #168]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c92:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	4921      	ldr	r1, [pc, #132]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	4919      	ldr	r1, [pc, #100]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	4910      	ldr	r1, [pc, #64]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	4908      	ldr	r1, [pc, #32]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d16:	d109      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a02      	ldr	r2, [pc, #8]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d22:	60d3      	str	r3, [r2, #12]
 8003d24:	e014      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f8f5 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003d46:	7ffb      	ldrb	r3, [r7, #31]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
 8003d4e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d64:	d108      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003d66:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d6c:	4a6e      	ldr	r2, [pc, #440]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d76:	e012      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d78:	4b6b      	ldr	r3, [pc, #428]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d86:	4968      	ldr	r1, [pc, #416]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d8e:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d94:	4a64      	ldr	r2, [pc, #400]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f8bc 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d019      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	77bb      	strb	r3, [r7, #30]
 8003dc2:	e016      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dce:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a55      	ldr	r2, [pc, #340]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd8:	60d3      	str	r3, [r2, #12]
 8003dda:	e00a      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de4:	d105      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003de6:	4b50      	ldr	r3, [pc, #320]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a4f      	ldr	r2, [pc, #316]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0c:	4946      	ldr	r1, [pc, #280]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1e:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a41      	ldr	r2, [pc, #260]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	60d3      	str	r3, [r2, #12]
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f875 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e46:	7ffb      	ldrb	r3, [r7, #31]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003e4c:	7ffb      	ldrb	r3, [r7, #31]
 8003e4e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e6c:	492e      	ldr	r1, [pc, #184]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e7e:	d10c      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	2102      	movs	r1, #2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f850 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e90:	7ffb      	ldrb	r3, [r7, #31]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eac:	f023 0204 	bic.w	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb6:	491c      	ldr	r1, [pc, #112]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ed0:	f023 0218 	bic.w	r2, r3, #24
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	4913      	ldr	r1, [pc, #76]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efe:	490a      	ldr	r1, [pc, #40]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f10:	d105      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003f1e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000

08003f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d018      	beq.n	8003f74 <RCCEx_PLLSAI1_Config+0x48>
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d81f      	bhi.n	8003f86 <RCCEx_PLLSAI1_Config+0x5a>
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d002      	beq.n	8003f50 <RCCEx_PLLSAI1_Config+0x24>
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d009      	beq.n	8003f62 <RCCEx_PLLSAI1_Config+0x36>
 8003f4e:	e01a      	b.n	8003f86 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f50:	4b65      	ldr	r3, [pc, #404]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d117      	bne.n	8003f8c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f60:	e014      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f62:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f72:	e00d      	b.n	8003f90 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003f74:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f84:	e006      	b.n	8003f94 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8a:	e004      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f8c:	bf00      	nop
 8003f8e:	e002      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f94:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 809f 	bne.w	80040dc <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f9e:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a51      	ldr	r2, [pc, #324]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003faa:	f7fd fc69 	bl	8001880 <HAL_GetTick>
 8003fae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb0:	e00f      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb2:	f7fd fc65 	bl	8001880 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d908      	bls.n	8003fd2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc0:	4b49      	ldr	r3, [pc, #292]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fd0:	e006      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fd2:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e9      	bne.n	8003fb2 <RCCEx_PLLSAI1_Config+0x86>
 8003fde:	e000      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003fe0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d179      	bne.n	80040dc <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d116      	bne.n	800401c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fee:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <RCCEx_PLLSAI1_Config+0x1c0>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	0211      	lsls	r1, r2, #8
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68d2      	ldr	r2, [r2, #12]
 8004000:	06d2      	lsls	r2, r2, #27
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6852      	ldr	r2, [r2, #4]
 8004008:	3a01      	subs	r2, #1
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	4311      	orrs	r1, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	4934      	ldr	r1, [pc, #208]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	610b      	str	r3, [r1, #16]
 800401a:	e033      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d118      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004022:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6892      	ldr	r2, [r2, #8]
 800402e:	0211      	lsls	r1, r2, #8
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6912      	ldr	r2, [r2, #16]
 8004034:	0852      	lsrs	r2, r2, #1
 8004036:	3a01      	subs	r2, #1
 8004038:	0552      	lsls	r2, r2, #21
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6852      	ldr	r2, [r2, #4]
 8004040:	3a01      	subs	r2, #1
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	4311      	orrs	r1, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	4926      	ldr	r1, [pc, #152]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	610b      	str	r3, [r1, #16]
 8004052:	e017      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004054:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	0211      	lsls	r1, r2, #8
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6952      	ldr	r2, [r2, #20]
 8004066:	0852      	lsrs	r2, r2, #1
 8004068:	3a01      	subs	r2, #1
 800406a:	0652      	lsls	r2, r2, #25
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6852      	ldr	r2, [r2, #4]
 8004072:	3a01      	subs	r2, #1
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	4311      	orrs	r1, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	491a      	ldr	r1, [pc, #104]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004084:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800408a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800408e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fbf6 	bl	8001880 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004096:	e00f      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004098:	f7fd fbf2 	bl	8001880 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d908      	bls.n	80040b8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80040b6:	e006      	b.n	80040c6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0e9      	beq.n	8004098 <RCCEx_PLLSAI1_Config+0x16c>
 80040c4:	e000      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80040c6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	4904      	ldr	r1, [pc, #16]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	07ff800c 	.word	0x07ff800c
 80040f0:	ff9f800c 	.word	0xff9f800c
 80040f4:	f9ff800c 	.word	0xf9ff800c

080040f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d018      	beq.n	8004140 <RCCEx_PLLSAI2_Config+0x48>
 800410e:	2b03      	cmp	r3, #3
 8004110:	d81f      	bhi.n	8004152 <RCCEx_PLLSAI2_Config+0x5a>
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <RCCEx_PLLSAI2_Config+0x24>
 8004116:	2b02      	cmp	r3, #2
 8004118:	d009      	beq.n	800412e <RCCEx_PLLSAI2_Config+0x36>
 800411a:	e01a      	b.n	8004152 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800411c:	4b4a      	ldr	r3, [pc, #296]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d117      	bne.n	8004158 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e014      	b.n	8004158 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800412e:	4b46      	ldr	r3, [pc, #280]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d110      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413e:	e00d      	b.n	800415c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004140:	4b41      	ldr	r3, [pc, #260]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004150:	e006      	b.n	8004160 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      break;
 8004156:	e004      	b.n	8004162 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004160:	bf00      	nop
  }

  if (status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d169      	bne.n	800423c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004168:	4b37      	ldr	r3, [pc, #220]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a36      	ldr	r2, [pc, #216]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fd fb84 	bl	8001880 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800417a:	e00f      	b.n	800419c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800417c:	f7fd fb80 	bl	8001880 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d908      	bls.n	800419c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418a:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800419a:	e006      	b.n	80041aa <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e9      	bne.n	800417c <RCCEx_PLLSAI2_Config+0x84>
 80041a8:	e000      	b.n	80041ac <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80041aa:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d144      	bne.n	800423c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d115      	bne.n	80041e4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <RCCEx_PLLSAI2_Config+0x154>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	0211      	lsls	r1, r2, #8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	06d2      	lsls	r2, r2, #27
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6852      	ldr	r2, [r2, #4]
 80041d2:	3a01      	subs	r2, #1
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	4311      	orrs	r1, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	491a      	ldr	r1, [pc, #104]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fd fb46 	bl	8001880 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041f6:	e00f      	b.n	8004218 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041f8:	f7fd fb42 	bl	8001880 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d908      	bls.n	8004218 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004216:	e006      	b.n	8004226 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0e9      	beq.n	80041f8 <RCCEx_PLLSAI2_Config+0x100>
 8004224:	e000      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004226:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	4904      	ldr	r1, [pc, #16]	; (8004248 <RCCEx_PLLSAI2_Config+0x150>)
 8004238:	4313      	orrs	r3, r2
 800423a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	07ff800c 	.word	0x07ff800c

08004250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e042      	b.n	80042e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fd f8f3 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2224      	movs	r2, #36	; 0x24
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8c2 	bl	800441c <UART_SetConfig>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fbb6 	bl	8004a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fc3d 	bl	8004b60 <UART_CheckIdleState>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	2b20      	cmp	r3, #32
 8004308:	f040 8083 	bne.w	8004412 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Transmit+0x28>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e07b      	b.n	8004414 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_UART_Transmit+0x3a>
 8004326:	2302      	movs	r3, #2
 8004328:	e074      	b.n	8004414 <HAL_UART_Transmit+0x124>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2221      	movs	r2, #33	; 0x21
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004342:	f7fd fa9d 	bl	8001880 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004360:	d108      	bne.n	8004374 <HAL_UART_Transmit+0x84>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e003      	b.n	800437c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004384:	e02c      	b.n	80043e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fc30 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e039      	b.n	8004414 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3302      	adds	r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e007      	b.n	80043ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1cc      	bne.n	8004386 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2200      	movs	r2, #0
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fbfd 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e006      	b.n	8004414 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b08c      	sub	sp, #48	; 0x30
 8004422:	af00      	add	r7, sp, #0
 8004424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	431a      	orrs	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	431a      	orrs	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4baa      	ldr	r3, [pc, #680]	; (80046f4 <UART_SetConfig+0x2d8>)
 800444c:	4013      	ands	r3, r2
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004454:	430b      	orrs	r3, r1
 8004456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a9f      	ldr	r2, [pc, #636]	; (80046f8 <UART_SetConfig+0x2dc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004484:	4313      	orrs	r3, r2
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004492:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800449c:	430b      	orrs	r3, r1
 800449e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f023 010f 	bic.w	r1, r3, #15
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a90      	ldr	r2, [pc, #576]	; (80046fc <UART_SetConfig+0x2e0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d125      	bne.n	800450c <UART_SetConfig+0xf0>
 80044c0:	4b8f      	ldr	r3, [pc, #572]	; (8004700 <UART_SetConfig+0x2e4>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d81a      	bhi.n	8004504 <UART_SetConfig+0xe8>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0xb8>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044ed 	.word	0x080044ed
 80044e0:	080044fd 	.word	0x080044fd
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ea:	e116      	b.n	800471a <UART_SetConfig+0x2fe>
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f2:	e112      	b.n	800471a <UART_SetConfig+0x2fe>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fa:	e10e      	b.n	800471a <UART_SetConfig+0x2fe>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004502:	e10a      	b.n	800471a <UART_SetConfig+0x2fe>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450a:	e106      	b.n	800471a <UART_SetConfig+0x2fe>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a7c      	ldr	r2, [pc, #496]	; (8004704 <UART_SetConfig+0x2e8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d138      	bne.n	8004588 <UART_SetConfig+0x16c>
 8004516:	4b7a      	ldr	r3, [pc, #488]	; (8004700 <UART_SetConfig+0x2e4>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d82d      	bhi.n	8004580 <UART_SetConfig+0x164>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x110>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004561 	.word	0x08004561
 8004530:	08004581 	.word	0x08004581
 8004534:	08004581 	.word	0x08004581
 8004538:	08004581 	.word	0x08004581
 800453c:	08004571 	.word	0x08004571
 8004540:	08004581 	.word	0x08004581
 8004544:	08004581 	.word	0x08004581
 8004548:	08004581 	.word	0x08004581
 800454c:	08004569 	.word	0x08004569
 8004550:	08004581 	.word	0x08004581
 8004554:	08004581 	.word	0x08004581
 8004558:	08004581 	.word	0x08004581
 800455c:	08004579 	.word	0x08004579
 8004560:	2300      	movs	r3, #0
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004566:	e0d8      	b.n	800471a <UART_SetConfig+0x2fe>
 8004568:	2302      	movs	r3, #2
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456e:	e0d4      	b.n	800471a <UART_SetConfig+0x2fe>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004576:	e0d0      	b.n	800471a <UART_SetConfig+0x2fe>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457e:	e0cc      	b.n	800471a <UART_SetConfig+0x2fe>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004586:	e0c8      	b.n	800471a <UART_SetConfig+0x2fe>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a5e      	ldr	r2, [pc, #376]	; (8004708 <UART_SetConfig+0x2ec>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d125      	bne.n	80045de <UART_SetConfig+0x1c2>
 8004592:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <UART_SetConfig+0x2e4>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d016      	beq.n	80045ce <UART_SetConfig+0x1b2>
 80045a0:	2b30      	cmp	r3, #48	; 0x30
 80045a2:	d818      	bhi.n	80045d6 <UART_SetConfig+0x1ba>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d00a      	beq.n	80045be <UART_SetConfig+0x1a2>
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d814      	bhi.n	80045d6 <UART_SetConfig+0x1ba>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <UART_SetConfig+0x19a>
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d008      	beq.n	80045c6 <UART_SetConfig+0x1aa>
 80045b4:	e00f      	b.n	80045d6 <UART_SetConfig+0x1ba>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045bc:	e0ad      	b.n	800471a <UART_SetConfig+0x2fe>
 80045be:	2302      	movs	r3, #2
 80045c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c4:	e0a9      	b.n	800471a <UART_SetConfig+0x2fe>
 80045c6:	2304      	movs	r3, #4
 80045c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045cc:	e0a5      	b.n	800471a <UART_SetConfig+0x2fe>
 80045ce:	2308      	movs	r3, #8
 80045d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d4:	e0a1      	b.n	800471a <UART_SetConfig+0x2fe>
 80045d6:	2310      	movs	r3, #16
 80045d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045dc:	e09d      	b.n	800471a <UART_SetConfig+0x2fe>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4a      	ldr	r2, [pc, #296]	; (800470c <UART_SetConfig+0x2f0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d125      	bne.n	8004634 <UART_SetConfig+0x218>
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <UART_SetConfig+0x2e4>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045f2:	2bc0      	cmp	r3, #192	; 0xc0
 80045f4:	d016      	beq.n	8004624 <UART_SetConfig+0x208>
 80045f6:	2bc0      	cmp	r3, #192	; 0xc0
 80045f8:	d818      	bhi.n	800462c <UART_SetConfig+0x210>
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d00a      	beq.n	8004614 <UART_SetConfig+0x1f8>
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d814      	bhi.n	800462c <UART_SetConfig+0x210>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <UART_SetConfig+0x1f0>
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d008      	beq.n	800461c <UART_SetConfig+0x200>
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x210>
 800460c:	2300      	movs	r3, #0
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004612:	e082      	b.n	800471a <UART_SetConfig+0x2fe>
 8004614:	2302      	movs	r3, #2
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e07e      	b.n	800471a <UART_SetConfig+0x2fe>
 800461c:	2304      	movs	r3, #4
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e07a      	b.n	800471a <UART_SetConfig+0x2fe>
 8004624:	2308      	movs	r3, #8
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462a:	e076      	b.n	800471a <UART_SetConfig+0x2fe>
 800462c:	2310      	movs	r3, #16
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004632:	e072      	b.n	800471a <UART_SetConfig+0x2fe>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a35      	ldr	r2, [pc, #212]	; (8004710 <UART_SetConfig+0x2f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d12a      	bne.n	8004694 <UART_SetConfig+0x278>
 800463e:	4b30      	ldr	r3, [pc, #192]	; (8004700 <UART_SetConfig+0x2e4>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800464c:	d01a      	beq.n	8004684 <UART_SetConfig+0x268>
 800464e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004652:	d81b      	bhi.n	800468c <UART_SetConfig+0x270>
 8004654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004658:	d00c      	beq.n	8004674 <UART_SetConfig+0x258>
 800465a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465e:	d815      	bhi.n	800468c <UART_SetConfig+0x270>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <UART_SetConfig+0x250>
 8004664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004668:	d008      	beq.n	800467c <UART_SetConfig+0x260>
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x270>
 800466c:	2300      	movs	r3, #0
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004672:	e052      	b.n	800471a <UART_SetConfig+0x2fe>
 8004674:	2302      	movs	r3, #2
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467a:	e04e      	b.n	800471a <UART_SetConfig+0x2fe>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004682:	e04a      	b.n	800471a <UART_SetConfig+0x2fe>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468a:	e046      	b.n	800471a <UART_SetConfig+0x2fe>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004692:	e042      	b.n	800471a <UART_SetConfig+0x2fe>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <UART_SetConfig+0x2dc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d13a      	bne.n	8004714 <UART_SetConfig+0x2f8>
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <UART_SetConfig+0x2e4>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ac:	d01a      	beq.n	80046e4 <UART_SetConfig+0x2c8>
 80046ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b2:	d81b      	bhi.n	80046ec <UART_SetConfig+0x2d0>
 80046b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b8:	d00c      	beq.n	80046d4 <UART_SetConfig+0x2b8>
 80046ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046be:	d815      	bhi.n	80046ec <UART_SetConfig+0x2d0>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <UART_SetConfig+0x2b0>
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c8:	d008      	beq.n	80046dc <UART_SetConfig+0x2c0>
 80046ca:	e00f      	b.n	80046ec <UART_SetConfig+0x2d0>
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e022      	b.n	800471a <UART_SetConfig+0x2fe>
 80046d4:	2302      	movs	r3, #2
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046da:	e01e      	b.n	800471a <UART_SetConfig+0x2fe>
 80046dc:	2304      	movs	r3, #4
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e01a      	b.n	800471a <UART_SetConfig+0x2fe>
 80046e4:	2308      	movs	r3, #8
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e016      	b.n	800471a <UART_SetConfig+0x2fe>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e012      	b.n	800471a <UART_SetConfig+0x2fe>
 80046f4:	cfff69f3 	.word	0xcfff69f3
 80046f8:	40008000 	.word	0x40008000
 80046fc:	40013800 	.word	0x40013800
 8004700:	40021000 	.word	0x40021000
 8004704:	40004400 	.word	0x40004400
 8004708:	40004800 	.word	0x40004800
 800470c:	40004c00 	.word	0x40004c00
 8004710:	40005000 	.word	0x40005000
 8004714:	2310      	movs	r3, #16
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4ab0      	ldr	r2, [pc, #704]	; (80049e0 <UART_SetConfig+0x5c4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	f040 809b 	bne.w	800485c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800472a:	2b08      	cmp	r3, #8
 800472c:	d827      	bhi.n	800477e <UART_SetConfig+0x362>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x318>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fe ff60 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fe ff70 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8004764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004766:	e010      	b.n	800478a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b9e      	ldr	r3, [pc, #632]	; (80049e4 <UART_SetConfig+0x5c8>)
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800476c:	e00d      	b.n	800478a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fe fea5 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004774:	e009      	b.n	800478a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800477c:	e005      	b.n	800478a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8130 	beq.w	80049f2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	4a94      	ldr	r2, [pc, #592]	; (80049e8 <UART_SetConfig+0x5cc>)
 8004798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479c:	461a      	mov	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d305      	bcc.n	80047c2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d903      	bls.n	80047ca <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047c8:	e113      	b.n	80049f2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	2200      	movs	r2, #0
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	60fa      	str	r2, [r7, #12]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	4a84      	ldr	r2, [pc, #528]	; (80049e8 <UART_SetConfig+0x5cc>)
 80047d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2200      	movs	r2, #0
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ec:	f7fc f9e8 	bl	8000bc0 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	020b      	lsls	r3, r1, #8
 8004802:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004806:	0202      	lsls	r2, r0, #8
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	6849      	ldr	r1, [r1, #4]
 800480c:	0849      	lsrs	r1, r1, #1
 800480e:	2000      	movs	r0, #0
 8004810:	460c      	mov	r4, r1
 8004812:	4605      	mov	r5, r0
 8004814:	eb12 0804 	adds.w	r8, r2, r4
 8004818:	eb43 0905 	adc.w	r9, r3, r5
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	469a      	mov	sl, r3
 8004824:	4693      	mov	fp, r2
 8004826:	4652      	mov	r2, sl
 8004828:	465b      	mov	r3, fp
 800482a:	4640      	mov	r0, r8
 800482c:	4649      	mov	r1, r9
 800482e:	f7fc f9c7 	bl	8000bc0 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4613      	mov	r3, r2
 8004838:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d308      	bcc.n	8004854 <UART_SetConfig+0x438>
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d204      	bcs.n	8004854 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a3a      	ldr	r2, [r7, #32]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e0ce      	b.n	80049f2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800485a:	e0ca      	b.n	80049f2 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d167      	bne.n	8004936 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8004866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800486a:	2b08      	cmp	r3, #8
 800486c:	d827      	bhi.n	80048be <UART_SetConfig+0x4a2>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0x458>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048bf 	.word	0x080048bf
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fe fec0 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800489e:	e014      	b.n	80048ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fe fed0 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 80048a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048a6:	e010      	b.n	80048ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b4e      	ldr	r3, [pc, #312]	; (80049e4 <UART_SetConfig+0x5c8>)
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fe fe05 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048b4:	e009      	b.n	80048ca <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048bc:	e005      	b.n	80048ca <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8090 	beq.w	80049f2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	4a44      	ldr	r2, [pc, #272]	; (80049e8 <UART_SetConfig+0x5cc>)
 80048d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048dc:	461a      	mov	r2, r3
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048e4:	005a      	lsls	r2, r3, #1
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	441a      	add	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	2b0f      	cmp	r3, #15
 80048fe:	d916      	bls.n	800492e <UART_SetConfig+0x512>
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004906:	d212      	bcs.n	800492e <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b29a      	uxth	r2, r3
 800491e:	8bfb      	ldrh	r3, [r7, #30]
 8004920:	4313      	orrs	r3, r2
 8004922:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	8bfa      	ldrh	r2, [r7, #30]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	e061      	b.n	80049f2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004934:	e05d      	b.n	80049f2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800493a:	2b08      	cmp	r3, #8
 800493c:	d827      	bhi.n	800498e <UART_SetConfig+0x572>
 800493e:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x528>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	0800498f 	.word	0x0800498f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe fe58 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800496e:	e014      	b.n	800499a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fe fe68 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004976:	e010      	b.n	800499a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <UART_SetConfig+0x5c8>)
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800497c:	e00d      	b.n	800499a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fd9d 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8004982:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004984:	e009      	b.n	800499a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800498c:	e005      	b.n	800499a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004998:	bf00      	nop
    }

    if (pclk != 0U)
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d028      	beq.n	80049f2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <UART_SetConfig+0x5cc>)
 80049a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049aa:	461a      	mov	r2, r3
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	085b      	lsrs	r3, r3, #1
 80049b8:	441a      	add	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	2b0f      	cmp	r3, #15
 80049ca:	d90f      	bls.n	80049ec <UART_SetConfig+0x5d0>
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d2:	d20b      	bcs.n	80049ec <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	e009      	b.n	80049f2 <UART_SetConfig+0x5d6>
 80049de:	bf00      	nop
 80049e0:	40008000 	.word	0x40008000
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	08005ac0 	.word	0x08005ac0
      }
      else
      {
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3730      	adds	r7, #48	; 0x30
 8004a16:	46bd      	mov	sp, r7
 8004a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01a      	beq.n	8004b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d10a      	bne.n	8004b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b70:	f7fc fe86 	bl	8001880 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d10e      	bne.n	8004ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f82f 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e025      	b.n	8004bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d10e      	bne.n	8004bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f819 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	e062      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d05e      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c10:	f7fc fe36 	bl	8001880 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11d      	bne.n	8004c62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e045      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d02e      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7e:	d126      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00f      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d08d      	beq.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e027      	b.n	8004d5c <HAL_UARTEx_DisableFifoMode+0x66>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e02d      	b.n	8004ddc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2224      	movs	r2, #36	; 0x24
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f84f 	bl	8004e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e02d      	b.n	8004e58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f811 	bl	8004e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d108      	bne.n	8004e82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e80:	e031      	b.n	8004ee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e82:	2308      	movs	r3, #8
 8004e84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e86:	2308      	movs	r3, #8
 8004e88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	0e5b      	lsrs	r3, r3, #25
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	0f5b      	lsrs	r3, r3, #29
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	7b3a      	ldrb	r2, [r7, #12]
 8004eae:	4911      	ldr	r1, [pc, #68]	; (8004ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8004eb0:	5c8a      	ldrb	r2, [r1, r2]
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	7b3a      	ldrb	r2, [r7, #12]
 8004eb8:	490f      	ldr	r1, [pc, #60]	; (8004ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8004eba:	5c8a      	ldrb	r2, [r1, r2]
 8004ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	7b7a      	ldrb	r2, [r7, #13]
 8004ecc:	4909      	ldr	r1, [pc, #36]	; (8004ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8004ece:	5c8a      	ldrb	r2, [r1, r2]
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	7b7a      	ldrb	r2, [r7, #13]
 8004ed6:	4908      	ldr	r1, [pc, #32]	; (8004ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8004ed8:	5c8a      	ldrb	r2, [r1, r2]
 8004eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	08005ad8 	.word	0x08005ad8
 8004ef8:	08005ae0 	.word	0x08005ae0

08004efc <sqrt>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	ec55 4b10 	vmov	r4, r5, d0
 8004f02:	ed2d 8b02 	vpush	{d8}
 8004f06:	f000 f825 	bl	8004f54 <__ieee754_sqrt>
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	eeb0 8a40 	vmov.f32	s16, s0
 8004f16:	eef0 8a60 	vmov.f32	s17, s1
 8004f1a:	f7fb fdeb 	bl	8000af4 <__aeabi_dcmpun>
 8004f1e:	b990      	cbnz	r0, 8004f46 <sqrt+0x4a>
 8004f20:	2200      	movs	r2, #0
 8004f22:	2300      	movs	r3, #0
 8004f24:	4620      	mov	r0, r4
 8004f26:	4629      	mov	r1, r5
 8004f28:	f7fb fdbc 	bl	8000aa4 <__aeabi_dcmplt>
 8004f2c:	b158      	cbz	r0, 8004f46 <sqrt+0x4a>
 8004f2e:	f000 f8c9 	bl	80050c4 <__errno>
 8004f32:	2321      	movs	r3, #33	; 0x21
 8004f34:	2200      	movs	r2, #0
 8004f36:	6003      	str	r3, [r0, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7fb fc69 	bl	8000814 <__aeabi_ddiv>
 8004f42:	ec41 0b18 	vmov	d8, r0, r1
 8004f46:	eeb0 0a48 	vmov.f32	s0, s16
 8004f4a:	eef0 0a68 	vmov.f32	s1, s17
 8004f4e:	ecbd 8b02 	vpop	{d8}
 8004f52:	bd38      	pop	{r3, r4, r5, pc}

08004f54 <__ieee754_sqrt>:
 8004f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f58:	4e59      	ldr	r6, [pc, #356]	; (80050c0 <__ieee754_sqrt+0x16c>)
 8004f5a:	ee10 0a10 	vmov	r0, s0
 8004f5e:	ee10 3a10 	vmov	r3, s0
 8004f62:	ec55 4b10 	vmov	r4, r5, d0
 8004f66:	43ae      	bics	r6, r5
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	d110      	bne.n	8004f90 <__ieee754_sqrt+0x3c>
 8004f6e:	ee10 2a10 	vmov	r2, s0
 8004f72:	462b      	mov	r3, r5
 8004f74:	f7fb fb24 	bl	80005c0 <__aeabi_dmul>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb f968 	bl	8000254 <__adddf3>
 8004f84:	4604      	mov	r4, r0
 8004f86:	460d      	mov	r5, r1
 8004f88:	ec45 4b10 	vmov	d0, r4, r5
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	dc10      	bgt.n	8004fb6 <__ieee754_sqrt+0x62>
 8004f94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f98:	4330      	orrs	r0, r6
 8004f9a:	d0f5      	beq.n	8004f88 <__ieee754_sqrt+0x34>
 8004f9c:	b15d      	cbz	r5, 8004fb6 <__ieee754_sqrt+0x62>
 8004f9e:	ee10 2a10 	vmov	r2, s0
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	ee10 0a10 	vmov	r0, s0
 8004fa8:	f7fb f952 	bl	8000250 <__aeabi_dsub>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	f7fb fc30 	bl	8000814 <__aeabi_ddiv>
 8004fb4:	e7e6      	b.n	8004f84 <__ieee754_sqrt+0x30>
 8004fb6:	1512      	asrs	r2, r2, #20
 8004fb8:	d07a      	beq.n	80050b0 <__ieee754_sqrt+0x15c>
 8004fba:	07d4      	lsls	r4, r2, #31
 8004fbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004fc0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	bf58      	it	pl
 8004fca:	0fda      	lsrpl	r2, r3, #31
 8004fcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004fd0:	bf58      	it	pl
 8004fd2:	005b      	lslpl	r3, r3, #1
 8004fd4:	f04f 0516 	mov.w	r5, #22
 8004fd8:	bf58      	it	pl
 8004fda:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004fde:	4620      	mov	r0, r4
 8004fe0:	0fda      	lsrs	r2, r3, #31
 8004fe2:	107f      	asrs	r7, r7, #1
 8004fe4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004fe8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	1886      	adds	r6, r0, r2
 8004ff0:	428e      	cmp	r6, r1
 8004ff2:	bfde      	ittt	le
 8004ff4:	1b89      	suble	r1, r1, r6
 8004ff6:	18b0      	addle	r0, r6, r2
 8004ff8:	18a4      	addle	r4, r4, r2
 8004ffa:	3d01      	subs	r5, #1
 8004ffc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005000:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005004:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005008:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800500c:	d1ef      	bne.n	8004fee <__ieee754_sqrt+0x9a>
 800500e:	462a      	mov	r2, r5
 8005010:	f04f 0e20 	mov.w	lr, #32
 8005014:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005018:	4281      	cmp	r1, r0
 800501a:	eb06 0c05 	add.w	ip, r6, r5
 800501e:	dc02      	bgt.n	8005026 <__ieee754_sqrt+0xd2>
 8005020:	d113      	bne.n	800504a <__ieee754_sqrt+0xf6>
 8005022:	459c      	cmp	ip, r3
 8005024:	d811      	bhi.n	800504a <__ieee754_sqrt+0xf6>
 8005026:	f1bc 0f00 	cmp.w	ip, #0
 800502a:	eb0c 0506 	add.w	r5, ip, r6
 800502e:	da44      	bge.n	80050ba <__ieee754_sqrt+0x166>
 8005030:	2d00      	cmp	r5, #0
 8005032:	db42      	blt.n	80050ba <__ieee754_sqrt+0x166>
 8005034:	f100 0801 	add.w	r8, r0, #1
 8005038:	1a09      	subs	r1, r1, r0
 800503a:	459c      	cmp	ip, r3
 800503c:	4432      	add	r2, r6
 800503e:	eba3 030c 	sub.w	r3, r3, ip
 8005042:	bf88      	it	hi
 8005044:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005048:	4640      	mov	r0, r8
 800504a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800504e:	f1be 0e01 	subs.w	lr, lr, #1
 8005052:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005056:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800505a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800505e:	d1db      	bne.n	8005018 <__ieee754_sqrt+0xc4>
 8005060:	430b      	orrs	r3, r1
 8005062:	d006      	beq.n	8005072 <__ieee754_sqrt+0x11e>
 8005064:	1c50      	adds	r0, r2, #1
 8005066:	bf13      	iteet	ne
 8005068:	3201      	addne	r2, #1
 800506a:	3401      	addeq	r4, #1
 800506c:	4672      	moveq	r2, lr
 800506e:	f022 0201 	bicne.w	r2, r2, #1
 8005072:	1063      	asrs	r3, r4, #1
 8005074:	07e1      	lsls	r1, r4, #31
 8005076:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800507a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800507e:	bf48      	it	mi
 8005080:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005084:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005088:	4614      	mov	r4, r2
 800508a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800508e:	e77b      	b.n	8004f88 <__ieee754_sqrt+0x34>
 8005090:	0ad9      	lsrs	r1, r3, #11
 8005092:	3815      	subs	r0, #21
 8005094:	055b      	lsls	r3, r3, #21
 8005096:	2900      	cmp	r1, #0
 8005098:	d0fa      	beq.n	8005090 <__ieee754_sqrt+0x13c>
 800509a:	02cd      	lsls	r5, r1, #11
 800509c:	d50a      	bpl.n	80050b4 <__ieee754_sqrt+0x160>
 800509e:	f1c2 0420 	rsb	r4, r2, #32
 80050a2:	1e55      	subs	r5, r2, #1
 80050a4:	fa23 f404 	lsr.w	r4, r3, r4
 80050a8:	4093      	lsls	r3, r2
 80050aa:	1b42      	subs	r2, r0, r5
 80050ac:	4321      	orrs	r1, r4
 80050ae:	e784      	b.n	8004fba <__ieee754_sqrt+0x66>
 80050b0:	4610      	mov	r0, r2
 80050b2:	e7f0      	b.n	8005096 <__ieee754_sqrt+0x142>
 80050b4:	0049      	lsls	r1, r1, #1
 80050b6:	3201      	adds	r2, #1
 80050b8:	e7ef      	b.n	800509a <__ieee754_sqrt+0x146>
 80050ba:	4680      	mov	r8, r0
 80050bc:	e7bc      	b.n	8005038 <__ieee754_sqrt+0xe4>
 80050be:	bf00      	nop
 80050c0:	7ff00000 	.word	0x7ff00000

080050c4 <__errno>:
 80050c4:	4b01      	ldr	r3, [pc, #4]	; (80050cc <__errno+0x8>)
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000000c 	.word	0x2000000c

080050d0 <__libc_init_array>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4d0d      	ldr	r5, [pc, #52]	; (8005108 <__libc_init_array+0x38>)
 80050d4:	2600      	movs	r6, #0
 80050d6:	4c0d      	ldr	r4, [pc, #52]	; (800510c <__libc_init_array+0x3c>)
 80050d8:	1b64      	subs	r4, r4, r5
 80050da:	10a4      	asrs	r4, r4, #2
 80050dc:	42a6      	cmp	r6, r4
 80050de:	d109      	bne.n	80050f4 <__libc_init_array+0x24>
 80050e0:	4d0b      	ldr	r5, [pc, #44]	; (8005110 <__libc_init_array+0x40>)
 80050e2:	2600      	movs	r6, #0
 80050e4:	4c0b      	ldr	r4, [pc, #44]	; (8005114 <__libc_init_array+0x44>)
 80050e6:	f000 fc9d 	bl	8005a24 <_init>
 80050ea:	1b64      	subs	r4, r4, r5
 80050ec:	10a4      	asrs	r4, r4, #2
 80050ee:	42a6      	cmp	r6, r4
 80050f0:	d105      	bne.n	80050fe <__libc_init_array+0x2e>
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f8:	3601      	adds	r6, #1
 80050fa:	4798      	blx	r3
 80050fc:	e7ee      	b.n	80050dc <__libc_init_array+0xc>
 80050fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005102:	3601      	adds	r6, #1
 8005104:	4798      	blx	r3
 8005106:	e7f2      	b.n	80050ee <__libc_init_array+0x1e>
 8005108:	08005b24 	.word	0x08005b24
 800510c:	08005b24 	.word	0x08005b24
 8005110:	08005b24 	.word	0x08005b24
 8005114:	08005b28 	.word	0x08005b28

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <siprintf>:
 8005128:	b40e      	push	{r1, r2, r3}
 800512a:	b500      	push	{lr}
 800512c:	b09c      	sub	sp, #112	; 0x70
 800512e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005132:	ab1d      	add	r3, sp, #116	; 0x74
 8005134:	9002      	str	r0, [sp, #8]
 8005136:	9006      	str	r0, [sp, #24]
 8005138:	9107      	str	r1, [sp, #28]
 800513a:	9104      	str	r1, [sp, #16]
 800513c:	4808      	ldr	r0, [pc, #32]	; (8005160 <siprintf+0x38>)
 800513e:	4909      	ldr	r1, [pc, #36]	; (8005164 <siprintf+0x3c>)
 8005140:	f853 2b04 	ldr.w	r2, [r3], #4
 8005144:	9105      	str	r1, [sp, #20]
 8005146:	a902      	add	r1, sp, #8
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	f000 f868 	bl	8005220 <_svfiprintf_r>
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	b01c      	add	sp, #112	; 0x70
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b003      	add	sp, #12
 800515e:	4770      	bx	lr
 8005160:	2000000c 	.word	0x2000000c
 8005164:	ffff0208 	.word	0xffff0208

08005168 <__ssputs_r>:
 8005168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	688e      	ldr	r6, [r1, #8]
 800516e:	4682      	mov	sl, r0
 8005170:	460c      	mov	r4, r1
 8005172:	4690      	mov	r8, r2
 8005174:	429e      	cmp	r6, r3
 8005176:	461f      	mov	r7, r3
 8005178:	d838      	bhi.n	80051ec <__ssputs_r+0x84>
 800517a:	898a      	ldrh	r2, [r1, #12]
 800517c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005180:	d032      	beq.n	80051e8 <__ssputs_r+0x80>
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	6909      	ldr	r1, [r1, #16]
 8005188:	eba5 0901 	sub.w	r9, r5, r1
 800518c:	6965      	ldr	r5, [r4, #20]
 800518e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005192:	444b      	add	r3, r9
 8005194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005198:	106d      	asrs	r5, r5, #1
 800519a:	429d      	cmp	r5, r3
 800519c:	bf38      	it	cc
 800519e:	461d      	movcc	r5, r3
 80051a0:	0553      	lsls	r3, r2, #21
 80051a2:	d531      	bpl.n	8005208 <__ssputs_r+0xa0>
 80051a4:	4629      	mov	r1, r5
 80051a6:	f000 fb73 	bl	8005890 <_malloc_r>
 80051aa:	4606      	mov	r6, r0
 80051ac:	b950      	cbnz	r0, 80051c4 <__ssputs_r+0x5c>
 80051ae:	230c      	movs	r3, #12
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f8ca 3000 	str.w	r3, [sl]
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c4:	464a      	mov	r2, r9
 80051c6:	6921      	ldr	r1, [r4, #16]
 80051c8:	f000 face 	bl	8005768 <memcpy>
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d6:	81a3      	strh	r3, [r4, #12]
 80051d8:	6126      	str	r6, [r4, #16]
 80051da:	444e      	add	r6, r9
 80051dc:	6165      	str	r5, [r4, #20]
 80051de:	eba5 0509 	sub.w	r5, r5, r9
 80051e2:	6026      	str	r6, [r4, #0]
 80051e4:	463e      	mov	r6, r7
 80051e6:	60a5      	str	r5, [r4, #8]
 80051e8:	42be      	cmp	r6, r7
 80051ea:	d900      	bls.n	80051ee <__ssputs_r+0x86>
 80051ec:	463e      	mov	r6, r7
 80051ee:	4632      	mov	r2, r6
 80051f0:	4641      	mov	r1, r8
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	f000 fac5 	bl	8005782 <memmove>
 80051f8:	68a3      	ldr	r3, [r4, #8]
 80051fa:	2000      	movs	r0, #0
 80051fc:	1b9b      	subs	r3, r3, r6
 80051fe:	60a3      	str	r3, [r4, #8]
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	4433      	add	r3, r6
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	e7db      	b.n	80051c0 <__ssputs_r+0x58>
 8005208:	462a      	mov	r2, r5
 800520a:	f000 fbb5 	bl	8005978 <_realloc_r>
 800520e:	4606      	mov	r6, r0
 8005210:	2800      	cmp	r0, #0
 8005212:	d1e1      	bne.n	80051d8 <__ssputs_r+0x70>
 8005214:	6921      	ldr	r1, [r4, #16]
 8005216:	4650      	mov	r0, sl
 8005218:	f000 face 	bl	80057b8 <_free_r>
 800521c:	e7c7      	b.n	80051ae <__ssputs_r+0x46>
	...

08005220 <_svfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	4698      	mov	r8, r3
 8005226:	898b      	ldrh	r3, [r1, #12]
 8005228:	b09d      	sub	sp, #116	; 0x74
 800522a:	4607      	mov	r7, r0
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	460d      	mov	r5, r1
 8005230:	4614      	mov	r4, r2
 8005232:	d50e      	bpl.n	8005252 <_svfiprintf_r+0x32>
 8005234:	690b      	ldr	r3, [r1, #16]
 8005236:	b963      	cbnz	r3, 8005252 <_svfiprintf_r+0x32>
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	f000 fb29 	bl	8005890 <_malloc_r>
 800523e:	6028      	str	r0, [r5, #0]
 8005240:	6128      	str	r0, [r5, #16]
 8005242:	b920      	cbnz	r0, 800524e <_svfiprintf_r+0x2e>
 8005244:	230c      	movs	r3, #12
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	e0d1      	b.n	80053f2 <_svfiprintf_r+0x1d2>
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	616b      	str	r3, [r5, #20]
 8005252:	2300      	movs	r3, #0
 8005254:	f8cd 800c 	str.w	r8, [sp, #12]
 8005258:	f04f 0901 	mov.w	r9, #1
 800525c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800540c <_svfiprintf_r+0x1ec>
 8005260:	9309      	str	r3, [sp, #36]	; 0x24
 8005262:	2320      	movs	r3, #32
 8005264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005268:	2330      	movs	r3, #48	; 0x30
 800526a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800526e:	4623      	mov	r3, r4
 8005270:	469a      	mov	sl, r3
 8005272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005276:	b10a      	cbz	r2, 800527c <_svfiprintf_r+0x5c>
 8005278:	2a25      	cmp	r2, #37	; 0x25
 800527a:	d1f9      	bne.n	8005270 <_svfiprintf_r+0x50>
 800527c:	ebba 0b04 	subs.w	fp, sl, r4
 8005280:	d00b      	beq.n	800529a <_svfiprintf_r+0x7a>
 8005282:	465b      	mov	r3, fp
 8005284:	4622      	mov	r2, r4
 8005286:	4629      	mov	r1, r5
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff6d 	bl	8005168 <__ssputs_r>
 800528e:	3001      	adds	r0, #1
 8005290:	f000 80aa 	beq.w	80053e8 <_svfiprintf_r+0x1c8>
 8005294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005296:	445a      	add	r2, fp
 8005298:	9209      	str	r2, [sp, #36]	; 0x24
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a2 	beq.w	80053e8 <_svfiprintf_r+0x1c8>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	f10a 0a01 	add.w	sl, sl, #1
 80052ae:	9304      	str	r3, [sp, #16]
 80052b0:	9307      	str	r3, [sp, #28]
 80052b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b6:	931a      	str	r3, [sp, #104]	; 0x68
 80052b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052bc:	4654      	mov	r4, sl
 80052be:	2205      	movs	r2, #5
 80052c0:	4852      	ldr	r0, [pc, #328]	; (800540c <_svfiprintf_r+0x1ec>)
 80052c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c6:	f000 fa41 	bl	800574c <memchr>
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	b9d8      	cbnz	r0, 8005306 <_svfiprintf_r+0xe6>
 80052ce:	06d0      	lsls	r0, r2, #27
 80052d0:	bf44      	itt	mi
 80052d2:	2320      	movmi	r3, #32
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d8:	0711      	lsls	r1, r2, #28
 80052da:	bf44      	itt	mi
 80052dc:	232b      	movmi	r3, #43	; 0x2b
 80052de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e2:	f89a 3000 	ldrb.w	r3, [sl]
 80052e6:	2b2a      	cmp	r3, #42	; 0x2a
 80052e8:	d015      	beq.n	8005316 <_svfiprintf_r+0xf6>
 80052ea:	9a07      	ldr	r2, [sp, #28]
 80052ec:	4654      	mov	r4, sl
 80052ee:	2000      	movs	r0, #0
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4621      	mov	r1, r4
 80052f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fa:	3b30      	subs	r3, #48	; 0x30
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	d94e      	bls.n	800539e <_svfiprintf_r+0x17e>
 8005300:	b1b0      	cbz	r0, 8005330 <_svfiprintf_r+0x110>
 8005302:	9207      	str	r2, [sp, #28]
 8005304:	e014      	b.n	8005330 <_svfiprintf_r+0x110>
 8005306:	eba0 0308 	sub.w	r3, r0, r8
 800530a:	46a2      	mov	sl, r4
 800530c:	fa09 f303 	lsl.w	r3, r9, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	e7d2      	b.n	80052bc <_svfiprintf_r+0x9c>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	9103      	str	r1, [sp, #12]
 8005320:	bfbb      	ittet	lt
 8005322:	425b      	neglt	r3, r3
 8005324:	f042 0202 	orrlt.w	r2, r2, #2
 8005328:	9307      	strge	r3, [sp, #28]
 800532a:	9307      	strlt	r3, [sp, #28]
 800532c:	bfb8      	it	lt
 800532e:	9204      	strlt	r2, [sp, #16]
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	2b2e      	cmp	r3, #46	; 0x2e
 8005334:	d10c      	bne.n	8005350 <_svfiprintf_r+0x130>
 8005336:	7863      	ldrb	r3, [r4, #1]
 8005338:	2b2a      	cmp	r3, #42	; 0x2a
 800533a:	d135      	bne.n	80053a8 <_svfiprintf_r+0x188>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	3402      	adds	r4, #2
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	bfb8      	it	lt
 800534a:	f04f 33ff 	movlt.w	r3, #4294967295
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800541c <_svfiprintf_r+0x1fc>
 8005354:	2203      	movs	r2, #3
 8005356:	7821      	ldrb	r1, [r4, #0]
 8005358:	4650      	mov	r0, sl
 800535a:	f000 f9f7 	bl	800574c <memchr>
 800535e:	b140      	cbz	r0, 8005372 <_svfiprintf_r+0x152>
 8005360:	2340      	movs	r3, #64	; 0x40
 8005362:	eba0 000a 	sub.w	r0, r0, sl
 8005366:	3401      	adds	r4, #1
 8005368:	fa03 f000 	lsl.w	r0, r3, r0
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	4303      	orrs	r3, r0
 8005370:	9304      	str	r3, [sp, #16]
 8005372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005376:	2206      	movs	r2, #6
 8005378:	4825      	ldr	r0, [pc, #148]	; (8005410 <_svfiprintf_r+0x1f0>)
 800537a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537e:	f000 f9e5 	bl	800574c <memchr>
 8005382:	2800      	cmp	r0, #0
 8005384:	d038      	beq.n	80053f8 <_svfiprintf_r+0x1d8>
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <_svfiprintf_r+0x1f4>)
 8005388:	bb1b      	cbnz	r3, 80053d2 <_svfiprintf_r+0x1b2>
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	3307      	adds	r3, #7
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	3308      	adds	r3, #8
 8005394:	9303      	str	r3, [sp, #12]
 8005396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005398:	4433      	add	r3, r6
 800539a:	9309      	str	r3, [sp, #36]	; 0x24
 800539c:	e767      	b.n	800526e <_svfiprintf_r+0x4e>
 800539e:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a2:	460c      	mov	r4, r1
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7a5      	b.n	80052f4 <_svfiprintf_r+0xd4>
 80053a8:	2300      	movs	r3, #0
 80053aa:	3401      	adds	r4, #1
 80053ac:	f04f 0c0a 	mov.w	ip, #10
 80053b0:	4619      	mov	r1, r3
 80053b2:	9305      	str	r3, [sp, #20]
 80053b4:	4620      	mov	r0, r4
 80053b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ba:	3a30      	subs	r2, #48	; 0x30
 80053bc:	2a09      	cmp	r2, #9
 80053be:	d903      	bls.n	80053c8 <_svfiprintf_r+0x1a8>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0c5      	beq.n	8005350 <_svfiprintf_r+0x130>
 80053c4:	9105      	str	r1, [sp, #20]
 80053c6:	e7c3      	b.n	8005350 <_svfiprintf_r+0x130>
 80053c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053cc:	4604      	mov	r4, r0
 80053ce:	2301      	movs	r3, #1
 80053d0:	e7f0      	b.n	80053b4 <_svfiprintf_r+0x194>
 80053d2:	ab03      	add	r3, sp, #12
 80053d4:	462a      	mov	r2, r5
 80053d6:	a904      	add	r1, sp, #16
 80053d8:	4638      	mov	r0, r7
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <_svfiprintf_r+0x1f8>)
 80053de:	e000      	b.n	80053e2 <_svfiprintf_r+0x1c2>
 80053e0:	bf00      	nop
 80053e2:	1c42      	adds	r2, r0, #1
 80053e4:	4606      	mov	r6, r0
 80053e6:	d1d6      	bne.n	8005396 <_svfiprintf_r+0x176>
 80053e8:	89ab      	ldrh	r3, [r5, #12]
 80053ea:	065b      	lsls	r3, r3, #25
 80053ec:	f53f af2c 	bmi.w	8005248 <_svfiprintf_r+0x28>
 80053f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f2:	b01d      	add	sp, #116	; 0x74
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	ab03      	add	r3, sp, #12
 80053fa:	462a      	mov	r2, r5
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	4638      	mov	r0, r7
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <_svfiprintf_r+0x1f8>)
 8005404:	f000 f87c 	bl	8005500 <_printf_i>
 8005408:	e7eb      	b.n	80053e2 <_svfiprintf_r+0x1c2>
 800540a:	bf00      	nop
 800540c:	08005ae8 	.word	0x08005ae8
 8005410:	08005af2 	.word	0x08005af2
 8005414:	00000000 	.word	0x00000000
 8005418:	08005169 	.word	0x08005169
 800541c:	08005aee 	.word	0x08005aee

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	4699      	mov	r9, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	4607      	mov	r7, r0
 800542c:	690b      	ldr	r3, [r1, #16]
 800542e:	460c      	mov	r4, r1
 8005430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005434:	4293      	cmp	r3, r2
 8005436:	bfb8      	it	lt
 8005438:	4613      	movlt	r3, r2
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005440:	b10a      	cbz	r2, 8005446 <_printf_common+0x26>
 8005442:	3301      	adds	r3, #1
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	6833      	ldrmi	r3, [r6, #0]
 800544e:	3302      	addmi	r3, #2
 8005450:	6033      	strmi	r3, [r6, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	f015 0506 	ands.w	r5, r5, #6
 8005458:	d106      	bne.n	8005468 <_printf_common+0x48>
 800545a:	f104 0a19 	add.w	sl, r4, #25
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	42ab      	cmp	r3, r5
 8005466:	dc29      	bgt.n	80054bc <_printf_common+0x9c>
 8005468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800546c:	1e13      	subs	r3, r2, #0
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	bf18      	it	ne
 8005472:	2301      	movne	r3, #1
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d42e      	bmi.n	80054d6 <_printf_common+0xb6>
 8005478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547c:	4649      	mov	r1, r9
 800547e:	4638      	mov	r0, r7
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d021      	beq.n	80054ca <_printf_common+0xaa>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	341a      	adds	r4, #26
 800548a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800548e:	f003 0306 	and.w	r3, r3, #6
 8005492:	6832      	ldr	r2, [r6, #0]
 8005494:	2600      	movs	r6, #0
 8005496:	2b04      	cmp	r3, #4
 8005498:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800549c:	bf08      	it	eq
 800549e:	1aad      	subeq	r5, r5, r2
 80054a0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80054a4:	bf14      	ite	ne
 80054a6:	2500      	movne	r5, #0
 80054a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bfc4      	itt	gt
 80054b0:	1a9b      	subgt	r3, r3, r2
 80054b2:	18ed      	addgt	r5, r5, r3
 80054b4:	42b5      	cmp	r5, r6
 80054b6:	d11a      	bne.n	80054ee <_printf_common+0xce>
 80054b8:	2000      	movs	r0, #0
 80054ba:	e008      	b.n	80054ce <_printf_common+0xae>
 80054bc:	2301      	movs	r3, #1
 80054be:	4652      	mov	r2, sl
 80054c0:	4649      	mov	r1, r9
 80054c2:	4638      	mov	r0, r7
 80054c4:	47c0      	blx	r8
 80054c6:	3001      	adds	r0, #1
 80054c8:	d103      	bne.n	80054d2 <_printf_common+0xb2>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d2:	3501      	adds	r5, #1
 80054d4:	e7c3      	b.n	800545e <_printf_common+0x3e>
 80054d6:	18e1      	adds	r1, r4, r3
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	2030      	movs	r0, #48	; 0x30
 80054dc:	3302      	adds	r3, #2
 80054de:	4422      	add	r2, r4
 80054e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ec:	e7c4      	b.n	8005478 <_printf_common+0x58>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4622      	mov	r2, r4
 80054f2:	4649      	mov	r1, r9
 80054f4:	4638      	mov	r0, r7
 80054f6:	47c0      	blx	r8
 80054f8:	3001      	adds	r0, #1
 80054fa:	d0e6      	beq.n	80054ca <_printf_common+0xaa>
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7d9      	b.n	80054b4 <_printf_common+0x94>

08005500 <_printf_i>:
 8005500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	7e0f      	ldrb	r7, [r1, #24]
 8005506:	4691      	mov	r9, r2
 8005508:	4680      	mov	r8, r0
 800550a:	460c      	mov	r4, r1
 800550c:	2f78      	cmp	r7, #120	; 0x78
 800550e:	469a      	mov	sl, r3
 8005510:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005516:	d807      	bhi.n	8005528 <_printf_i+0x28>
 8005518:	2f62      	cmp	r7, #98	; 0x62
 800551a:	d80a      	bhi.n	8005532 <_printf_i+0x32>
 800551c:	2f00      	cmp	r7, #0
 800551e:	f000 80d8 	beq.w	80056d2 <_printf_i+0x1d2>
 8005522:	2f58      	cmp	r7, #88	; 0x58
 8005524:	f000 80a3 	beq.w	800566e <_printf_i+0x16e>
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005530:	e03a      	b.n	80055a8 <_printf_i+0xa8>
 8005532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005536:	2b15      	cmp	r3, #21
 8005538:	d8f6      	bhi.n	8005528 <_printf_i+0x28>
 800553a:	a101      	add	r1, pc, #4	; (adr r1, 8005540 <_printf_i+0x40>)
 800553c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005540:	08005599 	.word	0x08005599
 8005544:	080055ad 	.word	0x080055ad
 8005548:	08005529 	.word	0x08005529
 800554c:	08005529 	.word	0x08005529
 8005550:	08005529 	.word	0x08005529
 8005554:	08005529 	.word	0x08005529
 8005558:	080055ad 	.word	0x080055ad
 800555c:	08005529 	.word	0x08005529
 8005560:	08005529 	.word	0x08005529
 8005564:	08005529 	.word	0x08005529
 8005568:	08005529 	.word	0x08005529
 800556c:	080056b9 	.word	0x080056b9
 8005570:	080055dd 	.word	0x080055dd
 8005574:	0800569b 	.word	0x0800569b
 8005578:	08005529 	.word	0x08005529
 800557c:	08005529 	.word	0x08005529
 8005580:	080056db 	.word	0x080056db
 8005584:	08005529 	.word	0x08005529
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005529 	.word	0x08005529
 8005590:	08005529 	.word	0x08005529
 8005594:	080056a3 	.word	0x080056a3
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	602a      	str	r2, [r5, #0]
 80055a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0a3      	b.n	80056f4 <_printf_i+0x1f4>
 80055ac:	6820      	ldr	r0, [r4, #0]
 80055ae:	6829      	ldr	r1, [r5, #0]
 80055b0:	0606      	lsls	r6, r0, #24
 80055b2:	f101 0304 	add.w	r3, r1, #4
 80055b6:	d50a      	bpl.n	80055ce <_printf_i+0xce>
 80055b8:	680e      	ldr	r6, [r1, #0]
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	2e00      	cmp	r6, #0
 80055be:	da03      	bge.n	80055c8 <_printf_i+0xc8>
 80055c0:	232d      	movs	r3, #45	; 0x2d
 80055c2:	4276      	negs	r6, r6
 80055c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c8:	485e      	ldr	r0, [pc, #376]	; (8005744 <_printf_i+0x244>)
 80055ca:	230a      	movs	r3, #10
 80055cc:	e019      	b.n	8005602 <_printf_i+0x102>
 80055ce:	680e      	ldr	r6, [r1, #0]
 80055d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	bf18      	it	ne
 80055d8:	b236      	sxthne	r6, r6
 80055da:	e7ef      	b.n	80055bc <_printf_i+0xbc>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	1d19      	adds	r1, r3, #4
 80055e2:	6029      	str	r1, [r5, #0]
 80055e4:	0601      	lsls	r1, r0, #24
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0xec>
 80055e8:	681e      	ldr	r6, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0xf2>
 80055ec:	0646      	lsls	r6, r0, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0xe8>
 80055f0:	881e      	ldrh	r6, [r3, #0]
 80055f2:	2f6f      	cmp	r7, #111	; 0x6f
 80055f4:	4853      	ldr	r0, [pc, #332]	; (8005744 <_printf_i+0x244>)
 80055f6:	bf0c      	ite	eq
 80055f8:	2308      	moveq	r3, #8
 80055fa:	230a      	movne	r3, #10
 80055fc:	2100      	movs	r1, #0
 80055fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005602:	6865      	ldr	r5, [r4, #4]
 8005604:	2d00      	cmp	r5, #0
 8005606:	60a5      	str	r5, [r4, #8]
 8005608:	bfa2      	ittt	ge
 800560a:	6821      	ldrge	r1, [r4, #0]
 800560c:	f021 0104 	bicge.w	r1, r1, #4
 8005610:	6021      	strge	r1, [r4, #0]
 8005612:	b90e      	cbnz	r6, 8005618 <_printf_i+0x118>
 8005614:	2d00      	cmp	r5, #0
 8005616:	d04d      	beq.n	80056b4 <_printf_i+0x1b4>
 8005618:	4615      	mov	r5, r2
 800561a:	fbb6 f1f3 	udiv	r1, r6, r3
 800561e:	fb03 6711 	mls	r7, r3, r1, r6
 8005622:	5dc7      	ldrb	r7, [r0, r7]
 8005624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005628:	4637      	mov	r7, r6
 800562a:	460e      	mov	r6, r1
 800562c:	42bb      	cmp	r3, r7
 800562e:	d9f4      	bls.n	800561a <_printf_i+0x11a>
 8005630:	2b08      	cmp	r3, #8
 8005632:	d10b      	bne.n	800564c <_printf_i+0x14c>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07de      	lsls	r6, r3, #31
 8005638:	d508      	bpl.n	800564c <_printf_i+0x14c>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6861      	ldr	r1, [r4, #4]
 800563e:	4299      	cmp	r1, r3
 8005640:	bfde      	ittt	le
 8005642:	2330      	movle	r3, #48	; 0x30
 8005644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800564c:	1b52      	subs	r2, r2, r5
 800564e:	6122      	str	r2, [r4, #16]
 8005650:	464b      	mov	r3, r9
 8005652:	aa03      	add	r2, sp, #12
 8005654:	4621      	mov	r1, r4
 8005656:	4640      	mov	r0, r8
 8005658:	f8cd a000 	str.w	sl, [sp]
 800565c:	f7ff fee0 	bl	8005420 <_printf_common>
 8005660:	3001      	adds	r0, #1
 8005662:	d14c      	bne.n	80056fe <_printf_i+0x1fe>
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	b004      	add	sp, #16
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	4835      	ldr	r0, [pc, #212]	; (8005744 <_printf_i+0x244>)
 8005670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005674:	6829      	ldr	r1, [r5, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f851 6b04 	ldr.w	r6, [r1], #4
 800567c:	6029      	str	r1, [r5, #0]
 800567e:	061d      	lsls	r5, r3, #24
 8005680:	d514      	bpl.n	80056ac <_printf_i+0x1ac>
 8005682:	07df      	lsls	r7, r3, #31
 8005684:	bf44      	itt	mi
 8005686:	f043 0320 	orrmi.w	r3, r3, #32
 800568a:	6023      	strmi	r3, [r4, #0]
 800568c:	b91e      	cbnz	r6, 8005696 <_printf_i+0x196>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	f023 0320 	bic.w	r3, r3, #32
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	2310      	movs	r3, #16
 8005698:	e7b0      	b.n	80055fc <_printf_i+0xfc>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	2378      	movs	r3, #120	; 0x78
 80056a4:	4828      	ldr	r0, [pc, #160]	; (8005748 <_printf_i+0x248>)
 80056a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056aa:	e7e3      	b.n	8005674 <_printf_i+0x174>
 80056ac:	0659      	lsls	r1, r3, #25
 80056ae:	bf48      	it	mi
 80056b0:	b2b6      	uxthmi	r6, r6
 80056b2:	e7e6      	b.n	8005682 <_printf_i+0x182>
 80056b4:	4615      	mov	r5, r2
 80056b6:	e7bb      	b.n	8005630 <_printf_i+0x130>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	6826      	ldr	r6, [r4, #0]
 80056bc:	1d18      	adds	r0, r3, #4
 80056be:	6961      	ldr	r1, [r4, #20]
 80056c0:	6028      	str	r0, [r5, #0]
 80056c2:	0635      	lsls	r5, r6, #24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0x1cc>
 80056c8:	6019      	str	r1, [r3, #0]
 80056ca:	e002      	b.n	80056d2 <_printf_i+0x1d2>
 80056cc:	0670      	lsls	r0, r6, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0x1c8>
 80056d0:	8019      	strh	r1, [r3, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	4615      	mov	r5, r2
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	e7ba      	b.n	8005650 <_printf_i+0x150>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	2100      	movs	r1, #0
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	681d      	ldr	r5, [r3, #0]
 80056e4:	6862      	ldr	r2, [r4, #4]
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f830 	bl	800574c <memchr>
 80056ec:	b108      	cbz	r0, 80056f2 <_printf_i+0x1f2>
 80056ee:	1b40      	subs	r0, r0, r5
 80056f0:	6060      	str	r0, [r4, #4]
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	2300      	movs	r3, #0
 80056f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fc:	e7a8      	b.n	8005650 <_printf_i+0x150>
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	462a      	mov	r2, r5
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d0ab      	beq.n	8005664 <_printf_i+0x164>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	079b      	lsls	r3, r3, #30
 8005710:	d413      	bmi.n	800573a <_printf_i+0x23a>
 8005712:	68e0      	ldr	r0, [r4, #12]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	4298      	cmp	r0, r3
 8005718:	bfb8      	it	lt
 800571a:	4618      	movlt	r0, r3
 800571c:	e7a4      	b.n	8005668 <_printf_i+0x168>
 800571e:	2301      	movs	r3, #1
 8005720:	4632      	mov	r2, r6
 8005722:	4649      	mov	r1, r9
 8005724:	4640      	mov	r0, r8
 8005726:	47d0      	blx	sl
 8005728:	3001      	adds	r0, #1
 800572a:	d09b      	beq.n	8005664 <_printf_i+0x164>
 800572c:	3501      	adds	r5, #1
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	9903      	ldr	r1, [sp, #12]
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	42ab      	cmp	r3, r5
 8005736:	dcf2      	bgt.n	800571e <_printf_i+0x21e>
 8005738:	e7eb      	b.n	8005712 <_printf_i+0x212>
 800573a:	2500      	movs	r5, #0
 800573c:	f104 0619 	add.w	r6, r4, #25
 8005740:	e7f5      	b.n	800572e <_printf_i+0x22e>
 8005742:	bf00      	nop
 8005744:	08005af9 	.word	0x08005af9
 8005748:	08005b0a 	.word	0x08005b0a

0800574c <memchr>:
 800574c:	b2c9      	uxtb	r1, r1
 800574e:	4402      	add	r2, r0
 8005750:	b510      	push	{r4, lr}
 8005752:	4290      	cmp	r0, r2
 8005754:	4603      	mov	r3, r0
 8005756:	d101      	bne.n	800575c <memchr+0x10>
 8005758:	2300      	movs	r3, #0
 800575a:	e003      	b.n	8005764 <memchr+0x18>
 800575c:	781c      	ldrb	r4, [r3, #0]
 800575e:	3001      	adds	r0, #1
 8005760:	428c      	cmp	r4, r1
 8005762:	d1f6      	bne.n	8005752 <memchr+0x6>
 8005764:	4618      	mov	r0, r3
 8005766:	bd10      	pop	{r4, pc}

08005768 <memcpy>:
 8005768:	440a      	add	r2, r1
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	4291      	cmp	r1, r2
 800576e:	d100      	bne.n	8005772 <memcpy+0xa>
 8005770:	4770      	bx	lr
 8005772:	b510      	push	{r4, lr}
 8005774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005778:	4291      	cmp	r1, r2
 800577a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577e:	d1f9      	bne.n	8005774 <memcpy+0xc>
 8005780:	bd10      	pop	{r4, pc}

08005782 <memmove>:
 8005782:	4288      	cmp	r0, r1
 8005784:	b510      	push	{r4, lr}
 8005786:	eb01 0402 	add.w	r4, r1, r2
 800578a:	d902      	bls.n	8005792 <memmove+0x10>
 800578c:	4284      	cmp	r4, r0
 800578e:	4623      	mov	r3, r4
 8005790:	d807      	bhi.n	80057a2 <memmove+0x20>
 8005792:	1e43      	subs	r3, r0, #1
 8005794:	42a1      	cmp	r1, r4
 8005796:	d008      	beq.n	80057aa <memmove+0x28>
 8005798:	f811 2b01 	ldrb.w	r2, [r1], #1
 800579c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057a0:	e7f8      	b.n	8005794 <memmove+0x12>
 80057a2:	4402      	add	r2, r0
 80057a4:	4601      	mov	r1, r0
 80057a6:	428a      	cmp	r2, r1
 80057a8:	d100      	bne.n	80057ac <memmove+0x2a>
 80057aa:	bd10      	pop	{r4, pc}
 80057ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057b4:	e7f7      	b.n	80057a6 <memmove+0x24>
	...

080057b8 <_free_r>:
 80057b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ba:	2900      	cmp	r1, #0
 80057bc:	d043      	beq.n	8005846 <_free_r+0x8e>
 80057be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c2:	1f0c      	subs	r4, r1, #4
 80057c4:	9001      	str	r0, [sp, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfb8      	it	lt
 80057ca:	18e4      	addlt	r4, r4, r3
 80057cc:	f000 f914 	bl	80059f8 <__malloc_lock>
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <_free_r+0x94>)
 80057d2:	9801      	ldr	r0, [sp, #4]
 80057d4:	6813      	ldr	r3, [r2, #0]
 80057d6:	b933      	cbnz	r3, 80057e6 <_free_r+0x2e>
 80057d8:	6063      	str	r3, [r4, #4]
 80057da:	6014      	str	r4, [r2, #0]
 80057dc:	b003      	add	sp, #12
 80057de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057e2:	f000 b90f 	b.w	8005a04 <__malloc_unlock>
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	d908      	bls.n	80057fc <_free_r+0x44>
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	1961      	adds	r1, r4, r5
 80057ee:	428b      	cmp	r3, r1
 80057f0:	bf01      	itttt	eq
 80057f2:	6819      	ldreq	r1, [r3, #0]
 80057f4:	685b      	ldreq	r3, [r3, #4]
 80057f6:	1949      	addeq	r1, r1, r5
 80057f8:	6021      	streq	r1, [r4, #0]
 80057fa:	e7ed      	b.n	80057d8 <_free_r+0x20>
 80057fc:	461a      	mov	r2, r3
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	b10b      	cbz	r3, 8005806 <_free_r+0x4e>
 8005802:	42a3      	cmp	r3, r4
 8005804:	d9fa      	bls.n	80057fc <_free_r+0x44>
 8005806:	6811      	ldr	r1, [r2, #0]
 8005808:	1855      	adds	r5, r2, r1
 800580a:	42a5      	cmp	r5, r4
 800580c:	d10b      	bne.n	8005826 <_free_r+0x6e>
 800580e:	6824      	ldr	r4, [r4, #0]
 8005810:	4421      	add	r1, r4
 8005812:	1854      	adds	r4, r2, r1
 8005814:	6011      	str	r1, [r2, #0]
 8005816:	42a3      	cmp	r3, r4
 8005818:	d1e0      	bne.n	80057dc <_free_r+0x24>
 800581a:	681c      	ldr	r4, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4421      	add	r1, r4
 8005820:	6053      	str	r3, [r2, #4]
 8005822:	6011      	str	r1, [r2, #0]
 8005824:	e7da      	b.n	80057dc <_free_r+0x24>
 8005826:	d902      	bls.n	800582e <_free_r+0x76>
 8005828:	230c      	movs	r3, #12
 800582a:	6003      	str	r3, [r0, #0]
 800582c:	e7d6      	b.n	80057dc <_free_r+0x24>
 800582e:	6825      	ldr	r5, [r4, #0]
 8005830:	1961      	adds	r1, r4, r5
 8005832:	428b      	cmp	r3, r1
 8005834:	bf02      	ittt	eq
 8005836:	6819      	ldreq	r1, [r3, #0]
 8005838:	685b      	ldreq	r3, [r3, #4]
 800583a:	1949      	addeq	r1, r1, r5
 800583c:	6063      	str	r3, [r4, #4]
 800583e:	bf08      	it	eq
 8005840:	6021      	streq	r1, [r4, #0]
 8005842:	6054      	str	r4, [r2, #4]
 8005844:	e7ca      	b.n	80057dc <_free_r+0x24>
 8005846:	b003      	add	sp, #12
 8005848:	bd30      	pop	{r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	20000170 	.word	0x20000170

08005850 <sbrk_aligned>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4e0e      	ldr	r6, [pc, #56]	; (800588c <sbrk_aligned+0x3c>)
 8005854:	460c      	mov	r4, r1
 8005856:	4605      	mov	r5, r0
 8005858:	6831      	ldr	r1, [r6, #0]
 800585a:	b911      	cbnz	r1, 8005862 <sbrk_aligned+0x12>
 800585c:	f000 f8bc 	bl	80059d8 <_sbrk_r>
 8005860:	6030      	str	r0, [r6, #0]
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 f8b7 	bl	80059d8 <_sbrk_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d00a      	beq.n	8005884 <sbrk_aligned+0x34>
 800586e:	1cc4      	adds	r4, r0, #3
 8005870:	f024 0403 	bic.w	r4, r4, #3
 8005874:	42a0      	cmp	r0, r4
 8005876:	d007      	beq.n	8005888 <sbrk_aligned+0x38>
 8005878:	1a21      	subs	r1, r4, r0
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f8ac 	bl	80059d8 <_sbrk_r>
 8005880:	3001      	adds	r0, #1
 8005882:	d101      	bne.n	8005888 <sbrk_aligned+0x38>
 8005884:	f04f 34ff 	mov.w	r4, #4294967295
 8005888:	4620      	mov	r0, r4
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	20000174 	.word	0x20000174

08005890 <_malloc_r>:
 8005890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005894:	1ccd      	adds	r5, r1, #3
 8005896:	4607      	mov	r7, r0
 8005898:	f025 0503 	bic.w	r5, r5, #3
 800589c:	3508      	adds	r5, #8
 800589e:	2d0c      	cmp	r5, #12
 80058a0:	bf38      	it	cc
 80058a2:	250c      	movcc	r5, #12
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	db01      	blt.n	80058ac <_malloc_r+0x1c>
 80058a8:	42a9      	cmp	r1, r5
 80058aa:	d905      	bls.n	80058b8 <_malloc_r+0x28>
 80058ac:	230c      	movs	r3, #12
 80058ae:	2600      	movs	r6, #0
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4630      	mov	r0, r6
 80058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b8:	4e2e      	ldr	r6, [pc, #184]	; (8005974 <_malloc_r+0xe4>)
 80058ba:	f000 f89d 	bl	80059f8 <__malloc_lock>
 80058be:	6833      	ldr	r3, [r6, #0]
 80058c0:	461c      	mov	r4, r3
 80058c2:	bb34      	cbnz	r4, 8005912 <_malloc_r+0x82>
 80058c4:	4629      	mov	r1, r5
 80058c6:	4638      	mov	r0, r7
 80058c8:	f7ff ffc2 	bl	8005850 <sbrk_aligned>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	4604      	mov	r4, r0
 80058d0:	d14d      	bne.n	800596e <_malloc_r+0xde>
 80058d2:	6834      	ldr	r4, [r6, #0]
 80058d4:	4626      	mov	r6, r4
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	d140      	bne.n	800595c <_malloc_r+0xcc>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	4631      	mov	r1, r6
 80058de:	4638      	mov	r0, r7
 80058e0:	eb04 0803 	add.w	r8, r4, r3
 80058e4:	f000 f878 	bl	80059d8 <_sbrk_r>
 80058e8:	4580      	cmp	r8, r0
 80058ea:	d13a      	bne.n	8005962 <_malloc_r+0xd2>
 80058ec:	6821      	ldr	r1, [r4, #0]
 80058ee:	3503      	adds	r5, #3
 80058f0:	4638      	mov	r0, r7
 80058f2:	1a6d      	subs	r5, r5, r1
 80058f4:	f025 0503 	bic.w	r5, r5, #3
 80058f8:	3508      	adds	r5, #8
 80058fa:	2d0c      	cmp	r5, #12
 80058fc:	bf38      	it	cc
 80058fe:	250c      	movcc	r5, #12
 8005900:	4629      	mov	r1, r5
 8005902:	f7ff ffa5 	bl	8005850 <sbrk_aligned>
 8005906:	3001      	adds	r0, #1
 8005908:	d02b      	beq.n	8005962 <_malloc_r+0xd2>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	442b      	add	r3, r5
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	e00e      	b.n	8005930 <_malloc_r+0xa0>
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	1b52      	subs	r2, r2, r5
 8005916:	d41e      	bmi.n	8005956 <_malloc_r+0xc6>
 8005918:	2a0b      	cmp	r2, #11
 800591a:	d916      	bls.n	800594a <_malloc_r+0xba>
 800591c:	1961      	adds	r1, r4, r5
 800591e:	42a3      	cmp	r3, r4
 8005920:	6025      	str	r5, [r4, #0]
 8005922:	bf18      	it	ne
 8005924:	6059      	strne	r1, [r3, #4]
 8005926:	6863      	ldr	r3, [r4, #4]
 8005928:	bf08      	it	eq
 800592a:	6031      	streq	r1, [r6, #0]
 800592c:	5162      	str	r2, [r4, r5]
 800592e:	604b      	str	r3, [r1, #4]
 8005930:	f104 060b 	add.w	r6, r4, #11
 8005934:	4638      	mov	r0, r7
 8005936:	f000 f865 	bl	8005a04 <__malloc_unlock>
 800593a:	1d23      	adds	r3, r4, #4
 800593c:	f026 0607 	bic.w	r6, r6, #7
 8005940:	1af2      	subs	r2, r6, r3
 8005942:	d0b6      	beq.n	80058b2 <_malloc_r+0x22>
 8005944:	1b9b      	subs	r3, r3, r6
 8005946:	50a3      	str	r3, [r4, r2]
 8005948:	e7b3      	b.n	80058b2 <_malloc_r+0x22>
 800594a:	6862      	ldr	r2, [r4, #4]
 800594c:	42a3      	cmp	r3, r4
 800594e:	bf0c      	ite	eq
 8005950:	6032      	streq	r2, [r6, #0]
 8005952:	605a      	strne	r2, [r3, #4]
 8005954:	e7ec      	b.n	8005930 <_malloc_r+0xa0>
 8005956:	4623      	mov	r3, r4
 8005958:	6864      	ldr	r4, [r4, #4]
 800595a:	e7b2      	b.n	80058c2 <_malloc_r+0x32>
 800595c:	4634      	mov	r4, r6
 800595e:	6876      	ldr	r6, [r6, #4]
 8005960:	e7b9      	b.n	80058d6 <_malloc_r+0x46>
 8005962:	230c      	movs	r3, #12
 8005964:	4638      	mov	r0, r7
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	f000 f84c 	bl	8005a04 <__malloc_unlock>
 800596c:	e7a1      	b.n	80058b2 <_malloc_r+0x22>
 800596e:	6025      	str	r5, [r4, #0]
 8005970:	e7de      	b.n	8005930 <_malloc_r+0xa0>
 8005972:	bf00      	nop
 8005974:	20000170 	.word	0x20000170

08005978 <_realloc_r>:
 8005978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597c:	4680      	mov	r8, r0
 800597e:	4614      	mov	r4, r2
 8005980:	460e      	mov	r6, r1
 8005982:	b921      	cbnz	r1, 800598e <_realloc_r+0x16>
 8005984:	4611      	mov	r1, r2
 8005986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800598a:	f7ff bf81 	b.w	8005890 <_malloc_r>
 800598e:	b92a      	cbnz	r2, 800599c <_realloc_r+0x24>
 8005990:	4625      	mov	r5, r4
 8005992:	f7ff ff11 	bl	80057b8 <_free_r>
 8005996:	4628      	mov	r0, r5
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599c:	f000 f838 	bl	8005a10 <_malloc_usable_size_r>
 80059a0:	4284      	cmp	r4, r0
 80059a2:	4607      	mov	r7, r0
 80059a4:	d802      	bhi.n	80059ac <_realloc_r+0x34>
 80059a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059aa:	d812      	bhi.n	80059d2 <_realloc_r+0x5a>
 80059ac:	4621      	mov	r1, r4
 80059ae:	4640      	mov	r0, r8
 80059b0:	f7ff ff6e 	bl	8005890 <_malloc_r>
 80059b4:	4605      	mov	r5, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d0ed      	beq.n	8005996 <_realloc_r+0x1e>
 80059ba:	42bc      	cmp	r4, r7
 80059bc:	4622      	mov	r2, r4
 80059be:	4631      	mov	r1, r6
 80059c0:	bf28      	it	cs
 80059c2:	463a      	movcs	r2, r7
 80059c4:	f7ff fed0 	bl	8005768 <memcpy>
 80059c8:	4631      	mov	r1, r6
 80059ca:	4640      	mov	r0, r8
 80059cc:	f7ff fef4 	bl	80057b8 <_free_r>
 80059d0:	e7e1      	b.n	8005996 <_realloc_r+0x1e>
 80059d2:	4635      	mov	r5, r6
 80059d4:	e7df      	b.n	8005996 <_realloc_r+0x1e>
	...

080059d8 <_sbrk_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	2300      	movs	r3, #0
 80059dc:	4d05      	ldr	r5, [pc, #20]	; (80059f4 <_sbrk_r+0x1c>)
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb fdc4 	bl	8001570 <_sbrk>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_sbrk_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_sbrk_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000178 	.word	0x20000178

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__malloc_lock+0x8>)
 80059fa:	f000 b811 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	2000017c 	.word	0x2000017c

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f000 b80c 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	2000017c 	.word	0x2000017c

08005a10 <_malloc_usable_size_r>:
 8005a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a14:	1f18      	subs	r0, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfbc      	itt	lt
 8005a1a:	580b      	ldrlt	r3, [r1, r0]
 8005a1c:	18c0      	addlt	r0, r0, r3
 8005a1e:	4770      	bx	lr

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <_init>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr

08005a30 <_fini>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr
