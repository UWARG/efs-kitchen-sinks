
ZP_AirSpeed_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b00  08005b00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b08  08005b08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b0c  08005b0c  00015b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08005b80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005b80  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1fd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb2  00000000  00000000  0002e2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00030258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00030fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028102  00000000  00000000  00031c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f02d  00000000  00000000  00059d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feed1  00000000  00000000  00068d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167c20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  00167c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a04 	.word	0x08005a04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08005a04 	.word	0x08005a04

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b982 	b.w	8000edc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d148      	bne.n	8000c90 <__udivmoddi4+0xa0>
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	4694      	mov	ip, r2
 8000c02:	d961      	bls.n	8000cc8 <__udivmoddi4+0xd8>
 8000c04:	fab2 f382 	clz	r3, r2
 8000c08:	b143      	cbz	r3, 8000c1c <__udivmoddi4+0x2c>
 8000c0a:	f1c3 0120 	rsb	r1, r3, #32
 8000c0e:	409f      	lsls	r7, r3
 8000c10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c14:	409c      	lsls	r4, r3
 8000c16:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1a:	430f      	orrs	r7, r1
 8000c1c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c20:	fa1f fe8c 	uxth.w	lr, ip
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c2a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c2e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c32:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c36:	4290      	cmp	r0, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x5c>
 8000c3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x5a>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f200 8137 	bhi.w	8000eb8 <__udivmoddi4+0x2c8>
 8000c4a:	463e      	mov	r6, r7
 8000c4c:	1a12      	subs	r2, r2, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c54:	fb01 2210 	mls	r2, r1, r0, r2
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x86>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x84>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 811c 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000c74:	4610      	mov	r0, r2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	2600      	movs	r6, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0x9a>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0xb8>
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	f000 80fd 	beq.w	8000e94 <__udivmoddi4+0x2a4>
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca8:	fab3 f683 	clz	r6, r3
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d14b      	bne.n	8000d48 <__udivmoddi4+0x158>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	f0c0 80f2 	bcc.w	8000e9a <__udivmoddi4+0x2aa>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f240 80ef 	bls.w	8000e9a <__udivmoddi4+0x2aa>
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e3      	beq.n	8000c8a <__udivmoddi4+0x9a>
 8000cc2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cc6:	e7e0      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xdc>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f382 	clz	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 809d 	bne.w	8000e10 <__udivmoddi4+0x220>
 8000cd6:	1a89      	subs	r1, r1, r2
 8000cd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cdc:	b297      	uxth	r7, r2
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000ce6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb07 f002 	mul.w	r0, r7, r2
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d90f      	bls.n	8000d16 <__udivmoddi4+0x126>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cfe:	bf2c      	ite	cs
 8000d00:	f04f 0901 	movcs.w	r9, #1
 8000d04:	f04f 0900 	movcc.w	r9, #0
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	d903      	bls.n	8000d14 <__udivmoddi4+0x124>
 8000d0c:	f1b9 0f00 	cmp.w	r9, #0
 8000d10:	f000 80cf 	beq.w	8000eb2 <__udivmoddi4+0x2c2>
 8000d14:	4642      	mov	r2, r8
 8000d16:	1a09      	subs	r1, r1, r0
 8000d18:	b2a4      	uxth	r4, r4
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x150>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x14e>
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	f200 80b4 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	1be4      	subs	r4, r4, r7
 8000d42:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d46:	e79b      	b.n	8000c80 <__udivmoddi4+0x90>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	40f9      	lsrs	r1, r7
 8000d58:	40b2      	lsls	r2, r6
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	431c      	orrs	r4, r3
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d76:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x1b6>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0b01 	movcs.w	fp, #1
 8000d94:	f04f 0b00 	movcc.w	fp, #0
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x1b4>
 8000d9c:	f1bb 0f00 	cmp.w	fp, #0
 8000da0:	f000 808d 	beq.w	8000ebe <__udivmoddi4+0x2ce>
 8000da4:	46d0      	mov	r8, sl
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dae:	fb09 1110 	mls	r1, r9, r0, r1
 8000db2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dba:	458e      	cmp	lr, r1
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1de>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d201      	bcs.n	8000dcc <__udivmoddi4+0x1dc>
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d87f      	bhi.n	8000ecc <__udivmoddi4+0x2dc>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dda:	4541      	cmp	r1, r8
 8000ddc:	464c      	mov	r4, r9
 8000dde:	46c6      	mov	lr, r8
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x1f8>
 8000de2:	d106      	bne.n	8000df2 <__udivmoddi4+0x202>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d204      	bcs.n	8000df2 <__udivmoddi4+0x202>
 8000de8:	3801      	subs	r0, #1
 8000dea:	ebb9 0402 	subs.w	r4, r9, r2
 8000dee:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d070      	beq.n	8000ed8 <__udivmoddi4+0x2e8>
 8000df6:	1b1a      	subs	r2, r3, r4
 8000df8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfc:	fa22 f306 	lsr.w	r3, r2, r6
 8000e00:	fa01 f707 	lsl.w	r7, r1, r7
 8000e04:	40f1      	lsrs	r1, r6
 8000e06:	2600      	movs	r6, #0
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	e73c      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0020 	rsb	r0, r3, #32
 8000e18:	fa01 f203 	lsl.w	r2, r1, r3
 8000e1c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e20:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e24:	fa24 f100 	lsr.w	r1, r4, r0
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	409c      	lsls	r4, r3
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e34:	0c0a      	lsrs	r2, r1, #16
 8000e36:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e3a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e3e:	fb00 f607 	mul.w	r6, r0, r7
 8000e42:	4296      	cmp	r6, r2
 8000e44:	d90e      	bls.n	8000e64 <__udivmoddi4+0x274>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4296      	cmp	r6, r2
 8000e5a:	d902      	bls.n	8000e62 <__udivmoddi4+0x272>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	d031      	beq.n	8000ec6 <__udivmoddi4+0x2d6>
 8000e62:	4640      	mov	r0, r8
 8000e64:	1b92      	subs	r2, r2, r6
 8000e66:	b289      	uxth	r1, r1
 8000e68:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e6c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e74:	fb06 f207 	mul.w	r2, r6, r7
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x29c>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e84:	d201      	bcs.n	8000e8a <__udivmoddi4+0x29a>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d823      	bhi.n	8000ed2 <__udivmoddi4+0x2e2>
 8000e8a:	4646      	mov	r6, r8
 8000e8c:	1a89      	subs	r1, r1, r2
 8000e8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e92:	e725      	b.n	8000ce0 <__udivmoddi4+0xf0>
 8000e94:	462e      	mov	r6, r5
 8000e96:	4628      	mov	r0, r5
 8000e98:	e6f7      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e9a:	1a84      	subs	r4, r0, r2
 8000e9c:	eb61 0303 	sbc.w	r3, r1, r3
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	461f      	mov	r7, r3
 8000ea4:	e70b      	b.n	8000cbe <__udivmoddi4+0xce>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e749      	b.n	8000d40 <__udivmoddi4+0x150>
 8000eac:	4464      	add	r4, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	e6e1      	b.n	8000c76 <__udivmoddi4+0x86>
 8000eb2:	3a02      	subs	r2, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	e72e      	b.n	8000d16 <__udivmoddi4+0x126>
 8000eb8:	3e02      	subs	r6, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	e6c6      	b.n	8000c4c <__udivmoddi4+0x5c>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e76f      	b.n	8000da6 <__udivmoddi4+0x1b6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	e7cb      	b.n	8000e64 <__udivmoddi4+0x274>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e77d      	b.n	8000dce <__udivmoddi4+0x1de>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	e7d9      	b.n	8000e8c <__udivmoddi4+0x29c>
 8000ed8:	462e      	mov	r6, r5
 8000eda:	e6d6      	b.n	8000c8a <__udivmoddi4+0x9a>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b093      	sub	sp, #76	; 0x4c
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fc50 	bl	800178a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f92d 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f9fb 	bl	80012e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f96f 	bl	80011d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 f9ab 	bl	8001250 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Tell AIRSPEED that we want to read from the airspeed sensor
    buf[0] = DF_COMMAND;
 8000efa:	2300      	movs	r3, #0
 8000efc:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Master_Transmit(&hi2c1, AIRSPEED_ADDR, buf, 1, HAL_MAX_DELAY);
 8000efe:	2350      	movs	r3, #80	; 0x50
 8000f00:	b299      	uxth	r1, r3
 8000f02:	1d3a      	adds	r2, r7, #4
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4880      	ldr	r0, [pc, #512]	; (8001110 <main+0x230>)
 8000f0e:	f000 ffcb 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if ( ret != HAL_OK ) {
 8000f18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d008      	beq.n	8000f32 <main+0x52>
      strcpy((char*)buf, "Error Tx\r\n");
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4a7c      	ldr	r2, [pc, #496]	; (8001114 <main+0x234>)
 8000f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f26:	c303      	stmia	r3!, {r0, r1}
 8000f28:	801a      	strh	r2, [r3, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	0c12      	lsrs	r2, r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e0d8      	b.n	80010e4 <main+0x204>
    } else {

      // Read 4 bytes from the airspeed register
      ret = HAL_I2C_Master_Receive(&hi2c1, AIRSPEED_ADDR, buf, 4, HAL_MAX_DELAY);
 8000f32:	2350      	movs	r3, #80	; 0x50
 8000f34:	b299      	uxth	r1, r3
 8000f36:	1d3a      	adds	r2, r7, #4
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2304      	movs	r3, #4
 8000f40:	4873      	ldr	r0, [pc, #460]	; (8001110 <main+0x230>)
 8000f42:	f001 f8a5 	bl	8002090 <HAL_I2C_Master_Receive>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if ( ret != HAL_OK ) {
 8000f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <main+0x86>
        strcpy((char*)buf, "Error Rx\r\n");
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	4a70      	ldr	r2, [pc, #448]	; (8001118 <main+0x238>)
 8000f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f5a:	c303      	stmia	r3!, {r0, r1}
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	0c12      	lsrs	r2, r2, #16
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e0be      	b.n	80010e4 <main+0x204>
      } else {

        //interpreting raw data
    	  dp_raw = ((int16_t)buf[0] << 8) + (int16_t)buf[1];
 8000f66:	793b      	ldrb	r3, [r7, #4]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	87bb      	strh	r3, [r7, #60]	; 0x3c
    	  dp_raw = 0x3FFF & dp_raw;
 8000f78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f7a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f7e:	87bb      	strh	r3, [r7, #60]	; 0x3c

    	  dt_raw = ((int16_t)buf[2] << 8) + (int16_t)buf[3];
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	877b      	strh	r3, [r7, #58]	; 0x3a
    	  dt_raw = (0xFFE0 & dt_raw) >> 5;
 8000f92:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000f96:	115b      	asrs	r3, r3, #5
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f9e:	877b      	strh	r3, [r7, #58]	; 0x3a

    	//call error when either of the those data is at the max or min value
    	  if (dp_raw  == 0x3FFF || dp_raw  == 0 || dt_raw  == 0x7FF || dt_raw == 0)
 8000fa0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000fa4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <main+0xe8>
 8000fac:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d009      	beq.n	8000fc8 <main+0xe8>
 8000fb4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000fb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <main+0xe8>
 8000fc0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d106      	bne.n	8000fd6 <main+0xf6>
    	  {
    		  strcpy((char*)buf, "Error Datax\r\n");
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4a54      	ldr	r2, [pc, #336]	; (800111c <main+0x23c>)
 8000fcc:	461c      	mov	r4, r3
 8000fce:	4613      	mov	r3, r2
 8000fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd2:	c407      	stmia	r4!, {r0, r1, r2}
 8000fd4:	8023      	strh	r3, [r4, #0]
    	  }

    	//pressure measurement
    	  const float P_max = 100; //what is the range?!!
 8000fd6:	4b52      	ldr	r3, [pc, #328]	; (8001120 <main+0x240>)
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    	  const float P_min = - P_max;
 8000fda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fde:	eef1 7a67 	vneg.f32	s15, s15
 8000fe2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    	  const float PSI_to_Pa = 6894.757f;
 8000fe6:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <main+0x244>)
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

    	  //calculation can be different depend on the output type(A/B)
    	  float diff_press_PSI  = -((dp_raw - 0.1f*16383) * (P_max-P_min)/(0.8f*16383) + P_min);
 8000fea:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001128 <main+0x248>
 8000ffa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000ffe:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001002:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001006:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800112c <main+0x24c>
 8001012:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001016:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	eef1 7a67 	vneg.f32	s15, s15
 8001022:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    	  pressure  = diff_press_PSI * PSI_to_Pa;
 8001026:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800102a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001032:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    	//temperature measurement
    	  temperature  = ((200.0f * dt_raw) / 2047) - 50;
 8001036:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001042:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001130 <main+0x250>
 8001046:	ee27 7a87 	vmul.f32	s14, s15, s14
 800104a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001134 <main+0x254>
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001138 <main+0x258>
 8001056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800105a:	edc7 7a08 	vstr	s15, [r7, #32]

    	//airspeed calculation
    	  const float R = 287.5; //some kind of air constant
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <main+0x25c>)
 8001060:	61fb      	str	r3, [r7, #28]
    	  float K = temperature - 273.15; //temp in kelvin
 8001062:	6a38      	ldr	r0, [r7, #32]
 8001064:	f7ff fa54 	bl	8000510 <__aeabi_f2d>
 8001068:	a327      	add	r3, pc, #156	; (adr r3, 8001108 <main+0x228>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff f8ef 	bl	8000250 <__aeabi_dsub>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fd51 	bl	8000b20 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
    	  float rho = pressure / (R * K); // air density
 8001082:	ed97 7a07 	vldr	s14, [r7, #28]
 8001086:	edd7 7a06 	vldr	s15, [r7, #24]
 800108a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001096:	edc7 7a05 	vstr	s15, [r7, #20]
    	  airspeed = sqrt((2*pressure) / rho);
 800109a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800109e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010aa:	ee16 0a90 	vmov	r0, s13
 80010ae:	f7ff fa2f 	bl	8000510 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	ec43 2b10 	vmov	d0, r2, r3
 80010ba:	f003 ff0f 	bl	8004edc <sqrt>
 80010be:	ec53 2b10 	vmov	r2, r3, d0
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd2b 	bl	8000b20 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]

        sprintf((char*)buf,
 80010ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	ee17 2a90 	vmov	r2, s15
 80010dc:	4918      	ldr	r1, [pc, #96]	; (8001140 <main+0x260>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 f812 	bl	8005108 <siprintf>
              ((unsigned int)airspeed));
      }
    }

    // Send out buffer (temperature or error message)
    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f8a6 	bl	8000238 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	1d39      	adds	r1, r7, #4
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	4813      	ldr	r0, [pc, #76]	; (8001144 <main+0x264>)
 80010f8:	f003 f8ea 	bl	80042d0 <HAL_UART_Transmit>

    // Wait
    HAL_Delay(500);
 80010fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001100:	f000 fbba 	bl	8001878 <HAL_Delay>
    buf[0] = DF_COMMAND;
 8001104:	e6f9      	b.n	8000efa <main+0x1a>
 8001106:	bf00      	nop
 8001108:	66666666 	.word	0x66666666
 800110c:	40711266 	.word	0x40711266
 8001110:	2000008c 	.word	0x2000008c
 8001114:	08005a1c 	.word	0x08005a1c
 8001118:	08005a28 	.word	0x08005a28
 800111c:	08005a34 	.word	0x08005a34
 8001120:	42c80000 	.word	0x42c80000
 8001124:	45d7760e 	.word	0x45d7760e
 8001128:	44ccc99a 	.word	0x44ccc99a
 800112c:	464cc99a 	.word	0x464cc99a
 8001130:	43480000 	.word	0x43480000
 8001134:	44ffe000 	.word	0x44ffe000
 8001138:	42480000 	.word	0x42480000
 800113c:	438fc000 	.word	0x438fc000
 8001140:	08005a44 	.word	0x08005a44
 8001144:	200000d8 	.word	0x200000d8

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b098      	sub	sp, #96	; 0x60
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2248      	movs	r2, #72	; 0x48
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 ffce 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800116a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800116e:	f001 fb0b 	bl	8002788 <HAL_PWREx_ControlVoltageScaling>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001178:	f000 f8da 	bl	8001330 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800117c:	2310      	movs	r3, #16
 800117e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001188:	2360      	movs	r3, #96	; 0x60
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fb77 	bl	8002888 <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011a0:	f000 f8c6 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	230f      	movs	r3, #15
 80011a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 f845 	bl	800324c <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011c8:	f000 f8b2 	bl	8001330 <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3760      	adds	r7, #96	; 0x60
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C1_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_I2C1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e0:	f640 6214 	movw	r2, #3604	; 0xe14
 80011e4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_I2C1_Init+0x74>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_I2C1_Init+0x74>)
 8001212:	f000 fdb9 	bl	8001d88 <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 f888 	bl	8001330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_I2C1_Init+0x74>)
 8001224:	f001 fa0a 	bl	800263c <HAL_I2CEx_ConfigAnalogFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800122e:	f000 f87f 	bl	8001330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x74>)
 8001236:	f001 fa4c 	bl	80026d2 <HAL_I2CEx_ConfigDigitalFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001240:	f000 f876 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000008c 	.word	0x2000008c
 800124c:	40005400 	.word	0x40005400

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001256:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <MX_USART2_UART_Init+0x94>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 800129a:	f002 ffc9 	bl	8004230 <HAL_UART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012a4:	f000 f844 	bl	8001330 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ac:	f003 fd4c 	bl	8004d48 <HAL_UARTEx_SetTxFifoThreshold>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012b6:	f000 f83b 	bl	8001330 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012be:	f003 fd81 	bl	8004dc4 <HAL_UARTEx_SetRxFifoThreshold>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f000 f832 	bl	8001330 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ce:	f003 fd02 	bl	8004cd6 <HAL_UARTEx_DisableFifoMode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 f82a 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000d8 	.word	0x200000d8
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_GPIO_Init+0x44>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <MX_GPIO_Init+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_GPIO_Init+0x44>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_GPIO_Init+0x44>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <MX_GPIO_Init+0x44>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_GPIO_Init+0x44>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x44>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_MspInit+0x44>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6613      	str	r3, [r2, #96]	; 0x60
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_MspInit+0x44>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x44>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x44>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6593      	str	r3, [r2, #88]	; 0x58
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x44>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0ae      	sub	sp, #184	; 0xb8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2294      	movs	r2, #148	; 0x94
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fea7 	bl	80050f8 <memset>
  if(hi2c->Instance==I2C1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_I2C_MspInit+0xb0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d13b      	bne.n	800142c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fa1f 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013cc:	f7ff ffb0 	bl	8001330 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_I2C_MspInit+0xb4>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_I2C_MspInit+0xb4>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_I2C_MspInit+0xb4>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f0:	2312      	movs	r3, #18
 80013f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001402:	2304      	movs	r3, #4
 8001404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <HAL_I2C_MspInit+0xb8>)
 8001410:	f000 fb3a 	bl	8001a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_I2C_MspInit+0xb4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_I2C_MspInit+0xb4>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141e:	6593      	str	r3, [r2, #88]	; 0x58
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_I2C_MspInit+0xb4>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	37b8      	adds	r7, #184	; 0xb8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005400 	.word	0x40005400
 8001438:	40021000 	.word	0x40021000
 800143c:	42020400 	.word	0x42020400

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ae      	sub	sp, #184	; 0xb8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2294      	movs	r2, #148	; 0x94
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fe49 	bl	80050f8 <memset>
  if(huart->Instance==USART2)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <HAL_UART_MspInit+0xb0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d13a      	bne.n	80014e6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f9c1 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001488:	f7ff ff52 	bl	8001330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_UART_MspInit+0xb4>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_UART_MspInit+0xb4>)
 8001492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_UART_MspInit+0xb4>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_UART_MspInit+0xb4>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <HAL_UART_MspInit+0xb4>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_UART_MspInit+0xb4>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014bc:	230c      	movs	r3, #12
 80014be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d4:	2307      	movs	r3, #7
 80014d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_MspInit+0xb8>)
 80014e2:	f000 fad1 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	37b8      	adds	r7, #184	; 0xb8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40004400 	.word	0x40004400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	42020000 	.word	0x42020000

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f976 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f003 fd90 	bl	80050a4 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20030000 	.word	0x20030000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	20000168 	.word	0x20000168
 80015b8:	20000180 	.word	0x20000180

080015bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80015e6:	4b4f      	ldr	r3, [pc, #316]	; (8001724 <SystemCoreClockUpdate+0x144>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80015f2:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <SystemCoreClockUpdate+0x144>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e005      	b.n	800160e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <SystemCoreClockUpdate+0x144>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800160e:	4a46      	ldr	r2, [pc, #280]	; (8001728 <SystemCoreClockUpdate+0x148>)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <SystemCoreClockUpdate+0x144>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d866      	bhi.n	80016f2 <SystemCoreClockUpdate+0x112>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <SystemCoreClockUpdate+0x4c>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	08001661 	.word	0x08001661
 8001630:	080016f3 	.word	0x080016f3
 8001634:	080016f3 	.word	0x080016f3
 8001638:	080016f3 	.word	0x080016f3
 800163c:	08001669 	.word	0x08001669
 8001640:	080016f3 	.word	0x080016f3
 8001644:	080016f3 	.word	0x080016f3
 8001648:	080016f3 	.word	0x080016f3
 800164c:	08001671 	.word	0x08001671
 8001650:	080016f3 	.word	0x080016f3
 8001654:	080016f3 	.word	0x080016f3
 8001658:	080016f3 	.word	0x080016f3
 800165c:	08001679 	.word	0x08001679
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001660:	4a32      	ldr	r2, [pc, #200]	; (800172c <SystemCoreClockUpdate+0x14c>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	6013      	str	r3, [r2, #0]
      break;
 8001666:	e048      	b.n	80016fa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001668:	4b30      	ldr	r3, [pc, #192]	; (800172c <SystemCoreClockUpdate+0x14c>)
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <SystemCoreClockUpdate+0x150>)
 800166c:	601a      	str	r2, [r3, #0]
      break;
 800166e:	e044      	b.n	80016fa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <SystemCoreClockUpdate+0x14c>)
 8001672:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <SystemCoreClockUpdate+0x150>)
 8001674:	601a      	str	r2, [r3, #0]
      break;
 8001676:	e040      	b.n	80016fa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <SystemCoreClockUpdate+0x144>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <SystemCoreClockUpdate+0x144>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	3301      	adds	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <SystemCoreClockUpdate+0xbe>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d006      	beq.n	80016aa <SystemCoreClockUpdate+0xca>
 800169c:	e00b      	b.n	80016b6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <SystemCoreClockUpdate+0x150>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	613b      	str	r3, [r7, #16]
          break;
 80016a8:	e00b      	b.n	80016c2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <SystemCoreClockUpdate+0x150>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	613b      	str	r3, [r7, #16]
          break;
 80016b4:	e005      	b.n	80016c2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]
          break;
 80016c0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <SystemCoreClockUpdate+0x144>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <SystemCoreClockUpdate+0x144>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0e5b      	lsrs	r3, r3, #25
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	3301      	adds	r3, #1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <SystemCoreClockUpdate+0x14c>)
 80016ee:	6013      	str	r3, [r2, #0]
      break;
 80016f0:	e003      	b.n	80016fa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <SystemCoreClockUpdate+0x14c>)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	6013      	str	r3, [r2, #0]
      break;
 80016f8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <SystemCoreClockUpdate+0x144>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <SystemCoreClockUpdate+0x154>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <SystemCoreClockUpdate+0x14c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemCoreClockUpdate+0x14c>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	08005a64 	.word	0x08005a64
 800172c:	20000000 	.word	0x20000000
 8001730:	00f42400 	.word	0x00f42400
 8001734:	08005a4c 	.word	0x08005a4c

08001738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001770 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800173c:	f7ff ff3e 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001740:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001742:	e003      	b.n	800174c <LoopCopyDataInit>

08001744 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001746:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001748:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800174a:	3104      	adds	r1, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800174c:	480a      	ldr	r0, [pc, #40]	; (8001778 <LoopForever+0xa>)
	ldr	r3, =_edata
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001750:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001752:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001754:	d3f6      	bcc.n	8001744 <CopyDataInit>
	ldr	r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001758:	e002      	b.n	8001760 <LoopFillZerobss>

0800175a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800175a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800175c:	f842 3b04 	str.w	r3, [r2], #4

08001760 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <LoopForever+0x16>)
	cmp	r2, r3
 8001762:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001764:	d3f9      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001766:	f003 fca3 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176a:	f7ff fbb9 	bl	8000ee0 <main>

0800176e <LoopForever>:

LoopForever:
    b LoopForever
 800176e:	e7fe      	b.n	800176e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001770:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001774:	08005b10 	.word	0x08005b10
	ldr	r0, =_sdata
 8001778:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800177c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001780:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001784:	20000180 	.word	0x20000180

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>

0800178a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001794:	2004      	movs	r0, #4
 8001796:	f000 f945 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800179a:	f7ff ff21 	bl	80015e0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179e:	2007      	movs	r0, #7
 80017a0:	f000 f80e 	bl	80017c0 <HAL_InitTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	e001      	b.n	80017b4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b0:	f7ff fdc4 	bl	800133c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_InitTick+0x6c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_InitTick+0x70>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_InitTick+0x6c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f93f 	bl	8001a6e <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b07      	cmp	r3, #7
 80017fa:	d809      	bhi.n	8001810 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f919 	bl	8001a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_InitTick+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e007      	b.n	8001820 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e001      	b.n	8001820 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008
 800185c:	2000016c 	.word	0x2000016c

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2000016c 	.word	0x2000016c

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0152      	lsls	r2, r2, #5
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0152      	lsls	r2, r2, #5
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b03      	cmp	r3, #3
 8001994:	bf28      	it	cs
 8001996:	2303      	movcs	r3, #3
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3303      	adds	r3, #3
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b04      	subs	r3, #4
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	2107      	movs	r1, #7
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff47 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff5e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff90 	bl	8001978 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5f 	bl	8001924 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffb2 	bl	80019e0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a96:	e158      	b.n	8001d4a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 814a 	beq.w	8001d44 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_GPIO_Init+0x48>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac4:	2b11      	cmp	r3, #17
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b12      	cmp	r3, #18
 8001ace:	d130      	bne.n	8001b32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b06:	2201      	movs	r2, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 0201 	and.w	r2, r3, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0xea>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d123      	bne.n	8001bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0203 	and.w	r2, r3, #3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80a4 	beq.w	8001d44 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001bfc:	4a5a      	ldr	r2, [pc, #360]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3318      	adds	r3, #24
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x2e4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d025      	beq.n	8001c74 <HAL_GPIO_Init+0x1ec>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d01f      	beq.n	8001c70 <HAL_GPIO_Init+0x1e8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d019      	beq.n	8001c6c <HAL_GPIO_Init+0x1e4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x1e0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x2f4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1dc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x2f8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1d8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1d4>
 8001c58:	2306      	movs	r3, #6
 8001c5a:	e00c      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	e00a      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c60:	2305      	movs	r3, #5
 8001c62:	e008      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e006      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e004      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_GPIO_Init+0x1ee>
 8001c74:	2300      	movs	r3, #0
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	f002 0203 	and.w	r2, r2, #3
 8001c7c:	00d2      	lsls	r2, r2, #3
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001c86:	4938      	ldr	r1, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cba:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f ae9f 	bne.w	8001a98 <HAL_GPIO_Init+0x10>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	4002f400 	.word	0x4002f400
 8001d6c:	42020000 	.word	0x42020000
 8001d70:	42020400 	.word	0x42020400
 8001d74:	42020800 	.word	0x42020800
 8001d78:	42020c00 	.word	0x42020c00
 8001d7c:	42021000 	.word	0x42021000
 8001d80:	42021400 	.word	0x42021400
 8001d84:	42021800 	.word	0x42021800

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e081      	b.n	8001e9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fae8 	bl	8001384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e006      	b.n	8001e10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d104      	bne.n	8001e22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	ea42 0103 	orr.w	r1, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69d9      	ldr	r1, [r3, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	f040 80da 	bne.w	800207e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2C_Master_Transmit+0x30>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0d3      	b.n	8002080 <HAL_I2C_Master_Transmit+0x1d8>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ee0:	f7ff fcbe 	bl	8001860 <HAL_GetTick>
 8001ee4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2319      	movs	r3, #25
 8001eec:	2201      	movs	r2, #1
 8001eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f9e6 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0be      	b.n	8002080 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2221      	movs	r2, #33	; 0x21
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	893a      	ldrh	r2, [r7, #8]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	d90e      	bls.n	8001f52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	8979      	ldrh	r1, [r7, #10]
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fb48 	bl	80025e0 <I2C_TransferConfig>
 8001f50:	e06c      	b.n	800202c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	4b48      	ldr	r3, [pc, #288]	; (8002088 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fb37 	bl	80025e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f72:	e05b      	b.n	800202c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	6a39      	ldr	r1, [r7, #32]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f9e3 	bl	8002344 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e07b      	b.n	8002080 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d034      	beq.n	800202c <HAL_I2C_Master_Transmit+0x184>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d130      	bne.n	800202c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f975 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e04d      	b.n	8002080 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d90e      	bls.n	800200c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	8979      	ldrh	r1, [r7, #10]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 faeb 	bl	80025e0 <I2C_TransferConfig>
 800200a:	e00f      	b.n	800202c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	b2da      	uxtb	r2, r3
 800201c:	8979      	ldrh	r1, [r7, #10]
 800201e:	2300      	movs	r3, #0
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fada 	bl	80025e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d19e      	bne.n	8001f74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	6a39      	ldr	r1, [r7, #32]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f9c2 	bl	80023c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e01a      	b.n	8002080 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2220      	movs	r2, #32
 8002050:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_I2C_Master_Transmit+0x1e4>)
 800205e:	400b      	ands	r3, r1
 8002060:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
  }
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	80002000 	.word	0x80002000
 800208c:	fe00e800 	.word	0xfe00e800

08002090 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	817b      	strh	r3, [r7, #10]
 80020a0:	4613      	mov	r3, r2
 80020a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	f040 80db 	bne.w	8002268 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_I2C_Master_Receive+0x30>
 80020bc:	2302      	movs	r3, #2
 80020be:	e0d4      	b.n	800226a <HAL_I2C_Master_Receive+0x1da>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c8:	f7ff fbca 	bl	8001860 <HAL_GetTick>
 80020cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2319      	movs	r3, #25
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f8f2 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0bf      	b.n	800226a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2222      	movs	r2, #34	; 0x22
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2210      	movs	r2, #16
 80020f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	2bff      	cmp	r3, #255	; 0xff
 800211a:	d90e      	bls.n	800213a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	22ff      	movs	r2, #255	; 0xff
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	b2da      	uxtb	r2, r3
 8002128:	8979      	ldrh	r1, [r7, #10]
 800212a:	4b52      	ldr	r3, [pc, #328]	; (8002274 <HAL_I2C_Master_Receive+0x1e4>)
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fa54 	bl	80025e0 <I2C_TransferConfig>
 8002138:	e06d      	b.n	8002216 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	b2da      	uxtb	r2, r3
 800214a:	8979      	ldrh	r1, [r7, #10]
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_I2C_Master_Receive+0x1e4>)
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fa43 	bl	80025e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800215a:	e05c      	b.n	8002216 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6a39      	ldr	r1, [r7, #32]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f96b 	bl	800243c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e07c      	b.n	800226a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d034      	beq.n	8002216 <HAL_I2C_Master_Receive+0x186>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d130      	bne.n	8002216 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	2200      	movs	r2, #0
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f880 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e04d      	b.n	800226a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2bff      	cmp	r3, #255	; 0xff
 80021d6:	d90e      	bls.n	80021f6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f9f6 	bl	80025e0 <I2C_TransferConfig>
 80021f4:	e00f      	b.n	8002216 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	b2da      	uxtb	r2, r3
 8002206:	8979      	ldrh	r1, [r7, #10]
 8002208:	2300      	movs	r3, #0
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f9e5 	bl	80025e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d19d      	bne.n	800215c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	6a39      	ldr	r1, [r7, #32]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f8cd 	bl	80023c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e01a      	b.n	800226a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_I2C_Master_Receive+0x1e8>)
 8002248:	400b      	ands	r3, r1
 800224a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	80002400 	.word	0x80002400
 8002278:	fe00e800 	.word	0xfe00e800

0800227c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d103      	bne.n	800229a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d007      	beq.n	80022b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	619a      	str	r2, [r3, #24]
  }
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d4:	e022      	b.n	800231c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d01e      	beq.n	800231c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7ff fabf 	bl	8001860 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d113      	bne.n	800231c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e00f      	b.n	800233c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	429a      	cmp	r2, r3
 8002338:	d0cd      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002350:	e02c      	b.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f8dc 	bl	8002514 <I2C_IsAcknowledgeFailed>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e02a      	b.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d01e      	beq.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7ff fa77 	bl	8001860 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d113      	bne.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d1cb      	bne.n	8002352 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	e028      	b.n	8002424 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f89c 	bl	8002514 <I2C_IsAcknowledgeFailed>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e026      	b.n	8002434 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7ff fa3b 	bl	8001860 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d113      	bne.n	8002424 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e007      	b.n	8002434 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b20      	cmp	r3, #32
 8002430:	d1cf      	bne.n	80023d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002448:	e055      	b.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f860 	bl	8002514 <I2C_IsAcknowledgeFailed>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e053      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d129      	bne.n	80024c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d105      	bne.n	8002486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e03f      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e022      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c0:	f7ff f9ce 	bl	8001860 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d302      	bcc.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d1a2      	bne.n	800244a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	fe00e800 	.word	0xfe00e800

08002514 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b10      	cmp	r3, #16
 800252c:	d151      	bne.n	80025d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252e:	e022      	b.n	8002576 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d01e      	beq.n	8002576 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7ff f992 	bl	8001860 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_IsAcknowledgeFailed+0x3a>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e02e      	b.n	80025d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b20      	cmp	r3, #32
 8002582:	d1d5      	bne.n	8002530 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2210      	movs	r2, #16
 800258a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2220      	movs	r2, #32
 8002592:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fe71 	bl	800227c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <I2C_IsAcknowledgeFailed+0xc8>)
 80025a6:	400b      	ands	r3, r1
 80025a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	fe00e800 	.word	0xfe00e800

080025e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	4613      	mov	r3, r2
 80025f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	0d5b      	lsrs	r3, r3, #21
 80025fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <I2C_TransferConfig+0x58>)
 8002602:	430b      	orrs	r3, r1
 8002604:	43db      	mvns	r3, r3
 8002606:	ea02 0103 	and.w	r1, r2, r3
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002610:	7a7b      	ldrb	r3, [r7, #9]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	431a      	orrs	r2, r3
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	431a      	orrs	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	03ff63ff 	.word	0x03ff63ff

0800263c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	d138      	bne.n	80026c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800265c:	2302      	movs	r3, #2
 800265e:	e032      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800268e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d139      	bne.n	800275c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e033      	b.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2224      	movs	r2, #36	; 0x24
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002724:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_PWREx_GetVoltageRange+0x18>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40007000 	.word	0x40007000

08002788 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002798:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800279a:	f000 f851 	bl	8002840 <HAL_PWREx_SMPS_GetEffectiveMode>
 800279e:	4603      	mov	r3, r0
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a4:	d101      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e03e      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b6:	d101      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e035      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d101      	bne.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e02f      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80027d0:	4917      	ldr	r1, [pc, #92]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80027d8:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	09db      	lsrs	r3, r3, #7
 80027e6:	2232      	movs	r2, #50	; 0x32
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	4a13      	ldr	r2, [pc, #76]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	3301      	adds	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f8:	e002      	b.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280c:	d102      	bne.n	8002814 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f2      	bne.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	d101      	bne.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e000      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40007000 	.word	0x40007000
 8002834:	20000000 	.word	0x20000000
 8002838:	0a7c5ac5 	.word	0x0a7c5ac5
 800283c:	cccccccd 	.word	0xcccccccd

08002840 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	e00a      	b.n	8002874 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	e001      	b.n	8002874 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f000 bcd0 	b.w	800323c <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289c:	4b99      	ldr	r3, [pc, #612]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a6:	4b97      	ldr	r3, [pc, #604]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80e9 	beq.w	8002a90 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4a>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	f040 8083 	bne.w	80029d2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d17f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_RCC_OscConfig+0x64>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f000 bca8 	b.w	800323c <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f0:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_RCC_OscConfig+0x7e>
 80028fc:	4b81      	ldr	r3, [pc, #516]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	e005      	b.n	8002912 <HAL_RCC_OscConfig+0x8a>
 8002906:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002912:	4293      	cmp	r3, r2
 8002914:	d224      	bcs.n	8002960 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fe96 	bl	800364c <RCC_SetFlashLatencyFromMSIRange>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f000 bc88 	b.w	800323c <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800292c:	4b75      	ldr	r3, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a74      	ldr	r2, [pc, #464]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	496f      	ldr	r1, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294a:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	496a      	ldr	r1, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e026      	b.n	80029ae <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002960:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002966:	f043 0308 	orr.w	r3, r3, #8
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	4962      	ldr	r1, [pc, #392]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	495d      	ldr	r1, [pc, #372]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fe55 	bl	800364c <RCC_SetFlashLatencyFromMSIRange>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f000 bc47 	b.w	800323c <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029ae:	f000 fe11 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_RCC_OscConfig+0x280>)
 80029b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029b8:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_RCC_OscConfig+0x284>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe feff 	bl	80017c0 <HAL_InitTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d060      	beq.n	8002a8e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	f000 bc35 	b.w	800323c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d039      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a49      	ldr	r2, [pc, #292]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e6:	f7fe ff3b 	bl	8001860 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ec:	e00f      	b.n	8002a0e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ee:	f7fe ff37 	bl	8001860 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d908      	bls.n	8002a0e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f000 bc17 	b.w	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0e9      	beq.n	80029ee <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	4934      	ldr	r1, [pc, #208]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a38:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	492f      	ldr	r1, [pc, #188]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e020      	b.n	8002a90 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe ff01 	bl	8001860 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a60:	e00e      	b.n	8002a80 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a62:	f7fe fefd 	bl	8001860 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d907      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e3dd      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ea      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1da>
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d07e      	beq.n	8002b9a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x226>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d10b      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d06e      	beq.n	8002b98 <HAL_RCC_OscConfig+0x310>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d16a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e3ba      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x256>
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e024      	b.n	8002b28 <HAL_RCC_OscConfig+0x2a0>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae6:	d113      	bne.n	8002b10 <HAL_RCC_OscConfig+0x288>
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a02      	ldr	r2, [pc, #8]	; (8002b04 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e012      	b.n	8002b28 <HAL_RCC_OscConfig+0x2a0>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	4b8b      	ldr	r3, [pc, #556]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a8a      	ldr	r2, [pc, #552]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a87      	ldr	r2, [pc, #540]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d019      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fe96 	bl	8001860 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b36:	e00e      	b.n	8002b56 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fe92 	bl	8001860 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d907      	bls.n	8002b56 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b46:	4b7e      	ldr	r3, [pc, #504]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e372      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	4b7a      	ldr	r3, [pc, #488]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ea      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2b0>
 8002b62:	e01a      	b.n	8002b9a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fe7c 	bl	8001860 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6a:	e00e      	b.n	8002b8a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fe78 	bl	8001860 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d907      	bls.n	8002b8a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7a:	4b71      	ldr	r3, [pc, #452]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e358      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ea      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2e4>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x330>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d116      	bne.n	8002be6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x348>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e335      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	4958      	ldr	r1, [pc, #352]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be4:	e04c      	b.n	8002c80 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d029      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a53      	ldr	r2, [pc, #332]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fe31 	bl	8001860 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c00:	e00e      	b.n	8002c20 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe fe2d 	bl	8001860 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d907      	bls.n	8002c20 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e30d      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c20:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ea      	beq.n	8002c02 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	4941      	ldr	r1, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e01e      	b.n	8002c80 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a3e      	ldr	r2, [pc, #248]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fe07 	bl	8001860 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c54:	e00e      	b.n	8002c74 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fe03 	bl	8001860 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d907      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e2e3      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ea      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d062      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d038      	beq.n	8002d06 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002ca4:	f023 0310 	bic.w	r3, r3, #16
 8002ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002cac:	e007      	b.n	8002cbe <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fdc7 	bl	8001860 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fdc3 	bl	8001860 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b07      	cmp	r3, #7
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e2a2      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0e8      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x44e>
 8002d04:	e025      	b.n	8002d52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe fda3 	bl	8001860 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d1c:	e012      	b.n	8002d44 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fd9f 	bl	8001860 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b07      	cmp	r3, #7
 8002d2a:	d90b      	bls.n	8002d44 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_RCC_OscConfig+0x4b8>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e27e      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d44:	4ba8      	ldr	r3, [pc, #672]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 812d 	beq.w	8002fba <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d64:	4ba0      	ldr	r3, [pc, #640]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b9d      	ldr	r3, [pc, #628]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a9c      	ldr	r2, [pc, #624]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b9a      	ldr	r3, [pc, #616]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	4b97      	ldr	r3, [pc, #604]	; (8002fec <HAL_RCC_OscConfig+0x764>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11e      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d98:	4b94      	ldr	r3, [pc, #592]	; (8002fec <HAL_RCC_OscConfig+0x764>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a93      	ldr	r2, [pc, #588]	; (8002fec <HAL_RCC_OscConfig+0x764>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7fe fd5c 	bl	8001860 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002daa:	e00e      	b.n	8002dca <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fe fd58 	bl	8001860 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d907      	bls.n	8002dca <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dba:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <HAL_RCC_OscConfig+0x764>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e238      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x764>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ea      	beq.n	8002dac <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01f      	beq.n	8002e22 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dee:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	4a7c      	ldr	r2, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dfe:	4b7a      	ldr	r3, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	4a78      	ldr	r2, [pc, #480]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e10:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	4a74      	ldr	r2, [pc, #464]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e20:	e00f      	b.n	8002e42 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e22:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	4a6f      	ldr	r2, [pc, #444]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e32:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	4a6b      	ldr	r2, [pc, #428]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d068      	beq.n	8002f1c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fd09 	bl	8001860 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e50:	e011      	b.n	8002e76 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fd05 	bl	8001860 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1e2      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e76:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0e6      	beq.n	8002e52 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d022      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e90:	4b55      	ldr	r3, [pc, #340]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	4a54      	ldr	r2, [pc, #336]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ea0:	e011      	b.n	8002ec6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe fcdd 	bl	8001860 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d908      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002eb4:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1ba      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ec6:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0e6      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x61a>
 8002ed4:	e068      	b.n	8002fa8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ed6:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ee6:	e011      	b.n	8002f0c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fcba 	bl	8001860 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d908      	bls.n	8002f0c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002efa:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e197      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f0c:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e6      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x660>
 8002f1a:	e045      	b.n	8002fa8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fca0 	bl	8001860 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f22:	e011      	b.n	8002f48 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fc9c 	bl	8001860 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d908      	bls.n	8002f48 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e179      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e6      	bne.n	8002f24 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d021      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f74:	e011      	b.n	8002f9a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fc73 	bl	8001860 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e150      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e6      	bne.n	8002f76 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa8:	7ffb      	ldrb	r3, [r7, #31]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d04f      	beq.n	8003066 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <HAL_RCC_OscConfig+0x760>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe fc3f 	bl	8001860 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fe4:	e014      	b.n	8003010 <HAL_RCC_OscConfig+0x788>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff0:	f7fe fc36 	bl	8001860 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d908      	bls.n	8003010 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ffe:	4b91      	ldr	r3, [pc, #580]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e115      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003010:	4b8c      	ldr	r3, [pc, #560]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0e8      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x768>
 800301e:	e022      	b.n	8003066 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003020:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003026:	4a87      	ldr	r2, [pc, #540]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe fc16 	bl	8001860 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003036:	e00f      	b.n	8003058 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003038:	f7fe fc12 	bl	8001860 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d908      	bls.n	8003058 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003046:	4b7f      	ldr	r3, [pc, #508]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0f1      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003058:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800305a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e8      	bne.n	8003038 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80e5 	beq.w	800323a <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003070:	4b74      	ldr	r3, [pc, #464]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b0c      	cmp	r3, #12
 800307a:	f000 809f 	beq.w	80031bc <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	2b02      	cmp	r3, #2
 8003084:	d166      	bne.n	8003154 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6e      	ldr	r2, [pc, #440]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800308c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fe fbe5 	bl	8001860 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003098:	e00e      	b.n	80030b8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fbe1 	bl	8001860 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d907      	bls.n	80030b8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a8:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0c1      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	4b62      	ldr	r3, [pc, #392]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ea      	bne.n	800309a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c4:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <HAL_RCC_OscConfig+0x9c0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030d4:	3a01      	subs	r2, #1
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030de:	0212      	lsls	r2, r2, #8
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0552      	lsls	r2, r2, #21
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0652      	lsls	r2, r2, #25
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030fe:	06d2      	lsls	r2, r2, #27
 8003100:	430a      	orrs	r2, r1
 8003102:	4950      	ldr	r1, [pc, #320]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b4e      	ldr	r3, [pc, #312]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4d      	ldr	r2, [pc, #308]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003114:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fb9e 	bl	8001860 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	e00e      	b.n	8003146 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fb9a 	bl	8001860 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d907      	bls.n	8003146 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e07a      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ea      	beq.n	8003128 <HAL_RCC_OscConfig+0x8a0>
 8003152:	e072      	b.n	800323a <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a34      	ldr	r2, [pc, #208]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 800317e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fb6a 	bl	8001860 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318e:	e00e      	b.n	80031ae <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fb66 	bl	8001860 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d907      	bls.n	80031ae <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e046      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ea      	bne.n	8003190 <HAL_RCC_OscConfig+0x908>
 80031ba:	e03e      	b.n	800323a <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e039      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_OscConfig+0x9bc>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0203 	and.w	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	429a      	cmp	r2, r3
 80031da:	d12c      	bne.n	8003236 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	3b01      	subs	r3, #1
 80031e8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d123      	bne.n	8003236 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d11b      	bne.n	8003236 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d113      	bne.n	8003236 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d109      	bne.n	8003236 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	019f800c 	.word	0x019f800c

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e10d      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d910      	bls.n	8003294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 020f 	bic.w	r2, r3, #15
 800327a:	4983      	ldr	r1, [pc, #524]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b81      	ldr	r3, [pc, #516]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0f5      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8094 	beq.w	80033ca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d134      	bne.n	8003314 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0e2      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032ba:	f000 fa2b 	bl	8003714 <RCC_GetSysClockFreqFromPLLSource>
 80032be:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4a73      	ldr	r2, [pc, #460]	; (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d956      	bls.n	8003376 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032c8:	4b70      	ldr	r3, [pc, #448]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032dc:	4a6b      	ldr	r2, [pc, #428]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e045      	b.n	8003376 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03f      	beq.n	8003376 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d13b      	bne.n	8003376 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003306:	4a61      	ldr	r2, [pc, #388]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e030      	b.n	8003376 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d107      	bne.n	800332c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331c:	4b5b      	ldr	r3, [pc, #364]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d115      	bne.n	8003354 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0a9      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e09d      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003344:	4b51      	ldr	r3, [pc, #324]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e095      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003354:	f000 f8a2 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_RCC_ClockConfig+0x244>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d909      	bls.n	8003376 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336a:	4a48      	ldr	r2, [pc, #288]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 800336c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003370:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4942      	ldr	r1, [pc, #264]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fe fa6a 	bl	8001860 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e013      	b.n	80033b8 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fe fa66 	bl	8001860 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d90a      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 020c 	and.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e063      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b8:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 020c 	and.w	r2, r3, #12
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d1e2      	bne.n	8003390 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	492a      	ldr	r1, [pc, #168]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]
 80033e8:	e008      	b.n	80033fc <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a25      	ldr	r2, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fa:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d210      	bcs.n	800342c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 020f 	bic.w	r2, r3, #15
 8003412:	491d      	ldr	r1, [pc, #116]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_ClockConfig+0x23c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e029      	b.n	8003480 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4911      	ldr	r1, [pc, #68]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4909      	ldr	r1, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x240>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800346a:	f000 f8b3 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800346e:	4603      	mov	r3, r0
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_RCC_ClockConfig+0x248>)
 8003472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_ClockConfig+0x24c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe f9a1 	bl	80017c0 <HAL_InitTick>
 800347e:	4603      	mov	r3, r0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	04c4b400 	.word	0x04c4b400
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d121      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d11e      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034dc:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80034f8:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_RCC_GetSysClockFreq+0x130>)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d102      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003514:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e004      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d101      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d146      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3301      	adds	r3, #1
 8003540:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d003      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0xb4>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d00d      	beq.n	800356a <HAL_RCC_GetSysClockFreq+0xce>
 800354e:	e019      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800355a:	68d2      	ldr	r2, [r2, #12]
 800355c:	0a12      	lsrs	r2, r2, #8
 800355e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
        break;
 8003568:	e019      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800356a:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x134>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003574:	68d2      	ldr	r2, [r2, #12]
 8003576:	0a12      	lsrs	r2, r2, #8
 8003578:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]
        break;
 8003582:	e00c      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800358e:	68d2      	ldr	r2, [r2, #12]
 8003590:	0a12      	lsrs	r2, r2, #8
 8003592:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
        break;
 800359c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	0e5b      	lsrs	r3, r3, #25
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	3301      	adds	r3, #1
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035b8:	69bb      	ldr	r3, [r7, #24]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08005a64 	.word	0x08005a64
 80035d0:	00f42400 	.word	0x00f42400

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80035d8:	f7ff ff60 	bl	800349c <HAL_RCC_GetSysClockFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x20>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	4903      	ldr	r1, [pc, #12]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08005a4c 	.word	0x08005a4c

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003600:	f7ff ffe8 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4903      	ldr	r1, [pc, #12]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	08005a5c 	.word	0x08005a5c

08003624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003628:	f7ff ffd4 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0adb      	lsrs	r3, r3, #11
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	08005a5c 	.word	0x08005a5c

0800364c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003664:	f7ff f882 	bl	800276c <HAL_PWREx_GetVoltageRange>
 8003668:	6138      	str	r0, [r7, #16]
 800366a:	e014      	b.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	6593      	str	r3, [r2, #88]	; 0x58
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003684:	f7ff f872 	bl	800276c <HAL_PWREx_GetVoltageRange>
 8003688:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	4a1f      	ldr	r2, [pc, #124]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a2:	d10b      	bne.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d919      	bls.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2ba0      	cmp	r3, #160	; 0xa0
 80036ae:	d902      	bls.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036b0:	2302      	movs	r3, #2
 80036b2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80036b4:	e013      	b.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b6:	2301      	movs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80036ba:	e010      	b.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d902      	bls.n	80036c8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036c2:	2303      	movs	r3, #3
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e00a      	b.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d102      	bne.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ce:	2302      	movs	r3, #2
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e004      	b.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b70      	cmp	r3, #112	; 0x70
 80036d8:	d101      	bne.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036da:	2301      	movs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	40022000 	.word	0x40022000

08003714 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d118      	bne.n	800375c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d107      	bne.n	8003746 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e005      	b.n	8003752 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800375c:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	3301      	adds	r3, #1
 8003772:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d003      	beq.n	8003782 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d00d      	beq.n	800379c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003780:	e019      	b.n	80037b6 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800378c:	68d2      	ldr	r2, [r2, #12]
 800378e:	0a12      	lsrs	r2, r2, #8
 8003790:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	613b      	str	r3, [r7, #16]
      break;
 800379a:	e019      	b.n	80037d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037a6:	68d2      	ldr	r2, [r2, #12]
 80037a8:	0a12      	lsrs	r2, r2, #8
 80037aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	613b      	str	r3, [r7, #16]
      break;
 80037b4:	e00c      	b.n	80037d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	0a12      	lsrs	r2, r2, #8
 80037c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	613b      	str	r3, [r7, #16]
      break;
 80037ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0e5b      	lsrs	r3, r3, #25
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80037ea:	683b      	ldr	r3, [r7, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40021000 	.word	0x40021000
 80037fc:	08005a64 	.word	0x08005a64
 8003800:	00f42400 	.word	0x00f42400

08003804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800380c:	2300      	movs	r3, #0
 800380e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003810:	2300      	movs	r3, #0
 8003812:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381c:	2b00      	cmp	r3, #0
 800381e:	d040      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003824:	2b80      	cmp	r3, #128	; 0x80
 8003826:	d02a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d825      	bhi.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800382c:	2b60      	cmp	r3, #96	; 0x60
 800382e:	d026      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d821      	bhi.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d006      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d81d      	bhi.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d010      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003844:	e018      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003846:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a8e      	ldr	r2, [pc, #568]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003852:	e015      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fb56 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003864:	e00c      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3320      	adds	r3, #32
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fc33 	bl	80040d8 <RCCEx_PLLSAI2_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003876:	e003      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
        break;
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	7ffb      	ldrb	r3, [r7, #31]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003886:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800388c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003894:	497b      	ldr	r1, [pc, #492]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800389c:	e001      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d047      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d030      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d82a      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c2:	d02a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c8:	d824      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d4:	d81e      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038de:	d010      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038e0:	e018      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038e2:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038ee:	e015      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fb08 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003900:	e00c      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3320      	adds	r3, #32
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fbe5 	bl	80040d8 <RCCEx_PLLSAI2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	77fb      	strb	r3, [r7, #31]
        break;
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800391a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391c:	7ffb      	ldrb	r3, [r7, #31]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003922:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4954      	ldr	r1, [pc, #336]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003938:	e001      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80ab 	beq.w	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394c:	2300      	movs	r3, #0
 800394e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a48      	ldr	r2, [pc, #288]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003978:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003984:	f7fd ff6c 	bl	8001860 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398a:	e00f      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fd ff68 	bl	8001860 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d908      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80039aa:	e006      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0e9      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x188>
 80039b8:	e000      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80039ba:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d164      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01f      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d019      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ea:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039fc:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01f      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd ff1f 	bl	8001860 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a24:	e012      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fd ff1b 	bl	8001860 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d909      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003a4a:	e007      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0e5      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003a5c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a7c:	e008      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	77bb      	strb	r3, [r7, #30]
 8003a82:	e005      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7ffb      	ldrb	r3, [r7, #31]
 8003a8e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a96:	4b9c      	ldr	r3, [pc, #624]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	4a9b      	ldr	r2, [pc, #620]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aae:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f023 0203 	bic.w	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	4992      	ldr	r1, [pc, #584]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad0:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 020c 	bic.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	498a      	ldr	r1, [pc, #552]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af2:	4b85      	ldr	r3, [pc, #532]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	4981      	ldr	r1, [pc, #516]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b14:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4979      	ldr	r1, [pc, #484]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b36:	4b74      	ldr	r3, [pc, #464]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	4970      	ldr	r1, [pc, #448]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b58:	4b6b      	ldr	r3, [pc, #428]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	4968      	ldr	r1, [pc, #416]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	495f      	ldr	r1, [pc, #380]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b9c:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003baa:	4957      	ldr	r1, [pc, #348]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bcc:	494e      	ldr	r1, [pc, #312]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d031      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be8:	d00e      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bee:	d814      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf8:	d10f      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfa:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c04:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f97c 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	77fb      	strb	r3, [r7, #31]
        break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c36:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7ffb      	ldrb	r3, [r7, #31]
 8003c42:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	492a      	ldr	r1, [pc, #168]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	4921      	ldr	r1, [pc, #132]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c94:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	4919      	ldr	r1, [pc, #100]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cbc:	f023 0203 	bic.w	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	4910      	ldr	r1, [pc, #64]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02b      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a02      	ldr	r2, [pc, #8]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
 8003d04:	e014      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f8f5 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003d2c:	7ffb      	ldrb	r3, [r7, #31]
 8003d2e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d04a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d44:	d108      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d4c:	4a6e      	ldr	r2, [pc, #440]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d56:	e012      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d58:	4b6b      	ldr	r3, [pc, #428]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d66:	4968      	ldr	r1, [pc, #416]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d6e:	4b66      	ldr	r3, [pc, #408]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d74:	4a64      	ldr	r2, [pc, #400]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d86:	d10d      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f8bc 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d98:	7ffb      	ldrb	r3, [r7, #31]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003d9e:	7ffb      	ldrb	r3, [r7, #31]
 8003da0:	77bb      	strb	r3, [r7, #30]
 8003da2:	e016      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dae:	4b56      	ldr	r3, [pc, #344]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	4a55      	ldr	r2, [pc, #340]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db8:	60d3      	str	r3, [r2, #12]
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc6:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a4f      	ldr	r2, [pc, #316]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dec:	4946      	ldr	r1, [pc, #280]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a41      	ldr	r2, [pc, #260]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e08:	60d3      	str	r3, [r2, #12]
 8003e0a:	e011      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f875 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003e2c:	7ffb      	ldrb	r3, [r7, #31]
 8003e2e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01e      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e3c:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4c:	492e      	ldr	r1, [pc, #184]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f850 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003e76:	7ffb      	ldrb	r3, [r7, #31]
 8003e78:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e8c:	f023 0204 	bic.w	r2, r3, #4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e96:	491c      	ldr	r1, [pc, #112]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb0:	f023 0218 	bic.w	r2, r3, #24
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	4913      	ldr	r1, [pc, #76]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d017      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ede:	490a      	ldr	r1, [pc, #40]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef0:	d105      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003efe:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000

08003f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d018      	beq.n	8003f54 <RCCEx_PLLSAI1_Config+0x48>
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d81f      	bhi.n	8003f66 <RCCEx_PLLSAI1_Config+0x5a>
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d002      	beq.n	8003f30 <RCCEx_PLLSAI1_Config+0x24>
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d009      	beq.n	8003f42 <RCCEx_PLLSAI1_Config+0x36>
 8003f2e:	e01a      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f30:	4b65      	ldr	r3, [pc, #404]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d117      	bne.n	8003f6c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f40:	e014      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f42:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d110      	bne.n	8003f70 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f52:	e00d      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003f54:	4b5c      	ldr	r3, [pc, #368]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f64:	e006      	b.n	8003f74 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6a:	e004      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f6c:	bf00      	nop
 8003f6e:	e002      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f74:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f040 809f 	bne.w	80040bc <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f7e:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a51      	ldr	r2, [pc, #324]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fd fc69 	bl	8001860 <HAL_GetTick>
 8003f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f90:	e00f      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f92:	f7fd fc65 	bl	8001860 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d908      	bls.n	8003fb2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa0:	4b49      	ldr	r3, [pc, #292]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fb0:	e006      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb2:	4b45      	ldr	r3, [pc, #276]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e9      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x86>
 8003fbe:	e000      	b.n	8003fc2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003fc0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d179      	bne.n	80040bc <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d116      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fce:	4b3e      	ldr	r3, [pc, #248]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <RCCEx_PLLSAI1_Config+0x1c0>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6892      	ldr	r2, [r2, #8]
 8003fda:	0211      	lsls	r1, r2, #8
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68d2      	ldr	r2, [r2, #12]
 8003fe0:	06d2      	lsls	r2, r2, #27
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	3a01      	subs	r2, #1
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	4934      	ldr	r1, [pc, #208]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
 8003ffa:	e033      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d118      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004002:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	0211      	lsls	r1, r2, #8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6912      	ldr	r2, [r2, #16]
 8004014:	0852      	lsrs	r2, r2, #1
 8004016:	3a01      	subs	r2, #1
 8004018:	0552      	lsls	r2, r2, #21
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6852      	ldr	r2, [r2, #4]
 8004020:	3a01      	subs	r2, #1
 8004022:	0112      	lsls	r2, r2, #4
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	4926      	ldr	r1, [pc, #152]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]
 8004032:	e017      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800403a:	4013      	ands	r3, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	0211      	lsls	r1, r2, #8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6952      	ldr	r2, [r2, #20]
 8004046:	0852      	lsrs	r2, r2, #1
 8004048:	3a01      	subs	r2, #1
 800404a:	0652      	lsls	r2, r2, #25
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6852      	ldr	r2, [r2, #4]
 8004052:	3a01      	subs	r2, #1
 8004054:	0112      	lsls	r2, r2, #4
 8004056:	4311      	orrs	r1, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	491a      	ldr	r1, [pc, #104]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004064:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800406a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fbf6 	bl	8001860 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004076:	e00f      	b.n	8004098 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004078:	f7fd fbf2 	bl	8001860 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d908      	bls.n	8004098 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004096:	e006      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0e9      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x16c>
 80040a4:	e000      	b.n	80040a8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80040a6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	4904      	ldr	r1, [pc, #16]	; (80040c8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	07ff800c 	.word	0x07ff800c
 80040d0:	ff9f800c 	.word	0xff9f800c
 80040d4:	f9ff800c 	.word	0xf9ff800c

080040d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d018      	beq.n	8004120 <RCCEx_PLLSAI2_Config+0x48>
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d81f      	bhi.n	8004132 <RCCEx_PLLSAI2_Config+0x5a>
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d002      	beq.n	80040fc <RCCEx_PLLSAI2_Config+0x24>
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d009      	beq.n	800410e <RCCEx_PLLSAI2_Config+0x36>
 80040fa:	e01a      	b.n	8004132 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040fc:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d117      	bne.n	8004138 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410c:	e014      	b.n	8004138 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800410e:	4b46      	ldr	r3, [pc, #280]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d110      	bne.n	800413c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411e:	e00d      	b.n	800413c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004130:	e006      	b.n	8004140 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
      break;
 8004136:	e004      	b.n	8004142 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004138:	bf00      	nop
 800413a:	e002      	b.n	8004142 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004140:	bf00      	nop
  }

  if (status == HAL_OK)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d169      	bne.n	800421c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004148:	4b37      	ldr	r3, [pc, #220]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a36      	ldr	r2, [pc, #216]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fb84 	bl	8001860 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800415a:	e00f      	b.n	800417c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800415c:	f7fd fb80 	bl	8001860 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d908      	bls.n	800417c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800417a:	e006      	b.n	800418a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800417c:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e9      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x84>
 8004188:	e000      	b.n	800418c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800418a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d144      	bne.n	800421c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d115      	bne.n	80041c4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004198:	4b23      	ldr	r3, [pc, #140]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <RCCEx_PLLSAI2_Config+0x154>)
 800419e:	4013      	ands	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6892      	ldr	r2, [r2, #8]
 80041a4:	0211      	lsls	r1, r2, #8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	06d2      	lsls	r2, r2, #27
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6852      	ldr	r2, [r2, #4]
 80041b2:	3a01      	subs	r2, #1
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	491a      	ldr	r1, [pc, #104]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a17      	ldr	r2, [pc, #92]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fb46 	bl	8001860 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041d6:	e00f      	b.n	80041f8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d8:	f7fd fb42 	bl	8001860 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d908      	bls.n	80041f8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80041f6:	e006      	b.n	8004206 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0e9      	beq.n	80041d8 <RCCEx_PLLSAI2_Config+0x100>
 8004204:	e000      	b.n	8004208 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004206:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	4904      	ldr	r1, [pc, #16]	; (8004228 <RCCEx_PLLSAI2_Config+0x150>)
 8004218:	4313      	orrs	r3, r2
 800421a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
 800422c:	07ff800c 	.word	0x07ff800c

08004230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e042      	b.n	80042c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fd f8f3 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2224      	movs	r2, #36	; 0x24
 800425e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8c2 	bl	80043fc <UART_SetConfig>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e022      	b.n	80042c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fbb6 	bl	80049fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800429e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fc3d 	bl	8004b40 <UART_CheckIdleState>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	f040 8083 	bne.w	80043f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_UART_Transmit+0x28>
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e07b      	b.n	80043f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_UART_Transmit+0x3a>
 8004306:	2302      	movs	r3, #2
 8004308:	e074      	b.n	80043f4 <HAL_UART_Transmit+0x124>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2221      	movs	r2, #33	; 0x21
 800431e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004322:	f7fd fa9d 	bl	8001860 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004340:	d108      	bne.n	8004354 <HAL_UART_Transmit+0x84>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	e003      	b.n	800435c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004364:	e02c      	b.n	80043c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fc30 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e039      	b.n	80043f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004394:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	3302      	adds	r3, #2
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	e007      	b.n	80043ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	3301      	adds	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1cc      	bne.n	8004366 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fbfd 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e006      	b.n	80043f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004400:	b08c      	sub	sp, #48	; 0x30
 8004402:	af00      	add	r7, sp, #0
 8004404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	431a      	orrs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	431a      	orrs	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4313      	orrs	r3, r2
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4baa      	ldr	r3, [pc, #680]	; (80046d4 <UART_SetConfig+0x2d8>)
 800442c:	4013      	ands	r3, r2
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004434:	430b      	orrs	r3, r1
 8004436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a9f      	ldr	r2, [pc, #636]	; (80046d8 <UART_SetConfig+0x2dc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004464:	4313      	orrs	r3, r2
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004472:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800447c:	430b      	orrs	r3, r1
 800447e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f023 010f 	bic.w	r1, r3, #15
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a90      	ldr	r2, [pc, #576]	; (80046dc <UART_SetConfig+0x2e0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d125      	bne.n	80044ec <UART_SetConfig+0xf0>
 80044a0:	4b8f      	ldr	r3, [pc, #572]	; (80046e0 <UART_SetConfig+0x2e4>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d81a      	bhi.n	80044e4 <UART_SetConfig+0xe8>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0xb8>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d5 	.word	0x080044d5
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ca:	e116      	b.n	80046fa <UART_SetConfig+0x2fe>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d2:	e112      	b.n	80046fa <UART_SetConfig+0x2fe>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044da:	e10e      	b.n	80046fa <UART_SetConfig+0x2fe>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e2:	e10a      	b.n	80046fa <UART_SetConfig+0x2fe>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ea:	e106      	b.n	80046fa <UART_SetConfig+0x2fe>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a7c      	ldr	r2, [pc, #496]	; (80046e4 <UART_SetConfig+0x2e8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d138      	bne.n	8004568 <UART_SetConfig+0x16c>
 80044f6:	4b7a      	ldr	r3, [pc, #488]	; (80046e0 <UART_SetConfig+0x2e4>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d82d      	bhi.n	8004560 <UART_SetConfig+0x164>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x110>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004541 	.word	0x08004541
 8004510:	08004561 	.word	0x08004561
 8004514:	08004561 	.word	0x08004561
 8004518:	08004561 	.word	0x08004561
 800451c:	08004551 	.word	0x08004551
 8004520:	08004561 	.word	0x08004561
 8004524:	08004561 	.word	0x08004561
 8004528:	08004561 	.word	0x08004561
 800452c:	08004549 	.word	0x08004549
 8004530:	08004561 	.word	0x08004561
 8004534:	08004561 	.word	0x08004561
 8004538:	08004561 	.word	0x08004561
 800453c:	08004559 	.word	0x08004559
 8004540:	2300      	movs	r3, #0
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004546:	e0d8      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004548:	2302      	movs	r3, #2
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454e:	e0d4      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004550:	2304      	movs	r3, #4
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004556:	e0d0      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004558:	2308      	movs	r3, #8
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455e:	e0cc      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004560:	2310      	movs	r3, #16
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004566:	e0c8      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5e      	ldr	r2, [pc, #376]	; (80046e8 <UART_SetConfig+0x2ec>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d125      	bne.n	80045be <UART_SetConfig+0x1c2>
 8004572:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <UART_SetConfig+0x2e4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d016      	beq.n	80045ae <UART_SetConfig+0x1b2>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d818      	bhi.n	80045b6 <UART_SetConfig+0x1ba>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d00a      	beq.n	800459e <UART_SetConfig+0x1a2>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d814      	bhi.n	80045b6 <UART_SetConfig+0x1ba>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <UART_SetConfig+0x19a>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d008      	beq.n	80045a6 <UART_SetConfig+0x1aa>
 8004594:	e00f      	b.n	80045b6 <UART_SetConfig+0x1ba>
 8004596:	2300      	movs	r3, #0
 8004598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459c:	e0ad      	b.n	80046fa <UART_SetConfig+0x2fe>
 800459e:	2302      	movs	r3, #2
 80045a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a4:	e0a9      	b.n	80046fa <UART_SetConfig+0x2fe>
 80045a6:	2304      	movs	r3, #4
 80045a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ac:	e0a5      	b.n	80046fa <UART_SetConfig+0x2fe>
 80045ae:	2308      	movs	r3, #8
 80045b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b4:	e0a1      	b.n	80046fa <UART_SetConfig+0x2fe>
 80045b6:	2310      	movs	r3, #16
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045bc:	e09d      	b.n	80046fa <UART_SetConfig+0x2fe>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a4a      	ldr	r2, [pc, #296]	; (80046ec <UART_SetConfig+0x2f0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d125      	bne.n	8004614 <UART_SetConfig+0x218>
 80045c8:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <UART_SetConfig+0x2e4>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045d2:	2bc0      	cmp	r3, #192	; 0xc0
 80045d4:	d016      	beq.n	8004604 <UART_SetConfig+0x208>
 80045d6:	2bc0      	cmp	r3, #192	; 0xc0
 80045d8:	d818      	bhi.n	800460c <UART_SetConfig+0x210>
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d00a      	beq.n	80045f4 <UART_SetConfig+0x1f8>
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d814      	bhi.n	800460c <UART_SetConfig+0x210>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <UART_SetConfig+0x1f0>
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d008      	beq.n	80045fc <UART_SetConfig+0x200>
 80045ea:	e00f      	b.n	800460c <UART_SetConfig+0x210>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f2:	e082      	b.n	80046fa <UART_SetConfig+0x2fe>
 80045f4:	2302      	movs	r3, #2
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fa:	e07e      	b.n	80046fa <UART_SetConfig+0x2fe>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004602:	e07a      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460a:	e076      	b.n	80046fa <UART_SetConfig+0x2fe>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004612:	e072      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <UART_SetConfig+0x2f4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d12a      	bne.n	8004674 <UART_SetConfig+0x278>
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <UART_SetConfig+0x2e4>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d01a      	beq.n	8004664 <UART_SetConfig+0x268>
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d81b      	bhi.n	800466c <UART_SetConfig+0x270>
 8004634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004638:	d00c      	beq.n	8004654 <UART_SetConfig+0x258>
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d815      	bhi.n	800466c <UART_SetConfig+0x270>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <UART_SetConfig+0x250>
 8004644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004648:	d008      	beq.n	800465c <UART_SetConfig+0x260>
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x270>
 800464c:	2300      	movs	r3, #0
 800464e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004652:	e052      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465a:	e04e      	b.n	80046fa <UART_SetConfig+0x2fe>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004662:	e04a      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466a:	e046      	b.n	80046fa <UART_SetConfig+0x2fe>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004672:	e042      	b.n	80046fa <UART_SetConfig+0x2fe>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <UART_SetConfig+0x2dc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d13a      	bne.n	80046f4 <UART_SetConfig+0x2f8>
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <UART_SetConfig+0x2e4>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800468c:	d01a      	beq.n	80046c4 <UART_SetConfig+0x2c8>
 800468e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0x2d0>
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0x2b8>
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469e:	d815      	bhi.n	80046cc <UART_SetConfig+0x2d0>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x2b0>
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d008      	beq.n	80046bc <UART_SetConfig+0x2c0>
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x2d0>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b2:	e022      	b.n	80046fa <UART_SetConfig+0x2fe>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ba:	e01e      	b.n	80046fa <UART_SetConfig+0x2fe>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e01a      	b.n	80046fa <UART_SetConfig+0x2fe>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e016      	b.n	80046fa <UART_SetConfig+0x2fe>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e012      	b.n	80046fa <UART_SetConfig+0x2fe>
 80046d4:	cfff69f3 	.word	0xcfff69f3
 80046d8:	40008000 	.word	0x40008000
 80046dc:	40013800 	.word	0x40013800
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40004400 	.word	0x40004400
 80046e8:	40004800 	.word	0x40004800
 80046ec:	40004c00 	.word	0x40004c00
 80046f0:	40005000 	.word	0x40005000
 80046f4:	2310      	movs	r3, #16
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4ab0      	ldr	r2, [pc, #704]	; (80049c0 <UART_SetConfig+0x5c4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	f040 809b 	bne.w	800483c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800470a:	2b08      	cmp	r3, #8
 800470c:	d827      	bhi.n	800475e <UART_SetConfig+0x362>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x318>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004739 	.word	0x08004739
 8004718:	08004741 	.word	0x08004741
 800471c:	08004749 	.word	0x08004749
 8004720:	0800475f 	.word	0x0800475f
 8004724:	0800474f 	.word	0x0800474f
 8004728:	0800475f 	.word	0x0800475f
 800472c:	0800475f 	.word	0x0800475f
 8004730:	0800475f 	.word	0x0800475f
 8004734:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fe ff60 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 800473c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800473e:	e014      	b.n	800476a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe ff70 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004746:	e010      	b.n	800476a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <UART_SetConfig+0x5c8>)
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800474c:	e00d      	b.n	800476a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fea5 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004754:	e009      	b.n	800476a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800475c:	e005      	b.n	800476a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004768:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8130 	beq.w	80049d2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	4a94      	ldr	r2, [pc, #592]	; (80049c8 <UART_SetConfig+0x5cc>)
 8004778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800477c:	461a      	mov	r2, r3
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	fbb3 f3f2 	udiv	r3, r3, r2
 8004784:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	429a      	cmp	r2, r3
 8004794:	d305      	bcc.n	80047a2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d903      	bls.n	80047aa <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047a8:	e113      	b.n	80049d2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2200      	movs	r2, #0
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	60fa      	str	r2, [r7, #12]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	4a84      	ldr	r2, [pc, #528]	; (80049c8 <UART_SetConfig+0x5cc>)
 80047b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2200      	movs	r2, #0
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047cc:	f7fc f9f8 	bl	8000bc0 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	020b      	lsls	r3, r1, #8
 80047e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047e6:	0202      	lsls	r2, r0, #8
 80047e8:	6979      	ldr	r1, [r7, #20]
 80047ea:	6849      	ldr	r1, [r1, #4]
 80047ec:	0849      	lsrs	r1, r1, #1
 80047ee:	2000      	movs	r0, #0
 80047f0:	460c      	mov	r4, r1
 80047f2:	4605      	mov	r5, r0
 80047f4:	eb12 0804 	adds.w	r8, r2, r4
 80047f8:	eb43 0905 	adc.w	r9, r3, r5
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	469a      	mov	sl, r3
 8004804:	4693      	mov	fp, r2
 8004806:	4652      	mov	r2, sl
 8004808:	465b      	mov	r3, fp
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f7fc f9d7 	bl	8000bc0 <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4613      	mov	r3, r2
 8004818:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004820:	d308      	bcc.n	8004834 <UART_SetConfig+0x438>
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004828:	d204      	bcs.n	8004834 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a3a      	ldr	r2, [r7, #32]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e0ce      	b.n	80049d2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800483a:	e0ca      	b.n	80049d2 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	d167      	bne.n	8004916 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8004846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800484a:	2b08      	cmp	r3, #8
 800484c:	d827      	bhi.n	800489e <UART_SetConfig+0x4a2>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0x458>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe fec0 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800487e:	e014      	b.n	80048aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fed0 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 8004884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004886:	e010      	b.n	80048aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <UART_SetConfig+0x5c8>)
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800488c:	e00d      	b.n	80048aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe fe05 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004894:	e009      	b.n	80048aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800489c:	e005      	b.n	80048aa <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8090 	beq.w	80049d2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	4a44      	ldr	r2, [pc, #272]	; (80049c8 <UART_SetConfig+0x5cc>)
 80048b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048bc:	461a      	mov	r2, r3
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	441a      	add	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d916      	bls.n	800490e <UART_SetConfig+0x512>
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d212      	bcs.n	800490e <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f023 030f 	bic.w	r3, r3, #15
 80048f0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	8bfb      	ldrh	r3, [r7, #30]
 8004900:	4313      	orrs	r3, r2
 8004902:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	8bfa      	ldrh	r2, [r7, #30]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	e061      	b.n	80049d2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004914:	e05d      	b.n	80049d2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800491a:	2b08      	cmp	r3, #8
 800491c:	d827      	bhi.n	800496e <UART_SetConfig+0x572>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x528>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	0800496f 	.word	0x0800496f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fe fe58 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800494e:	e014      	b.n	800497a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7fe fe68 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 8004954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004956:	e010      	b.n	800497a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <UART_SetConfig+0x5c8>)
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800495c:	e00d      	b.n	800497a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7fe fd9d 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004964:	e009      	b.n	800497a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800496c:	e005      	b.n	800497a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004978:	bf00      	nop
    }

    if (pclk != 0U)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d028      	beq.n	80049d2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <UART_SetConfig+0x5cc>)
 8004986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800498a:	461a      	mov	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	441a      	add	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2b0f      	cmp	r3, #15
 80049aa:	d90f      	bls.n	80049cc <UART_SetConfig+0x5d0>
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d20b      	bcs.n	80049cc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	60da      	str	r2, [r3, #12]
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x5d6>
 80049be:	bf00      	nop
 80049c0:	40008000 	.word	0x40008000
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	08005aa4 	.word	0x08005aa4
      }
      else
      {
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2201      	movs	r2, #1
 80049de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3730      	adds	r7, #48	; 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afa:	d10a      	bne.n	8004b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b50:	f7fc fe86 	bl	8001860 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d10e      	bne.n	8004b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f82f 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e025      	b.n	8004bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d10e      	bne.n	8004bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f819 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e00f      	b.n	8004bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	e062      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d05e      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fc fe36 	bl	8001860 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e045      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02e      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5e:	d126      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e00f      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d08d      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UARTEx_DisableFifoMode+0x16>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e027      	b.n	8004d3c <HAL_UARTEx_DisableFifoMode+0x66>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e02d      	b.n	8004dbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	; 0x24
 8004d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f84f 	bl	8004e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e02d      	b.n	8004e38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f811 	bl	8004e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e60:	e031      	b.n	8004ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e62:	2308      	movs	r3, #8
 8004e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e66:	2308      	movs	r3, #8
 8004e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	0e5b      	lsrs	r3, r3, #25
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	0f5b      	lsrs	r3, r3, #29
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
 8004e8c:	7b3a      	ldrb	r2, [r7, #12]
 8004e8e:	4911      	ldr	r1, [pc, #68]	; (8004ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8004e90:	5c8a      	ldrb	r2, [r1, r2]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	7b3a      	ldrb	r2, [r7, #12]
 8004e98:	490f      	ldr	r1, [pc, #60]	; (8004ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8004e9a:	5c8a      	ldrb	r2, [r1, r2]
 8004e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	7b7a      	ldrb	r2, [r7, #13]
 8004eac:	4909      	ldr	r1, [pc, #36]	; (8004ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8004eae:	5c8a      	ldrb	r2, [r1, r2]
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	7b7a      	ldrb	r2, [r7, #13]
 8004eb6:	4908      	ldr	r1, [pc, #32]	; (8004ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8004eb8:	5c8a      	ldrb	r2, [r1, r2]
 8004eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	08005abc 	.word	0x08005abc
 8004ed8:	08005ac4 	.word	0x08005ac4

08004edc <sqrt>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	ec55 4b10 	vmov	r4, r5, d0
 8004ee2:	ed2d 8b02 	vpush	{d8}
 8004ee6:	f000 f825 	bl	8004f34 <__ieee754_sqrt>
 8004eea:	4622      	mov	r2, r4
 8004eec:	462b      	mov	r3, r5
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	eeb0 8a40 	vmov.f32	s16, s0
 8004ef6:	eef0 8a60 	vmov.f32	s17, s1
 8004efa:	f7fb fdfb 	bl	8000af4 <__aeabi_dcmpun>
 8004efe:	b990      	cbnz	r0, 8004f26 <sqrt+0x4a>
 8004f00:	2200      	movs	r2, #0
 8004f02:	2300      	movs	r3, #0
 8004f04:	4620      	mov	r0, r4
 8004f06:	4629      	mov	r1, r5
 8004f08:	f7fb fdcc 	bl	8000aa4 <__aeabi_dcmplt>
 8004f0c:	b158      	cbz	r0, 8004f26 <sqrt+0x4a>
 8004f0e:	f000 f8c9 	bl	80050a4 <__errno>
 8004f12:	2321      	movs	r3, #33	; 0x21
 8004f14:	2200      	movs	r2, #0
 8004f16:	6003      	str	r3, [r0, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fc79 	bl	8000814 <__aeabi_ddiv>
 8004f22:	ec41 0b18 	vmov	d8, r0, r1
 8004f26:	eeb0 0a48 	vmov.f32	s0, s16
 8004f2a:	eef0 0a68 	vmov.f32	s1, s17
 8004f2e:	ecbd 8b02 	vpop	{d8}
 8004f32:	bd38      	pop	{r3, r4, r5, pc}

08004f34 <__ieee754_sqrt>:
 8004f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f38:	4e59      	ldr	r6, [pc, #356]	; (80050a0 <__ieee754_sqrt+0x16c>)
 8004f3a:	ee10 0a10 	vmov	r0, s0
 8004f3e:	ee10 3a10 	vmov	r3, s0
 8004f42:	ec55 4b10 	vmov	r4, r5, d0
 8004f46:	43ae      	bics	r6, r5
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	d110      	bne.n	8004f70 <__ieee754_sqrt+0x3c>
 8004f4e:	ee10 2a10 	vmov	r2, s0
 8004f52:	462b      	mov	r3, r5
 8004f54:	f7fb fb34 	bl	80005c0 <__aeabi_dmul>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb f978 	bl	8000254 <__adddf3>
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	ec45 4b10 	vmov	d0, r4, r5
 8004f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	dc10      	bgt.n	8004f96 <__ieee754_sqrt+0x62>
 8004f74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f78:	4330      	orrs	r0, r6
 8004f7a:	d0f5      	beq.n	8004f68 <__ieee754_sqrt+0x34>
 8004f7c:	b15d      	cbz	r5, 8004f96 <__ieee754_sqrt+0x62>
 8004f7e:	ee10 2a10 	vmov	r2, s0
 8004f82:	462b      	mov	r3, r5
 8004f84:	ee10 0a10 	vmov	r0, s0
 8004f88:	f7fb f962 	bl	8000250 <__aeabi_dsub>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	f7fb fc40 	bl	8000814 <__aeabi_ddiv>
 8004f94:	e7e6      	b.n	8004f64 <__ieee754_sqrt+0x30>
 8004f96:	1512      	asrs	r2, r2, #20
 8004f98:	d07a      	beq.n	8005090 <__ieee754_sqrt+0x15c>
 8004f9a:	07d4      	lsls	r4, r2, #31
 8004f9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004fa0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004fa4:	f04f 0400 	mov.w	r4, #0
 8004fa8:	bf58      	it	pl
 8004faa:	0fda      	lsrpl	r2, r3, #31
 8004fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004fb0:	bf58      	it	pl
 8004fb2:	005b      	lslpl	r3, r3, #1
 8004fb4:	f04f 0516 	mov.w	r5, #22
 8004fb8:	bf58      	it	pl
 8004fba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	0fda      	lsrs	r2, r3, #31
 8004fc2:	107f      	asrs	r7, r7, #1
 8004fc4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004fc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	1886      	adds	r6, r0, r2
 8004fd0:	428e      	cmp	r6, r1
 8004fd2:	bfde      	ittt	le
 8004fd4:	1b89      	suble	r1, r1, r6
 8004fd6:	18b0      	addle	r0, r6, r2
 8004fd8:	18a4      	addle	r4, r4, r2
 8004fda:	3d01      	subs	r5, #1
 8004fdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004fe0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004fe4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004fe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fec:	d1ef      	bne.n	8004fce <__ieee754_sqrt+0x9a>
 8004fee:	462a      	mov	r2, r5
 8004ff0:	f04f 0e20 	mov.w	lr, #32
 8004ff4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004ff8:	4281      	cmp	r1, r0
 8004ffa:	eb06 0c05 	add.w	ip, r6, r5
 8004ffe:	dc02      	bgt.n	8005006 <__ieee754_sqrt+0xd2>
 8005000:	d113      	bne.n	800502a <__ieee754_sqrt+0xf6>
 8005002:	459c      	cmp	ip, r3
 8005004:	d811      	bhi.n	800502a <__ieee754_sqrt+0xf6>
 8005006:	f1bc 0f00 	cmp.w	ip, #0
 800500a:	eb0c 0506 	add.w	r5, ip, r6
 800500e:	da44      	bge.n	800509a <__ieee754_sqrt+0x166>
 8005010:	2d00      	cmp	r5, #0
 8005012:	db42      	blt.n	800509a <__ieee754_sqrt+0x166>
 8005014:	f100 0801 	add.w	r8, r0, #1
 8005018:	1a09      	subs	r1, r1, r0
 800501a:	459c      	cmp	ip, r3
 800501c:	4432      	add	r2, r6
 800501e:	eba3 030c 	sub.w	r3, r3, ip
 8005022:	bf88      	it	hi
 8005024:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005028:	4640      	mov	r0, r8
 800502a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800502e:	f1be 0e01 	subs.w	lr, lr, #1
 8005032:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005036:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800503a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800503e:	d1db      	bne.n	8004ff8 <__ieee754_sqrt+0xc4>
 8005040:	430b      	orrs	r3, r1
 8005042:	d006      	beq.n	8005052 <__ieee754_sqrt+0x11e>
 8005044:	1c50      	adds	r0, r2, #1
 8005046:	bf13      	iteet	ne
 8005048:	3201      	addne	r2, #1
 800504a:	3401      	addeq	r4, #1
 800504c:	4672      	moveq	r2, lr
 800504e:	f022 0201 	bicne.w	r2, r2, #1
 8005052:	1063      	asrs	r3, r4, #1
 8005054:	07e1      	lsls	r1, r4, #31
 8005056:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800505a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800505e:	bf48      	it	mi
 8005060:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005064:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005068:	4614      	mov	r4, r2
 800506a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800506e:	e77b      	b.n	8004f68 <__ieee754_sqrt+0x34>
 8005070:	0ad9      	lsrs	r1, r3, #11
 8005072:	3815      	subs	r0, #21
 8005074:	055b      	lsls	r3, r3, #21
 8005076:	2900      	cmp	r1, #0
 8005078:	d0fa      	beq.n	8005070 <__ieee754_sqrt+0x13c>
 800507a:	02cd      	lsls	r5, r1, #11
 800507c:	d50a      	bpl.n	8005094 <__ieee754_sqrt+0x160>
 800507e:	f1c2 0420 	rsb	r4, r2, #32
 8005082:	1e55      	subs	r5, r2, #1
 8005084:	fa23 f404 	lsr.w	r4, r3, r4
 8005088:	4093      	lsls	r3, r2
 800508a:	1b42      	subs	r2, r0, r5
 800508c:	4321      	orrs	r1, r4
 800508e:	e784      	b.n	8004f9a <__ieee754_sqrt+0x66>
 8005090:	4610      	mov	r0, r2
 8005092:	e7f0      	b.n	8005076 <__ieee754_sqrt+0x142>
 8005094:	0049      	lsls	r1, r1, #1
 8005096:	3201      	adds	r2, #1
 8005098:	e7ef      	b.n	800507a <__ieee754_sqrt+0x146>
 800509a:	4680      	mov	r8, r0
 800509c:	e7bc      	b.n	8005018 <__ieee754_sqrt+0xe4>
 800509e:	bf00      	nop
 80050a0:	7ff00000 	.word	0x7ff00000

080050a4 <__errno>:
 80050a4:	4b01      	ldr	r3, [pc, #4]	; (80050ac <__errno+0x8>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	2000000c 	.word	0x2000000c

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4d0d      	ldr	r5, [pc, #52]	; (80050e8 <__libc_init_array+0x38>)
 80050b4:	2600      	movs	r6, #0
 80050b6:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b8:	1b64      	subs	r4, r4, r5
 80050ba:	10a4      	asrs	r4, r4, #2
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4d0b      	ldr	r5, [pc, #44]	; (80050f0 <__libc_init_array+0x40>)
 80050c2:	2600      	movs	r6, #0
 80050c4:	4c0b      	ldr	r4, [pc, #44]	; (80050f4 <__libc_init_array+0x44>)
 80050c6:	f000 fc9d 	bl	8005a04 <_init>
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	3601      	adds	r6, #1
 80050da:	4798      	blx	r3
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	3601      	adds	r6, #1
 80050e4:	4798      	blx	r3
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	08005b08 	.word	0x08005b08
 80050ec:	08005b08 	.word	0x08005b08
 80050f0:	08005b08 	.word	0x08005b08
 80050f4:	08005b0c 	.word	0x08005b0c

080050f8 <memset>:
 80050f8:	4402      	add	r2, r0
 80050fa:	4603      	mov	r3, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <siprintf>:
 8005108:	b40e      	push	{r1, r2, r3}
 800510a:	b500      	push	{lr}
 800510c:	b09c      	sub	sp, #112	; 0x70
 800510e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005112:	ab1d      	add	r3, sp, #116	; 0x74
 8005114:	9002      	str	r0, [sp, #8]
 8005116:	9006      	str	r0, [sp, #24]
 8005118:	9107      	str	r1, [sp, #28]
 800511a:	9104      	str	r1, [sp, #16]
 800511c:	4808      	ldr	r0, [pc, #32]	; (8005140 <siprintf+0x38>)
 800511e:	4909      	ldr	r1, [pc, #36]	; (8005144 <siprintf+0x3c>)
 8005120:	f853 2b04 	ldr.w	r2, [r3], #4
 8005124:	9105      	str	r1, [sp, #20]
 8005126:	a902      	add	r1, sp, #8
 8005128:	6800      	ldr	r0, [r0, #0]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	f000 f868 	bl	8005200 <_svfiprintf_r>
 8005130:	9b02      	ldr	r3, [sp, #8]
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	b01c      	add	sp, #112	; 0x70
 8005138:	f85d eb04 	ldr.w	lr, [sp], #4
 800513c:	b003      	add	sp, #12
 800513e:	4770      	bx	lr
 8005140:	2000000c 	.word	0x2000000c
 8005144:	ffff0208 	.word	0xffff0208

08005148 <__ssputs_r>:
 8005148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	688e      	ldr	r6, [r1, #8]
 800514e:	4682      	mov	sl, r0
 8005150:	460c      	mov	r4, r1
 8005152:	4690      	mov	r8, r2
 8005154:	429e      	cmp	r6, r3
 8005156:	461f      	mov	r7, r3
 8005158:	d838      	bhi.n	80051cc <__ssputs_r+0x84>
 800515a:	898a      	ldrh	r2, [r1, #12]
 800515c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005160:	d032      	beq.n	80051c8 <__ssputs_r+0x80>
 8005162:	6825      	ldr	r5, [r4, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	6909      	ldr	r1, [r1, #16]
 8005168:	eba5 0901 	sub.w	r9, r5, r1
 800516c:	6965      	ldr	r5, [r4, #20]
 800516e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005172:	444b      	add	r3, r9
 8005174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005178:	106d      	asrs	r5, r5, #1
 800517a:	429d      	cmp	r5, r3
 800517c:	bf38      	it	cc
 800517e:	461d      	movcc	r5, r3
 8005180:	0553      	lsls	r3, r2, #21
 8005182:	d531      	bpl.n	80051e8 <__ssputs_r+0xa0>
 8005184:	4629      	mov	r1, r5
 8005186:	f000 fb73 	bl	8005870 <_malloc_r>
 800518a:	4606      	mov	r6, r0
 800518c:	b950      	cbnz	r0, 80051a4 <__ssputs_r+0x5c>
 800518e:	230c      	movs	r3, #12
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	f8ca 3000 	str.w	r3, [sl]
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a4:	464a      	mov	r2, r9
 80051a6:	6921      	ldr	r1, [r4, #16]
 80051a8:	f000 face 	bl	8005748 <memcpy>
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	6126      	str	r6, [r4, #16]
 80051ba:	444e      	add	r6, r9
 80051bc:	6165      	str	r5, [r4, #20]
 80051be:	eba5 0509 	sub.w	r5, r5, r9
 80051c2:	6026      	str	r6, [r4, #0]
 80051c4:	463e      	mov	r6, r7
 80051c6:	60a5      	str	r5, [r4, #8]
 80051c8:	42be      	cmp	r6, r7
 80051ca:	d900      	bls.n	80051ce <__ssputs_r+0x86>
 80051cc:	463e      	mov	r6, r7
 80051ce:	4632      	mov	r2, r6
 80051d0:	4641      	mov	r1, r8
 80051d2:	6820      	ldr	r0, [r4, #0]
 80051d4:	f000 fac5 	bl	8005762 <memmove>
 80051d8:	68a3      	ldr	r3, [r4, #8]
 80051da:	2000      	movs	r0, #0
 80051dc:	1b9b      	subs	r3, r3, r6
 80051de:	60a3      	str	r3, [r4, #8]
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	4433      	add	r3, r6
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	e7db      	b.n	80051a0 <__ssputs_r+0x58>
 80051e8:	462a      	mov	r2, r5
 80051ea:	f000 fbb5 	bl	8005958 <_realloc_r>
 80051ee:	4606      	mov	r6, r0
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1e1      	bne.n	80051b8 <__ssputs_r+0x70>
 80051f4:	6921      	ldr	r1, [r4, #16]
 80051f6:	4650      	mov	r0, sl
 80051f8:	f000 face 	bl	8005798 <_free_r>
 80051fc:	e7c7      	b.n	800518e <__ssputs_r+0x46>
	...

08005200 <_svfiprintf_r>:
 8005200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	4698      	mov	r8, r3
 8005206:	898b      	ldrh	r3, [r1, #12]
 8005208:	b09d      	sub	sp, #116	; 0x74
 800520a:	4607      	mov	r7, r0
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	460d      	mov	r5, r1
 8005210:	4614      	mov	r4, r2
 8005212:	d50e      	bpl.n	8005232 <_svfiprintf_r+0x32>
 8005214:	690b      	ldr	r3, [r1, #16]
 8005216:	b963      	cbnz	r3, 8005232 <_svfiprintf_r+0x32>
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	f000 fb29 	bl	8005870 <_malloc_r>
 800521e:	6028      	str	r0, [r5, #0]
 8005220:	6128      	str	r0, [r5, #16]
 8005222:	b920      	cbnz	r0, 800522e <_svfiprintf_r+0x2e>
 8005224:	230c      	movs	r3, #12
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e0d1      	b.n	80053d2 <_svfiprintf_r+0x1d2>
 800522e:	2340      	movs	r3, #64	; 0x40
 8005230:	616b      	str	r3, [r5, #20]
 8005232:	2300      	movs	r3, #0
 8005234:	f8cd 800c 	str.w	r8, [sp, #12]
 8005238:	f04f 0901 	mov.w	r9, #1
 800523c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80053ec <_svfiprintf_r+0x1ec>
 8005240:	9309      	str	r3, [sp, #36]	; 0x24
 8005242:	2320      	movs	r3, #32
 8005244:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005248:	2330      	movs	r3, #48	; 0x30
 800524a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800524e:	4623      	mov	r3, r4
 8005250:	469a      	mov	sl, r3
 8005252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005256:	b10a      	cbz	r2, 800525c <_svfiprintf_r+0x5c>
 8005258:	2a25      	cmp	r2, #37	; 0x25
 800525a:	d1f9      	bne.n	8005250 <_svfiprintf_r+0x50>
 800525c:	ebba 0b04 	subs.w	fp, sl, r4
 8005260:	d00b      	beq.n	800527a <_svfiprintf_r+0x7a>
 8005262:	465b      	mov	r3, fp
 8005264:	4622      	mov	r2, r4
 8005266:	4629      	mov	r1, r5
 8005268:	4638      	mov	r0, r7
 800526a:	f7ff ff6d 	bl	8005148 <__ssputs_r>
 800526e:	3001      	adds	r0, #1
 8005270:	f000 80aa 	beq.w	80053c8 <_svfiprintf_r+0x1c8>
 8005274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005276:	445a      	add	r2, fp
 8005278:	9209      	str	r2, [sp, #36]	; 0x24
 800527a:	f89a 3000 	ldrb.w	r3, [sl]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 80a2 	beq.w	80053c8 <_svfiprintf_r+0x1c8>
 8005284:	2300      	movs	r3, #0
 8005286:	f04f 32ff 	mov.w	r2, #4294967295
 800528a:	f10a 0a01 	add.w	sl, sl, #1
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	9307      	str	r3, [sp, #28]
 8005292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005296:	931a      	str	r3, [sp, #104]	; 0x68
 8005298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800529c:	4654      	mov	r4, sl
 800529e:	2205      	movs	r2, #5
 80052a0:	4852      	ldr	r0, [pc, #328]	; (80053ec <_svfiprintf_r+0x1ec>)
 80052a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a6:	f000 fa41 	bl	800572c <memchr>
 80052aa:	9a04      	ldr	r2, [sp, #16]
 80052ac:	b9d8      	cbnz	r0, 80052e6 <_svfiprintf_r+0xe6>
 80052ae:	06d0      	lsls	r0, r2, #27
 80052b0:	bf44      	itt	mi
 80052b2:	2320      	movmi	r3, #32
 80052b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b8:	0711      	lsls	r1, r2, #28
 80052ba:	bf44      	itt	mi
 80052bc:	232b      	movmi	r3, #43	; 0x2b
 80052be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c2:	f89a 3000 	ldrb.w	r3, [sl]
 80052c6:	2b2a      	cmp	r3, #42	; 0x2a
 80052c8:	d015      	beq.n	80052f6 <_svfiprintf_r+0xf6>
 80052ca:	9a07      	ldr	r2, [sp, #28]
 80052cc:	4654      	mov	r4, sl
 80052ce:	2000      	movs	r0, #0
 80052d0:	f04f 0c0a 	mov.w	ip, #10
 80052d4:	4621      	mov	r1, r4
 80052d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052da:	3b30      	subs	r3, #48	; 0x30
 80052dc:	2b09      	cmp	r3, #9
 80052de:	d94e      	bls.n	800537e <_svfiprintf_r+0x17e>
 80052e0:	b1b0      	cbz	r0, 8005310 <_svfiprintf_r+0x110>
 80052e2:	9207      	str	r2, [sp, #28]
 80052e4:	e014      	b.n	8005310 <_svfiprintf_r+0x110>
 80052e6:	eba0 0308 	sub.w	r3, r0, r8
 80052ea:	46a2      	mov	sl, r4
 80052ec:	fa09 f303 	lsl.w	r3, r9, r3
 80052f0:	4313      	orrs	r3, r2
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	e7d2      	b.n	800529c <_svfiprintf_r+0x9c>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	1d19      	adds	r1, r3, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	9103      	str	r1, [sp, #12]
 8005300:	bfbb      	ittet	lt
 8005302:	425b      	neglt	r3, r3
 8005304:	f042 0202 	orrlt.w	r2, r2, #2
 8005308:	9307      	strge	r3, [sp, #28]
 800530a:	9307      	strlt	r3, [sp, #28]
 800530c:	bfb8      	it	lt
 800530e:	9204      	strlt	r2, [sp, #16]
 8005310:	7823      	ldrb	r3, [r4, #0]
 8005312:	2b2e      	cmp	r3, #46	; 0x2e
 8005314:	d10c      	bne.n	8005330 <_svfiprintf_r+0x130>
 8005316:	7863      	ldrb	r3, [r4, #1]
 8005318:	2b2a      	cmp	r3, #42	; 0x2a
 800531a:	d135      	bne.n	8005388 <_svfiprintf_r+0x188>
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	3402      	adds	r4, #2
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	9203      	str	r2, [sp, #12]
 8005328:	bfb8      	it	lt
 800532a:	f04f 33ff 	movlt.w	r3, #4294967295
 800532e:	9305      	str	r3, [sp, #20]
 8005330:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053fc <_svfiprintf_r+0x1fc>
 8005334:	2203      	movs	r2, #3
 8005336:	7821      	ldrb	r1, [r4, #0]
 8005338:	4650      	mov	r0, sl
 800533a:	f000 f9f7 	bl	800572c <memchr>
 800533e:	b140      	cbz	r0, 8005352 <_svfiprintf_r+0x152>
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	eba0 000a 	sub.w	r0, r0, sl
 8005346:	3401      	adds	r4, #1
 8005348:	fa03 f000 	lsl.w	r0, r3, r0
 800534c:	9b04      	ldr	r3, [sp, #16]
 800534e:	4303      	orrs	r3, r0
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005356:	2206      	movs	r2, #6
 8005358:	4825      	ldr	r0, [pc, #148]	; (80053f0 <_svfiprintf_r+0x1f0>)
 800535a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800535e:	f000 f9e5 	bl	800572c <memchr>
 8005362:	2800      	cmp	r0, #0
 8005364:	d038      	beq.n	80053d8 <_svfiprintf_r+0x1d8>
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <_svfiprintf_r+0x1f4>)
 8005368:	bb1b      	cbnz	r3, 80053b2 <_svfiprintf_r+0x1b2>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	3307      	adds	r3, #7
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	3308      	adds	r3, #8
 8005374:	9303      	str	r3, [sp, #12]
 8005376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005378:	4433      	add	r3, r6
 800537a:	9309      	str	r3, [sp, #36]	; 0x24
 800537c:	e767      	b.n	800524e <_svfiprintf_r+0x4e>
 800537e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005382:	460c      	mov	r4, r1
 8005384:	2001      	movs	r0, #1
 8005386:	e7a5      	b.n	80052d4 <_svfiprintf_r+0xd4>
 8005388:	2300      	movs	r3, #0
 800538a:	3401      	adds	r4, #1
 800538c:	f04f 0c0a 	mov.w	ip, #10
 8005390:	4619      	mov	r1, r3
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	4620      	mov	r0, r4
 8005396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539a:	3a30      	subs	r2, #48	; 0x30
 800539c:	2a09      	cmp	r2, #9
 800539e:	d903      	bls.n	80053a8 <_svfiprintf_r+0x1a8>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0c5      	beq.n	8005330 <_svfiprintf_r+0x130>
 80053a4:	9105      	str	r1, [sp, #20]
 80053a6:	e7c3      	b.n	8005330 <_svfiprintf_r+0x130>
 80053a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ac:	4604      	mov	r4, r0
 80053ae:	2301      	movs	r3, #1
 80053b0:	e7f0      	b.n	8005394 <_svfiprintf_r+0x194>
 80053b2:	ab03      	add	r3, sp, #12
 80053b4:	462a      	mov	r2, r5
 80053b6:	a904      	add	r1, sp, #16
 80053b8:	4638      	mov	r0, r7
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <_svfiprintf_r+0x1f8>)
 80053be:	e000      	b.n	80053c2 <_svfiprintf_r+0x1c2>
 80053c0:	bf00      	nop
 80053c2:	1c42      	adds	r2, r0, #1
 80053c4:	4606      	mov	r6, r0
 80053c6:	d1d6      	bne.n	8005376 <_svfiprintf_r+0x176>
 80053c8:	89ab      	ldrh	r3, [r5, #12]
 80053ca:	065b      	lsls	r3, r3, #25
 80053cc:	f53f af2c 	bmi.w	8005228 <_svfiprintf_r+0x28>
 80053d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d2:	b01d      	add	sp, #116	; 0x74
 80053d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d8:	ab03      	add	r3, sp, #12
 80053da:	462a      	mov	r2, r5
 80053dc:	a904      	add	r1, sp, #16
 80053de:	4638      	mov	r0, r7
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <_svfiprintf_r+0x1f8>)
 80053e4:	f000 f87c 	bl	80054e0 <_printf_i>
 80053e8:	e7eb      	b.n	80053c2 <_svfiprintf_r+0x1c2>
 80053ea:	bf00      	nop
 80053ec:	08005acc 	.word	0x08005acc
 80053f0:	08005ad6 	.word	0x08005ad6
 80053f4:	00000000 	.word	0x00000000
 80053f8:	08005149 	.word	0x08005149
 80053fc:	08005ad2 	.word	0x08005ad2

08005400 <_printf_common>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	4699      	mov	r9, r3
 8005408:	688a      	ldr	r2, [r1, #8]
 800540a:	4607      	mov	r7, r0
 800540c:	690b      	ldr	r3, [r1, #16]
 800540e:	460c      	mov	r4, r1
 8005410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005414:	4293      	cmp	r3, r2
 8005416:	bfb8      	it	lt
 8005418:	4613      	movlt	r3, r2
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005420:	b10a      	cbz	r2, 8005426 <_printf_common+0x26>
 8005422:	3301      	adds	r3, #1
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	0699      	lsls	r1, r3, #26
 800542a:	bf42      	ittt	mi
 800542c:	6833      	ldrmi	r3, [r6, #0]
 800542e:	3302      	addmi	r3, #2
 8005430:	6033      	strmi	r3, [r6, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	f015 0506 	ands.w	r5, r5, #6
 8005438:	d106      	bne.n	8005448 <_printf_common+0x48>
 800543a:	f104 0a19 	add.w	sl, r4, #25
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	6832      	ldr	r2, [r6, #0]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ab      	cmp	r3, r5
 8005446:	dc29      	bgt.n	800549c <_printf_common+0x9c>
 8005448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800544c:	1e13      	subs	r3, r2, #0
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	bf18      	it	ne
 8005452:	2301      	movne	r3, #1
 8005454:	0692      	lsls	r2, r2, #26
 8005456:	d42e      	bmi.n	80054b6 <_printf_common+0xb6>
 8005458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d021      	beq.n	80054aa <_printf_common+0xaa>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	341a      	adds	r4, #26
 800546a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800546e:	f003 0306 	and.w	r3, r3, #6
 8005472:	6832      	ldr	r2, [r6, #0]
 8005474:	2600      	movs	r6, #0
 8005476:	2b04      	cmp	r3, #4
 8005478:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800547c:	bf08      	it	eq
 800547e:	1aad      	subeq	r5, r5, r2
 8005480:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005484:	bf14      	ite	ne
 8005486:	2500      	movne	r5, #0
 8005488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800548c:	4293      	cmp	r3, r2
 800548e:	bfc4      	itt	gt
 8005490:	1a9b      	subgt	r3, r3, r2
 8005492:	18ed      	addgt	r5, r5, r3
 8005494:	42b5      	cmp	r5, r6
 8005496:	d11a      	bne.n	80054ce <_printf_common+0xce>
 8005498:	2000      	movs	r0, #0
 800549a:	e008      	b.n	80054ae <_printf_common+0xae>
 800549c:	2301      	movs	r3, #1
 800549e:	4652      	mov	r2, sl
 80054a0:	4649      	mov	r1, r9
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c0      	blx	r8
 80054a6:	3001      	adds	r0, #1
 80054a8:	d103      	bne.n	80054b2 <_printf_common+0xb2>
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b2:	3501      	adds	r5, #1
 80054b4:	e7c3      	b.n	800543e <_printf_common+0x3e>
 80054b6:	18e1      	adds	r1, r4, r3
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	2030      	movs	r0, #48	; 0x30
 80054bc:	3302      	adds	r3, #2
 80054be:	4422      	add	r2, r4
 80054c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054cc:	e7c4      	b.n	8005458 <_printf_common+0x58>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4622      	mov	r2, r4
 80054d2:	4649      	mov	r1, r9
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c0      	blx	r8
 80054d8:	3001      	adds	r0, #1
 80054da:	d0e6      	beq.n	80054aa <_printf_common+0xaa>
 80054dc:	3601      	adds	r6, #1
 80054de:	e7d9      	b.n	8005494 <_printf_common+0x94>

080054e0 <_printf_i>:
 80054e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	7e0f      	ldrb	r7, [r1, #24]
 80054e6:	4691      	mov	r9, r2
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	2f78      	cmp	r7, #120	; 0x78
 80054ee:	469a      	mov	sl, r3
 80054f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f6:	d807      	bhi.n	8005508 <_printf_i+0x28>
 80054f8:	2f62      	cmp	r7, #98	; 0x62
 80054fa:	d80a      	bhi.n	8005512 <_printf_i+0x32>
 80054fc:	2f00      	cmp	r7, #0
 80054fe:	f000 80d8 	beq.w	80056b2 <_printf_i+0x1d2>
 8005502:	2f58      	cmp	r7, #88	; 0x58
 8005504:	f000 80a3 	beq.w	800564e <_printf_i+0x16e>
 8005508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005510:	e03a      	b.n	8005588 <_printf_i+0xa8>
 8005512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005516:	2b15      	cmp	r3, #21
 8005518:	d8f6      	bhi.n	8005508 <_printf_i+0x28>
 800551a:	a101      	add	r1, pc, #4	; (adr r1, 8005520 <_printf_i+0x40>)
 800551c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005520:	08005579 	.word	0x08005579
 8005524:	0800558d 	.word	0x0800558d
 8005528:	08005509 	.word	0x08005509
 800552c:	08005509 	.word	0x08005509
 8005530:	08005509 	.word	0x08005509
 8005534:	08005509 	.word	0x08005509
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005509 	.word	0x08005509
 8005540:	08005509 	.word	0x08005509
 8005544:	08005509 	.word	0x08005509
 8005548:	08005509 	.word	0x08005509
 800554c:	08005699 	.word	0x08005699
 8005550:	080055bd 	.word	0x080055bd
 8005554:	0800567b 	.word	0x0800567b
 8005558:	08005509 	.word	0x08005509
 800555c:	08005509 	.word	0x08005509
 8005560:	080056bb 	.word	0x080056bb
 8005564:	08005509 	.word	0x08005509
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005509 	.word	0x08005509
 8005570:	08005509 	.word	0x08005509
 8005574:	08005683 	.word	0x08005683
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005588:	2301      	movs	r3, #1
 800558a:	e0a3      	b.n	80056d4 <_printf_i+0x1f4>
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	6829      	ldr	r1, [r5, #0]
 8005590:	0606      	lsls	r6, r0, #24
 8005592:	f101 0304 	add.w	r3, r1, #4
 8005596:	d50a      	bpl.n	80055ae <_printf_i+0xce>
 8005598:	680e      	ldr	r6, [r1, #0]
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	2e00      	cmp	r6, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xc8>
 80055a0:	232d      	movs	r3, #45	; 0x2d
 80055a2:	4276      	negs	r6, r6
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a8:	485e      	ldr	r0, [pc, #376]	; (8005724 <_printf_i+0x244>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e019      	b.n	80055e2 <_printf_i+0x102>
 80055ae:	680e      	ldr	r6, [r1, #0]
 80055b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b4:	602b      	str	r3, [r5, #0]
 80055b6:	bf18      	it	ne
 80055b8:	b236      	sxthne	r6, r6
 80055ba:	e7ef      	b.n	800559c <_printf_i+0xbc>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	6029      	str	r1, [r5, #0]
 80055c4:	0601      	lsls	r1, r0, #24
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0xec>
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <_printf_i+0xf2>
 80055cc:	0646      	lsls	r6, r0, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0xe8>
 80055d0:	881e      	ldrh	r6, [r3, #0]
 80055d2:	2f6f      	cmp	r7, #111	; 0x6f
 80055d4:	4853      	ldr	r0, [pc, #332]	; (8005724 <_printf_i+0x244>)
 80055d6:	bf0c      	ite	eq
 80055d8:	2308      	moveq	r3, #8
 80055da:	230a      	movne	r3, #10
 80055dc:	2100      	movs	r1, #0
 80055de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e2:	6865      	ldr	r5, [r4, #4]
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	60a5      	str	r5, [r4, #8]
 80055e8:	bfa2      	ittt	ge
 80055ea:	6821      	ldrge	r1, [r4, #0]
 80055ec:	f021 0104 	bicge.w	r1, r1, #4
 80055f0:	6021      	strge	r1, [r4, #0]
 80055f2:	b90e      	cbnz	r6, 80055f8 <_printf_i+0x118>
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d04d      	beq.n	8005694 <_printf_i+0x1b4>
 80055f8:	4615      	mov	r5, r2
 80055fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005602:	5dc7      	ldrb	r7, [r0, r7]
 8005604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005608:	4637      	mov	r7, r6
 800560a:	460e      	mov	r6, r1
 800560c:	42bb      	cmp	r3, r7
 800560e:	d9f4      	bls.n	80055fa <_printf_i+0x11a>
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10b      	bne.n	800562c <_printf_i+0x14c>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07de      	lsls	r6, r3, #31
 8005618:	d508      	bpl.n	800562c <_printf_i+0x14c>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6861      	ldr	r1, [r4, #4]
 800561e:	4299      	cmp	r1, r3
 8005620:	bfde      	ittt	le
 8005622:	2330      	movle	r3, #48	; 0x30
 8005624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	6122      	str	r2, [r4, #16]
 8005630:	464b      	mov	r3, r9
 8005632:	aa03      	add	r2, sp, #12
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f8cd a000 	str.w	sl, [sp]
 800563c:	f7ff fee0 	bl	8005400 <_printf_common>
 8005640:	3001      	adds	r0, #1
 8005642:	d14c      	bne.n	80056de <_printf_i+0x1fe>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	b004      	add	sp, #16
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	4835      	ldr	r0, [pc, #212]	; (8005724 <_printf_i+0x244>)
 8005650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005654:	6829      	ldr	r1, [r5, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	f851 6b04 	ldr.w	r6, [r1], #4
 800565c:	6029      	str	r1, [r5, #0]
 800565e:	061d      	lsls	r5, r3, #24
 8005660:	d514      	bpl.n	800568c <_printf_i+0x1ac>
 8005662:	07df      	lsls	r7, r3, #31
 8005664:	bf44      	itt	mi
 8005666:	f043 0320 	orrmi.w	r3, r3, #32
 800566a:	6023      	strmi	r3, [r4, #0]
 800566c:	b91e      	cbnz	r6, 8005676 <_printf_i+0x196>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f023 0320 	bic.w	r3, r3, #32
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	2310      	movs	r3, #16
 8005678:	e7b0      	b.n	80055dc <_printf_i+0xfc>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	2378      	movs	r3, #120	; 0x78
 8005684:	4828      	ldr	r0, [pc, #160]	; (8005728 <_printf_i+0x248>)
 8005686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800568a:	e7e3      	b.n	8005654 <_printf_i+0x174>
 800568c:	0659      	lsls	r1, r3, #25
 800568e:	bf48      	it	mi
 8005690:	b2b6      	uxthmi	r6, r6
 8005692:	e7e6      	b.n	8005662 <_printf_i+0x182>
 8005694:	4615      	mov	r5, r2
 8005696:	e7bb      	b.n	8005610 <_printf_i+0x130>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	6826      	ldr	r6, [r4, #0]
 800569c:	1d18      	adds	r0, r3, #4
 800569e:	6961      	ldr	r1, [r4, #20]
 80056a0:	6028      	str	r0, [r5, #0]
 80056a2:	0635      	lsls	r5, r6, #24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0x1cc>
 80056a8:	6019      	str	r1, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_printf_i+0x1d2>
 80056ac:	0670      	lsls	r0, r6, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0x1c8>
 80056b0:	8019      	strh	r1, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	4615      	mov	r5, r2
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	e7ba      	b.n	8005630 <_printf_i+0x150>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	2100      	movs	r1, #0
 80056be:	1d1a      	adds	r2, r3, #4
 80056c0:	602a      	str	r2, [r5, #0]
 80056c2:	681d      	ldr	r5, [r3, #0]
 80056c4:	6862      	ldr	r2, [r4, #4]
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 f830 	bl	800572c <memchr>
 80056cc:	b108      	cbz	r0, 80056d2 <_printf_i+0x1f2>
 80056ce:	1b40      	subs	r0, r0, r5
 80056d0:	6060      	str	r0, [r4, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2300      	movs	r3, #0
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	e7a8      	b.n	8005630 <_printf_i+0x150>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	462a      	mov	r2, r5
 80056e2:	4649      	mov	r1, r9
 80056e4:	4640      	mov	r0, r8
 80056e6:	47d0      	blx	sl
 80056e8:	3001      	adds	r0, #1
 80056ea:	d0ab      	beq.n	8005644 <_printf_i+0x164>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	079b      	lsls	r3, r3, #30
 80056f0:	d413      	bmi.n	800571a <_printf_i+0x23a>
 80056f2:	68e0      	ldr	r0, [r4, #12]
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	4298      	cmp	r0, r3
 80056f8:	bfb8      	it	lt
 80056fa:	4618      	movlt	r0, r3
 80056fc:	e7a4      	b.n	8005648 <_printf_i+0x168>
 80056fe:	2301      	movs	r3, #1
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d09b      	beq.n	8005644 <_printf_i+0x164>
 800570c:	3501      	adds	r5, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	1a5b      	subs	r3, r3, r1
 8005714:	42ab      	cmp	r3, r5
 8005716:	dcf2      	bgt.n	80056fe <_printf_i+0x21e>
 8005718:	e7eb      	b.n	80056f2 <_printf_i+0x212>
 800571a:	2500      	movs	r5, #0
 800571c:	f104 0619 	add.w	r6, r4, #25
 8005720:	e7f5      	b.n	800570e <_printf_i+0x22e>
 8005722:	bf00      	nop
 8005724:	08005add 	.word	0x08005add
 8005728:	08005aee 	.word	0x08005aee

0800572c <memchr>:
 800572c:	b2c9      	uxtb	r1, r1
 800572e:	4402      	add	r2, r0
 8005730:	b510      	push	{r4, lr}
 8005732:	4290      	cmp	r0, r2
 8005734:	4603      	mov	r3, r0
 8005736:	d101      	bne.n	800573c <memchr+0x10>
 8005738:	2300      	movs	r3, #0
 800573a:	e003      	b.n	8005744 <memchr+0x18>
 800573c:	781c      	ldrb	r4, [r3, #0]
 800573e:	3001      	adds	r0, #1
 8005740:	428c      	cmp	r4, r1
 8005742:	d1f6      	bne.n	8005732 <memchr+0x6>
 8005744:	4618      	mov	r0, r3
 8005746:	bd10      	pop	{r4, pc}

08005748 <memcpy>:
 8005748:	440a      	add	r2, r1
 800574a:	1e43      	subs	r3, r0, #1
 800574c:	4291      	cmp	r1, r2
 800574e:	d100      	bne.n	8005752 <memcpy+0xa>
 8005750:	4770      	bx	lr
 8005752:	b510      	push	{r4, lr}
 8005754:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005758:	4291      	cmp	r1, r2
 800575a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575e:	d1f9      	bne.n	8005754 <memcpy+0xc>
 8005760:	bd10      	pop	{r4, pc}

08005762 <memmove>:
 8005762:	4288      	cmp	r0, r1
 8005764:	b510      	push	{r4, lr}
 8005766:	eb01 0402 	add.w	r4, r1, r2
 800576a:	d902      	bls.n	8005772 <memmove+0x10>
 800576c:	4284      	cmp	r4, r0
 800576e:	4623      	mov	r3, r4
 8005770:	d807      	bhi.n	8005782 <memmove+0x20>
 8005772:	1e43      	subs	r3, r0, #1
 8005774:	42a1      	cmp	r1, r4
 8005776:	d008      	beq.n	800578a <memmove+0x28>
 8005778:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005780:	e7f8      	b.n	8005774 <memmove+0x12>
 8005782:	4402      	add	r2, r0
 8005784:	4601      	mov	r1, r0
 8005786:	428a      	cmp	r2, r1
 8005788:	d100      	bne.n	800578c <memmove+0x2a>
 800578a:	bd10      	pop	{r4, pc}
 800578c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005790:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005794:	e7f7      	b.n	8005786 <memmove+0x24>
	...

08005798 <_free_r>:
 8005798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800579a:	2900      	cmp	r1, #0
 800579c:	d043      	beq.n	8005826 <_free_r+0x8e>
 800579e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a2:	1f0c      	subs	r4, r1, #4
 80057a4:	9001      	str	r0, [sp, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfb8      	it	lt
 80057aa:	18e4      	addlt	r4, r4, r3
 80057ac:	f000 f914 	bl	80059d8 <__malloc_lock>
 80057b0:	4a1e      	ldr	r2, [pc, #120]	; (800582c <_free_r+0x94>)
 80057b2:	9801      	ldr	r0, [sp, #4]
 80057b4:	6813      	ldr	r3, [r2, #0]
 80057b6:	b933      	cbnz	r3, 80057c6 <_free_r+0x2e>
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	6014      	str	r4, [r2, #0]
 80057bc:	b003      	add	sp, #12
 80057be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c2:	f000 b90f 	b.w	80059e4 <__malloc_unlock>
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	d908      	bls.n	80057dc <_free_r+0x44>
 80057ca:	6825      	ldr	r5, [r4, #0]
 80057cc:	1961      	adds	r1, r4, r5
 80057ce:	428b      	cmp	r3, r1
 80057d0:	bf01      	itttt	eq
 80057d2:	6819      	ldreq	r1, [r3, #0]
 80057d4:	685b      	ldreq	r3, [r3, #4]
 80057d6:	1949      	addeq	r1, r1, r5
 80057d8:	6021      	streq	r1, [r4, #0]
 80057da:	e7ed      	b.n	80057b8 <_free_r+0x20>
 80057dc:	461a      	mov	r2, r3
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	b10b      	cbz	r3, 80057e6 <_free_r+0x4e>
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	d9fa      	bls.n	80057dc <_free_r+0x44>
 80057e6:	6811      	ldr	r1, [r2, #0]
 80057e8:	1855      	adds	r5, r2, r1
 80057ea:	42a5      	cmp	r5, r4
 80057ec:	d10b      	bne.n	8005806 <_free_r+0x6e>
 80057ee:	6824      	ldr	r4, [r4, #0]
 80057f0:	4421      	add	r1, r4
 80057f2:	1854      	adds	r4, r2, r1
 80057f4:	6011      	str	r1, [r2, #0]
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	d1e0      	bne.n	80057bc <_free_r+0x24>
 80057fa:	681c      	ldr	r4, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	4421      	add	r1, r4
 8005800:	6053      	str	r3, [r2, #4]
 8005802:	6011      	str	r1, [r2, #0]
 8005804:	e7da      	b.n	80057bc <_free_r+0x24>
 8005806:	d902      	bls.n	800580e <_free_r+0x76>
 8005808:	230c      	movs	r3, #12
 800580a:	6003      	str	r3, [r0, #0]
 800580c:	e7d6      	b.n	80057bc <_free_r+0x24>
 800580e:	6825      	ldr	r5, [r4, #0]
 8005810:	1961      	adds	r1, r4, r5
 8005812:	428b      	cmp	r3, r1
 8005814:	bf02      	ittt	eq
 8005816:	6819      	ldreq	r1, [r3, #0]
 8005818:	685b      	ldreq	r3, [r3, #4]
 800581a:	1949      	addeq	r1, r1, r5
 800581c:	6063      	str	r3, [r4, #4]
 800581e:	bf08      	it	eq
 8005820:	6021      	streq	r1, [r4, #0]
 8005822:	6054      	str	r4, [r2, #4]
 8005824:	e7ca      	b.n	80057bc <_free_r+0x24>
 8005826:	b003      	add	sp, #12
 8005828:	bd30      	pop	{r4, r5, pc}
 800582a:	bf00      	nop
 800582c:	20000170 	.word	0x20000170

08005830 <sbrk_aligned>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4e0e      	ldr	r6, [pc, #56]	; (800586c <sbrk_aligned+0x3c>)
 8005834:	460c      	mov	r4, r1
 8005836:	4605      	mov	r5, r0
 8005838:	6831      	ldr	r1, [r6, #0]
 800583a:	b911      	cbnz	r1, 8005842 <sbrk_aligned+0x12>
 800583c:	f000 f8bc 	bl	80059b8 <_sbrk_r>
 8005840:	6030      	str	r0, [r6, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	4628      	mov	r0, r5
 8005846:	f000 f8b7 	bl	80059b8 <_sbrk_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	d00a      	beq.n	8005864 <sbrk_aligned+0x34>
 800584e:	1cc4      	adds	r4, r0, #3
 8005850:	f024 0403 	bic.w	r4, r4, #3
 8005854:	42a0      	cmp	r0, r4
 8005856:	d007      	beq.n	8005868 <sbrk_aligned+0x38>
 8005858:	1a21      	subs	r1, r4, r0
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f8ac 	bl	80059b8 <_sbrk_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d101      	bne.n	8005868 <sbrk_aligned+0x38>
 8005864:	f04f 34ff 	mov.w	r4, #4294967295
 8005868:	4620      	mov	r0, r4
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	20000174 	.word	0x20000174

08005870 <_malloc_r>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	1ccd      	adds	r5, r1, #3
 8005876:	4607      	mov	r7, r0
 8005878:	f025 0503 	bic.w	r5, r5, #3
 800587c:	3508      	adds	r5, #8
 800587e:	2d0c      	cmp	r5, #12
 8005880:	bf38      	it	cc
 8005882:	250c      	movcc	r5, #12
 8005884:	2d00      	cmp	r5, #0
 8005886:	db01      	blt.n	800588c <_malloc_r+0x1c>
 8005888:	42a9      	cmp	r1, r5
 800588a:	d905      	bls.n	8005898 <_malloc_r+0x28>
 800588c:	230c      	movs	r3, #12
 800588e:	2600      	movs	r6, #0
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4630      	mov	r0, r6
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	4e2e      	ldr	r6, [pc, #184]	; (8005954 <_malloc_r+0xe4>)
 800589a:	f000 f89d 	bl	80059d8 <__malloc_lock>
 800589e:	6833      	ldr	r3, [r6, #0]
 80058a0:	461c      	mov	r4, r3
 80058a2:	bb34      	cbnz	r4, 80058f2 <_malloc_r+0x82>
 80058a4:	4629      	mov	r1, r5
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7ff ffc2 	bl	8005830 <sbrk_aligned>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	4604      	mov	r4, r0
 80058b0:	d14d      	bne.n	800594e <_malloc_r+0xde>
 80058b2:	6834      	ldr	r4, [r6, #0]
 80058b4:	4626      	mov	r6, r4
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d140      	bne.n	800593c <_malloc_r+0xcc>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4631      	mov	r1, r6
 80058be:	4638      	mov	r0, r7
 80058c0:	eb04 0803 	add.w	r8, r4, r3
 80058c4:	f000 f878 	bl	80059b8 <_sbrk_r>
 80058c8:	4580      	cmp	r8, r0
 80058ca:	d13a      	bne.n	8005942 <_malloc_r+0xd2>
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	3503      	adds	r5, #3
 80058d0:	4638      	mov	r0, r7
 80058d2:	1a6d      	subs	r5, r5, r1
 80058d4:	f025 0503 	bic.w	r5, r5, #3
 80058d8:	3508      	adds	r5, #8
 80058da:	2d0c      	cmp	r5, #12
 80058dc:	bf38      	it	cc
 80058de:	250c      	movcc	r5, #12
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7ff ffa5 	bl	8005830 <sbrk_aligned>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d02b      	beq.n	8005942 <_malloc_r+0xd2>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	442b      	add	r3, r5
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	e00e      	b.n	8005910 <_malloc_r+0xa0>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	1b52      	subs	r2, r2, r5
 80058f6:	d41e      	bmi.n	8005936 <_malloc_r+0xc6>
 80058f8:	2a0b      	cmp	r2, #11
 80058fa:	d916      	bls.n	800592a <_malloc_r+0xba>
 80058fc:	1961      	adds	r1, r4, r5
 80058fe:	42a3      	cmp	r3, r4
 8005900:	6025      	str	r5, [r4, #0]
 8005902:	bf18      	it	ne
 8005904:	6059      	strne	r1, [r3, #4]
 8005906:	6863      	ldr	r3, [r4, #4]
 8005908:	bf08      	it	eq
 800590a:	6031      	streq	r1, [r6, #0]
 800590c:	5162      	str	r2, [r4, r5]
 800590e:	604b      	str	r3, [r1, #4]
 8005910:	f104 060b 	add.w	r6, r4, #11
 8005914:	4638      	mov	r0, r7
 8005916:	f000 f865 	bl	80059e4 <__malloc_unlock>
 800591a:	1d23      	adds	r3, r4, #4
 800591c:	f026 0607 	bic.w	r6, r6, #7
 8005920:	1af2      	subs	r2, r6, r3
 8005922:	d0b6      	beq.n	8005892 <_malloc_r+0x22>
 8005924:	1b9b      	subs	r3, r3, r6
 8005926:	50a3      	str	r3, [r4, r2]
 8005928:	e7b3      	b.n	8005892 <_malloc_r+0x22>
 800592a:	6862      	ldr	r2, [r4, #4]
 800592c:	42a3      	cmp	r3, r4
 800592e:	bf0c      	ite	eq
 8005930:	6032      	streq	r2, [r6, #0]
 8005932:	605a      	strne	r2, [r3, #4]
 8005934:	e7ec      	b.n	8005910 <_malloc_r+0xa0>
 8005936:	4623      	mov	r3, r4
 8005938:	6864      	ldr	r4, [r4, #4]
 800593a:	e7b2      	b.n	80058a2 <_malloc_r+0x32>
 800593c:	4634      	mov	r4, r6
 800593e:	6876      	ldr	r6, [r6, #4]
 8005940:	e7b9      	b.n	80058b6 <_malloc_r+0x46>
 8005942:	230c      	movs	r3, #12
 8005944:	4638      	mov	r0, r7
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	f000 f84c 	bl	80059e4 <__malloc_unlock>
 800594c:	e7a1      	b.n	8005892 <_malloc_r+0x22>
 800594e:	6025      	str	r5, [r4, #0]
 8005950:	e7de      	b.n	8005910 <_malloc_r+0xa0>
 8005952:	bf00      	nop
 8005954:	20000170 	.word	0x20000170

08005958 <_realloc_r>:
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	4680      	mov	r8, r0
 800595e:	4614      	mov	r4, r2
 8005960:	460e      	mov	r6, r1
 8005962:	b921      	cbnz	r1, 800596e <_realloc_r+0x16>
 8005964:	4611      	mov	r1, r2
 8005966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800596a:	f7ff bf81 	b.w	8005870 <_malloc_r>
 800596e:	b92a      	cbnz	r2, 800597c <_realloc_r+0x24>
 8005970:	4625      	mov	r5, r4
 8005972:	f7ff ff11 	bl	8005798 <_free_r>
 8005976:	4628      	mov	r0, r5
 8005978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800597c:	f000 f838 	bl	80059f0 <_malloc_usable_size_r>
 8005980:	4284      	cmp	r4, r0
 8005982:	4607      	mov	r7, r0
 8005984:	d802      	bhi.n	800598c <_realloc_r+0x34>
 8005986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800598a:	d812      	bhi.n	80059b2 <_realloc_r+0x5a>
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff ff6e 	bl	8005870 <_malloc_r>
 8005994:	4605      	mov	r5, r0
 8005996:	2800      	cmp	r0, #0
 8005998:	d0ed      	beq.n	8005976 <_realloc_r+0x1e>
 800599a:	42bc      	cmp	r4, r7
 800599c:	4622      	mov	r2, r4
 800599e:	4631      	mov	r1, r6
 80059a0:	bf28      	it	cs
 80059a2:	463a      	movcs	r2, r7
 80059a4:	f7ff fed0 	bl	8005748 <memcpy>
 80059a8:	4631      	mov	r1, r6
 80059aa:	4640      	mov	r0, r8
 80059ac:	f7ff fef4 	bl	8005798 <_free_r>
 80059b0:	e7e1      	b.n	8005976 <_realloc_r+0x1e>
 80059b2:	4635      	mov	r5, r6
 80059b4:	e7df      	b.n	8005976 <_realloc_r+0x1e>
	...

080059b8 <_sbrk_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	2300      	movs	r3, #0
 80059bc:	4d05      	ldr	r5, [pc, #20]	; (80059d4 <_sbrk_r+0x1c>)
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	f7fb fdc4 	bl	8001550 <_sbrk>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_sbrk_r+0x1a>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_sbrk_r+0x1a>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000178 	.word	0x20000178

080059d8 <__malloc_lock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__malloc_lock+0x8>)
 80059da:	f000 b811 	b.w	8005a00 <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	2000017c 	.word	0x2000017c

080059e4 <__malloc_unlock>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__malloc_unlock+0x8>)
 80059e6:	f000 b80c 	b.w	8005a02 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	2000017c 	.word	0x2000017c

080059f0 <_malloc_usable_size_r>:
 80059f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f4:	1f18      	subs	r0, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bfbc      	itt	lt
 80059fa:	580b      	ldrlt	r3, [r1, r0]
 80059fc:	18c0      	addlt	r0, r0, r3
 80059fe:	4770      	bx	lr

08005a00 <__retarget_lock_acquire_recursive>:
 8005a00:	4770      	bx	lr

08005a02 <__retarget_lock_release_recursive>:
 8005a02:	4770      	bx	lr

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
