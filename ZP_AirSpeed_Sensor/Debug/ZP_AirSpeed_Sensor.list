
ZP_AirSpeed_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080075c0  080075c0  000175c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800777c  0800777c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007784  08007784  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000074  08007808  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08007808  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014982  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a86  00000000  00000000  00034a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000374b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00038370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c9d  00000000  00000000  00039140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a44  00000000  00000000  0003dddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102931  00000000  00000000  0004f821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  001521a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	080075a8 	.word	0x080075a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	080075a8 	.word	0x080075a8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b982 	b.w	8000edc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d148      	bne.n	8000c90 <__udivmoddi4+0xa0>
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	4694      	mov	ip, r2
 8000c02:	d961      	bls.n	8000cc8 <__udivmoddi4+0xd8>
 8000c04:	fab2 f382 	clz	r3, r2
 8000c08:	b143      	cbz	r3, 8000c1c <__udivmoddi4+0x2c>
 8000c0a:	f1c3 0120 	rsb	r1, r3, #32
 8000c0e:	409f      	lsls	r7, r3
 8000c10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c14:	409c      	lsls	r4, r3
 8000c16:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1a:	430f      	orrs	r7, r1
 8000c1c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c20:	fa1f fe8c 	uxth.w	lr, ip
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c2a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c2e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c32:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c36:	4290      	cmp	r0, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x5c>
 8000c3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x5a>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f200 8137 	bhi.w	8000eb8 <__udivmoddi4+0x2c8>
 8000c4a:	463e      	mov	r6, r7
 8000c4c:	1a12      	subs	r2, r2, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c54:	fb01 2210 	mls	r2, r1, r0, r2
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x86>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x84>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 811c 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000c74:	4610      	mov	r0, r2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	2600      	movs	r6, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0x9a>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0xb8>
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	f000 80fd 	beq.w	8000e94 <__udivmoddi4+0x2a4>
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca8:	fab3 f683 	clz	r6, r3
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d14b      	bne.n	8000d48 <__udivmoddi4+0x158>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	f0c0 80f2 	bcc.w	8000e9a <__udivmoddi4+0x2aa>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f240 80ef 	bls.w	8000e9a <__udivmoddi4+0x2aa>
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e3      	beq.n	8000c8a <__udivmoddi4+0x9a>
 8000cc2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cc6:	e7e0      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xdc>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f382 	clz	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 809d 	bne.w	8000e10 <__udivmoddi4+0x220>
 8000cd6:	1a89      	subs	r1, r1, r2
 8000cd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cdc:	b297      	uxth	r7, r2
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000ce6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb07 f002 	mul.w	r0, r7, r2
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d90f      	bls.n	8000d16 <__udivmoddi4+0x126>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cfe:	bf2c      	ite	cs
 8000d00:	f04f 0901 	movcs.w	r9, #1
 8000d04:	f04f 0900 	movcc.w	r9, #0
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	d903      	bls.n	8000d14 <__udivmoddi4+0x124>
 8000d0c:	f1b9 0f00 	cmp.w	r9, #0
 8000d10:	f000 80cf 	beq.w	8000eb2 <__udivmoddi4+0x2c2>
 8000d14:	4642      	mov	r2, r8
 8000d16:	1a09      	subs	r1, r1, r0
 8000d18:	b2a4      	uxth	r4, r4
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x150>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x14e>
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	f200 80b4 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	1be4      	subs	r4, r4, r7
 8000d42:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d46:	e79b      	b.n	8000c80 <__udivmoddi4+0x90>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	40f9      	lsrs	r1, r7
 8000d58:	40b2      	lsls	r2, r6
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	431c      	orrs	r4, r3
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d76:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x1b6>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0b01 	movcs.w	fp, #1
 8000d94:	f04f 0b00 	movcc.w	fp, #0
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x1b4>
 8000d9c:	f1bb 0f00 	cmp.w	fp, #0
 8000da0:	f000 808d 	beq.w	8000ebe <__udivmoddi4+0x2ce>
 8000da4:	46d0      	mov	r8, sl
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dae:	fb09 1110 	mls	r1, r9, r0, r1
 8000db2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dba:	458e      	cmp	lr, r1
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1de>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d201      	bcs.n	8000dcc <__udivmoddi4+0x1dc>
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d87f      	bhi.n	8000ecc <__udivmoddi4+0x2dc>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dda:	4541      	cmp	r1, r8
 8000ddc:	464c      	mov	r4, r9
 8000dde:	46c6      	mov	lr, r8
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x1f8>
 8000de2:	d106      	bne.n	8000df2 <__udivmoddi4+0x202>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d204      	bcs.n	8000df2 <__udivmoddi4+0x202>
 8000de8:	3801      	subs	r0, #1
 8000dea:	ebb9 0402 	subs.w	r4, r9, r2
 8000dee:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d070      	beq.n	8000ed8 <__udivmoddi4+0x2e8>
 8000df6:	1b1a      	subs	r2, r3, r4
 8000df8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfc:	fa22 f306 	lsr.w	r3, r2, r6
 8000e00:	fa01 f707 	lsl.w	r7, r1, r7
 8000e04:	40f1      	lsrs	r1, r6
 8000e06:	2600      	movs	r6, #0
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	e73c      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0020 	rsb	r0, r3, #32
 8000e18:	fa01 f203 	lsl.w	r2, r1, r3
 8000e1c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e20:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e24:	fa24 f100 	lsr.w	r1, r4, r0
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	409c      	lsls	r4, r3
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e34:	0c0a      	lsrs	r2, r1, #16
 8000e36:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e3a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e3e:	fb00 f607 	mul.w	r6, r0, r7
 8000e42:	4296      	cmp	r6, r2
 8000e44:	d90e      	bls.n	8000e64 <__udivmoddi4+0x274>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4296      	cmp	r6, r2
 8000e5a:	d902      	bls.n	8000e62 <__udivmoddi4+0x272>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	d031      	beq.n	8000ec6 <__udivmoddi4+0x2d6>
 8000e62:	4640      	mov	r0, r8
 8000e64:	1b92      	subs	r2, r2, r6
 8000e66:	b289      	uxth	r1, r1
 8000e68:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e6c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e74:	fb06 f207 	mul.w	r2, r6, r7
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x29c>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e84:	d201      	bcs.n	8000e8a <__udivmoddi4+0x29a>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d823      	bhi.n	8000ed2 <__udivmoddi4+0x2e2>
 8000e8a:	4646      	mov	r6, r8
 8000e8c:	1a89      	subs	r1, r1, r2
 8000e8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e92:	e725      	b.n	8000ce0 <__udivmoddi4+0xf0>
 8000e94:	462e      	mov	r6, r5
 8000e96:	4628      	mov	r0, r5
 8000e98:	e6f7      	b.n	8000c8a <__udivmoddi4+0x9a>
 8000e9a:	1a84      	subs	r4, r0, r2
 8000e9c:	eb61 0303 	sbc.w	r3, r1, r3
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	461f      	mov	r7, r3
 8000ea4:	e70b      	b.n	8000cbe <__udivmoddi4+0xce>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e749      	b.n	8000d40 <__udivmoddi4+0x150>
 8000eac:	4464      	add	r4, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	e6e1      	b.n	8000c76 <__udivmoddi4+0x86>
 8000eb2:	3a02      	subs	r2, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	e72e      	b.n	8000d16 <__udivmoddi4+0x126>
 8000eb8:	3e02      	subs	r6, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	e6c6      	b.n	8000c4c <__udivmoddi4+0x5c>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e76f      	b.n	8000da6 <__udivmoddi4+0x1b6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	e7cb      	b.n	8000e64 <__udivmoddi4+0x274>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e77d      	b.n	8000dce <__udivmoddi4+0x1de>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	e7d9      	b.n	8000e8c <__udivmoddi4+0x29c>
 8000ed8:	462e      	mov	r6, r5
 8000eda:	e6d6      	b.n	8000c8a <__udivmoddi4+0x9a>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZN7NEO_GPSC1EP20__UART_HandleTypeDef>:
#include "GPS.hpp"
#include "string.h"



NEO_GPS::NEO_GPS(UART_HandleTypeDef* dev)
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
{
	UART = dev;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	HAL_UART_Receive_DMA(UART, rx_raw, RAW_DATA_LENGTH);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000efe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f02:	4619      	mov	r1, r3
 8000f04:	f004 f9a0 	bl	8005248 <HAL_UART_Receive_DMA>
}
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZN7NEO_GPS16get_uart_handlerEv>:

UART_HandleTypeDef* NEO_GPS::get_uart_handler() {
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	return UART;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_ZN7NEO_GPSD1Ev>:

NEO_GPS::~NEO_GPS()
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
{

}
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_ZN7NEO_GPS12get_sentenseEPKcPci>:
/*
 * private function that get the GGA or RMC sentence from raw data
 * then it can be sent for parsing
 */
bool NEO_GPS::get_sentense(const char* string, char* container, int length)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b08b      	sub	sp, #44	; 0x2c
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	603b      	str	r3, [r7, #0]
	int counter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
	int len = length;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	61bb      	str	r3, [r7, #24]
	bool new_sentense = false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75fb      	strb	r3, [r7, #23]
	while(counter < RAW_DATA_LENGTH && !new_sentense)
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f62:	da57      	bge.n	8001014 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xd2>
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d154      	bne.n	8001014 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xd2>
	{
		if(rx_raw[counter] == string[0])
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	4413      	add	r3, r2
 8000f70:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d146      	bne.n	800100c <_ZN7NEO_GPS12get_sentenseEPKcPci+0xca>
		{
			int i = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
			bool same = true;
 8000f82:	2301      	movs	r3, #1
 8000f84:	77fb      	strb	r3, [r7, #31]
			while(i < len && same)
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	da18      	bge.n	8000fc0 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x7e>
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d112      	bne.n	8000fc0 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x7e>
			{
				if(rx_raw[counter + i] != string[i])
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	440b      	add	r3, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d001      	beq.n	8000fb8 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x76>
					same = false;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
				i++;
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
			while(i < len && same)
 8000fbe:	e7e2      	b.n	8000f86 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x44>
			}
			if(same)
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d022      	beq.n	800100c <_ZN7NEO_GPS12get_sentenseEPKcPci+0xca>
			{
				while(rx_raw[counter + i] != '*' && counter + i < RAW_DATA_LENGTH)
 8000fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	4413      	add	r3, r2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8000fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8000fd6:	d017      	beq.n	8001008 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xc6>
 8000fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe2:	da11      	bge.n	8001008 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xc6>
				{
					container[i - len] = rx_raw[counter + i];
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	441a      	add	r2, r3
 8000fea:	6a39      	ldr	r1, [r7, #32]
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	1acb      	subs	r3, r1, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	440a      	add	r2, r1
 8000ffa:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8000ffe:	701a      	strb	r2, [r3, #0]
					i++;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	3301      	adds	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
				while(rx_raw[counter + i] != '*' && counter + i < RAW_DATA_LENGTH)
 8001006:	e7de      	b.n	8000fc6 <_ZN7NEO_GPS12get_sentenseEPKcPci+0x84>
				}
				//new_sentense = true;
				return true;
 8001008:	2301      	movs	r3, #1
 800100a:	e004      	b.n	8001016 <_ZN7NEO_GPS12get_sentenseEPKcPci+0xd4>
			}

		}

		counter++;
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	3301      	adds	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
	while(counter < RAW_DATA_LENGTH && !new_sentense)
 8001012:	e7a3      	b.n	8000f5c <_ZN7NEO_GPS12get_sentenseEPKcPci+0x1a>
	}

	return false;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	372c      	adds	r7, #44	; 0x2c
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <_ZN7NEO_GPS10refreshGPSEv>:

bool NEO_GPS::refreshGPS()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

	const char GGAs[3] = {'G', 'G', 'A'};
 800102c:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <_ZN7NEO_GPS10refreshGPSEv+0xb4>)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	4611      	mov	r1, r2
 8001036:	8019      	strh	r1, [r3, #0]
 8001038:	3302      	adds	r3, #2
 800103a:	0c12      	lsrs	r2, r2, #16
 800103c:	701a      	strb	r2, [r3, #0]
	const char RMCs[3] = {'R', 'M', 'C'};
 800103e:	4a27      	ldr	r2, [pc, #156]	; (80010dc <_ZN7NEO_GPS10refreshGPSEv+0xb8>)
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	4611      	mov	r1, r2
 8001048:	8019      	strh	r1, [r3, #0]
 800104a:	3302      	adds	r3, #2
 800104c:	0c12      	lsrs	r2, r2, #16
 800104e:	701a      	strb	r2, [r3, #0]

	if(get_sentense(GGAs, GGA, 3))
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	f107 010c 	add.w	r1, r7, #12
 8001056:	2303      	movs	r3, #3
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff72 	bl	8000f42 <_ZN7NEO_GPS12get_sentenseEPKcPci>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d010      	beq.n	8001086 <_ZN7NEO_GPS10refreshGPSEv+0x62>
	{
		if(decodeGGA(GGA, &gpsData.ggastruct) != 0)
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	33c8      	adds	r3, #200	; 0xc8
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f000 f867 	bl	8001140 <_Z9decodeGGAPcP9GGASTRUCT>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <_ZN7NEO_GPS10refreshGPSEv+0x66>
			return false;
 8001082:	2300      	movs	r3, #0
 8001084:	e023      	b.n	80010ce <_ZN7NEO_GPS10refreshGPSEv+0xaa>

	}
	else
	{
		return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e021      	b.n	80010ce <_ZN7NEO_GPS10refreshGPSEv+0xaa>
	}

	if(get_sentense(RMCs, RMC, 3))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001090:	f107 0108 	add.w	r1, r7, #8
 8001094:	2303      	movs	r3, #3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff53 	bl	8000f42 <_ZN7NEO_GPS12get_sentenseEPKcPci>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <_ZN7NEO_GPS10refreshGPSEv+0xa4>
	{
		if(decodeRMC(RMC, &gpsData.rmcstruct) != 0)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	33f4      	adds	r3, #244	; 0xf4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f000 fbc8 	bl	8001844 <_Z9decodeRMCPcP9RMCSTRUCT>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <_ZN7NEO_GPS10refreshGPSEv+0xa8>
			return false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e002      	b.n	80010ce <_ZN7NEO_GPS10refreshGPSEv+0xaa>
	}
	else
	{
		return false;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e000      	b.n	80010ce <_ZN7NEO_GPS10refreshGPSEv+0xaa>
	}


	return true;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	080075c0 	.word	0x080075c0
 80010dc:	080075c4 	.word	0x080075c4

080010e0 <_ZN7NEO_GPS12get_locationEv>:

LOCATION NEO_GPS::get_location()
{
 80010e0:	b490      	push	{r4, r7}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	return gpsData.ggastruct.lcation;
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4614      	mov	r4, r2
 80010f0:	33c8      	adds	r3, #200	; 0xc8
 80010f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc90      	pop	{r4, r7}
 8001100:	4770      	bx	lr

08001102 <_ZN7NEO_GPS8get_timeEv>:
DATE NEO_GPS::get_date()
{
	return gpsData.rmcstruct.date;
}
TIME NEO_GPS::get_time()
{
 8001102:	b490      	push	{r4, r7}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	return gpsData.ggastruct.tim;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	4614      	mov	r4, r2
 8001112:	33d8      	adds	r3, #216	; 0xd8
 8001114:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bc90      	pop	{r4, r7}
 8001124:	4770      	bx	lr

08001126 <_ZN7NEO_GPS17get_number_of_satEv>:
float NEO_GPS::get_course()
{
	return gpsData.rmcstruct.course;
}
int NEO_GPS::get_number_of_sat()
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	return gpsData.ggastruct.numofsat;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_Z9decodeGGAPcP9GGASTRUCT>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b08c      	sub	sp, #48	; 0x30
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800114c:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b2c      	cmp	r3, #44	; 0x2c
 8001164:	d005      	beq.n	8001172 <_Z9decodeGGAPcP9GGASTRUCT+0x32>
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a61      	ldr	r2, [pc, #388]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e7f1      	b.n	8001156 <_Z9decodeGGAPcP9GGASTRUCT+0x16>
	inx++;
 8001172:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a5e      	ldr	r2, [pc, #376]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800117a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 800117c:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b2c      	cmp	r3, #44	; 0x2c
 800118a:	d005      	beq.n	8001198 <_Z9decodeGGAPcP9GGASTRUCT+0x58>
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e7f1      	b.n	800117c <_Z9decodeGGAPcP9GGASTRUCT+0x3c>
	inx++;
 8001198:	4b56      	ldr	r3, [pc, #344]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a55      	ldr	r2, [pc, #340]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011a0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b2c      	cmp	r3, #44	; 0x2c
 80011b0:	d005      	beq.n	80011be <_Z9decodeGGAPcP9GGASTRUCT+0x7e>
 80011b2:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e7f1      	b.n	80011a2 <_Z9decodeGGAPcP9GGASTRUCT+0x62>
	inx++;
 80011be:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011c6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 80011c8:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b2c      	cmp	r3, #44	; 0x2c
 80011d6:	d005      	beq.n	80011e4 <_Z9decodeGGAPcP9GGASTRUCT+0xa4>
 80011d8:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a45      	ldr	r2, [pc, #276]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e7f1      	b.n	80011c8 <_Z9decodeGGAPcP9GGASTRUCT+0x88>
	inx++;
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a42      	ldr	r2, [pc, #264]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011ec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b2c      	cmp	r3, #44	; 0x2c
 80011fc:	d005      	beq.n	800120a <_Z9decodeGGAPcP9GGASTRUCT+0xca>
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a3b      	ldr	r2, [pc, #236]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e7f1      	b.n	80011ee <_Z9decodeGGAPcP9GGASTRUCT+0xae>
	inx++;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a38      	ldr	r2, [pc, #224]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001212:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b2c      	cmp	r3, #44	; 0x2c
 8001222:	d005      	beq.n	8001230 <_Z9decodeGGAPcP9GGASTRUCT+0xf0>
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e7f1      	b.n	8001214 <_Z9decodeGGAPcP9GGASTRUCT+0xd4>
	inx++;  // reached the character to identify the fix
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001238:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b31      	cmp	r3, #49	; 0x31
 8001248:	d00f      	beq.n	800126a <_Z9decodeGGAPcP9GGASTRUCT+0x12a>
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b32      	cmp	r3, #50	; 0x32
 8001258:	d007      	beq.n	800126a <_Z9decodeGGAPcP9GGASTRUCT+0x12a>
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b36      	cmp	r3, #54	; 0x36
 8001268:	d106      	bne.n	8001278 <_Z9decodeGGAPcP9GGASTRUCT+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e004      	b.n	8001282 <_Z9decodeGGAPcP9GGASTRUCT+0x142>
	}
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800127e:	2301      	movs	r3, #1
 8001280:	e2d7      	b.n	8001832 <_Z9decodeGGAPcP9GGASTRUCT+0x6f2>
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b2c      	cmp	r3, #44	; 0x2c
 8001290:	d005      	beq.n	800129e <_Z9decodeGGAPcP9GGASTRUCT+0x15e>
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e7f1      	b.n	8001282 <_Z9decodeGGAPcP9GGASTRUCT+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80012a6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	220c      	movs	r2, #12
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 f8e5 	bl	8007480 <memset>
	i=0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b2c      	cmp	r3, #44	; 0x2c
 80012c8:	d016      	beq.n	80012f8 <_Z9decodeGGAPcP9GGASTRUCT+0x1b8>
	{
		buffer[i] = GGAbuffer[inx];
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	7819      	ldrb	r1, [r3, #0]
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	4413      	add	r3, r2
 80012de:	460a      	mov	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
		i++;
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	3301      	adds	r3, #1
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a01      	ldr	r2, [pc, #4]	; (80012f4 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 80012f0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80012f2:	e7e2      	b.n	80012ba <_Z9decodeGGAPcP9GGASTRUCT+0x17a>
 80012f4:	20000090 	.word	0x20000090
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 f891 	bl	8007424 <atoi>
 8001302:	4603      	mov	r3, r0
 8001304:	4aab      	ldr	r2, [pc, #684]	; (80015b4 <_Z9decodeGGAPcP9GGASTRUCT+0x474>)
 8001306:	fb82 1203 	smull	r1, r2, r2, r3
 800130a:	1312      	asrs	r2, r2, #12
 800130c:	17db      	asrs	r3, r3, #31
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	4ba9      	ldr	r3, [pc, #676]	; (80015b8 <_Z9decodeGGAPcP9GGASTRUCT+0x478>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	49a9      	ldr	r1, [pc, #676]	; (80015bc <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 8001316:	fb81 0103 	smull	r0, r1, r1, r3
 800131a:	1149      	asrs	r1, r1, #5
 800131c:	17db      	asrs	r3, r3, #31
 800131e:	1acb      	subs	r3, r1, r3
 8001320:	4413      	add	r3, r2
 8001322:	4aa7      	ldr	r2, [pc, #668]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001324:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4618      	mov	r0, r3
 800132c:	f006 f87a 	bl	8007424 <atoi>
 8001330:	4603      	mov	r3, r0
 8001332:	4aa2      	ldr	r2, [pc, #648]	; (80015bc <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 8001334:	fb82 1203 	smull	r1, r2, r2, r3
 8001338:	1152      	asrs	r2, r2, #5
 800133a:	17db      	asrs	r3, r3, #31
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a9f      	ldr	r2, [pc, #636]	; (80015bc <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 8001340:	fb82 1203 	smull	r1, r2, r2, r3
 8001344:	1151      	asrs	r1, r2, #5
 8001346:	17da      	asrs	r2, r3, #31
 8001348:	1a8a      	subs	r2, r1, r2
 800134a:	2164      	movs	r1, #100	; 0x64
 800134c:	fb01 f202 	mul.w	r2, r1, r2
 8001350:	1a9a      	subs	r2, r3, r2
 8001352:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <_Z9decodeGGAPcP9GGASTRUCT+0x478>)
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	4b99      	ldr	r3, [pc, #612]	; (80015bc <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 8001358:	fb83 0301 	smull	r0, r3, r3, r1
 800135c:	1158      	asrs	r0, r3, #5
 800135e:	17cb      	asrs	r3, r1, #31
 8001360:	1ac3      	subs	r3, r0, r3
 8001362:	2064      	movs	r0, #100	; 0x64
 8001364:	fb00 f303 	mul.w	r3, r0, r3
 8001368:	1acb      	subs	r3, r1, r3
 800136a:	4413      	add	r3, r2
 800136c:	4a95      	ldr	r2, [pc, #596]	; (80015c4 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 800136e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001370:	4b94      	ldr	r3, [pc, #592]	; (80015c4 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b3b      	cmp	r3, #59	; 0x3b
 8001376:	dd09      	ble.n	800138c <_Z9decodeGGAPcP9GGASTRUCT+0x24c>
	{
		min = min-60;
 8001378:	4b92      	ldr	r3, [pc, #584]	; (80015c4 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b3c      	subs	r3, #60	; 0x3c
 800137e:	4a91      	ldr	r2, [pc, #580]	; (80015c4 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 8001380:	6013      	str	r3, [r2, #0]
		hr++;
 8001382:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a8d      	ldr	r2, [pc, #564]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 800138a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800138c:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da09      	bge.n	80013a8 <_Z9decodeGGAPcP9GGASTRUCT+0x268>
	{
		hr=24+hr;
 8001394:	4b8a      	ldr	r3, [pc, #552]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3318      	adds	r3, #24
 800139a:	4a89      	ldr	r2, [pc, #548]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 800139c:	6013      	str	r3, [r2, #0]
		daychange--;
 800139e:	4b8a      	ldr	r3, [pc, #552]	; (80015c8 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	4a88      	ldr	r2, [pc, #544]	; (80015c8 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 80013a6:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80013a8:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b17      	cmp	r3, #23
 80013ae:	dd09      	ble.n	80013c4 <_Z9decodeGGAPcP9GGASTRUCT+0x284>
	{
		hr=hr-24;
 80013b0:	4b83      	ldr	r3, [pc, #524]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b18      	subs	r3, #24
 80013b6:	4a82      	ldr	r2, [pc, #520]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80013b8:	6013      	str	r3, [r2, #0]
		daychange++;
 80013ba:	4b83      	ldr	r3, [pc, #524]	; (80015c8 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a81      	ldr	r2, [pc, #516]	; (80015c8 <_Z9decodeGGAPcP9GGASTRUCT+0x488>)
 80013c2:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <_Z9decodeGGAPcP9GGASTRUCT+0x480>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80013cc:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <_Z9decodeGGAPcP9GGASTRUCT+0x484>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 f823 	bl	8007424 <atoi>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b76      	ldr	r3, [pc, #472]	; (80015bc <_Z9decodeGGAPcP9GGASTRUCT+0x47c>)
 80013e2:	fb83 1302 	smull	r1, r3, r3, r2
 80013e6:	1159      	asrs	r1, r3, #5
 80013e8:	17d3      	asrs	r3, r2, #31
 80013ea:	1acb      	subs	r3, r1, r3
 80013ec:	2164      	movs	r1, #100	; 0x64
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80013f8:	4b74      	ldr	r3, [pc, #464]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a73      	ldr	r2, [pc, #460]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001400:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	220c      	movs	r2, #12
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f006 f838 	bl	8007480 <memset>
	i=0;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b2c      	cmp	r3, #44	; 0x2c
 8001422:	d014      	beq.n	800144e <_Z9decodeGGAPcP9GGASTRUCT+0x30e>
	{
		buffer[i] = GGAbuffer[inx];
 8001424:	4b69      	ldr	r3, [pc, #420]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	7819      	ldrb	r1, [r3, #0]
 8001430:	f107 020c 	add.w	r2, r7, #12
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
		i++;
 800143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143e:	3301      	adds	r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001442:	4b62      	ldr	r3, [pc, #392]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a60      	ldr	r2, [pc, #384]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800144a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800144c:	e7e2      	b.n	8001414 <_Z9decodeGGAPcP9GGASTRUCT+0x2d4>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe fef0 	bl	8000238 <strlen>
 8001458:	4603      	mov	r3, r0
 800145a:	2b05      	cmp	r3, #5
 800145c:	d801      	bhi.n	8001462 <_Z9decodeGGAPcP9GGASTRUCT+0x322>
 800145e:	2302      	movs	r3, #2
 8001460:	e1e7      	b.n	8001832 <_Z9decodeGGAPcP9GGASTRUCT+0x6f2>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f005 ffdc 	bl	8007424 <atoi>
 800146c:	4603      	mov	r3, r0
 800146e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001474:	f107 020c 	add.w	r2, r7, #12
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b2e      	cmp	r3, #46	; 0x2e
 8001480:	d003      	beq.n	800148a <_Z9decodeGGAPcP9GGASTRUCT+0x34a>
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	3301      	adds	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
 8001488:	e7f4      	b.n	8001474 <_Z9decodeGGAPcP9GGASTRUCT+0x334>
	j++;
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	3301      	adds	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fecf 	bl	8000238 <strlen>
 800149a:	4602      	mov	r2, r0
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80014a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	4413      	add	r3, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 ffba 	bl	8007424 <atoi>
 80014b0:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80014b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f818 	bl	80004ec <__aeabi_i2d>
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <_Z9decodeGGAPcP9GGASTRUCT+0x490>)
 80014c2:	f7ff f9a7 	bl	8000814 <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4690      	mov	r8, r2
 80014cc:	4699      	mov	r9, r3
 80014ce:	69f8      	ldr	r0, [r7, #28]
 80014d0:	f7ff f80c 	bl	80004ec <__aeabi_i2d>
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	3302      	adds	r3, #2
 80014dc:	4619      	mov	r1, r3
 80014de:	200a      	movs	r0, #10
 80014e0:	f000 fbd8 	bl	8001c94 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014e4:	ec53 2b10 	vmov	r2, r3, d0
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7ff f992 	bl	8000814 <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4640      	mov	r0, r8
 80014f6:	4649      	mov	r1, r9
 80014f8:	f7fe feac 	bl	8000254 <__adddf3>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb0c 	bl	8000b20 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	601a      	str	r2, [r3, #0]
	inx++;  
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800151a:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001534:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 800153e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	220c      	movs	r2, #12
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f005 ff99 	bl	8007480 <memset>
	i=0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b2c      	cmp	r3, #44	; 0x2c
 8001560:	d014      	beq.n	800158c <_Z9decodeGGAPcP9GGASTRUCT+0x44c>
	{
		buffer[i] = GGAbuffer[inx];
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	7819      	ldrb	r1, [r3, #0]
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	4413      	add	r3, r2
 8001576:	460a      	mov	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
		i++;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	3301      	adds	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <_Z9decodeGGAPcP9GGASTRUCT+0x48c>)
 8001588:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800158a:	e7e2      	b.n	8001552 <_Z9decodeGGAPcP9GGASTRUCT+0x412>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4618      	mov	r0, r3
 8001592:	f005 ff47 	bl	8007424 <atoi>
 8001596:	4603      	mov	r3, r0
 8001598:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b2e      	cmp	r3, #46	; 0x2e
 80015aa:	d013      	beq.n	80015d4 <_Z9decodeGGAPcP9GGASTRUCT+0x494>
 80015ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ae:	3301      	adds	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b2:	e7f4      	b.n	800159e <_Z9decodeGGAPcP9GGASTRUCT+0x45e>
 80015b4:	68db8bad 	.word	0x68db8bad
 80015b8:	20000000 	.word	0x20000000
 80015bc:	51eb851f 	.word	0x51eb851f
 80015c0:	20000094 	.word	0x20000094
 80015c4:	20000098 	.word	0x20000098
 80015c8:	200000a8 	.word	0x200000a8
 80015cc:	20000090 	.word	0x20000090
 80015d0:	40590000 	.word	0x40590000
	j++;
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	3301      	adds	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fe2a 	bl	8000238 <strlen>
 80015e4:	4602      	mov	r2, r0
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	f107 020c 	add.w	r2, r7, #12
 80015f2:	4413      	add	r3, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 ff15 	bl	8007424 <atoi>
 80015fa:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80015fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff73 	bl	80004ec <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b8c      	ldr	r3, [pc, #560]	; (800183c <_Z9decodeGGAPcP9GGASTRUCT+0x6fc>)
 800160c:	f7ff f902 	bl	8000814 <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4690      	mov	r8, r2
 8001616:	4699      	mov	r9, r3
 8001618:	69f8      	ldr	r0, [r7, #28]
 800161a:	f7fe ff67 	bl	80004ec <__aeabi_i2d>
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	3302      	adds	r3, #2
 8001626:	4619      	mov	r1, r3
 8001628:	200a      	movs	r0, #10
 800162a:	f000 fb33 	bl	8001c94 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800162e:	ec53 2b10 	vmov	r2, r3, d0
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff f8ed 	bl	8000814 <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4640      	mov	r0, r8
 8001640:	4649      	mov	r1, r9
 8001642:	f7fe fe07 	bl	8000254 <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa67 	bl	8000b20 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	609a      	str	r2, [r3, #8]
	inx++;
 800165c:	4b78      	ldr	r3, [pc, #480]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	4a77      	ldr	r2, [pc, #476]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001664:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a70      	ldr	r2, [pc, #448]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800167e:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a6e      	ldr	r2, [pc, #440]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001688:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a6b      	ldr	r2, [pc, #428]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001692:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a69      	ldr	r2, [pc, #420]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800169c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	220c      	movs	r2, #12
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 feea 	bl	8007480 <memset>
	i=0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80016b0:	4b63      	ldr	r3, [pc, #396]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b2c      	cmp	r3, #44	; 0x2c
 80016be:	d014      	beq.n	80016ea <_Z9decodeGGAPcP9GGASTRUCT+0x5aa>
	{
		buffer[i] = GGAbuffer[inx];
 80016c0:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	7819      	ldrb	r1, [r3, #0]
 80016cc:	f107 020c 	add.w	r2, r7, #12
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
		i++;
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	3301      	adds	r3, #1
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a56      	ldr	r2, [pc, #344]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80016e6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80016e8:	e7e2      	b.n	80016b0 <_Z9decodeGGAPcP9GGASTRUCT+0x570>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fe98 	bl	8007424 <atoi>
 80016f4:	4602      	mov	r2, r0
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001702:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b2c      	cmp	r3, #44	; 0x2c
 8001712:	d005      	beq.n	8001720 <_Z9decodeGGAPcP9GGASTRUCT+0x5e0>
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a49      	ldr	r2, [pc, #292]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e7f1      	b.n	8001704 <_Z9decodeGGAPcP9GGASTRUCT+0x5c4>


	/*************** Altitude calculation ********************/
	inx++;
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	4a46      	ldr	r2, [pc, #280]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001728:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	220c      	movs	r2, #12
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f005 fea4 	bl	8007480 <memset>
	i=0;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b2c      	cmp	r3, #44	; 0x2c
 800174a:	d014      	beq.n	8001776 <_Z9decodeGGAPcP9GGASTRUCT+0x636>
	{
		buffer[i] = GGAbuffer[inx];
 800174c:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	7819      	ldrb	r1, [r3, #0]
 8001758:	f107 020c 	add.w	r2, r7, #12
 800175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175e:	4413      	add	r3, r2
 8001760:	460a      	mov	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
		i++;
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	3301      	adds	r3, #1
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a33      	ldr	r2, [pc, #204]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001772:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001774:	e7e2      	b.n	800173c <_Z9decodeGGAPcP9GGASTRUCT+0x5fc>
	}
	num = (atoi(buffer));
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4618      	mov	r0, r3
 800177c:	f005 fe52 	bl	8007424 <atoi>
 8001780:	4603      	mov	r3, r0
 8001782:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001788:	f107 020c 	add.w	r2, r7, #12
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b2e      	cmp	r3, #46	; 0x2e
 8001794:	d003      	beq.n	800179e <_Z9decodeGGAPcP9GGASTRUCT+0x65e>
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	e7f4      	b.n	8001788 <_Z9decodeGGAPcP9GGASTRUCT+0x648>
	j++;
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	3301      	adds	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fd45 	bl	8000238 <strlen>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	f107 020c 	add.w	r2, r7, #12
 80017bc:	4413      	add	r3, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fe30 	bl	8007424 <atoi>
 80017c4:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80017c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe8e 	bl	80004ec <__aeabi_i2d>
 80017d0:	4604      	mov	r4, r0
 80017d2:	460d      	mov	r5, r1
 80017d4:	69f8      	ldr	r0, [r7, #28]
 80017d6:	f7fe fe89 	bl	80004ec <__aeabi_i2d>
 80017da:	4680      	mov	r8, r0
 80017dc:	4689      	mov	r9, r1
 80017de:	6a39      	ldr	r1, [r7, #32]
 80017e0:	200a      	movs	r0, #10
 80017e2:	f000 fa57 	bl	8001c94 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017e6:	ec53 2b10 	vmov	r2, r3, d0
 80017ea:	4640      	mov	r0, r8
 80017ec:	4649      	mov	r1, r9
 80017ee:	f7ff f811 	bl	8000814 <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fd2b 	bl	8000254 <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f98b 	bl	8000b20 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	621a      	str	r2, [r3, #32]

	inx++;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 800181c:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_Z9decodeGGAPcP9GGASTRUCT+0x700>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001830:	2300      	movs	r3, #0

}
 8001832:	4618      	mov	r0, r3
 8001834:	3730      	adds	r7, #48	; 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800183c:	40590000 	.word	0x40590000
 8001840:	20000090 	.word	0x20000090

08001844 <_Z9decodeRMCPcP9RMCSTRUCT>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001848:	b090      	sub	sp, #64	; 0x40
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800185a:	4b9b      	ldr	r3, [pc, #620]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b2c      	cmp	r3, #44	; 0x2c
 8001868:	d005      	beq.n	8001876 <_Z9decodeRMCPcP9RMCSTRUCT+0x32>
 800186a:	4b97      	ldr	r3, [pc, #604]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a95      	ldr	r2, [pc, #596]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e7f1      	b.n	800185a <_Z9decodeRMCPcP9RMCSTRUCT+0x16>
	inx++;
 8001876:	4b94      	ldr	r3, [pc, #592]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4a92      	ldr	r2, [pc, #584]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800187e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001880:	4b91      	ldr	r3, [pc, #580]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b2c      	cmp	r3, #44	; 0x2c
 800188e:	d005      	beq.n	800189c <_Z9decodeRMCPcP9RMCSTRUCT+0x58>
 8001890:	4b8d      	ldr	r3, [pc, #564]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a8c      	ldr	r2, [pc, #560]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e7f1      	b.n	8001880 <_Z9decodeRMCPcP9RMCSTRUCT+0x3c>
	inx++;
 800189c:	4b8a      	ldr	r3, [pc, #552]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	4a89      	ldr	r2, [pc, #548]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018a4:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b41      	cmp	r3, #65	; 0x41
 80018b4:	d10d      	bne.n	80018d2 <_Z9decodeRMCPcP9RMCSTRUCT+0x8e>
	{
		rmc->isValid = 1;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80018bc:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a81      	ldr	r2, [pc, #516]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018c4:	6013      	str	r3, [r2, #0]
	inx++;
 80018c6:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e004      	b.n	80018dc <_Z9decodeRMCPcP9RMCSTRUCT+0x98>
		rmc->isValid =0;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
		return 1;
 80018d8:	2301      	movs	r3, #1
 80018da:	e1c7      	b.n	8001c6c <_Z9decodeRMCPcP9RMCSTRUCT+0x428>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80018dc:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b2c      	cmp	r3, #44	; 0x2c
 80018ea:	d005      	beq.n	80018f8 <_Z9decodeRMCPcP9RMCSTRUCT+0xb4>
 80018ec:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a75      	ldr	r2, [pc, #468]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e7f1      	b.n	80018dc <_Z9decodeRMCPcP9RMCSTRUCT+0x98>
	inx++;
 80018f8:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001900:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001902:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b2c      	cmp	r3, #44	; 0x2c
 8001910:	d005      	beq.n	800191e <_Z9decodeRMCPcP9RMCSTRUCT+0xda>
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	4a6b      	ldr	r2, [pc, #428]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e7f1      	b.n	8001902 <_Z9decodeRMCPcP9RMCSTRUCT+0xbe>
	inx++;
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a68      	ldr	r2, [pc, #416]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001926:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001928:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b2c      	cmp	r3, #44	; 0x2c
 8001936:	d005      	beq.n	8001944 <_Z9decodeRMCPcP9RMCSTRUCT+0x100>
 8001938:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a62      	ldr	r2, [pc, #392]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e7f1      	b.n	8001928 <_Z9decodeRMCPcP9RMCSTRUCT+0xe4>
	inx++;
 8001944:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a5f      	ldr	r2, [pc, #380]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800194c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800194e:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b2c      	cmp	r3, #44	; 0x2c
 800195c:	d005      	beq.n	800196a <_Z9decodeRMCPcP9RMCSTRUCT+0x126>
 800195e:	4b5a      	ldr	r3, [pc, #360]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e7f1      	b.n	800194e <_Z9decodeRMCPcP9RMCSTRUCT+0x10a>

	// Get Speed
	inx++;
 800196a:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001972:	6013      	str	r3, [r2, #0]
	i=0;
 8001974:	2300      	movs	r3, #0
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	220c      	movs	r2, #12
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f005 fd7d 	bl	8007480 <memset>
	while (RMCbuffer[inx] != ',')
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b2c      	cmp	r3, #44	; 0x2c
 8001994:	d014      	beq.n	80019c0 <_Z9decodeRMCPcP9RMCSTRUCT+0x17c>
	{
		buffer[i] = RMCbuffer[inx];
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	7819      	ldrb	r1, [r3, #0]
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	4413      	add	r3, r2
 80019aa:	460a      	mov	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
		i++;
 80019ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b0:	3301      	adds	r3, #1
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80019b4:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80019bc:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80019be:	e7e2      	b.n	8001986 <_Z9decodeRMCPcP9RMCSTRUCT+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04f      	beq.n	8001a6a <_Z9decodeRMCPcP9RMCSTRUCT+0x226>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 fd28 	bl	8007424 <atoi>
 80019d4:	4603      	mov	r3, r0
 80019d6:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80019dc:	f107 0208 	add.w	r2, r7, #8
 80019e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b2e      	cmp	r3, #46	; 0x2e
 80019e8:	d003      	beq.n	80019f2 <_Z9decodeRMCPcP9RMCSTRUCT+0x1ae>
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	3301      	adds	r3, #1
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80019f0:	e7f4      	b.n	80019dc <_Z9decodeRMCPcP9RMCSTRUCT+0x198>
		j++;
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	3301      	adds	r3, #1
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fc1b 	bl	8000238 <strlen>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a0c:	f107 0208 	add.w	r2, r7, #8
 8001a10:	4413      	add	r3, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 fd06 	bl	8007424 <atoi>
 8001a18:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001a1a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd64 	bl	80004ec <__aeabi_i2d>
 8001a24:	4604      	mov	r4, r0
 8001a26:	460d      	mov	r5, r1
 8001a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a2a:	f7fe fd5f 	bl	80004ec <__aeabi_i2d>
 8001a2e:	4680      	mov	r8, r0
 8001a30:	4689      	mov	r9, r1
 8001a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a34:	200a      	movs	r0, #10
 8001a36:	f000 f92d 	bl	8001c94 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	4640      	mov	r0, r8
 8001a40:	4649      	mov	r1, r9
 8001a42:	f7fe fee7 	bl	8000814 <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc01 	bl	8000254 <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f861 	bl	8000b20 <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	e003      	b.n	8001a72 <_Z9decodeRMCPcP9RMCSTRUCT+0x22e>
	}
	else rmc->speed = 0;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001a7a:	6013      	str	r3, [r2, #0]
	i=0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	220c      	movs	r2, #12
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 fcf9 	bl	8007480 <memset>
	while (RMCbuffer[inx] != ',')
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b2c      	cmp	r3, #44	; 0x2c
 8001a9c:	d016      	beq.n	8001acc <_Z9decodeRMCPcP9RMCSTRUCT+0x288>
	{
		buffer[i] = RMCbuffer[inx];
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	7819      	ldrb	r1, [r3, #0]
 8001aaa:	f107 0208 	add.w	r2, r7, #8
 8001aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab0:	4413      	add	r3, r2
 8001ab2:	460a      	mov	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
		i++;
 8001ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab8:	3301      	adds	r3, #1
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	4a01      	ldr	r2, [pc, #4]	; (8001ac8 <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8001ac4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001ac6:	e7e2      	b.n	8001a8e <_Z9decodeRMCPcP9RMCSTRUCT+0x24a>
 8001ac8:	20000090 	.word	0x20000090
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d04f      	beq.n	8001b76 <_Z9decodeRMCPcP9RMCSTRUCT+0x332>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 fca2 	bl	8007424 <atoi>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001ae8:	f107 0208 	add.w	r2, r7, #8
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b2e      	cmp	r3, #46	; 0x2e
 8001af4:	d003      	beq.n	8001afe <_Z9decodeRMCPcP9RMCSTRUCT+0x2ba>
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	3301      	adds	r3, #1
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
 8001afc:	e7f4      	b.n	8001ae8 <_Z9decodeRMCPcP9RMCSTRUCT+0x2a4>
		j++;
 8001afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b00:	3301      	adds	r3, #1
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fb95 	bl	8000238 <strlen>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	f107 0208 	add.w	r2, r7, #8
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fc80 	bl	8007424 <atoi>
 8001b24:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001b26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcde 	bl	80004ec <__aeabi_i2d>
 8001b30:	4604      	mov	r4, r0
 8001b32:	460d      	mov	r5, r1
 8001b34:	69b8      	ldr	r0, [r7, #24]
 8001b36:	f7fe fcd9 	bl	80004ec <__aeabi_i2d>
 8001b3a:	4680      	mov	r8, r0
 8001b3c:	4689      	mov	r9, r1
 8001b3e:	69f9      	ldr	r1, [r7, #28]
 8001b40:	200a      	movs	r0, #10
 8001b42:	f000 f8a7 	bl	8001c94 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b46:	ec53 2b10 	vmov	r2, r3, d0
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f7fe fe61 	bl	8000814 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fb7b 	bl	8000254 <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7fe ffdb 	bl	8000b20 <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	e003      	b.n	8001b7e <_Z9decodeRMCPcP9RMCSTRUCT+0x33a>
	}
	else
		{
			rmc->course = 0;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001b86:	6013      	str	r3, [r2, #0]
	i=0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001b8c:	f107 0308 	add.w	r3, r7, #8
 8001b90:	220c      	movs	r2, #12
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fc73 	bl	8007480 <memset>
	while (RMCbuffer[inx] != ',')
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba8:	d014      	beq.n	8001bd4 <_Z9decodeRMCPcP9RMCSTRUCT+0x390>
	{
		buffer[i] = RMCbuffer[inx];
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	7819      	ldrb	r1, [r3, #0]
 8001bb6:	f107 0208 	add.w	r2, r7, #8
 8001bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bbc:	4413      	add	r3, r2
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
		i++;
 8001bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8001bd0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001bd2:	e7e2      	b.n	8001b9a <_Z9decodeRMCPcP9RMCSTRUCT+0x356>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 fc23 	bl	8007424 <atoi>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <_Z9decodeRMCPcP9RMCSTRUCT+0x438>)
 8001be2:	fb82 1203 	smull	r1, r2, r2, r3
 8001be6:	1312      	asrs	r2, r2, #12
 8001be8:	17db      	asrs	r3, r3, #31
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001bee:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 fc15 	bl	8007424 <atoi>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8001bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8001c02:	1152      	asrs	r2, r2, #5
 8001c04:	17db      	asrs	r3, r3, #31
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8001c0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c0e:	1159      	asrs	r1, r3, #5
 8001c10:	17d3      	asrs	r3, r2, #31
 8001c12:	1acb      	subs	r3, r1, r3
 8001c14:	2164      	movs	r1, #100	; 0x64
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <_Z9decodeRMCPcP9RMCSTRUCT+0x444>)
 8001c1e:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 fbfd 	bl	8007424 <atoi>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8001c2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c32:	1159      	asrs	r1, r3, #5
 8001c34:	17d3      	asrs	r3, r2, #31
 8001c36:	1acb      	subs	r3, r1, r3
 8001c38:	2164      	movs	r1, #100	; 0x64
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_Z9decodeRMCPcP9RMCSTRUCT+0x448>)
 8001c42:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_Z9decodeRMCPcP9RMCSTRUCT+0x44c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001c50:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <_Z9decodeRMCPcP9RMCSTRUCT+0x444>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <_Z9decodeRMCPcP9RMCSTRUCT+0x448>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	609a      	str	r2, [r3, #8]

	return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3740      	adds	r7, #64	; 0x40
 8001c70:	46bd      	mov	sp, r7
 8001c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c76:	bf00      	nop
 8001c78:	20000090 	.word	0x20000090
 8001c7c:	68db8bad 	.word	0x68db8bad
 8001c80:	2000009c 	.word	0x2000009c
 8001c84:	51eb851f 	.word	0x51eb851f
 8001c88:	200000a0 	.word	0x200000a0
 8001c8c:	200000a4 	.word	0x200000a4
 8001c90:	200000a8 	.word	0x200000a8

08001c94 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7fe fc24 	bl	80004ec <__aeabi_i2d>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f7fe fc1f 	bl	80004ec <__aeabi_i2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	ec43 2b11 	vmov	d1, r2, r3
 8001cb6:	ec45 4b10 	vmov	d0, r4, r5
 8001cba:	f004 fc8f 	bl	80065dc <pow>
 8001cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc2:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}

08001cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cda:	f000 fc92 	bl	8002602 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cde:	f000 f81b 	bl	8001d18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce2:	f000 f947 	bl	8001f74 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001ce6:	f000 f91b 	bl	8001f20 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001cea:	f000 f86b 	bl	8001dc4 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8001cee:	f000 f8b7 	bl	8001e60 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */


  /* USER CODE END 2 */
  //HAL_StatusTypeDef ret = HAL_UART_Receive_DMA(&huart2, RX_raw, 1000);
  HAL_StatusTypeDef ret = HAL_UART_Receive_DMA(My_GPS.get_uart_handler(), My_GPS.rx_raw, RAW_DATA_LENGTH);
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <main+0x3c>)
 8001cf4:	f7ff f90d 	bl	8000f12 <_ZN7NEO_GPS16get_uart_handlerEv>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cfe:	4905      	ldr	r1, [pc, #20]	; (8001d14 <main+0x40>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 faa1 	bl	8005248 <HAL_UART_Receive_DMA>
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN 3 */
	  //MX_DMA_Init();
	  //MX_USART2_UART_Init();
	  //toggle this on for driver testing
	  //airspeed_test();
	  gps_test();
 8001d0a:	f000 f96f 	bl	8001fec <_Z8gps_testv>
 8001d0e:	e7fc      	b.n	8001d0a <main+0x36>
 8001d10:	200001f0 	.word	0x200001f0
 8001d14:	20000300 	.word	0x20000300

08001d18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b098      	sub	sp, #96	; 0x60
 8001d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1e:	f107 0318 	add.w	r3, r7, #24
 8001d22:	2248      	movs	r2, #72	; 0x48
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fbaa 	bl	8007480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001d3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d3e:	f001 fc49 	bl	80035d4 <HAL_PWREx_ControlVoltageScaling>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001d52:	f000 f993 	bl	800207c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d56:	2310      	movs	r3, #16
 8001d58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d62:	2360      	movs	r3, #96	; 0x60
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6a:	f107 0318 	add.w	r3, r7, #24
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fcb0 	bl	80036d4 <HAL_RCC_OscConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001d84:	f000 f97a 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d88:	230f      	movs	r3, #15
 8001d8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 f979 	bl	8004098 <HAL_RCC_ClockConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001db6:	f000 f961 	bl	800207c <Error_Handler>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3760      	adds	r7, #96	; 0x60
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001dca:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <_ZL12MX_I2C1_Initv+0x98>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001dd0:	f640 6214 	movw	r2, #3604	; 0xe14
 8001dd4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 80;
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001dd8:	2250      	movs	r2, #80	; 0x50
 8001dda:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e00:	4815      	ldr	r0, [pc, #84]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001e02:	f001 fab3 	bl	800336c <HAL_I2C_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf14      	ite	ne
 8001e0c:	2301      	movne	r3, #1
 8001e0e:	2300      	moveq	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001e16:	f000 f931 	bl	800207c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	480e      	ldr	r0, [pc, #56]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001e1e:	f001 fb34 	bl	800348a <HAL_I2CEx_ConfigAnalogFilter>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 8001e32:	f000 f923 	bl	800207c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e36:	2100      	movs	r1, #0
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <_ZL12MX_I2C1_Initv+0x94>)
 8001e3a:	f001 fb71 	bl	8003520 <HAL_I2CEx_ConfigDigitalFilter>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 8001e4e:	f000 f915 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200000ac 	.word	0x200000ac
 8001e5c:	40005400 	.word	0x40005400

08001e60 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e64:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea8:	481b      	ldr	r0, [pc, #108]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001eaa:	f003 f8e7 	bl	800507c <HAL_UART_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001ebe:	f000 f8dd 	bl	800207c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4814      	ldr	r0, [pc, #80]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ec6:	f004 fabf 	bl	8006448 <HAL_UARTEx_SetTxFifoThreshold>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001eda:	f000 f8cf 	bl	800207c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001ee2:	f004 faef 	bl	80064c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001ef6:	f000 f8c1 	bl	800207c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001efc:	f004 fa6b 	bl	80063d6 <HAL_UARTEx_DisableFifoMode>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001f10:	f000 f8b4 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200000f8 	.word	0x200000f8
 8001f1c:	40004400 	.word	0x40004400

08001f20 <_ZL11MX_DMA_Initv>:
}
/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <_ZL11MX_DMA_Initv+0x50>)
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <_ZL11MX_DMA_Initv+0x50>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6493      	str	r3, [r2, #72]	; 0x48
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <_ZL11MX_DMA_Initv+0x50>)
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <_ZL11MX_DMA_Initv+0x50>)
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <_ZL11MX_DMA_Initv+0x50>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6493      	str	r3, [r2, #72]	; 0x48
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <_ZL11MX_DMA_Initv+0x50>)
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	201d      	movs	r0, #29
 8001f5c:	f000 fca3 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f60:	201d      	movs	r0, #29
 8001f62:	f000 fcba 	bl	80028da <HAL_NVIC_EnableIRQ>

}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000

08001f74 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <_ZL12MX_GPIO_Initv+0x74>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]

}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <_Z8gps_testv>:
	float as = My_AS_Sensor.get_airspeed( );

}

void gps_test()
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b08f      	sub	sp, #60	; 0x3c
 8001ff0:	af00      	add	r7, sp, #0
	LOCATION loc;
 	loc = My_GPS.get_location();
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	4910      	ldr	r1, [pc, #64]	; (8002038 <_Z8gps_testv+0x4c>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f872 	bl	80010e0 <_ZN7NEO_GPS12get_locationEv>
 8001ffc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002000:	463b      	mov	r3, r7
 8002002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 	TIME time = My_GPS.get_time();
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	490a      	ldr	r1, [pc, #40]	; (8002038 <_Z8gps_testv+0x4c>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f877 	bl	8001102 <_ZN7NEO_GPS8get_timeEv>
	int numofsat = My_GPS.get_number_of_sat();
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <_Z8gps_testv+0x4c>)
 8002016:	f7ff f886 	bl	8001126 <_ZN7NEO_GPS17get_number_of_satEv>
 800201a:	6378      	str	r0, [r7, #52]	; 0x34
	/*debugging feature*/
//	char *output = (char*)&loc.NS;
	unsigned char a = (uint8_t)time.sec;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart2,  &a, sizeof(a), 100);
 8002022:	f107 0117 	add.w	r1, r7, #23
 8002026:	2364      	movs	r3, #100	; 0x64
 8002028:	2201      	movs	r2, #1
 800202a:	4804      	ldr	r0, [pc, #16]	; (800203c <_Z8gps_testv+0x50>)
 800202c:	f003 f876 	bl	800511c <HAL_UART_Transmit>
}
 8002030:	bf00      	nop
 8002032:	373c      	adds	r7, #60	; 0x3c
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	200001f0 	.word	0x200001f0
 800203c:	200000f8 	.word	0x200000f8

08002040 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	bool retur = My_GPS.refreshGPS();
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <HAL_UART_RxCpltCallback+0x34>)
 800204a:	f7fe ffeb 	bl	8001024 <_ZN7NEO_GPS10refreshGPSEv>
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_UART_Receive_DMA(My_GPS.get_uart_handler(), My_GPS.rx_raw, RAW_DATA_LENGTH);
 8002052:	4808      	ldr	r0, [pc, #32]	; (8002074 <HAL_UART_RxCpltCallback+0x34>)
 8002054:	f7fe ff5d 	bl	8000f12 <_ZN7NEO_GPS16get_uart_handlerEv>
 8002058:	4603      	mov	r3, r0
 800205a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800205e:	4906      	ldr	r1, [pc, #24]	; (8002078 <HAL_UART_RxCpltCallback+0x38>)
 8002060:	4618      	mov	r0, r3
 8002062:	f003 f8f1 	bl	8005248 <HAL_UART_Receive_DMA>
 8002066:	4603      	mov	r3, r0
 8002068:	73bb      	strb	r3, [r7, #14]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200001f0 	.word	0x200001f0
 8002078:	20000300 	.word	0x20000300

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002084:	e7fe      	b.n	8002084 <Error_Handler+0x8>
	...

08002088 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <_Z41__static_initialization_and_destruction_0ii+0x22>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	4293      	cmp	r3, r2
 80020a0:	d103      	bne.n	80020aa <_Z41__static_initialization_and_destruction_0ii+0x22>
NEO_GPS My_GPS(&huart2);
 80020a2:	4909      	ldr	r1, [pc, #36]	; (80020c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80020a6:	f7fe ff1b 	bl	8000ee0 <_ZN7NEO_GPSC1EP20__UART_HandleTypeDef>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80020bc:	f7fe ff36 	bl	8000f2c <_ZN7NEO_GPSD1Ev>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200000f8 	.word	0x200000f8
 80020cc:	200001f0 	.word	0x200001f0

080020d0 <_GLOBAL__sub_I_hi2c1>:
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff ffd5 	bl	8002088 <_Z41__static_initialization_and_destruction_0ii>
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_GLOBAL__sub_D_hi2c1>:
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff ffcd 	bl	8002088 <_Z41__static_initialization_and_destruction_0ii>
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_MspInit+0x44>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_MspInit+0x44>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6613      	str	r3, [r2, #96]	; 0x60
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_MspInit+0x44>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_MspInit+0x44>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_MspInit+0x44>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_MspInit+0x44>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0ae      	sub	sp, #184	; 0xb8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2294      	movs	r2, #148	; 0x94
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f005 f991 	bl	8007480 <memset>
  if(hi2c->Instance==I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_I2C_MspInit+0xb0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d13b      	bne.n	80021e0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002168:	2340      	movs	r3, #64	; 0x40
 800216a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fa6b 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002180:	f7ff ff7c 	bl	800207c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_I2C_MspInit+0xb4>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_I2C_MspInit+0xb4>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_I2C_MspInit+0xb4>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021b6:	2304      	movs	r3, #4
 80021b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021c0:	4619      	mov	r1, r3
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <HAL_I2C_MspInit+0xb8>)
 80021c4:	f000 ff52 	bl	800306c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_I2C_MspInit+0xb4>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_I2C_MspInit+0xb4>)
 80021ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_I2C_MspInit+0xb4>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	37b8      	adds	r7, #184	; 0xb8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40005400 	.word	0x40005400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	42020400 	.word	0x42020400

080021f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0b0      	sub	sp, #192	; 0xc0
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	2294      	movs	r2, #148	; 0x94
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f005 f933 	bl	8007480 <memset>
  if(huart->Instance==USART2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5f      	ldr	r2, [pc, #380]	; (800239c <HAL_UART_MspInit+0x1a8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d175      	bne.n	8002310 <HAL_UART_MspInit+0x11c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002228:	2300      	movs	r3, #0
 800222a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800222c:	f107 0318 	add.w	r3, r7, #24
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fa0d 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800223c:	f7ff ff1e 	bl	800207c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002240:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a56      	ldr	r2, [pc, #344]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002264:	4b4e      	ldr	r3, [pc, #312]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002270:	230c      	movs	r3, #12
 8002272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002288:	2307      	movs	r3, #7
 800228a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002292:	4619      	mov	r1, r3
 8002294:	4843      	ldr	r0, [pc, #268]	; (80023a4 <HAL_UART_MspInit+0x1b0>)
 8002296:	f000 fee9 	bl	800306c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 800229c:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_UART_MspInit+0x1b8>)
 800229e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022a2:	221b      	movs	r2, #27
 80022a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ac:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022be:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022c6:	2220      	movs	r2, #32
 80022c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022d0:	4835      	ldr	r0, [pc, #212]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022d2:	f000 fb1d 	bl	8002910 <HAL_DMA_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80022dc:	f7ff fece 	bl	800207c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80022e0:	2110      	movs	r1, #16
 80022e2:	4831      	ldr	r0, [pc, #196]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022e4:	f000 fdf2 	bl	8002ecc <HAL_DMA_ConfigChannelAttributes>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80022ee:	f7ff fec5 	bl	800207c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80022f8:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <HAL_UART_MspInit+0x1b4>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	203e      	movs	r0, #62	; 0x3e
 8002304:	f000 facf 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002308:	203e      	movs	r0, #62	; 0x3e
 800230a:	f000 fae6 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800230e:	e040      	b.n	8002392 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_UART_MspInit+0x1bc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d13b      	bne.n	8002392 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800231a:	2304      	movs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800231e:	2300      	movs	r3, #0
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002322:	f107 0318 	add.w	r3, r7, #24
 8002326:	4618      	mov	r0, r3
 8002328:	f002 f992 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8002332:	f7ff fea3 	bl	800207c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_UART_MspInit+0x1ac>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800236a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002380:	2307      	movs	r3, #7
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800238a:	4619      	mov	r1, r3
 800238c:	4809      	ldr	r0, [pc, #36]	; (80023b4 <HAL_UART_MspInit+0x1c0>)
 800238e:	f000 fe6d 	bl	800306c <HAL_GPIO_Init>
}
 8002392:	bf00      	nop
 8002394:	37c0      	adds	r7, #192	; 0xc0
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40004400 	.word	0x40004400
 80023a0:	40021000 	.word	0x40021000
 80023a4:	42020000 	.word	0x42020000
 80023a8:	20000188 	.word	0x20000188
 80023ac:	40020008 	.word	0x40020008
 80023b0:	40004800 	.word	0x40004800
 80023b4:	42020400 	.word	0x42020400

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <NMI_Handler+0x4>

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002404:	f000 f954 	bl	80026b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <DMA1_Channel1_IRQHandler+0x10>)
 8002412:	f000 fc5b 	bl	8002ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000188 	.word	0x20000188

08002420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <USART2_IRQHandler+0x10>)
 8002426:	f002 ff55 	bl	80052d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200000f8 	.word	0x200000f8

08002434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800245e:	4b4f      	ldr	r3, [pc, #316]	; (800259c <SystemCoreClockUpdate+0x144>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <SystemCoreClockUpdate+0x144>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e005      	b.n	8002486 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800247a:	4b48      	ldr	r3, [pc, #288]	; (800259c <SystemCoreClockUpdate+0x144>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <SystemCoreClockUpdate+0x148>)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002490:	4b42      	ldr	r3, [pc, #264]	; (800259c <SystemCoreClockUpdate+0x144>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d866      	bhi.n	800256a <SystemCoreClockUpdate+0x112>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <SystemCoreClockUpdate+0x4c>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024d9 	.word	0x080024d9
 80024a8:	0800256b 	.word	0x0800256b
 80024ac:	0800256b 	.word	0x0800256b
 80024b0:	0800256b 	.word	0x0800256b
 80024b4:	080024e1 	.word	0x080024e1
 80024b8:	0800256b 	.word	0x0800256b
 80024bc:	0800256b 	.word	0x0800256b
 80024c0:	0800256b 	.word	0x0800256b
 80024c4:	080024e9 	.word	0x080024e9
 80024c8:	0800256b 	.word	0x0800256b
 80024cc:	0800256b 	.word	0x0800256b
 80024d0:	0800256b 	.word	0x0800256b
 80024d4:	080024f1 	.word	0x080024f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80024d8:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	6013      	str	r3, [r2, #0]
      break;
 80024de:	e048      	b.n	8002572 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80024e0:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 80024e2:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <SystemCoreClockUpdate+0x150>)
 80024e4:	601a      	str	r2, [r3, #0]
      break;
 80024e6:	e044      	b.n	8002572 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 80024ea:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <SystemCoreClockUpdate+0x150>)
 80024ec:	601a      	str	r2, [r3, #0]
      break;
 80024ee:	e040      	b.n	8002572 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024f0:	4b2a      	ldr	r3, [pc, #168]	; (800259c <SystemCoreClockUpdate+0x144>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <SystemCoreClockUpdate+0x144>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	3301      	adds	r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <SystemCoreClockUpdate+0xbe>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d006      	beq.n	8002522 <SystemCoreClockUpdate+0xca>
 8002514:	e00b      	b.n	800252e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <SystemCoreClockUpdate+0x150>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	613b      	str	r3, [r7, #16]
          break;
 8002520:	e00b      	b.n	800253a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <SystemCoreClockUpdate+0x150>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	613b      	str	r3, [r7, #16]
          break;
 800252c:	e005      	b.n	800253a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	613b      	str	r3, [r7, #16]
          break;
 8002538:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <SystemCoreClockUpdate+0x144>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <SystemCoreClockUpdate+0x144>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0e5b      	lsrs	r3, r3, #25
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 8002566:	6013      	str	r3, [r2, #0]
      break;
 8002568:	e003      	b.n	8002572 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	6013      	str	r3, [r2, #0]
      break;
 8002570:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <SystemCoreClockUpdate+0x144>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <SystemCoreClockUpdate+0x154>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <SystemCoreClockUpdate+0x14c>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	080075e0 	.word	0x080075e0
 80025a4:	20000004 	.word	0x20000004
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	080075c8 	.word	0x080075c8

080025b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80025b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b4:	f7ff ff3e 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025ba:	e003      	b.n	80025c4 <LoopCopyDataInit>

080025bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025c2:	3104      	adds	r1, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025c4:	480a      	ldr	r0, [pc, #40]	; (80025f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025cc:	d3f6      	bcc.n	80025bc <CopyDataInit>
	ldr	r2, =_sbss
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025d0:	e002      	b.n	80025d8 <LoopFillZerobss>

080025d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025d4:	f842 3b04 	str.w	r3, [r2], #4

080025d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <LoopForever+0x16>)
	cmp	r2, r3
 80025da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025dc:	d3f9      	bcc.n	80025d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025de:	f004 ff2b 	bl	8007438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025e2:	f7ff fb77 	bl	8001cd4 <main>

080025e6 <LoopForever>:

LoopForever:
    b LoopForever
 80025e6:	e7fe      	b.n	80025e6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80025e8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80025ec:	08007794 	.word	0x08007794
	ldr	r0, =_sdata
 80025f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025f4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80025f8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80025fc:	200006ec 	.word	0x200006ec

08002600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC1_2_IRQHandler>

08002602 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800260c:	2004      	movs	r0, #4
 800260e:	f000 f93f 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002612:	f7ff ff21 	bl	8002458 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002616:	2007      	movs	r0, #7
 8002618:	f000 f80e 	bl	8002638 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	e001      	b.n	800262c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002628:	f7ff fd62 	bl	80020f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800262c:	79fb      	ldrb	r3, [r7, #7]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_InitTick+0x6c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d023      	beq.n	8002694 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_InitTick+0x70>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_InitTick+0x6c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f947 	bl	80028f6 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b07      	cmp	r3, #7
 8002672:	d809      	bhi.n	8002688 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f000 f913 	bl	80028a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_InitTick+0x74>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e007      	b.n	8002698 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e004      	b.n	8002698 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e001      	b.n	8002698 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000000c 	.word	0x2000000c
 80026a8:	20000004 	.word	0x20000004
 80026ac:	20000008 	.word	0x20000008

080026b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_IncTick+0x20>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x24>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_IncTick+0x24>)
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	200006e8 	.word	0x200006e8

080026d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return uwTick;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_GetTick+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	200006e8 	.word	0x200006e8

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0152      	lsls	r2, r2, #5
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0152      	lsls	r2, r2, #5
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b03      	cmp	r3, #3
 8002800:	bf28      	it	cs
 8002802:	2303      	movcs	r3, #3
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3303      	adds	r3, #3
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b04      	subs	r3, #4
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	2107      	movs	r1, #7
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff40 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff33 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa4 	bl	800284c <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e08d      	b.n	8002a3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_DMA_Init+0x138>)
 800292a:	429a      	cmp	r2, r3
 800292c:	d80f      	bhi.n	800294e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_DMA_Init+0x13c>)
 8002936:	4413      	add	r3, r2
 8002938:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <HAL_DMA_Init+0x140>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	009a      	lsls	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <HAL_DMA_Init+0x144>)
 800294a:	649a      	str	r2, [r3, #72]	; 0x48
 800294c:	e00e      	b.n	800296c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_DMA_Init+0x148>)
 8002956:	4413      	add	r3, r2
 8002958:	4a3d      	ldr	r2, [pc, #244]	; (8002a50 <HAL_DMA_Init+0x140>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	009a      	lsls	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a3c      	ldr	r2, [pc, #240]	; (8002a5c <HAL_DMA_Init+0x14c>)
 800296a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002982:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 faf2 	bl	8002fa8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029cc:	d102      	bne.n	80029d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80029e8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_DMA_Init+0x104>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d80c      	bhi.n	8002a14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fb12 	bl	8003024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e008      	b.n	8002a26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40020407 	.word	0x40020407
 8002a4c:	bffdfff8 	.word	0xbffdfff8
 8002a50:	cccccccd 	.word	0xcccccccd
 8002a54:	40020000 	.word	0x40020000
 8002a58:	bffdfbf8 	.word	0xbffdfbf8
 8002a5c:	40020400 	.word	0x40020400

08002a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_DMA_Start_IT+0x20>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e066      	b.n	8002b4e <HAL_DMA_Start_IT+0xee>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d155      	bne.n	8002b40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fa37 	bl	8002f2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 020e 	orr.w	r2, r2, #14
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00f      	b.n	8002af8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 020a 	orr.w	r2, r2, #10
 8002af6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e005      	b.n	8002b4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d008      	beq.n	8002b80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e040      	b.n	8002c02 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 020e 	bic.w	r2, r2, #14
 8002b8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f003 021c 	and.w	r2, r3, #28
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002bcc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002bee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d005      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e047      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 020e 	bic.w	r2, r2, #14
 8002c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	f003 021c 	and.w	r2, r3, #28
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f202 	lsl.w	r2, r1, r2
 8002c74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c7e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002ca0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
    }
  }
  return status;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	f003 031c 	and.w	r3, r3, #28
 8002cec:	2204      	movs	r2, #4
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d053      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xd4>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04e      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d024      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	f003 021c 	and.w	r2, r3, #28
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80c0 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d44:	e0ba      	b.n	8002ebc <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80b6 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d58:	e0b0      	b.n	8002ebc <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d107      	bne.n	8002d78 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	f003 021c 	and.w	r2, r3, #28
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	2104      	movs	r1, #4
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8093 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d9e:	e08d      	b.n	8002ebc <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	f003 031c 	and.w	r3, r3, #28
 8002da8:	2202      	movs	r2, #2
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d04e      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x186>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d049      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d06e      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002dea:	e069      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d065      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002dfc:	e060      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 020a 	bic.w	r2, r2, #10
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e28:	f003 021c 	and.w	r2, r3, #28
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	2102      	movs	r1, #2
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03b      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002e50:	e036      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f003 031c 	and.w	r3, r3, #28
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02e      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x1f8>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d029      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020e 	bic.w	r2, r2, #14
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	f003 021c 	and.w	r2, r3, #28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eba:	e002      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ec0:	bf00      	nop
  return;
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
}
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	72fb      	strb	r3, [r7, #11]
    return status;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
 8002ee6:	e01b      	b.n	8002f20 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e003      	b.n	8002f16 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f14:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

  return status;
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f42:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002f54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	f003 021c 	and.w	r2, r3, #28
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d108      	bne.n	8002f8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8002f8a:	e007      	b.n	8002f9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d80a      	bhi.n	8002fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fc8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6513      	str	r3, [r2, #80]	; 0x50
 8002fd0:	e007      	b.n	8002fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fdc:	4413      	add	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3b08      	subs	r3, #8
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40020407 	.word	0x40020407
 8003018:	40020820 	.word	0x40020820
 800301c:	cccccccd 	.word	0xcccccccd
 8003020:	40020880 	.word	0x40020880

08003024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003046:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	1000823f 	.word	0x1000823f
 8003068:	40020940 	.word	0x40020940

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800307a:	e158      	b.n	800332e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	4013      	ands	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 814a 	beq.w	8003328 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d00b      	beq.n	80030b4 <HAL_GPIO_Init+0x48>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d007      	beq.n	80030b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a8:	2b11      	cmp	r3, #17
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d130      	bne.n	8003116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ea:	2201      	movs	r2, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 0201 	and.w	r2, r3, #1
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0xea>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b12      	cmp	r3, #18
 8003154:	d123      	bne.n	800319e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	6939      	ldr	r1, [r7, #16]
 800319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a4 	beq.w	8003328 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80031e0:	4a5a      	ldr	r2, [pc, #360]	; (800334c <HAL_GPIO_Init+0x2e0>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3318      	adds	r3, #24
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_GPIO_Init+0x2e4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d025      	beq.n	8003258 <HAL_GPIO_Init+0x1ec>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_GPIO_Init+0x2e8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01f      	beq.n	8003254 <HAL_GPIO_Init+0x1e8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a50      	ldr	r2, [pc, #320]	; (8003358 <HAL_GPIO_Init+0x2ec>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d019      	beq.n	8003250 <HAL_GPIO_Init+0x1e4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a4f      	ldr	r2, [pc, #316]	; (800335c <HAL_GPIO_Init+0x2f0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <HAL_GPIO_Init+0x1e0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a4e      	ldr	r2, [pc, #312]	; (8003360 <HAL_GPIO_Init+0x2f4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00d      	beq.n	8003248 <HAL_GPIO_Init+0x1dc>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <HAL_GPIO_Init+0x2f8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <HAL_GPIO_Init+0x1d8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <HAL_GPIO_Init+0x2fc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_GPIO_Init+0x1d4>
 800323c:	2306      	movs	r3, #6
 800323e:	e00c      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003240:	2307      	movs	r3, #7
 8003242:	e00a      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003244:	2305      	movs	r3, #5
 8003246:	e008      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003248:	2304      	movs	r3, #4
 800324a:	e006      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 800324c:	2303      	movs	r3, #3
 800324e:	e004      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003250:	2302      	movs	r3, #2
 8003252:	e002      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003258:	2300      	movs	r3, #0
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	f002 0203 	and.w	r2, r2, #3
 8003260:	00d2      	lsls	r2, r2, #3
 8003262:	4093      	lsls	r3, r2
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800326a:	4938      	ldr	r1, [pc, #224]	; (800334c <HAL_GPIO_Init+0x2e0>)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3318      	adds	r3, #24
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003278:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_GPIO_Init+0x2e0>)
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800329e:	4a2b      	ldr	r2, [pc, #172]	; (800334c <HAL_GPIO_Init+0x2e0>)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80032a6:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_GPIO_Init+0x2e0>)
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032cc:	4a1f      	ldr	r2, [pc, #124]	; (800334c <HAL_GPIO_Init+0x2e0>)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_GPIO_Init+0x2e0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_GPIO_Init+0x2e0>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_GPIO_Init+0x2e0>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_GPIO_Init+0x2e0>)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3301      	adds	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f ae9f 	bne.w	800307c <HAL_GPIO_Init+0x10>
  }
}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	4002f400 	.word	0x4002f400
 8003350:	42020000 	.word	0x42020000
 8003354:	42020400 	.word	0x42020400
 8003358:	42020800 	.word	0x42020800
 800335c:	42020c00 	.word	0x42020c00
 8003360:	42021000 	.word	0x42021000
 8003364:	42021400 	.word	0x42021400
 8003368:	42021800 	.word	0x42021800

0800336c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e081      	b.n	8003482 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fe fed0 	bl	8002138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e006      	b.n	80033f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d104      	bne.n	8003406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	ea42 0103 	orr.w	r1, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	d138      	bne.n	8003512 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e032      	b.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2224      	movs	r2, #36	; 0x24
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	d139      	bne.n	80035aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003540:	2302      	movs	r3, #2
 8003542:	e033      	b.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003572:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40007000 	.word	0x40007000

080035d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035e4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80035e6:	f000 f851 	bl	800368c <HAL_PWREx_SMPS_GetEffectiveMode>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d101      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e03e      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d101      	bne.n	8003608 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e035      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d101      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e02f      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800361c:	4917      	ldr	r1, [pc, #92]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	09db      	lsrs	r3, r3, #7
 8003632:	2232      	movs	r2, #50	; 0x32
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	08db      	lsrs	r3, r3, #3
 8003640:	3301      	adds	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003644:	e002      	b.n	800364c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3b01      	subs	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003658:	d102      	bne.n	8003660 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f2      	bne.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d101      	bne.n	8003672 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e000      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40007000 	.word	0x40007000
 8003680:	20000004 	.word	0x20000004
 8003684:	0a7c5ac5 	.word	0x0a7c5ac5
 8003688:	cccccccd 	.word	0xcccccccd

0800368c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80036a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	e00a      	b.n	80036c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80036b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	e001      	b.n	80036c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80036bc:	2300      	movs	r3, #0
 80036be:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80036c0:	687b      	ldr	r3, [r7, #4]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40007000 	.word	0x40007000

080036d4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f000 bcd0 	b.w	8004088 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e8:	4b99      	ldr	r3, [pc, #612]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f2:	4b97      	ldr	r3, [pc, #604]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80e9 	beq.w	80038dc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_RCC_OscConfig+0x4a>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	f040 8083 	bne.w	800381e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d17f      	bne.n	800381e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371e:	4b8c      	ldr	r3, [pc, #560]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <HAL_RCC_OscConfig+0x64>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f000 bca8 	b.w	8004088 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373c:	4b84      	ldr	r3, [pc, #528]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCC_OscConfig+0x7e>
 8003748:	4b81      	ldr	r3, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003750:	e005      	b.n	800375e <HAL_RCC_OscConfig+0x8a>
 8003752:	4b7f      	ldr	r3, [pc, #508]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375e:	4293      	cmp	r3, r2
 8003760:	d224      	bcs.n	80037ac <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fe96 	bl	8004498 <RCC_SetFlashLatencyFromMSIRange>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f000 bc88 	b.w	8004088 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003778:	4b75      	ldr	r3, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a74      	ldr	r2, [pc, #464]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800377e:	f043 0308 	orr.w	r3, r3, #8
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	496f      	ldr	r1, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003796:	4b6e      	ldr	r3, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	496a      	ldr	r1, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
 80037aa:	e026      	b.n	80037fa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ac:	4b68      	ldr	r3, [pc, #416]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037b2:	f043 0308 	orr.w	r3, r3, #8
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	4962      	ldr	r1, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	495d      	ldr	r1, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fe55 	bl	8004498 <RCC_SetFlashLatencyFromMSIRange>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f000 bc47 	b.w	8004088 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037fa:	f000 fe11 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 8003802:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003804:	4b54      	ldr	r3, [pc, #336]	; (8003958 <HAL_RCC_OscConfig+0x284>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe ff15 	bl	8002638 <HAL_InitTick>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d060      	beq.n	80038da <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	f000 bc35 	b.w	8004088 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d039      	beq.n	800389a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003826:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a49      	ldr	r2, [pc, #292]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003832:	f7fe ff51 	bl	80026d8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003838:	e00f      	b.n	800385a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800383a:	f7fe ff4d 	bl	80026d8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d908      	bls.n	800385a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	f000 bc17 	b.w	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0e9      	beq.n	800383a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003866:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a39      	ldr	r2, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	4934      	ldr	r1, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	492f      	ldr	r1, [pc, #188]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	e020      	b.n	80038dc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a6:	f7fe ff17 	bl	80026d8 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ac:	e00e      	b.n	80038cc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ae:	f7fe ff13 	bl	80026d8 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d907      	bls.n	80038cc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e3dd      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038cc:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ea      	bne.n	80038ae <HAL_RCC_OscConfig+0x1da>
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d07e      	beq.n	80039e6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x226>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d10e      	bne.n	8003912 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d10b      	bne.n	8003912 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d06e      	beq.n	80039e4 <HAL_RCC_OscConfig+0x310>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d16a      	bne.n	80039e4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e3ba      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x256>
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e024      	b.n	8003974 <HAL_RCC_OscConfig+0x2a0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003932:	d113      	bne.n	800395c <HAL_RCC_OscConfig+0x288>
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 800393a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a02      	ldr	r2, [pc, #8]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e012      	b.n	8003974 <HAL_RCC_OscConfig+0x2a0>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	20000004 	.word	0x20000004
 8003958:	20000008 	.word	0x20000008
 800395c:	4b8b      	ldr	r3, [pc, #556]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a8a      	ldr	r2, [pc, #552]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d019      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe feac 	bl	80026d8 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	e00e      	b.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe fea8 	bl	80026d8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d907      	bls.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003992:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e372      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4b7a      	ldr	r3, [pc, #488]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ea      	beq.n	8003984 <HAL_RCC_OscConfig+0x2b0>
 80039ae:	e01a      	b.n	80039e6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fe92 	bl	80026d8 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e00e      	b.n	80039d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe fe8e 	bl	80026d8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d907      	bls.n	80039d6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039c6:	4b71      	ldr	r3, [pc, #452]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e358      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ea      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2e4>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d06c      	beq.n	8003acc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x330>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d119      	bne.n	8003a32 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d116      	bne.n	8003a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x348>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e335      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	4958      	ldr	r1, [pc, #352]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	e04c      	b.n	8003acc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d029      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3a:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fe fe47 	bl	80026d8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7fe fe43 	bl	80026d8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d907      	bls.n	8003a6c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e30d      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ea      	beq.n	8003a4e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	4941      	ldr	r1, [pc, #260]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
 8003a8c:	e01e      	b.n	8003acc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3e      	ldr	r2, [pc, #248]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fe fe1d 	bl	80026d8 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa0:	e00e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fe fe19 	bl	80026d8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d907      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e2e3      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac0:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ea      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d062      	beq.n	8003b9e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d038      	beq.n	8003b52 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aee:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003af8:	e007      	b.n	8003b0a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f043 0310 	orr.w	r3, r3, #16
 8003b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b10:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fddd 	bl	80026d8 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b20:	e00f      	b.n	8003b42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fe fdd9 	bl	80026d8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b07      	cmp	r3, #7
 8003b2e:	d908      	bls.n	8003b42 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e2a2      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0e8      	beq.n	8003b22 <HAL_RCC_OscConfig+0x44e>
 8003b50:	e025      	b.n	8003b9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b58:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fe fdb9 	bl	80026d8 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b68:	e012      	b.n	8003b90 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fdb5 	bl	80026d8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d90b      	bls.n	8003b90 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e27e      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b90:	4ba8      	ldr	r3, [pc, #672]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e5      	bne.n	8003b6a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 812d 	beq.w	8003e06 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bb0:	4ba0      	ldr	r3, [pc, #640]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a9c      	ldr	r2, [pc, #624]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b97      	ldr	r3, [pc, #604]	; (8003e38 <HAL_RCC_OscConfig+0x764>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d11e      	bne.n	8003c22 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b94      	ldr	r3, [pc, #592]	; (8003e38 <HAL_RCC_OscConfig+0x764>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a93      	ldr	r2, [pc, #588]	; (8003e38 <HAL_RCC_OscConfig+0x764>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fd72 	bl	80026d8 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf6:	e00e      	b.n	8003c16 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fe fd6e 	bl	80026d8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d907      	bls.n	8003c16 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <HAL_RCC_OscConfig+0x764>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e238      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x764>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ea      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01f      	beq.n	8003c6e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c3a:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	4a7c      	ldr	r2, [pc, #496]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c4a:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	4a78      	ldr	r2, [pc, #480]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c5c:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	4a74      	ldr	r2, [pc, #464]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6c:	e00f      	b.n	8003c8e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c6e:	4b71      	ldr	r3, [pc, #452]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	4a6f      	ldr	r2, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	4a6b      	ldr	r2, [pc, #428]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d068      	beq.n	8003d68 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c96:	f7fe fd1f 	bl	80026d8 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9c:	e011      	b.n	8003cc2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fe fd1b 	bl	80026d8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d908      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb0:	4b60      	ldr	r3, [pc, #384]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1e2      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	4b5c      	ldr	r3, [pc, #368]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0e6      	beq.n	8003c9e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d022      	beq.n	8003d22 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cdc:	4b55      	ldr	r3, [pc, #340]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a54      	ldr	r2, [pc, #336]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003cec:	e011      	b.n	8003d12 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe fcf3 	bl	80026d8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d908      	bls.n	8003d12 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1ba      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d12:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0e6      	beq.n	8003cee <HAL_RCC_OscConfig+0x61a>
 8003d20:	e068      	b.n	8003df4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d22:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	4a42      	ldr	r2, [pc, #264]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d32:	e011      	b.n	8003d58 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fe fcd0 	bl	80026d8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d908      	bls.n	8003d58 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e197      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d58:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <HAL_RCC_OscConfig+0x660>
 8003d66:	e045      	b.n	8003df4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fe fcb6 	bl	80026d8 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d6e:	e011      	b.n	8003d94 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fe fcb2 	bl	80026d8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d908      	bls.n	8003d94 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e179      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e6      	bne.n	8003d70 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d021      	beq.n	8003df4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dc0:	e011      	b.n	8003de6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fc89 	bl	80026d8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d908      	bls.n	8003de6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e150      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e6      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04f      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <HAL_RCC_OscConfig+0x760>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2a:	f7fe fc55 	bl	80026d8 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x788>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e3c:	f7fe fc4c 	bl	80026d8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d908      	bls.n	8003e5c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e4a:	4b91      	ldr	r3, [pc, #580]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e115      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e5c:	4b8c      	ldr	r3, [pc, #560]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0e8      	beq.n	8003e3c <HAL_RCC_OscConfig+0x768>
 8003e6a:	e022      	b.n	8003eb2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e6c:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e72:	4a87      	ldr	r2, [pc, #540]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fc2c 	bl	80026d8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e82:	e00f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e84:	f7fe fc28 	bl	80026d8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d908      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e92:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0f1      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea4:	4b7a      	ldr	r3, [pc, #488]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e8      	bne.n	8003e84 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80e5 	beq.w	8004086 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ebc:	4b74      	ldr	r3, [pc, #464]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	f000 809f 	beq.w	8004008 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d166      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe fbfb 	bl	80026d8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	e00e      	b.n	8003f04 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fe fbf7 	bl	80026d8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d907      	bls.n	8003f04 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0c1      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ea      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f10:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	4b5f      	ldr	r3, [pc, #380]	; (8004094 <HAL_RCC_OscConfig+0x9c0>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f20:	3a01      	subs	r2, #1
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	4311      	orrs	r1, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f2a:	0212      	lsls	r2, r2, #8
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f32:	0852      	lsrs	r2, r2, #1
 8003f34:	3a01      	subs	r2, #1
 8003f36:	0552      	lsls	r2, r2, #21
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f3e:	0852      	lsrs	r2, r2, #1
 8003f40:	3a01      	subs	r2, #1
 8003f42:	0652      	lsls	r2, r2, #25
 8003f44:	4311      	orrs	r1, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f4a:	06d2      	lsls	r2, r2, #27
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	4950      	ldr	r1, [pc, #320]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f54:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fbb4 	bl	80026d8 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f72:	e00e      	b.n	8003f92 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fe fbb0 	bl	80026d8 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d907      	bls.n	8003f92 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e07a      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ea      	beq.n	8003f74 <HAL_RCC_OscConfig+0x8a0>
 8003f9e:	e072      	b.n	8004086 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003faa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fb80 	bl	80026d8 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	e00e      	b.n	8003ffa <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe fb7c 	bl	80026d8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d907      	bls.n	8003ffa <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fea:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e046      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffa:	4b25      	ldr	r3, [pc, #148]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ea      	bne.n	8003fdc <HAL_RCC_OscConfig+0x908>
 8004006:	e03e      	b.n	8004086 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e039      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_RCC_OscConfig+0x9bc>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	429a      	cmp	r2, r3
 8004026:	d12c      	bne.n	8004082 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d123      	bne.n	8004082 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d11b      	bne.n	8004082 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d113      	bne.n	8004082 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d109      	bne.n	8004082 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	019f800c 	.word	0x019f800c

08004098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e10d      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b0:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d910      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b85      	ldr	r3, [pc, #532]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 020f 	bic.w	r2, r3, #15
 80040c6:	4983      	ldr	r1, [pc, #524]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0f5      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8094 	beq.w	8004216 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d134      	bne.n	8004160 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f6:	4b78      	ldr	r3, [pc, #480]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0e2      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004106:	f000 fa2b 	bl	8004560 <RCC_GetSysClockFreqFromPLLSource>
 800410a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4a73      	ldr	r2, [pc, #460]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d956      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004120:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004128:	4a6b      	ldr	r2, [pc, #428]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e045      	b.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d03f      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d13b      	bne.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004152:	4a61      	ldr	r2, [pc, #388]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e030      	b.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d107      	bne.n	8004178 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004168:	4b5b      	ldr	r3, [pc, #364]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d115      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0a9      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004180:	4b55      	ldr	r3, [pc, #340]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e09d      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004190:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e095      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041a0:	f000 f8a2 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4a4c      	ldr	r2, [pc, #304]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d909      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b6:	4a48      	ldr	r2, [pc, #288]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4942      	ldr	r1, [pc, #264]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fe fa80 	bl	80026d8 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e013      	b.n	8004204 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fa7c 	bl	80026d8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d90a      	bls.n	8004204 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e063      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004204:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 020c 	and.w	r2, r3, #12
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	429a      	cmp	r2, r3
 8004214:	d1e2      	bne.n	80041dc <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	492a      	ldr	r1, [pc, #168]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]
 8004234:	e008      	b.n	8004248 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d105      	bne.n	8004248 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004246:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d210      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 020f 	bic.w	r2, r3, #15
 800425e:	491d      	ldr	r1, [pc, #116]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_RCC_ClockConfig+0x23c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e029      	b.n	80042cc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4911      	ldr	r1, [pc, #68]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4909      	ldr	r1, [pc, #36]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042b6:	f000 f8b3 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <HAL_RCC_ClockConfig+0x248>)
 80042be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_RCC_ClockConfig+0x24c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe f9b7 	bl	8002638 <HAL_InitTick>
 80042ca:	4603      	mov	r3, r0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	04c4b400 	.word	0x04c4b400
 80042e0:	20000004 	.word	0x20000004
 80042e4:	20000008 	.word	0x20000008

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d121      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d11e      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800431c:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004328:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e005      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004344:	4a34      	ldr	r2, [pc, #208]	; (8004418 <HAL_RCC_GetSysClockFreq+0x130>)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d102      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCC_GetSysClockFreq+0x134>)
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e004      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d101      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436c:	4b2b      	ldr	r3, [pc, #172]	; (800441c <HAL_RCC_GetSysClockFreq+0x134>)
 800436e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d146      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004376:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3301      	adds	r3, #1
 800438c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d003      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0xb4>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d00d      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0xce>
 800439a:	e019      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_RCC_GetSysClockFreq+0x134>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 80043a6:	68d2      	ldr	r2, [r2, #12]
 80043a8:	0a12      	lsrs	r2, r2, #8
 80043aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	617b      	str	r3, [r7, #20]
        break;
 80043b4:	e019      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043b6:	4a19      	ldr	r2, [pc, #100]	; (800441c <HAL_RCC_GetSysClockFreq+0x134>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	0a12      	lsrs	r2, r2, #8
 80043c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
        break;
 80043ce:	e00c      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 80043da:	68d2      	ldr	r2, [r2, #12]
 80043dc:	0a12      	lsrs	r2, r2, #8
 80043de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	617b      	str	r3, [r7, #20]
        break;
 80043e8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_RCC_GetSysClockFreq+0x12c>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	0e5b      	lsrs	r3, r3, #25
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	3301      	adds	r3, #1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004404:	69bb      	ldr	r3, [r7, #24]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3724      	adds	r7, #36	; 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	080075e0 	.word	0x080075e0
 800441c:	00f42400 	.word	0x00f42400

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004424:	f7ff ff60 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetHCLKFreq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	4903      	ldr	r1, [pc, #12]	; (8004444 <HAL_RCC_GetHCLKFreq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000
 8004444:	080075c8 	.word	0x080075c8

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800444c:	f7ff ffe8 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	080075d8 	.word	0x080075d8

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004474:	f7ff ffd4 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0adb      	lsrs	r3, r3, #11
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	080075d8 	.word	0x080075d8

08004498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044b0:	f7ff f882 	bl	80035b8 <HAL_PWREx_GetVoltageRange>
 80044b4:	6138      	str	r0, [r7, #16]
 80044b6:	e014      	b.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6593      	str	r3, [r2, #88]	; 0x58
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044d0:	f7ff f872 	bl	80035b8 <HAL_PWREx_GetVoltageRange>
 80044d4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ee:	d10b      	bne.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d919      	bls.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2ba0      	cmp	r3, #160	; 0xa0
 80044fa:	d902      	bls.n	8004502 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044fc:	2302      	movs	r3, #2
 80044fe:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004500:	e013      	b.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004506:	e010      	b.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d902      	bls.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800450e:	2303      	movs	r3, #3
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e00a      	b.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d102      	bne.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451a:	2302      	movs	r3, #2
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e004      	b.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b70      	cmp	r3, #112	; 0x70
 8004524:	d101      	bne.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004526:	2301      	movs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 020f 	bic.w	r2, r3, #15
 8004532:	490a      	ldr	r1, [pc, #40]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	40022000 	.word	0x40022000

08004560 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d118      	bne.n	80045a8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e005      	b.n	800459e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004592:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045b2:	4b24      	ldr	r3, [pc, #144]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	3301      	adds	r3, #1
 80045be:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d00d      	beq.n	80045e8 <RCC_GetSysClockFreqFromPLLSource+0x88>
 80045cc:	e019      	b.n	8004602 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ce:	4a1f      	ldr	r2, [pc, #124]	; (800464c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	0a12      	lsrs	r2, r2, #8
 80045dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	613b      	str	r3, [r7, #16]
      break;
 80045e6:	e019      	b.n	800461c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045e8:	4a18      	ldr	r2, [pc, #96]	; (800464c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	4a14      	ldr	r2, [pc, #80]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80045f2:	68d2      	ldr	r2, [r2, #12]
 80045f4:	0a12      	lsrs	r2, r2, #8
 80045f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	613b      	str	r3, [r7, #16]
      break;
 8004600:	e00c      	b.n	800461c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	0a12      	lsrs	r2, r2, #8
 8004610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	613b      	str	r3, [r7, #16]
      break;
 800461a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	0e5b      	lsrs	r3, r3, #25
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	3301      	adds	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004636:	683b      	ldr	r3, [r7, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	40021000 	.word	0x40021000
 8004648:	080075e0 	.word	0x080075e0
 800464c:	00f42400 	.word	0x00f42400

08004650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800465c:	2300      	movs	r3, #0
 800465e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004668:	2b00      	cmp	r3, #0
 800466a:	d040      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d02a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d825      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d026      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d821      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d006      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d81d      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d010      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004690:	e018      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004692:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4a8e      	ldr	r2, [pc, #568]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800469e:	e015      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb56 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80046b0:	e00c      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3320      	adds	r3, #32
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fc33 	bl	8004f24 <RCCEx_PLLSAI2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80046c2:	e003      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	77fb      	strb	r3, [r7, #31]
        break;
 80046c8:	e000      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80046ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046cc:	7ffb      	ldrb	r3, [r7, #31]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046d2:	4b7f      	ldr	r3, [pc, #508]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e0:	497b      	ldr	r1, [pc, #492]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046e8:	e001      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	7ffb      	ldrb	r3, [r7, #31]
 80046ec:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d047      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004702:	d030      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d82a      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800470a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470e:	d02a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004714:	d824      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d81e      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d010      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800472c:	e018      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800472e:	4b68      	ldr	r3, [pc, #416]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4a67      	ldr	r2, [pc, #412]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800473a:	e015      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb08 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800474c:	e00c      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3320      	adds	r3, #32
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fbe5 	bl	8004f24 <RCCEx_PLLSAI2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	77fb      	strb	r3, [r7, #31]
        break;
 8004764:	e000      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004768:	7ffb      	ldrb	r3, [r7, #31]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800476e:	4b58      	ldr	r3, [pc, #352]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004770:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4954      	ldr	r1, [pc, #336]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004784:	e001      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004786:	7ffb      	ldrb	r3, [r7, #31]
 8004788:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80ab 	beq.w	80048ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479c:	4b4c      	ldr	r3, [pc, #304]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10d      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a8:	4b49      	ldr	r3, [pc, #292]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	4a48      	ldr	r2, [pc, #288]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b2:	6593      	str	r3, [r2, #88]	; 0x58
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c4:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a42      	ldr	r2, [pc, #264]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80047ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d0:	f7fd ff82 	bl	80026d8 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d6:	e00f      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d8:	f7fd ff7e 	bl	80026d8 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d908      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80047f6:	e006      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0e9      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004806:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004808:	7ffb      	ldrb	r3, [r7, #31]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d164      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480e:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004818:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01f      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	d019      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004848:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004858:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01f      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fd ff35 	bl	80026d8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	e012      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd ff31 	bl	80026d8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d909      	bls.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004896:	e007      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0e5      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80048a8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80048aa:	7ffb      	ldrb	r3, [r7, #31]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10c      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	4903      	ldr	r1, [pc, #12]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048c8:	e008      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ca:	7ffb      	ldrb	r3, [r7, #31]
 80048cc:	77bb      	strb	r3, [r7, #30]
 80048ce:	e005      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
 80048da:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d105      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e2:	4b9c      	ldr	r3, [pc, #624]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	4a9b      	ldr	r2, [pc, #620]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048fa:	4b96      	ldr	r3, [pc, #600]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f023 0203 	bic.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004908:	4992      	ldr	r1, [pc, #584]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800491c:	4b8d      	ldr	r3, [pc, #564]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f023 020c 	bic.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	498a      	ldr	r1, [pc, #552]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	4981      	ldr	r1, [pc, #516]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004960:	4b7c      	ldr	r3, [pc, #496]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	4979      	ldr	r1, [pc, #484]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004982:	4b74      	ldr	r3, [pc, #464]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	4970      	ldr	r1, [pc, #448]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	4968      	ldr	r1, [pc, #416]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049c6:	4b63      	ldr	r3, [pc, #396]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	495f      	ldr	r1, [pc, #380]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049e8:	4b5a      	ldr	r3, [pc, #360]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	4957      	ldr	r1, [pc, #348]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004a0a:	4b52      	ldr	r3, [pc, #328]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a18:	494e      	ldr	r1, [pc, #312]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d031      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a34:	d00e      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a3a:	d814      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a44:	d10f      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a46:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a42      	ldr	r2, [pc, #264]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a50:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004a52:	e00c      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f97c 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004a64:	e003      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	77fb      	strb	r3, [r7, #31]
        break;
 8004a6a:	e000      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a82:	4934      	ldr	r1, [pc, #208]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a8a:	e001      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	7ffb      	ldrb	r3, [r7, #31]
 8004a8e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a9c:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	492a      	ldr	r1, [pc, #168]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004abe:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004acc:	4921      	ldr	r1, [pc, #132]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	4919      	ldr	r1, [pc, #100]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b08:	f023 0203 	bic.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	4910      	ldr	r1, [pc, #64]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	4908      	ldr	r1, [pc, #32]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4e:	60d3      	str	r3, [r2, #12]
 8004b50:	e014      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f8f5 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004b72:	7ffb      	ldrb	r3, [r7, #31]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
 8004b7a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d04a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b90:	d108      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004b92:	4b70      	ldr	r3, [pc, #448]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b98:	4a6e      	ldr	r2, [pc, #440]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ba2:	e012      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004ba4:	4b6b      	ldr	r3, [pc, #428]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb2:	4968      	ldr	r1, [pc, #416]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bba:	4b66      	ldr	r3, [pc, #408]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc0:	4a64      	ldr	r2, [pc, #400]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f8bc 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d019      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
 8004bec:	77bb      	strb	r3, [r7, #30]
 8004bee:	e016      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4a55      	ldr	r2, [pc, #340]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c04:	60d3      	str	r3, [r2, #12]
 8004c06:	e00a      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c10:	d105      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c12:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4a4f      	ldr	r2, [pc, #316]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d028      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c2a:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c38:	4946      	ldr	r1, [pc, #280]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c48:	d106      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4a:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4a41      	ldr	r2, [pc, #260]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c54:	60d3      	str	r3, [r2, #12]
 8004c56:	e011      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2101      	movs	r1, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f875 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
 8004c7a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01e      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c98:	492e      	ldr	r1, [pc, #184]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f850 	bl	8004d58 <RCCEx_PLLSAI1_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004cbc:	7ffb      	ldrb	r3, [r7, #31]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cd8:	f023 0204 	bic.w	r2, r3, #4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce2:	491c      	ldr	r1, [pc, #112]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cfc:	f023 0218 	bic.w	r2, r3, #24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	4913      	ldr	r1, [pc, #76]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d017      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d1a:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	490a      	ldr	r1, [pc, #40]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d3c:	d105      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d48:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004d4a:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000

08004d58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d018      	beq.n	8004da0 <RCCEx_PLLSAI1_Config+0x48>
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d81f      	bhi.n	8004db2 <RCCEx_PLLSAI1_Config+0x5a>
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d002      	beq.n	8004d7c <RCCEx_PLLSAI1_Config+0x24>
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d009      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x36>
 8004d7a:	e01a      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d7c:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d117      	bne.n	8004db8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d8c:	e014      	b.n	8004db8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d110      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9e:	e00d      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004da0:	4b5c      	ldr	r3, [pc, #368]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db0:	e006      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      break;
 8004db6:	e004      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004dc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 809f 	bne.w	8004f08 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dca:	4b52      	ldr	r3, [pc, #328]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a51      	ldr	r2, [pc, #324]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fd fc7f 	bl	80026d8 <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ddc:	e00f      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dde:	f7fd fc7b 	bl	80026d8 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d908      	bls.n	8004dfe <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dec:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dfc:	e006      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dfe:	4b45      	ldr	r3, [pc, #276]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e9      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0x86>
 8004e0a:	e000      	b.n	8004e0e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004e0c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d179      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	4b3e      	ldr	r3, [pc, #248]	; (8004f18 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	0211      	lsls	r1, r2, #8
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68d2      	ldr	r2, [r2, #12]
 8004e2c:	06d2      	lsls	r2, r2, #27
 8004e2e:	4311      	orrs	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6852      	ldr	r2, [r2, #4]
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0112      	lsls	r2, r2, #4
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	4934      	ldr	r1, [pc, #208]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	610b      	str	r3, [r1, #16]
 8004e46:	e033      	b.n	8004eb0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d118      	bne.n	8004e80 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	4b32      	ldr	r3, [pc, #200]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	0211      	lsls	r1, r2, #8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6912      	ldr	r2, [r2, #16]
 8004e60:	0852      	lsrs	r2, r2, #1
 8004e62:	3a01      	subs	r2, #1
 8004e64:	0552      	lsls	r2, r2, #21
 8004e66:	4311      	orrs	r1, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6852      	ldr	r2, [r2, #4]
 8004e6c:	3a01      	subs	r2, #1
 8004e6e:	0112      	lsls	r2, r2, #4
 8004e70:	4311      	orrs	r1, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	4926      	ldr	r1, [pc, #152]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	610b      	str	r3, [r1, #16]
 8004e7e:	e017      	b.n	8004eb0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	0211      	lsls	r1, r2, #8
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6952      	ldr	r2, [r2, #20]
 8004e92:	0852      	lsrs	r2, r2, #1
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0652      	lsls	r2, r2, #25
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6852      	ldr	r2, [r2, #4]
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0112      	lsls	r2, r2, #4
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	491a      	ldr	r1, [pc, #104]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004eb0:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebc:	f7fd fc0c 	bl	80026d8 <HAL_GetTick>
 8004ec0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ec2:	e00f      	b.n	8004ee4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec4:	f7fd fc08 	bl	80026d8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d908      	bls.n	8004ee4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004ee2:	e006      	b.n	8004ef2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0e9      	beq.n	8004ec4 <RCCEx_PLLSAI1_Config+0x16c>
 8004ef0:	e000      	b.n	8004ef4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004ef2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	4904      	ldr	r1, [pc, #16]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	07ff800c 	.word	0x07ff800c
 8004f1c:	ff9f800c 	.word	0xff9f800c
 8004f20:	f9ff800c 	.word	0xf9ff800c

08004f24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d018      	beq.n	8004f6c <RCCEx_PLLSAI2_Config+0x48>
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d81f      	bhi.n	8004f7e <RCCEx_PLLSAI2_Config+0x5a>
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d002      	beq.n	8004f48 <RCCEx_PLLSAI2_Config+0x24>
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d009      	beq.n	8004f5a <RCCEx_PLLSAI2_Config+0x36>
 8004f46:	e01a      	b.n	8004f7e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f48:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d117      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f58:	e014      	b.n	8004f84 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f5a:	4b46      	ldr	r3, [pc, #280]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d110      	bne.n	8004f88 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6a:	e00d      	b.n	8004f88 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004f6c:	4b41      	ldr	r3, [pc, #260]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7c:	e006      	b.n	8004f8c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
      break;
 8004f82:	e004      	b.n	8004f8e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004f84:	bf00      	nop
 8004f86:	e002      	b.n	8004f8e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004f8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d169      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f94:	4b37      	ldr	r3, [pc, #220]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a36      	ldr	r2, [pc, #216]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fb9a 	bl	80026d8 <HAL_GetTick>
 8004fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa6:	e00f      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fa8:	f7fd fb96 	bl	80026d8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d908      	bls.n	8004fc8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc6:	e006      	b.n	8004fd6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e9      	bne.n	8004fa8 <RCCEx_PLLSAI2_Config+0x84>
 8004fd4:	e000      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004fd6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d144      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d115      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fe4:	4b23      	ldr	r3, [pc, #140]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	4b23      	ldr	r3, [pc, #140]	; (8005078 <RCCEx_PLLSAI2_Config+0x154>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6892      	ldr	r2, [r2, #8]
 8004ff0:	0211      	lsls	r1, r2, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68d2      	ldr	r2, [r2, #12]
 8004ff6:	06d2      	lsls	r2, r2, #27
 8004ff8:	4311      	orrs	r1, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6852      	ldr	r2, [r2, #4]
 8004ffe:	3a01      	subs	r2, #1
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	4311      	orrs	r1, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	491a      	ldr	r1, [pc, #104]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 800500c:	4313      	orrs	r3, r2
 800500e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005010:	4b18      	ldr	r3, [pc, #96]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a17      	ldr	r2, [pc, #92]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8005016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501c:	f7fd fb5c 	bl	80026d8 <HAL_GetTick>
 8005020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005022:	e00f      	b.n	8005044 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005024:	f7fd fb58 	bl	80026d8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d908      	bls.n	8005044 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005042:	e006      	b.n	8005052 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0e9      	beq.n	8005024 <RCCEx_PLLSAI2_Config+0x100>
 8005050:	e000      	b.n	8005054 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005052:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	4904      	ldr	r1, [pc, #16]	; (8005074 <RCCEx_PLLSAI2_Config+0x150>)
 8005064:	4313      	orrs	r3, r2
 8005066:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	07ff800c 	.word	0x07ff800c

0800507c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e042      	b.n	8005114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fd f8a7 	bl	80021f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2224      	movs	r2, #36	; 0x24
 80050aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb66 	bl	8005790 <UART_SetConfig>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e022      	b.n	8005114 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fe5a 	bl	8005d90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fee1 	bl	8005ed4 <UART_CheckIdleState>
 8005112:	4603      	mov	r3, r0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005132:	2b20      	cmp	r3, #32
 8005134:	f040 8083 	bne.w	800523e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_UART_Transmit+0x28>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e07b      	b.n	8005240 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x3a>
 8005152:	2302      	movs	r3, #2
 8005154:	e074      	b.n	8005240 <HAL_UART_Transmit+0x124>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2221      	movs	r2, #33	; 0x21
 800516a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800516e:	f7fd fab3 	bl	80026d8 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d108      	bne.n	80051a0 <HAL_UART_Transmit+0x84>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e003      	b.n	80051a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80051b0:	e02c      	b.n	800520c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2180      	movs	r1, #128	; 0x80
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fed4 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e039      	b.n	8005240 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	3302      	adds	r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e007      	b.n	80051fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	3301      	adds	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1cc      	bne.n	80051b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2200      	movs	r2, #0
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fea1 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e006      	b.n	8005240 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e000      	b.n	8005240 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800523e:	2302      	movs	r3, #2
  }
}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	2b20      	cmp	r3, #32
 800525e:	d131      	bne.n	80052c4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_UART_Receive_DMA+0x24>
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e02a      	b.n	80052c6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UART_Receive_DMA+0x36>
 800527a:	2302      	movs	r3, #2
 800527c:	e023      	b.n	80052c6 <HAL_UART_Receive_DMA+0x7e>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0f      	ldr	r2, [pc, #60]	; (80052d0 <HAL_UART_Receive_DMA+0x88>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052b2:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	461a      	mov	r2, r3
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fed6 	bl	800606c <UART_Start_Receive_DMA>
 80052c0:	4603      	mov	r3, r0
 80052c2:	e000      	b.n	80052c6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40008000 	.word	0x40008000

080052d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80052fa:	4013      	ands	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d118      	bne.n	8005336 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d013      	beq.n	8005336 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 81fb 	beq.w	8005722 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
      }
      return;
 8005334:	e1f5      	b.n	8005722 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80ef 	beq.w	800551c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4b73      	ldr	r3, [pc, #460]	; (8005510 <HAL_UART_IRQHandler+0x23c>)
 8005342:	4013      	ands	r3, r2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d105      	bne.n	8005354 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4b72      	ldr	r3, [pc, #456]	; (8005514 <HAL_UART_IRQHandler+0x240>)
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80e4 	beq.w	800551c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <HAL_UART_IRQHandler+0xac>
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <HAL_UART_IRQHandler+0xd8>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2202      	movs	r2, #2
 800539a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d010      	beq.n	80053d8 <HAL_UART_IRQHandler+0x104>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2204      	movs	r2, #4
 80053c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ce:	f043 0202 	orr.w	r2, r3, #2
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d015      	beq.n	800540e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4b48      	ldr	r3, [pc, #288]	; (8005510 <HAL_UART_IRQHandler+0x23c>)
 80053f0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2208      	movs	r2, #8
 80053fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005404:	f043 0208 	orr.w	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005414:	2b00      	cmp	r3, #0
 8005416:	d011      	beq.n	800543c <HAL_UART_IRQHandler+0x168>
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 816f 	beq.w	8005726 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d011      	beq.n	8005476 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d004      	beq.n	8005496 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005492:	2b00      	cmp	r3, #0
 8005494:	d031      	beq.n	80054fa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fe74 	bl	8006184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d123      	bne.n	80054f2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d013      	beq.n	80054ea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c6:	4a14      	ldr	r2, [pc, #80]	; (8005518 <HAL_UART_IRQHandler+0x244>)
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fd fb9d 	bl	8002c0e <HAL_DMA_Abort_IT>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d017      	beq.n	800550a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	e00f      	b.n	800550a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f93a 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e00b      	b.n	800550a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f936 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	e007      	b.n	800550a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f932 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005508:	e10d      	b.n	8005726 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550a:	bf00      	nop
    return;
 800550c:	e10b      	b.n	8005726 <HAL_UART_IRQHandler+0x452>
 800550e:	bf00      	nop
 8005510:	10000001 	.word	0x10000001
 8005514:	04000120 	.word	0x04000120
 8005518:	0800633b 	.word	0x0800633b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005520:	2b01      	cmp	r3, #1
 8005522:	f040 80ab 	bne.w	800567c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a5 	beq.w	800567c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 809f 	beq.w	800567c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2210      	movs	r2, #16
 8005544:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d155      	bne.n	8005600 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800555e:	893b      	ldrh	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80e2 	beq.w	800572a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800556c:	893a      	ldrh	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	f080 80db 	bcs.w	800572a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	893a      	ldrh	r2, [r7, #8]
 8005578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d12b      	bne.n	80055e4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800559a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ba:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0210 	bic.w	r2, r2, #16
 80055d8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd fab9 	bl	8002b56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8bd 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055fe:	e094      	b.n	800572a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800560c:	b29b      	uxth	r3, r3
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8087 	beq.w	800572e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005620:	897b      	ldrh	r3, [r7, #10]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8083 	beq.w	800572e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005636:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0210 	bic.w	r2, r2, #16
 800566e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005670:	897b      	ldrh	r3, [r7, #10]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f87f 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800567a:	e058      	b.n	800572e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <HAL_UART_IRQHandler+0x3ce>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fe7d 	bl	800639a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056a0:	e048      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d012      	beq.n	80056d2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d034      	beq.n	8005732 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
    }
    return;
 80056d0:	e02f      	b.n	8005732 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_UART_IRQHandler+0x41a>
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fe3d 	bl	8006366 <UART_EndTransmit_IT>
    return;
 80056ec:	e022      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_UART_IRQHandler+0x436>
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fe5d 	bl	80063c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005708:	e014      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00f      	beq.n	8005734 <HAL_UART_IRQHandler+0x460>
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	da0c      	bge.n	8005734 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fe47 	bl	80063ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005720:	e008      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
      return;
 8005722:	bf00      	nop
 8005724:	e006      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
    return;
 8005726:	bf00      	nop
 8005728:	e004      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
      return;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
      return;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_UART_IRQHandler+0x460>
    return;
 8005732:	bf00      	nop
  }
}
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop

0800573c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08c      	sub	sp, #48	; 0x30
 8005796:	af00      	add	r7, sp, #0
 8005798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4baa      	ldr	r3, [pc, #680]	; (8005a68 <UART_SetConfig+0x2d8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a9f      	ldr	r2, [pc, #636]	; (8005a6c <UART_SetConfig+0x2dc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005806:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005810:	430b      	orrs	r3, r1
 8005812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	f023 010f 	bic.w	r1, r3, #15
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a90      	ldr	r2, [pc, #576]	; (8005a70 <UART_SetConfig+0x2e0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d125      	bne.n	8005880 <UART_SetConfig+0xf0>
 8005834:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <UART_SetConfig+0x2e4>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d81a      	bhi.n	8005878 <UART_SetConfig+0xe8>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0xb8>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	08005869 	.word	0x08005869
 8005850:	08005861 	.word	0x08005861
 8005854:	08005871 	.word	0x08005871
 8005858:	2301      	movs	r3, #1
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e116      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e112      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e10e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005876:	e10a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587e:	e106      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7c      	ldr	r2, [pc, #496]	; (8005a78 <UART_SetConfig+0x2e8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d138      	bne.n	80058fc <UART_SetConfig+0x16c>
 800588a:	4b7a      	ldr	r3, [pc, #488]	; (8005a74 <UART_SetConfig+0x2e4>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d82d      	bhi.n	80058f4 <UART_SetConfig+0x164>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x110>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058da:	e0d8      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e2:	e0d4      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ea:	e0d0      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e0cc      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fa:	e0c8      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5e      	ldr	r2, [pc, #376]	; (8005a7c <UART_SetConfig+0x2ec>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d125      	bne.n	8005952 <UART_SetConfig+0x1c2>
 8005906:	4b5b      	ldr	r3, [pc, #364]	; (8005a74 <UART_SetConfig+0x2e4>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d016      	beq.n	8005942 <UART_SetConfig+0x1b2>
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d818      	bhi.n	800594a <UART_SetConfig+0x1ba>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d00a      	beq.n	8005932 <UART_SetConfig+0x1a2>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d814      	bhi.n	800594a <UART_SetConfig+0x1ba>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <UART_SetConfig+0x19a>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d008      	beq.n	800593a <UART_SetConfig+0x1aa>
 8005928:	e00f      	b.n	800594a <UART_SetConfig+0x1ba>
 800592a:	2300      	movs	r3, #0
 800592c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005930:	e0ad      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005932:	2302      	movs	r3, #2
 8005934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005938:	e0a9      	b.n	8005a8e <UART_SetConfig+0x2fe>
 800593a:	2304      	movs	r3, #4
 800593c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005940:	e0a5      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005942:	2308      	movs	r3, #8
 8005944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005948:	e0a1      	b.n	8005a8e <UART_SetConfig+0x2fe>
 800594a:	2310      	movs	r3, #16
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005950:	e09d      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4a      	ldr	r2, [pc, #296]	; (8005a80 <UART_SetConfig+0x2f0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d125      	bne.n	80059a8 <UART_SetConfig+0x218>
 800595c:	4b45      	ldr	r3, [pc, #276]	; (8005a74 <UART_SetConfig+0x2e4>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005966:	2bc0      	cmp	r3, #192	; 0xc0
 8005968:	d016      	beq.n	8005998 <UART_SetConfig+0x208>
 800596a:	2bc0      	cmp	r3, #192	; 0xc0
 800596c:	d818      	bhi.n	80059a0 <UART_SetConfig+0x210>
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d00a      	beq.n	8005988 <UART_SetConfig+0x1f8>
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d814      	bhi.n	80059a0 <UART_SetConfig+0x210>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <UART_SetConfig+0x1f0>
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d008      	beq.n	8005990 <UART_SetConfig+0x200>
 800597e:	e00f      	b.n	80059a0 <UART_SetConfig+0x210>
 8005980:	2300      	movs	r3, #0
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e082      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005988:	2302      	movs	r3, #2
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e07e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e07a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e076      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a6:	e072      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a35      	ldr	r2, [pc, #212]	; (8005a84 <UART_SetConfig+0x2f4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d12a      	bne.n	8005a08 <UART_SetConfig+0x278>
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <UART_SetConfig+0x2e4>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c0:	d01a      	beq.n	80059f8 <UART_SetConfig+0x268>
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c6:	d81b      	bhi.n	8005a00 <UART_SetConfig+0x270>
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d00c      	beq.n	80059e8 <UART_SetConfig+0x258>
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d2:	d815      	bhi.n	8005a00 <UART_SetConfig+0x270>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <UART_SetConfig+0x250>
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059dc:	d008      	beq.n	80059f0 <UART_SetConfig+0x260>
 80059de:	e00f      	b.n	8005a00 <UART_SetConfig+0x270>
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e052      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059e8:	2302      	movs	r3, #2
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ee:	e04e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f6:	e04a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fe:	e046      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a06:	e042      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <UART_SetConfig+0x2dc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d13a      	bne.n	8005a88 <UART_SetConfig+0x2f8>
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <UART_SetConfig+0x2e4>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a20:	d01a      	beq.n	8005a58 <UART_SetConfig+0x2c8>
 8005a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a26:	d81b      	bhi.n	8005a60 <UART_SetConfig+0x2d0>
 8005a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2c:	d00c      	beq.n	8005a48 <UART_SetConfig+0x2b8>
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a32:	d815      	bhi.n	8005a60 <UART_SetConfig+0x2d0>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d008      	beq.n	8005a50 <UART_SetConfig+0x2c0>
 8005a3e:	e00f      	b.n	8005a60 <UART_SetConfig+0x2d0>
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e022      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e01e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a56:	e01a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5e:	e016      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a66:	e012      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a68:	cfff69f3 	.word	0xcfff69f3
 8005a6c:	40008000 	.word	0x40008000
 8005a70:	40013800 	.word	0x40013800
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40004400 	.word	0x40004400
 8005a7c:	40004800 	.word	0x40004800
 8005a80:	40004c00 	.word	0x40004c00
 8005a84:	40005000 	.word	0x40005000
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4ab0      	ldr	r2, [pc, #704]	; (8005d54 <UART_SetConfig+0x5c4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f040 809b 	bne.w	8005bd0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d827      	bhi.n	8005af2 <UART_SetConfig+0x362>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x318>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005af3 	.word	0x08005af3
 8005ab8:	08005ae3 	.word	0x08005ae3
 8005abc:	08005af3 	.word	0x08005af3
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005af3 	.word	0x08005af3
 8005ac8:	08005aeb 	.word	0x08005aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe fcbc 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad2:	e014      	b.n	8005afe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fe fccc 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ada:	e010      	b.n	8005afe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005adc:	4b9e      	ldr	r3, [pc, #632]	; (8005d58 <UART_SetConfig+0x5c8>)
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae0:	e00d      	b.n	8005afe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fe fc01 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae8:	e009      	b.n	8005afe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005af0:	e005      	b.n	8005afe <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005afc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8130 	beq.w	8005d66 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	4a94      	ldr	r2, [pc, #592]	; (8005d5c <UART_SetConfig+0x5cc>)
 8005b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d305      	bcc.n	8005b36 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d903      	bls.n	8005b3e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b3c:	e113      	b.n	8005d66 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	2200      	movs	r2, #0
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	60fa      	str	r2, [r7, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	4a84      	ldr	r2, [pc, #528]	; (8005d5c <UART_SetConfig+0x5cc>)
 8005b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2200      	movs	r2, #0
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b60:	f7fb f82e 	bl	8000bc0 <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	020b      	lsls	r3, r1, #8
 8005b76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b7a:	0202      	lsls	r2, r0, #8
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	6849      	ldr	r1, [r1, #4]
 8005b80:	0849      	lsrs	r1, r1, #1
 8005b82:	2000      	movs	r0, #0
 8005b84:	460c      	mov	r4, r1
 8005b86:	4605      	mov	r5, r0
 8005b88:	eb12 0804 	adds.w	r8, r2, r4
 8005b8c:	eb43 0905 	adc.w	r9, r3, r5
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	469a      	mov	sl, r3
 8005b98:	4693      	mov	fp, r2
 8005b9a:	4652      	mov	r2, sl
 8005b9c:	465b      	mov	r3, fp
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fb f80d 	bl	8000bc0 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4613      	mov	r3, r2
 8005bac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb4:	d308      	bcc.n	8005bc8 <UART_SetConfig+0x438>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbc:	d204      	bcs.n	8005bc8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	e0ce      	b.n	8005d66 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bce:	e0ca      	b.n	8005d66 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	d167      	bne.n	8005caa <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8005bda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d827      	bhi.n	8005c32 <UART_SetConfig+0x4a2>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0x458>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c33 	.word	0x08005c33
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7fe fc1c 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c12:	e014      	b.n	8005c3e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe fc2c 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c1a:	e010      	b.n	8005c3e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b4e      	ldr	r3, [pc, #312]	; (8005d58 <UART_SetConfig+0x5c8>)
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c20:	e00d      	b.n	8005c3e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fe fb61 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c28:	e009      	b.n	8005c3e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c30:	e005      	b.n	8005c3e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8090 	beq.w	8005d66 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	4a44      	ldr	r2, [pc, #272]	; (8005d5c <UART_SetConfig+0x5cc>)
 8005c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c50:	461a      	mov	r2, r3
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c58:	005a      	lsls	r2, r3, #1
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	441a      	add	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2b0f      	cmp	r3, #15
 8005c72:	d916      	bls.n	8005ca2 <UART_SetConfig+0x512>
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7a:	d212      	bcs.n	8005ca2 <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f023 030f 	bic.w	r3, r3, #15
 8005c84:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	8bfb      	ldrh	r3, [r7, #30]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	8bfa      	ldrh	r2, [r7, #30]
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	e061      	b.n	8005d66 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ca8:	e05d      	b.n	8005d66 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d827      	bhi.n	8005d02 <UART_SetConfig+0x572>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0x528>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ced 	.word	0x08005ced
 8005cc4:	08005d03 	.word	0x08005d03
 8005cc8:	08005cf3 	.word	0x08005cf3
 8005ccc:	08005d03 	.word	0x08005d03
 8005cd0:	08005d03 	.word	0x08005d03
 8005cd4:	08005d03 	.word	0x08005d03
 8005cd8:	08005cfb 	.word	0x08005cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cdc:	f7fe fbb4 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce2:	e014      	b.n	8005d0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce4:	f7fe fbc4 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cea:	e010      	b.n	8005d0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <UART_SetConfig+0x5c8>)
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cf0:	e00d      	b.n	8005d0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf2:	f7fe faf9 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005cf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cf8:	e009      	b.n	8005d0e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d00:	e005      	b.n	8005d0e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d028      	beq.n	8005d66 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <UART_SetConfig+0x5cc>)
 8005d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	441a      	add	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	2b0f      	cmp	r3, #15
 8005d3e:	d90f      	bls.n	8005d60 <UART_SetConfig+0x5d0>
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d46:	d20b      	bcs.n	8005d60 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	60da      	str	r2, [r3, #12]
 8005d50:	e009      	b.n	8005d66 <UART_SetConfig+0x5d6>
 8005d52:	bf00      	nop
 8005d54:	40008000 	.word	0x40008000
 8005d58:	00f42400 	.word	0x00f42400
 8005d5c:	08007620 	.word	0x08007620
      }
      else
      {
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3730      	adds	r7, #48	; 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8e:	d10a      	bne.n	8005ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee4:	f7fc fbf8 	bl	80026d8 <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d10e      	bne.n	8005f16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f82f 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e025      	b.n	8005f62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d10e      	bne.n	8005f42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f819 	bl	8005f6a <UART_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e00f      	b.n	8005f62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7a:	e062      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d05e      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f84:	f7fc fba8 	bl	80026d8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d11d      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e045      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d02e      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff2:	d126      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800600c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00f      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d08d      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2222      	movs	r2, #34	; 0x22
 8006094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d02c      	beq.n	80060fa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	4a25      	ldr	r2, [pc, #148]	; (800613c <UART_Start_Receive_DMA+0xd0>)
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ac:	4a24      	ldr	r2, [pc, #144]	; (8006140 <UART_Start_Receive_DMA+0xd4>)
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b4:	4a23      	ldr	r2, [pc, #140]	; (8006144 <UART_Start_Receive_DMA+0xd8>)
 80060b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060bc:	2200      	movs	r2, #0
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3324      	adds	r3, #36	; 0x24
 80060ca:	4619      	mov	r1, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d0:	461a      	mov	r2, r3
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	f7fc fcc4 	bl	8002a60 <HAL_DMA_Start_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00d      	beq.n	80060fa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2210      	movs	r2, #16
 80060e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e01c      	b.n	8006134 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006110:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006130:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	080061e9 	.word	0x080061e9
 8006140:	08006283 	.word	0x08006283
 8006144:	080062bb 	.word	0x080062bb

08006148 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800615e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800616e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800619a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d107      	bne.n	80061c8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0210 	bic.w	r2, r2, #16
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	671a      	str	r2, [r3, #112]	; 0x70
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d12b      	bne.n	800625c <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800621a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d107      	bne.n	800625c <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0210 	bic.w	r2, r2, #16
 800625a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d107      	bne.n	8006274 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800626a:	4619      	mov	r1, r3
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff fa83 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006272:	e002      	b.n	800627a <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7fb fee3 	bl	8002040 <HAL_UART_RxCpltCallback>
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d109      	bne.n	80062ac <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff fa67 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062aa:	e002      	b.n	80062b2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fa4f 	bl	8005750 <HAL_UART_RxHalfCpltCallback>
}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d109      	bne.n	80062fa <UART_DMAError+0x40>
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b21      	cmp	r3, #33	; 0x21
 80062ea:	d106      	bne.n	80062fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80062f4:	6978      	ldr	r0, [r7, #20]
 80062f6:	f7ff ff27 	bl	8006148 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d109      	bne.n	800631c <UART_DMAError+0x62>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b22      	cmp	r3, #34	; 0x22
 800630c:	d106      	bne.n	800631c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7ff ff34 	bl	8006184 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006322:	f043 0210 	orr.w	r2, r3, #16
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800632c:	6978      	ldr	r0, [r7, #20]
 800632e:	f7ff fa19 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006332:	bf00      	nop
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff fa03 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff f9d5 	bl	800573c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UARTEx_DisableFifoMode+0x16>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e027      	b.n	800643c <HAL_UARTEx_DisableFifoMode+0x66>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800641a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e02d      	b.n	80064bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f84f 	bl	8006540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064d8:	2302      	movs	r3, #2
 80064da:	e02d      	b.n	8006538 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	; 0x24
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f811 	bl	8006540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006560:	e031      	b.n	80065c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006562:	2308      	movs	r3, #8
 8006564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006566:	2308      	movs	r3, #8
 8006568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	0e5b      	lsrs	r3, r3, #25
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	0f5b      	lsrs	r3, r3, #29
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	7b3a      	ldrb	r2, [r7, #12]
 800658e:	4911      	ldr	r1, [pc, #68]	; (80065d4 <UARTEx_SetNbDataToProcess+0x94>)
 8006590:	5c8a      	ldrb	r2, [r1, r2]
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	7b3a      	ldrb	r2, [r7, #12]
 8006598:	490f      	ldr	r1, [pc, #60]	; (80065d8 <UARTEx_SetNbDataToProcess+0x98>)
 800659a:	5c8a      	ldrb	r2, [r1, r2]
 800659c:	fb93 f3f2 	sdiv	r3, r3, r2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	7b7a      	ldrb	r2, [r7, #13]
 80065ac:	4909      	ldr	r1, [pc, #36]	; (80065d4 <UARTEx_SetNbDataToProcess+0x94>)
 80065ae:	5c8a      	ldrb	r2, [r1, r2]
 80065b0:	fb02 f303 	mul.w	r3, r2, r3
 80065b4:	7b7a      	ldrb	r2, [r7, #13]
 80065b6:	4908      	ldr	r1, [pc, #32]	; (80065d8 <UARTEx_SetNbDataToProcess+0x98>)
 80065b8:	5c8a      	ldrb	r2, [r1, r2]
 80065ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	08007638 	.word	0x08007638
 80065d8:	08007640 	.word	0x08007640

080065dc <pow>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	ec55 4b11 	vmov	r4, r5, d1
 80065e2:	ed2d 8b02 	vpush	{d8}
 80065e6:	eeb0 8a40 	vmov.f32	s16, s0
 80065ea:	eef0 8a60 	vmov.f32	s17, s1
 80065ee:	f000 f867 	bl	80066c0 <__ieee754_pow>
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	ec57 6b10 	vmov	r6, r7, d0
 80065fe:	f7fa fa79 	bl	8000af4 <__aeabi_dcmpun>
 8006602:	2800      	cmp	r0, #0
 8006604:	d13b      	bne.n	800667e <pow+0xa2>
 8006606:	2200      	movs	r2, #0
 8006608:	2300      	movs	r3, #0
 800660a:	ec51 0b18 	vmov	r0, r1, d8
 800660e:	f7fa fa3f 	bl	8000a90 <__aeabi_dcmpeq>
 8006612:	b1b8      	cbz	r0, 8006644 <pow+0x68>
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	4620      	mov	r0, r4
 800661a:	4629      	mov	r1, r5
 800661c:	f7fa fa38 	bl	8000a90 <__aeabi_dcmpeq>
 8006620:	2800      	cmp	r0, #0
 8006622:	d146      	bne.n	80066b2 <pow+0xd6>
 8006624:	ec45 4b10 	vmov	d0, r4, r5
 8006628:	f000 fe69 	bl	80072fe <finite>
 800662c:	b338      	cbz	r0, 800667e <pow+0xa2>
 800662e:	2200      	movs	r2, #0
 8006630:	2300      	movs	r3, #0
 8006632:	4620      	mov	r0, r4
 8006634:	4629      	mov	r1, r5
 8006636:	f7fa fa35 	bl	8000aa4 <__aeabi_dcmplt>
 800663a:	b300      	cbz	r0, 800667e <pow+0xa2>
 800663c:	f000 fef6 	bl	800742c <__errno>
 8006640:	2322      	movs	r3, #34	; 0x22
 8006642:	e01b      	b.n	800667c <pow+0xa0>
 8006644:	ec47 6b10 	vmov	d0, r6, r7
 8006648:	f000 fe59 	bl	80072fe <finite>
 800664c:	b9e0      	cbnz	r0, 8006688 <pow+0xac>
 800664e:	eeb0 0a48 	vmov.f32	s0, s16
 8006652:	eef0 0a68 	vmov.f32	s1, s17
 8006656:	f000 fe52 	bl	80072fe <finite>
 800665a:	b1a8      	cbz	r0, 8006688 <pow+0xac>
 800665c:	ec45 4b10 	vmov	d0, r4, r5
 8006660:	f000 fe4d 	bl	80072fe <finite>
 8006664:	b180      	cbz	r0, 8006688 <pow+0xac>
 8006666:	4632      	mov	r2, r6
 8006668:	463b      	mov	r3, r7
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7fa fa41 	bl	8000af4 <__aeabi_dcmpun>
 8006672:	2800      	cmp	r0, #0
 8006674:	d0e2      	beq.n	800663c <pow+0x60>
 8006676:	f000 fed9 	bl	800742c <__errno>
 800667a:	2321      	movs	r3, #33	; 0x21
 800667c:	6003      	str	r3, [r0, #0]
 800667e:	ecbd 8b02 	vpop	{d8}
 8006682:	ec47 6b10 	vmov	d0, r6, r7
 8006686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	4630      	mov	r0, r6
 800668e:	4639      	mov	r1, r7
 8006690:	f7fa f9fe 	bl	8000a90 <__aeabi_dcmpeq>
 8006694:	2800      	cmp	r0, #0
 8006696:	d0f2      	beq.n	800667e <pow+0xa2>
 8006698:	eeb0 0a48 	vmov.f32	s0, s16
 800669c:	eef0 0a68 	vmov.f32	s1, s17
 80066a0:	f000 fe2d 	bl	80072fe <finite>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d0ea      	beq.n	800667e <pow+0xa2>
 80066a8:	ec45 4b10 	vmov	d0, r4, r5
 80066ac:	f000 fe27 	bl	80072fe <finite>
 80066b0:	e7c3      	b.n	800663a <pow+0x5e>
 80066b2:	2600      	movs	r6, #0
 80066b4:	4f00      	ldr	r7, [pc, #0]	; (80066b8 <pow+0xdc>)
 80066b6:	e7e2      	b.n	800667e <pow+0xa2>
 80066b8:	3ff00000 	.word	0x3ff00000
 80066bc:	00000000 	.word	0x00000000

080066c0 <__ieee754_pow>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	ed2d 8b06 	vpush	{d8-d10}
 80066c8:	b089      	sub	sp, #36	; 0x24
 80066ca:	ed8d 1b00 	vstr	d1, [sp]
 80066ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 80066d2:	ec57 6b10 	vmov	r6, r7, d0
 80066d6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80066da:	ea58 0102 	orrs.w	r1, r8, r2
 80066de:	d115      	bne.n	800670c <__ieee754_pow+0x4c>
 80066e0:	19b3      	adds	r3, r6, r6
 80066e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80066e6:	4152      	adcs	r2, r2
 80066e8:	4299      	cmp	r1, r3
 80066ea:	4b89      	ldr	r3, [pc, #548]	; (8006910 <__ieee754_pow+0x250>)
 80066ec:	4193      	sbcs	r3, r2
 80066ee:	f080 84d3 	bcs.w	8007098 <__ieee754_pow+0x9d8>
 80066f2:	4630      	mov	r0, r6
 80066f4:	4639      	mov	r1, r7
 80066f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066fa:	f7f9 fdab 	bl	8000254 <__adddf3>
 80066fe:	ec41 0b10 	vmov	d0, r0, r1
 8006702:	b009      	add	sp, #36	; 0x24
 8006704:	ecbd 8b06 	vpop	{d8-d10}
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006710:	4b80      	ldr	r3, [pc, #512]	; (8006914 <__ieee754_pow+0x254>)
 8006712:	463d      	mov	r5, r7
 8006714:	ee10 aa10 	vmov	sl, s0
 8006718:	429c      	cmp	r4, r3
 800671a:	dc06      	bgt.n	800672a <__ieee754_pow+0x6a>
 800671c:	d101      	bne.n	8006722 <__ieee754_pow+0x62>
 800671e:	2e00      	cmp	r6, #0
 8006720:	d1e7      	bne.n	80066f2 <__ieee754_pow+0x32>
 8006722:	4598      	cmp	r8, r3
 8006724:	dc01      	bgt.n	800672a <__ieee754_pow+0x6a>
 8006726:	d10f      	bne.n	8006748 <__ieee754_pow+0x88>
 8006728:	b172      	cbz	r2, 8006748 <__ieee754_pow+0x88>
 800672a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800672e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006732:	ea55 050a 	orrs.w	r5, r5, sl
 8006736:	d1dc      	bne.n	80066f2 <__ieee754_pow+0x32>
 8006738:	e9dd 3200 	ldrd	r3, r2, [sp]
 800673c:	18db      	adds	r3, r3, r3
 800673e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006742:	4152      	adcs	r2, r2
 8006744:	429d      	cmp	r5, r3
 8006746:	e7d0      	b.n	80066ea <__ieee754_pow+0x2a>
 8006748:	2d00      	cmp	r5, #0
 800674a:	da3b      	bge.n	80067c4 <__ieee754_pow+0x104>
 800674c:	4b72      	ldr	r3, [pc, #456]	; (8006918 <__ieee754_pow+0x258>)
 800674e:	4598      	cmp	r8, r3
 8006750:	dc51      	bgt.n	80067f6 <__ieee754_pow+0x136>
 8006752:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006756:	4598      	cmp	r8, r3
 8006758:	f340 84ad 	ble.w	80070b6 <__ieee754_pow+0x9f6>
 800675c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006764:	2b14      	cmp	r3, #20
 8006766:	dd0f      	ble.n	8006788 <__ieee754_pow+0xc8>
 8006768:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800676c:	fa22 f103 	lsr.w	r1, r2, r3
 8006770:	fa01 f303 	lsl.w	r3, r1, r3
 8006774:	4293      	cmp	r3, r2
 8006776:	f040 849e 	bne.w	80070b6 <__ieee754_pow+0x9f6>
 800677a:	f001 0101 	and.w	r1, r1, #1
 800677e:	f1c1 0302 	rsb	r3, r1, #2
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	b182      	cbz	r2, 80067a8 <__ieee754_pow+0xe8>
 8006786:	e05f      	b.n	8006848 <__ieee754_pow+0x188>
 8006788:	2a00      	cmp	r2, #0
 800678a:	d15b      	bne.n	8006844 <__ieee754_pow+0x184>
 800678c:	f1c3 0314 	rsb	r3, r3, #20
 8006790:	fa48 f103 	asr.w	r1, r8, r3
 8006794:	fa01 f303 	lsl.w	r3, r1, r3
 8006798:	4543      	cmp	r3, r8
 800679a:	f040 8489 	bne.w	80070b0 <__ieee754_pow+0x9f0>
 800679e:	f001 0101 	and.w	r1, r1, #1
 80067a2:	f1c1 0302 	rsb	r3, r1, #2
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	4b5c      	ldr	r3, [pc, #368]	; (800691c <__ieee754_pow+0x25c>)
 80067aa:	4598      	cmp	r8, r3
 80067ac:	d132      	bne.n	8006814 <__ieee754_pow+0x154>
 80067ae:	f1b9 0f00 	cmp.w	r9, #0
 80067b2:	f280 8479 	bge.w	80070a8 <__ieee754_pow+0x9e8>
 80067b6:	4632      	mov	r2, r6
 80067b8:	463b      	mov	r3, r7
 80067ba:	2000      	movs	r0, #0
 80067bc:	4957      	ldr	r1, [pc, #348]	; (800691c <__ieee754_pow+0x25c>)
 80067be:	f7fa f829 	bl	8000814 <__aeabi_ddiv>
 80067c2:	e79c      	b.n	80066fe <__ieee754_pow+0x3e>
 80067c4:	2300      	movs	r3, #0
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	d13d      	bne.n	8006848 <__ieee754_pow+0x188>
 80067cc:	4b51      	ldr	r3, [pc, #324]	; (8006914 <__ieee754_pow+0x254>)
 80067ce:	4598      	cmp	r8, r3
 80067d0:	d1ea      	bne.n	80067a8 <__ieee754_pow+0xe8>
 80067d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80067d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80067da:	ea53 030a 	orrs.w	r3, r3, sl
 80067de:	f000 845b 	beq.w	8007098 <__ieee754_pow+0x9d8>
 80067e2:	4b4f      	ldr	r3, [pc, #316]	; (8006920 <__ieee754_pow+0x260>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	dd08      	ble.n	80067fa <__ieee754_pow+0x13a>
 80067e8:	f1b9 0f00 	cmp.w	r9, #0
 80067ec:	f2c0 8458 	blt.w	80070a0 <__ieee754_pow+0x9e0>
 80067f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067f4:	e783      	b.n	80066fe <__ieee754_pow+0x3e>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e7e5      	b.n	80067c6 <__ieee754_pow+0x106>
 80067fa:	f1b9 0f00 	cmp.w	r9, #0
 80067fe:	f04f 0000 	mov.w	r0, #0
 8006802:	f04f 0100 	mov.w	r1, #0
 8006806:	f6bf af7a 	bge.w	80066fe <__ieee754_pow+0x3e>
 800680a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800680e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006812:	e774      	b.n	80066fe <__ieee754_pow+0x3e>
 8006814:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006818:	d106      	bne.n	8006828 <__ieee754_pow+0x168>
 800681a:	4632      	mov	r2, r6
 800681c:	463b      	mov	r3, r7
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7f9 fecd 	bl	80005c0 <__aeabi_dmul>
 8006826:	e76a      	b.n	80066fe <__ieee754_pow+0x3e>
 8006828:	4b3e      	ldr	r3, [pc, #248]	; (8006924 <__ieee754_pow+0x264>)
 800682a:	4599      	cmp	r9, r3
 800682c:	d10c      	bne.n	8006848 <__ieee754_pow+0x188>
 800682e:	2d00      	cmp	r5, #0
 8006830:	db0a      	blt.n	8006848 <__ieee754_pow+0x188>
 8006832:	ec47 6b10 	vmov	d0, r6, r7
 8006836:	b009      	add	sp, #36	; 0x24
 8006838:	ecbd 8b06 	vpop	{d8-d10}
 800683c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	f000 bc6c 	b.w	800711c <__ieee754_sqrt>
 8006844:	2300      	movs	r3, #0
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	ec47 6b10 	vmov	d0, r6, r7
 800684c:	f000 fd4e 	bl	80072ec <fabs>
 8006850:	ec51 0b10 	vmov	r0, r1, d0
 8006854:	f1ba 0f00 	cmp.w	sl, #0
 8006858:	d129      	bne.n	80068ae <__ieee754_pow+0x1ee>
 800685a:	b124      	cbz	r4, 8006866 <__ieee754_pow+0x1a6>
 800685c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006860:	4b2e      	ldr	r3, [pc, #184]	; (800691c <__ieee754_pow+0x25c>)
 8006862:	429a      	cmp	r2, r3
 8006864:	d123      	bne.n	80068ae <__ieee754_pow+0x1ee>
 8006866:	f1b9 0f00 	cmp.w	r9, #0
 800686a:	da05      	bge.n	8006878 <__ieee754_pow+0x1b8>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	2000      	movs	r0, #0
 8006872:	492a      	ldr	r1, [pc, #168]	; (800691c <__ieee754_pow+0x25c>)
 8006874:	f7f9 ffce 	bl	8000814 <__aeabi_ddiv>
 8006878:	2d00      	cmp	r5, #0
 800687a:	f6bf af40 	bge.w	80066fe <__ieee754_pow+0x3e>
 800687e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006882:	9b04      	ldr	r3, [sp, #16]
 8006884:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006888:	4323      	orrs	r3, r4
 800688a:	d108      	bne.n	800689e <__ieee754_pow+0x1de>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	f7f9 fcdc 	bl	8000250 <__aeabi_dsub>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	e78f      	b.n	80067be <__ieee754_pow+0xfe>
 800689e:	9b04      	ldr	r3, [sp, #16]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	f47f af2c 	bne.w	80066fe <__ieee754_pow+0x3e>
 80068a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068aa:	4619      	mov	r1, r3
 80068ac:	e727      	b.n	80066fe <__ieee754_pow+0x3e>
 80068ae:	0feb      	lsrs	r3, r5, #31
 80068b0:	3b01      	subs	r3, #1
 80068b2:	9306      	str	r3, [sp, #24]
 80068b4:	9a06      	ldr	r2, [sp, #24]
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	d102      	bne.n	80068c2 <__ieee754_pow+0x202>
 80068bc:	4632      	mov	r2, r6
 80068be:	463b      	mov	r3, r7
 80068c0:	e7e6      	b.n	8006890 <__ieee754_pow+0x1d0>
 80068c2:	4b19      	ldr	r3, [pc, #100]	; (8006928 <__ieee754_pow+0x268>)
 80068c4:	4598      	cmp	r8, r3
 80068c6:	f340 80fb 	ble.w	8006ac0 <__ieee754_pow+0x400>
 80068ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80068ce:	4598      	cmp	r8, r3
 80068d0:	4b13      	ldr	r3, [pc, #76]	; (8006920 <__ieee754_pow+0x260>)
 80068d2:	dd0c      	ble.n	80068ee <__ieee754_pow+0x22e>
 80068d4:	429c      	cmp	r4, r3
 80068d6:	dc0f      	bgt.n	80068f8 <__ieee754_pow+0x238>
 80068d8:	f1b9 0f00 	cmp.w	r9, #0
 80068dc:	da0f      	bge.n	80068fe <__ieee754_pow+0x23e>
 80068de:	2000      	movs	r0, #0
 80068e0:	b009      	add	sp, #36	; 0x24
 80068e2:	ecbd 8b06 	vpop	{d8-d10}
 80068e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f000 bcf6 	b.w	80072da <__math_oflow>
 80068ee:	429c      	cmp	r4, r3
 80068f0:	dbf2      	blt.n	80068d8 <__ieee754_pow+0x218>
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <__ieee754_pow+0x25c>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	dd19      	ble.n	800692c <__ieee754_pow+0x26c>
 80068f8:	f1b9 0f00 	cmp.w	r9, #0
 80068fc:	dcef      	bgt.n	80068de <__ieee754_pow+0x21e>
 80068fe:	2000      	movs	r0, #0
 8006900:	b009      	add	sp, #36	; 0x24
 8006902:	ecbd 8b06 	vpop	{d8-d10}
 8006906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690a:	f000 bcdd 	b.w	80072c8 <__math_uflow>
 800690e:	bf00      	nop
 8006910:	fff00000 	.word	0xfff00000
 8006914:	7ff00000 	.word	0x7ff00000
 8006918:	433fffff 	.word	0x433fffff
 800691c:	3ff00000 	.word	0x3ff00000
 8006920:	3fefffff 	.word	0x3fefffff
 8006924:	3fe00000 	.word	0x3fe00000
 8006928:	41e00000 	.word	0x41e00000
 800692c:	2200      	movs	r2, #0
 800692e:	4b60      	ldr	r3, [pc, #384]	; (8006ab0 <__ieee754_pow+0x3f0>)
 8006930:	f7f9 fc8e 	bl	8000250 <__aeabi_dsub>
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	a353      	add	r3, pc, #332	; (adr r3, 8006a88 <__ieee754_pow+0x3c8>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 fe3f 	bl	80005c0 <__aeabi_dmul>
 8006942:	4606      	mov	r6, r0
 8006944:	460f      	mov	r7, r1
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	a351      	add	r3, pc, #324	; (adr r3, 8006a90 <__ieee754_pow+0x3d0>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f7f9 fe36 	bl	80005c0 <__aeabi_dmul>
 8006954:	2200      	movs	r2, #0
 8006956:	4682      	mov	sl, r0
 8006958:	468b      	mov	fp, r1
 800695a:	4b56      	ldr	r3, [pc, #344]	; (8006ab4 <__ieee754_pow+0x3f4>)
 800695c:	4620      	mov	r0, r4
 800695e:	4629      	mov	r1, r5
 8006960:	f7f9 fe2e 	bl	80005c0 <__aeabi_dmul>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	a14b      	add	r1, pc, #300	; (adr r1, 8006a98 <__ieee754_pow+0x3d8>)
 800696a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800696e:	f7f9 fc6f 	bl	8000250 <__aeabi_dsub>
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	f7f9 fe23 	bl	80005c0 <__aeabi_dmul>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	2000      	movs	r0, #0
 8006980:	494d      	ldr	r1, [pc, #308]	; (8006ab8 <__ieee754_pow+0x3f8>)
 8006982:	f7f9 fc65 	bl	8000250 <__aeabi_dsub>
 8006986:	4680      	mov	r8, r0
 8006988:	4689      	mov	r9, r1
 800698a:	4622      	mov	r2, r4
 800698c:	462b      	mov	r3, r5
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	f7f9 fe15 	bl	80005c0 <__aeabi_dmul>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7f9 fe0f 	bl	80005c0 <__aeabi_dmul>
 80069a2:	a33f      	add	r3, pc, #252	; (adr r3, 8006aa0 <__ieee754_pow+0x3e0>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fe0a 	bl	80005c0 <__aeabi_dmul>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7f9 fc4c 	bl	8000250 <__aeabi_dsub>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4680      	mov	r8, r0
 80069be:	4689      	mov	r9, r1
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7f9 fc46 	bl	8000254 <__adddf3>
 80069c8:	2000      	movs	r0, #0
 80069ca:	4632      	mov	r2, r6
 80069cc:	463b      	mov	r3, r7
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	f7f9 fc3d 	bl	8000250 <__aeabi_dsub>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fc37 	bl	8000250 <__aeabi_dsub>
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	9a06      	ldr	r2, [sp, #24]
 80069e6:	4682      	mov	sl, r0
 80069e8:	3b01      	subs	r3, #1
 80069ea:	468b      	mov	fp, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f040 81e7 	bne.w	8006dc0 <__ieee754_pow+0x700>
 80069f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006aa8 <__ieee754_pow+0x3e8>
 80069f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069fa:	2600      	movs	r6, #0
 80069fc:	eeb0 8a47 	vmov.f32	s16, s14
 8006a00:	eef0 8a67 	vmov.f32	s17, s15
 8006a04:	463b      	mov	r3, r7
 8006a06:	4632      	mov	r2, r6
 8006a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a0c:	f7f9 fc20 	bl	8000250 <__aeabi_dsub>
 8006a10:	4622      	mov	r2, r4
 8006a12:	462b      	mov	r3, r5
 8006a14:	f7f9 fdd4 	bl	80005c0 <__aeabi_dmul>
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4689      	mov	r9, r1
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	4659      	mov	r1, fp
 8006a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a24:	f7f9 fdcc 	bl	80005c0 <__aeabi_dmul>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	4649      	mov	r1, r9
 8006a30:	f7f9 fc10 	bl	8000254 <__adddf3>
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	4632      	mov	r2, r6
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fdbe 	bl	80005c0 <__aeabi_dmul>
 8006a44:	460b      	mov	r3, r1
 8006a46:	4604      	mov	r4, r0
 8006a48:	460d      	mov	r5, r1
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7f9 fc00 	bl	8000254 <__adddf3>
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <__ieee754_pow+0x3fc>)
 8006a56:	4606      	mov	r6, r0
 8006a58:	460f      	mov	r7, r1
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	468b      	mov	fp, r1
 8006a5e:	ec45 4b19 	vmov	d9, r4, r5
 8006a62:	f340 82f2 	ble.w	800704a <__ieee754_pow+0x98a>
 8006a66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006a6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006a6e:	4303      	orrs	r3, r0
 8006a70:	f000 81e4 	beq.w	8006e3c <__ieee754_pow+0x77c>
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	ec51 0b18 	vmov	r0, r1, d8
 8006a7c:	f7fa f812 	bl	8000aa4 <__aeabi_dcmplt>
 8006a80:	3800      	subs	r0, #0
 8006a82:	bf18      	it	ne
 8006a84:	2001      	movne	r0, #1
 8006a86:	e72b      	b.n	80068e0 <__ieee754_pow+0x220>
 8006a88:	60000000 	.word	0x60000000
 8006a8c:	3ff71547 	.word	0x3ff71547
 8006a90:	f85ddf44 	.word	0xf85ddf44
 8006a94:	3e54ae0b 	.word	0x3e54ae0b
 8006a98:	55555555 	.word	0x55555555
 8006a9c:	3fd55555 	.word	0x3fd55555
 8006aa0:	652b82fe 	.word	0x652b82fe
 8006aa4:	3ff71547 	.word	0x3ff71547
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	bff00000 	.word	0xbff00000
 8006ab0:	3ff00000 	.word	0x3ff00000
 8006ab4:	3fd00000 	.word	0x3fd00000
 8006ab8:	3fe00000 	.word	0x3fe00000
 8006abc:	408fffff 	.word	0x408fffff
 8006ac0:	4bd5      	ldr	r3, [pc, #852]	; (8006e18 <__ieee754_pow+0x758>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	402b      	ands	r3, r5
 8006ac6:	b92b      	cbnz	r3, 8006ad4 <__ieee754_pow+0x414>
 8006ac8:	4bd4      	ldr	r3, [pc, #848]	; (8006e1c <__ieee754_pow+0x75c>)
 8006aca:	f7f9 fd79 	bl	80005c0 <__aeabi_dmul>
 8006ace:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	1523      	asrs	r3, r4, #20
 8006ad6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006ada:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ade:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	4bcd      	ldr	r3, [pc, #820]	; (8006e20 <__ieee754_pow+0x760>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	dd08      	ble.n	8006b02 <__ieee754_pow+0x442>
 8006af0:	4bcc      	ldr	r3, [pc, #816]	; (8006e24 <__ieee754_pow+0x764>)
 8006af2:	429c      	cmp	r4, r3
 8006af4:	f340 8162 	ble.w	8006dbc <__ieee754_pow+0x6fc>
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006afe:	3301      	adds	r3, #1
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	2400      	movs	r4, #0
 8006b04:	00e3      	lsls	r3, r4, #3
 8006b06:	4682      	mov	sl, r0
 8006b08:	4629      	mov	r1, r5
 8006b0a:	46ab      	mov	fp, r5
 8006b0c:	9307      	str	r3, [sp, #28]
 8006b0e:	4bc6      	ldr	r3, [pc, #792]	; (8006e28 <__ieee754_pow+0x768>)
 8006b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b14:	ed93 7b00 	vldr	d7, [r3]
 8006b18:	eeb0 9a47 	vmov.f32	s18, s14
 8006b1c:	eef0 9a67 	vmov.f32	s19, s15
 8006b20:	ec53 2b17 	vmov	r2, r3, d7
 8006b24:	f7f9 fb94 	bl	8000250 <__aeabi_dsub>
 8006b28:	4652      	mov	r2, sl
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	462b      	mov	r3, r5
 8006b30:	106d      	asrs	r5, r5, #1
 8006b32:	ec51 0b19 	vmov	r0, r1, d9
 8006b36:	f7f9 fb8d 	bl	8000254 <__adddf3>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	2000      	movs	r0, #0
 8006b40:	49ba      	ldr	r1, [pc, #744]	; (8006e2c <__ieee754_pow+0x76c>)
 8006b42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006b46:	f7f9 fe65 	bl	8000814 <__aeabi_ddiv>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006b52:	ec41 0b1a 	vmov	d10, r0, r1
 8006b56:	4630      	mov	r0, r6
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7f9 fd31 	bl	80005c0 <__aeabi_dmul>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2200      	movs	r2, #0
 8006b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b66:	9302      	str	r3, [sp, #8]
 8006b68:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b74:	ec41 0b18 	vmov	d8, r0, r1
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	f7f9 fd20 	bl	80005c0 <__aeabi_dmul>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 fb62 	bl	8000250 <__aeabi_dsub>
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	4620      	mov	r0, r4
 8006b92:	4629      	mov	r1, r5
 8006b94:	ec53 2b19 	vmov	r2, r3, d9
 8006b98:	f7f9 fb5a 	bl	8000250 <__aeabi_dsub>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	f7f9 fb54 	bl	8000250 <__aeabi_dsub>
 8006ba8:	4642      	mov	r2, r8
 8006baa:	464b      	mov	r3, r9
 8006bac:	f7f9 fd08 	bl	80005c0 <__aeabi_dmul>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 fb4a 	bl	8000250 <__aeabi_dsub>
 8006bbc:	ec53 2b1a 	vmov	r2, r3, d10
 8006bc0:	f7f9 fcfe 	bl	80005c0 <__aeabi_dmul>
 8006bc4:	ec53 2b18 	vmov	r2, r3, d8
 8006bc8:	ec41 0b19 	vmov	d9, r0, r1
 8006bcc:	ec51 0b18 	vmov	r0, r1, d8
 8006bd0:	f7f9 fcf6 	bl	80005c0 <__aeabi_dmul>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	a37b      	add	r3, pc, #492	; (adr r3, 8006dc8 <__ieee754_pow+0x708>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 fcef 	bl	80005c0 <__aeabi_dmul>
 8006be2:	a37b      	add	r3, pc, #492	; (adr r3, 8006dd0 <__ieee754_pow+0x710>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fb34 	bl	8000254 <__adddf3>
 8006bec:	4622      	mov	r2, r4
 8006bee:	462b      	mov	r3, r5
 8006bf0:	f7f9 fce6 	bl	80005c0 <__aeabi_dmul>
 8006bf4:	a378      	add	r3, pc, #480	; (adr r3, 8006dd8 <__ieee754_pow+0x718>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fb2b 	bl	8000254 <__adddf3>
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	f7f9 fcdd 	bl	80005c0 <__aeabi_dmul>
 8006c06:	a376      	add	r3, pc, #472	; (adr r3, 8006de0 <__ieee754_pow+0x720>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f7f9 fb22 	bl	8000254 <__adddf3>
 8006c10:	4622      	mov	r2, r4
 8006c12:	462b      	mov	r3, r5
 8006c14:	f7f9 fcd4 	bl	80005c0 <__aeabi_dmul>
 8006c18:	a373      	add	r3, pc, #460	; (adr r3, 8006de8 <__ieee754_pow+0x728>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f7f9 fb19 	bl	8000254 <__adddf3>
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	f7f9 fccb 	bl	80005c0 <__aeabi_dmul>
 8006c2a:	a371      	add	r3, pc, #452	; (adr r3, 8006df0 <__ieee754_pow+0x730>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 fb10 	bl	8000254 <__adddf3>
 8006c34:	4606      	mov	r6, r0
 8006c36:	460f      	mov	r7, r1
 8006c38:	4622      	mov	r2, r4
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fcbe 	bl	80005c0 <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fcb8 	bl	80005c0 <__aeabi_dmul>
 8006c50:	4642      	mov	r2, r8
 8006c52:	4604      	mov	r4, r0
 8006c54:	460d      	mov	r5, r1
 8006c56:	464b      	mov	r3, r9
 8006c58:	ec51 0b18 	vmov	r0, r1, d8
 8006c5c:	f7f9 fafa 	bl	8000254 <__adddf3>
 8006c60:	ec53 2b19 	vmov	r2, r3, d9
 8006c64:	f7f9 fcac 	bl	80005c0 <__aeabi_dmul>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	462b      	mov	r3, r5
 8006c6c:	f7f9 faf2 	bl	8000254 <__adddf3>
 8006c70:	4642      	mov	r2, r8
 8006c72:	4682      	mov	sl, r0
 8006c74:	468b      	mov	fp, r1
 8006c76:	464b      	mov	r3, r9
 8006c78:	4640      	mov	r0, r8
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	f7f9 fca0 	bl	80005c0 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	4b6b      	ldr	r3, [pc, #428]	; (8006e30 <__ieee754_pow+0x770>)
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	f7f9 fae4 	bl	8000254 <__adddf3>
 8006c8c:	4652      	mov	r2, sl
 8006c8e:	465b      	mov	r3, fp
 8006c90:	f7f9 fae0 	bl	8000254 <__adddf3>
 8006c94:	2000      	movs	r0, #0
 8006c96:	460d      	mov	r5, r1
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	f7f9 fc8d 	bl	80005c0 <__aeabi_dmul>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4680      	mov	r8, r0
 8006caa:	4689      	mov	r9, r1
 8006cac:	4b60      	ldr	r3, [pc, #384]	; (8006e30 <__ieee754_pow+0x770>)
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7f9 facd 	bl	8000250 <__aeabi_dsub>
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	463b      	mov	r3, r7
 8006cba:	f7f9 fac9 	bl	8000250 <__aeabi_dsub>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	f7f9 fac3 	bl	8000250 <__aeabi_dsub>
 8006cca:	ec53 2b18 	vmov	r2, r3, d8
 8006cce:	f7f9 fc77 	bl	80005c0 <__aeabi_dmul>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	462b      	mov	r3, r5
 8006cda:	ec51 0b19 	vmov	r0, r1, d9
 8006cde:	f7f9 fc6f 	bl	80005c0 <__aeabi_dmul>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 fab3 	bl	8000254 <__adddf3>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 faab 	bl	8000254 <__adddf3>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	460d      	mov	r5, r1
 8006d02:	4604      	mov	r4, r0
 8006d04:	a33c      	add	r3, pc, #240	; (adr r3, 8006df8 <__ieee754_pow+0x738>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f7f9 fc59 	bl	80005c0 <__aeabi_dmul>
 8006d0e:	4642      	mov	r2, r8
 8006d10:	464b      	mov	r3, r9
 8006d12:	ec41 0b18 	vmov	d8, r0, r1
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fa99 	bl	8000250 <__aeabi_dsub>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4630      	mov	r0, r6
 8006d24:	4639      	mov	r1, r7
 8006d26:	f7f9 fa93 	bl	8000250 <__aeabi_dsub>
 8006d2a:	a335      	add	r3, pc, #212	; (adr r3, 8006e00 <__ieee754_pow+0x740>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f7f9 fc46 	bl	80005c0 <__aeabi_dmul>
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	a332      	add	r3, pc, #200	; (adr r3, 8006e08 <__ieee754_pow+0x748>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fc3d 	bl	80005c0 <__aeabi_dmul>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f7f9 fa81 	bl	8000254 <__adddf3>
 8006d52:	9a07      	ldr	r2, [sp, #28]
 8006d54:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <__ieee754_pow+0x774>)
 8006d56:	4413      	add	r3, r2
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f7f9 fa7a 	bl	8000254 <__adddf3>
 8006d60:	4682      	mov	sl, r0
 8006d62:	9805      	ldr	r0, [sp, #20]
 8006d64:	468b      	mov	fp, r1
 8006d66:	f7f9 fbc1 	bl	80004ec <__aeabi_i2d>
 8006d6a:	9a07      	ldr	r2, [sp, #28]
 8006d6c:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <__ieee754_pow+0x778>)
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	4413      	add	r3, r2
 8006d74:	4652      	mov	r2, sl
 8006d76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d7a:	ec51 0b18 	vmov	r0, r1, d8
 8006d7e:	465b      	mov	r3, fp
 8006d80:	f7f9 fa68 	bl	8000254 <__adddf3>
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	f7f9 fa64 	bl	8000254 <__adddf3>
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	463b      	mov	r3, r7
 8006d90:	f7f9 fa60 	bl	8000254 <__adddf3>
 8006d94:	2000      	movs	r0, #0
 8006d96:	4632      	mov	r2, r6
 8006d98:	463b      	mov	r3, r7
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	f7f9 fa57 	bl	8000250 <__aeabi_dsub>
 8006da2:	4642      	mov	r2, r8
 8006da4:	464b      	mov	r3, r9
 8006da6:	f7f9 fa53 	bl	8000250 <__aeabi_dsub>
 8006daa:	ec53 2b18 	vmov	r2, r3, d8
 8006dae:	f7f9 fa4f 	bl	8000250 <__aeabi_dsub>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4650      	mov	r0, sl
 8006db8:	4659      	mov	r1, fp
 8006dba:	e610      	b.n	80069de <__ieee754_pow+0x31e>
 8006dbc:	2401      	movs	r4, #1
 8006dbe:	e6a1      	b.n	8006b04 <__ieee754_pow+0x444>
 8006dc0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006e10 <__ieee754_pow+0x750>
 8006dc4:	e617      	b.n	80069f6 <__ieee754_pow+0x336>
 8006dc6:	bf00      	nop
 8006dc8:	4a454eef 	.word	0x4a454eef
 8006dcc:	3fca7e28 	.word	0x3fca7e28
 8006dd0:	93c9db65 	.word	0x93c9db65
 8006dd4:	3fcd864a 	.word	0x3fcd864a
 8006dd8:	a91d4101 	.word	0xa91d4101
 8006ddc:	3fd17460 	.word	0x3fd17460
 8006de0:	518f264d 	.word	0x518f264d
 8006de4:	3fd55555 	.word	0x3fd55555
 8006de8:	db6fabff 	.word	0xdb6fabff
 8006dec:	3fdb6db6 	.word	0x3fdb6db6
 8006df0:	33333303 	.word	0x33333303
 8006df4:	3fe33333 	.word	0x3fe33333
 8006df8:	e0000000 	.word	0xe0000000
 8006dfc:	3feec709 	.word	0x3feec709
 8006e00:	dc3a03fd 	.word	0xdc3a03fd
 8006e04:	3feec709 	.word	0x3feec709
 8006e08:	145b01f5 	.word	0x145b01f5
 8006e0c:	be3e2fe0 	.word	0xbe3e2fe0
 8006e10:	00000000 	.word	0x00000000
 8006e14:	3ff00000 	.word	0x3ff00000
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	43400000 	.word	0x43400000
 8006e20:	0003988e 	.word	0x0003988e
 8006e24:	000bb679 	.word	0x000bb679
 8006e28:	08007648 	.word	0x08007648
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	40080000 	.word	0x40080000
 8006e34:	08007668 	.word	0x08007668
 8006e38:	08007658 	.word	0x08007658
 8006e3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007114 <__ieee754_pow+0xa54>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 fa05 	bl	8000254 <__adddf3>
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	ec41 0b1a 	vmov	d10, r0, r1
 8006e52:	4630      	mov	r0, r6
 8006e54:	4639      	mov	r1, r7
 8006e56:	f7f9 f9fb 	bl	8000250 <__aeabi_dsub>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	ec51 0b1a 	vmov	r0, r1, d10
 8006e62:	f7f9 fe3d 	bl	8000ae0 <__aeabi_dcmpgt>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f47f ae04 	bne.w	8006a74 <__ieee754_pow+0x3b4>
 8006e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e70:	4aa3      	ldr	r2, [pc, #652]	; (8007100 <__ieee754_pow+0xa40>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	f340 8109 	ble.w	800708a <__ieee754_pow+0x9ca>
 8006e78:	151b      	asrs	r3, r3, #20
 8006e7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006e7e:	4ea1      	ldr	r6, [pc, #644]	; (8007104 <__ieee754_pow+0xa44>)
 8006e80:	2000      	movs	r0, #0
 8006e82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006e86:	f1bb 0f00 	cmp.w	fp, #0
 8006e8a:	fa4a f303 	asr.w	r3, sl, r3
 8006e8e:	445b      	add	r3, fp
 8006e90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006e94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006e98:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006e9c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006ea0:	fa46 f602 	asr.w	r6, r6, r2
 8006ea4:	f1c2 0214 	rsb	r2, r2, #20
 8006ea8:	ea23 0106 	bic.w	r1, r3, r6
 8006eac:	fa4a fa02 	asr.w	sl, sl, r2
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	bfb8      	it	lt
 8006eba:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ebe:	f7f9 f9c7 	bl	8000250 <__aeabi_dsub>
 8006ec2:	ec41 0b19 	vmov	d9, r0, r1
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	464b      	mov	r3, r9
 8006eca:	ec51 0b19 	vmov	r0, r1, d9
 8006ece:	f7f9 f9c1 	bl	8000254 <__adddf3>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	a379      	add	r3, pc, #484	; (adr r3, 80070c0 <__ieee754_pow+0xa00>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 fb6f 	bl	80005c0 <__aeabi_dmul>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	ec53 2b19 	vmov	r2, r3, d9
 8006eee:	f7f9 f9af 	bl	8000250 <__aeabi_dsub>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 f9a9 	bl	8000250 <__aeabi_dsub>
 8006efe:	a372      	add	r3, pc, #456	; (adr r3, 80070c8 <__ieee754_pow+0xa08>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 fb5c 	bl	80005c0 <__aeabi_dmul>
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4689      	mov	r9, r1
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	a36f      	add	r3, pc, #444	; (adr r3, 80070d0 <__ieee754_pow+0xa10>)
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 fb53 	bl	80005c0 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 f997 	bl	8000254 <__adddf3>
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	f7f9 f98f 	bl	8000254 <__adddf3>
 8006f36:	4632      	mov	r2, r6
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4689      	mov	r9, r1
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	f7f9 f987 	bl	8000250 <__aeabi_dsub>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 f981 	bl	8000250 <__aeabi_dsub>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	464b      	mov	r3, r9
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fb31 	bl	80005c0 <__aeabi_dmul>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	a35d      	add	r3, pc, #372	; (adr r3, 80070d8 <__ieee754_pow+0xa18>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f7f9 fb2a 	bl	80005c0 <__aeabi_dmul>
 8006f6c:	a35c      	add	r3, pc, #368	; (adr r3, 80070e0 <__ieee754_pow+0xa20>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 f96d 	bl	8000250 <__aeabi_dsub>
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	f7f9 fb21 	bl	80005c0 <__aeabi_dmul>
 8006f7e:	a35a      	add	r3, pc, #360	; (adr r3, 80070e8 <__ieee754_pow+0xa28>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 f966 	bl	8000254 <__adddf3>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f7f9 fb18 	bl	80005c0 <__aeabi_dmul>
 8006f90:	a357      	add	r3, pc, #348	; (adr r3, 80070f0 <__ieee754_pow+0xa30>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f95b 	bl	8000250 <__aeabi_dsub>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	f7f9 fb0f 	bl	80005c0 <__aeabi_dmul>
 8006fa2:	a355      	add	r3, pc, #340	; (adr r3, 80070f8 <__ieee754_pow+0xa38>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f954 	bl	8000254 <__adddf3>
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f7f9 fb06 	bl	80005c0 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 f948 	bl	8000250 <__aeabi_dsub>
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 faf8 	bl	80005c0 <__aeabi_dmul>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fd6:	ec41 0b19 	vmov	d9, r0, r1
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 f937 	bl	8000250 <__aeabi_dsub>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	ec51 0b19 	vmov	r0, r1, d9
 8006fea:	f7f9 fc13 	bl	8000814 <__aeabi_ddiv>
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fae1 	bl	80005c0 <__aeabi_dmul>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	f7f9 f927 	bl	8000254 <__adddf3>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 f91f 	bl	8000250 <__aeabi_dsub>
 8007012:	4642      	mov	r2, r8
 8007014:	464b      	mov	r3, r9
 8007016:	f7f9 f91b 	bl	8000250 <__aeabi_dsub>
 800701a:	460b      	mov	r3, r1
 800701c:	4602      	mov	r2, r0
 800701e:	493a      	ldr	r1, [pc, #232]	; (8007108 <__ieee754_pow+0xa48>)
 8007020:	2000      	movs	r0, #0
 8007022:	f7f9 f915 	bl	8000250 <__aeabi_dsub>
 8007026:	ec41 0b10 	vmov	d0, r0, r1
 800702a:	ee10 3a90 	vmov	r3, s1
 800702e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007036:	da2b      	bge.n	8007090 <__ieee754_pow+0x9d0>
 8007038:	4650      	mov	r0, sl
 800703a:	f000 f96d 	bl	8007318 <scalbn>
 800703e:	ec51 0b10 	vmov	r0, r1, d0
 8007042:	ec53 2b18 	vmov	r2, r3, d8
 8007046:	f7ff bbec 	b.w	8006822 <__ieee754_pow+0x162>
 800704a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800704e:	4b2f      	ldr	r3, [pc, #188]	; (800710c <__ieee754_pow+0xa4c>)
 8007050:	429e      	cmp	r6, r3
 8007052:	f77f af0b 	ble.w	8006e6c <__ieee754_pow+0x7ac>
 8007056:	4b2e      	ldr	r3, [pc, #184]	; (8007110 <__ieee754_pow+0xa50>)
 8007058:	440b      	add	r3, r1
 800705a:	4303      	orrs	r3, r0
 800705c:	d009      	beq.n	8007072 <__ieee754_pow+0x9b2>
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	ec51 0b18 	vmov	r0, r1, d8
 8007066:	f7f9 fd1d 	bl	8000aa4 <__aeabi_dcmplt>
 800706a:	3800      	subs	r0, #0
 800706c:	bf18      	it	ne
 800706e:	2001      	movne	r0, #1
 8007070:	e446      	b.n	8006900 <__ieee754_pow+0x240>
 8007072:	4622      	mov	r2, r4
 8007074:	462b      	mov	r3, r5
 8007076:	f7f9 f8eb 	bl	8000250 <__aeabi_dsub>
 800707a:	4642      	mov	r2, r8
 800707c:	464b      	mov	r3, r9
 800707e:	f7f9 fd25 	bl	8000acc <__aeabi_dcmpge>
 8007082:	2800      	cmp	r0, #0
 8007084:	f43f aef2 	beq.w	8006e6c <__ieee754_pow+0x7ac>
 8007088:	e7e9      	b.n	800705e <__ieee754_pow+0x99e>
 800708a:	f04f 0a00 	mov.w	sl, #0
 800708e:	e71a      	b.n	8006ec6 <__ieee754_pow+0x806>
 8007090:	ec51 0b10 	vmov	r0, r1, d0
 8007094:	4619      	mov	r1, r3
 8007096:	e7d4      	b.n	8007042 <__ieee754_pow+0x982>
 8007098:	2000      	movs	r0, #0
 800709a:	491b      	ldr	r1, [pc, #108]	; (8007108 <__ieee754_pow+0xa48>)
 800709c:	f7ff bb2f 	b.w	80066fe <__ieee754_pow+0x3e>
 80070a0:	2000      	movs	r0, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	f7ff bb2b 	b.w	80066fe <__ieee754_pow+0x3e>
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7ff bb27 	b.w	80066fe <__ieee754_pow+0x3e>
 80070b0:	9204      	str	r2, [sp, #16]
 80070b2:	f7ff bb79 	b.w	80067a8 <__ieee754_pow+0xe8>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f7ff bb63 	b.w	8006782 <__ieee754_pow+0xc2>
 80070bc:	f3af 8000 	nop.w
 80070c0:	00000000 	.word	0x00000000
 80070c4:	3fe62e43 	.word	0x3fe62e43
 80070c8:	fefa39ef 	.word	0xfefa39ef
 80070cc:	3fe62e42 	.word	0x3fe62e42
 80070d0:	0ca86c39 	.word	0x0ca86c39
 80070d4:	be205c61 	.word	0xbe205c61
 80070d8:	72bea4d0 	.word	0x72bea4d0
 80070dc:	3e663769 	.word	0x3e663769
 80070e0:	c5d26bf1 	.word	0xc5d26bf1
 80070e4:	3ebbbd41 	.word	0x3ebbbd41
 80070e8:	af25de2c 	.word	0xaf25de2c
 80070ec:	3f11566a 	.word	0x3f11566a
 80070f0:	16bebd93 	.word	0x16bebd93
 80070f4:	3f66c16c 	.word	0x3f66c16c
 80070f8:	5555553e 	.word	0x5555553e
 80070fc:	3fc55555 	.word	0x3fc55555
 8007100:	3fe00000 	.word	0x3fe00000
 8007104:	000fffff 	.word	0x000fffff
 8007108:	3ff00000 	.word	0x3ff00000
 800710c:	4090cbff 	.word	0x4090cbff
 8007110:	3f6f3400 	.word	0x3f6f3400
 8007114:	652b82fe 	.word	0x652b82fe
 8007118:	3c971547 	.word	0x3c971547

0800711c <__ieee754_sqrt>:
 800711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007120:	4e59      	ldr	r6, [pc, #356]	; (8007288 <__ieee754_sqrt+0x16c>)
 8007122:	ee10 0a10 	vmov	r0, s0
 8007126:	ee10 3a10 	vmov	r3, s0
 800712a:	ec55 4b10 	vmov	r4, r5, d0
 800712e:	43ae      	bics	r6, r5
 8007130:	462a      	mov	r2, r5
 8007132:	4629      	mov	r1, r5
 8007134:	d110      	bne.n	8007158 <__ieee754_sqrt+0x3c>
 8007136:	ee10 2a10 	vmov	r2, s0
 800713a:	462b      	mov	r3, r5
 800713c:	f7f9 fa40 	bl	80005c0 <__aeabi_dmul>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 f884 	bl	8000254 <__adddf3>
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	ec45 4b10 	vmov	d0, r4, r5
 8007154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007158:	2d00      	cmp	r5, #0
 800715a:	dc10      	bgt.n	800717e <__ieee754_sqrt+0x62>
 800715c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007160:	4330      	orrs	r0, r6
 8007162:	d0f5      	beq.n	8007150 <__ieee754_sqrt+0x34>
 8007164:	b15d      	cbz	r5, 800717e <__ieee754_sqrt+0x62>
 8007166:	ee10 2a10 	vmov	r2, s0
 800716a:	462b      	mov	r3, r5
 800716c:	ee10 0a10 	vmov	r0, s0
 8007170:	f7f9 f86e 	bl	8000250 <__aeabi_dsub>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	f7f9 fb4c 	bl	8000814 <__aeabi_ddiv>
 800717c:	e7e6      	b.n	800714c <__ieee754_sqrt+0x30>
 800717e:	1512      	asrs	r2, r2, #20
 8007180:	d07a      	beq.n	8007278 <__ieee754_sqrt+0x15c>
 8007182:	07d4      	lsls	r4, r2, #31
 8007184:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007188:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800718c:	f04f 0400 	mov.w	r4, #0
 8007190:	bf58      	it	pl
 8007192:	0fda      	lsrpl	r2, r3, #31
 8007194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007198:	bf58      	it	pl
 800719a:	005b      	lslpl	r3, r3, #1
 800719c:	f04f 0516 	mov.w	r5, #22
 80071a0:	bf58      	it	pl
 80071a2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80071a6:	4620      	mov	r0, r4
 80071a8:	0fda      	lsrs	r2, r3, #31
 80071aa:	107f      	asrs	r7, r7, #1
 80071ac:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80071b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	1886      	adds	r6, r0, r2
 80071b8:	428e      	cmp	r6, r1
 80071ba:	bfde      	ittt	le
 80071bc:	1b89      	suble	r1, r1, r6
 80071be:	18b0      	addle	r0, r6, r2
 80071c0:	18a4      	addle	r4, r4, r2
 80071c2:	3d01      	subs	r5, #1
 80071c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80071c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80071cc:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80071d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071d4:	d1ef      	bne.n	80071b6 <__ieee754_sqrt+0x9a>
 80071d6:	462a      	mov	r2, r5
 80071d8:	f04f 0e20 	mov.w	lr, #32
 80071dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80071e0:	4281      	cmp	r1, r0
 80071e2:	eb06 0c05 	add.w	ip, r6, r5
 80071e6:	dc02      	bgt.n	80071ee <__ieee754_sqrt+0xd2>
 80071e8:	d113      	bne.n	8007212 <__ieee754_sqrt+0xf6>
 80071ea:	459c      	cmp	ip, r3
 80071ec:	d811      	bhi.n	8007212 <__ieee754_sqrt+0xf6>
 80071ee:	f1bc 0f00 	cmp.w	ip, #0
 80071f2:	eb0c 0506 	add.w	r5, ip, r6
 80071f6:	da44      	bge.n	8007282 <__ieee754_sqrt+0x166>
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	db42      	blt.n	8007282 <__ieee754_sqrt+0x166>
 80071fc:	f100 0801 	add.w	r8, r0, #1
 8007200:	1a09      	subs	r1, r1, r0
 8007202:	459c      	cmp	ip, r3
 8007204:	4432      	add	r2, r6
 8007206:	eba3 030c 	sub.w	r3, r3, ip
 800720a:	bf88      	it	hi
 800720c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007210:	4640      	mov	r0, r8
 8007212:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007216:	f1be 0e01 	subs.w	lr, lr, #1
 800721a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800721e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007222:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007226:	d1db      	bne.n	80071e0 <__ieee754_sqrt+0xc4>
 8007228:	430b      	orrs	r3, r1
 800722a:	d006      	beq.n	800723a <__ieee754_sqrt+0x11e>
 800722c:	1c50      	adds	r0, r2, #1
 800722e:	bf13      	iteet	ne
 8007230:	3201      	addne	r2, #1
 8007232:	3401      	addeq	r4, #1
 8007234:	4672      	moveq	r2, lr
 8007236:	f022 0201 	bicne.w	r2, r2, #1
 800723a:	1063      	asrs	r3, r4, #1
 800723c:	07e1      	lsls	r1, r4, #31
 800723e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007242:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007246:	bf48      	it	mi
 8007248:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800724c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007250:	4614      	mov	r4, r2
 8007252:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007256:	e77b      	b.n	8007150 <__ieee754_sqrt+0x34>
 8007258:	0ad9      	lsrs	r1, r3, #11
 800725a:	3815      	subs	r0, #21
 800725c:	055b      	lsls	r3, r3, #21
 800725e:	2900      	cmp	r1, #0
 8007260:	d0fa      	beq.n	8007258 <__ieee754_sqrt+0x13c>
 8007262:	02cd      	lsls	r5, r1, #11
 8007264:	d50a      	bpl.n	800727c <__ieee754_sqrt+0x160>
 8007266:	f1c2 0420 	rsb	r4, r2, #32
 800726a:	1e55      	subs	r5, r2, #1
 800726c:	fa23 f404 	lsr.w	r4, r3, r4
 8007270:	4093      	lsls	r3, r2
 8007272:	1b42      	subs	r2, r0, r5
 8007274:	4321      	orrs	r1, r4
 8007276:	e784      	b.n	8007182 <__ieee754_sqrt+0x66>
 8007278:	4610      	mov	r0, r2
 800727a:	e7f0      	b.n	800725e <__ieee754_sqrt+0x142>
 800727c:	0049      	lsls	r1, r1, #1
 800727e:	3201      	adds	r2, #1
 8007280:	e7ef      	b.n	8007262 <__ieee754_sqrt+0x146>
 8007282:	4680      	mov	r8, r0
 8007284:	e7bc      	b.n	8007200 <__ieee754_sqrt+0xe4>
 8007286:	bf00      	nop
 8007288:	7ff00000 	.word	0x7ff00000

0800728c <with_errno>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	4616      	mov	r6, r2
 8007294:	f000 f8ca 	bl	800742c <__errno>
 8007298:	4629      	mov	r1, r5
 800729a:	6006      	str	r6, [r0, #0]
 800729c:	4620      	mov	r0, r4
 800729e:	bd70      	pop	{r4, r5, r6, pc}

080072a0 <xflow>:
 80072a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072a2:	4614      	mov	r4, r2
 80072a4:	461d      	mov	r5, r3
 80072a6:	b108      	cbz	r0, 80072ac <xflow+0xc>
 80072a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	4620      	mov	r0, r4
 80072ae:	4629      	mov	r1, r5
 80072b0:	e9cd 2300 	strd	r2, r3, [sp]
 80072b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072b8:	f7f9 f982 	bl	80005c0 <__aeabi_dmul>
 80072bc:	2222      	movs	r2, #34	; 0x22
 80072be:	b003      	add	sp, #12
 80072c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072c4:	f7ff bfe2 	b.w	800728c <with_errno>

080072c8 <__math_uflow>:
 80072c8:	b508      	push	{r3, lr}
 80072ca:	2200      	movs	r2, #0
 80072cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072d0:	f7ff ffe6 	bl	80072a0 <xflow>
 80072d4:	ec41 0b10 	vmov	d0, r0, r1
 80072d8:	bd08      	pop	{r3, pc}

080072da <__math_oflow>:
 80072da:	b508      	push	{r3, lr}
 80072dc:	2200      	movs	r2, #0
 80072de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80072e2:	f7ff ffdd 	bl	80072a0 <xflow>
 80072e6:	ec41 0b10 	vmov	d0, r0, r1
 80072ea:	bd08      	pop	{r3, pc}

080072ec <fabs>:
 80072ec:	ec51 0b10 	vmov	r0, r1, d0
 80072f0:	ee10 2a10 	vmov	r2, s0
 80072f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072f8:	ec43 2b10 	vmov	d0, r2, r3
 80072fc:	4770      	bx	lr

080072fe <finite>:
 80072fe:	b082      	sub	sp, #8
 8007300:	ed8d 0b00 	vstr	d0, [sp]
 8007304:	9801      	ldr	r0, [sp, #4]
 8007306:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800730a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800730e:	0fc0      	lsrs	r0, r0, #31
 8007310:	b002      	add	sp, #8
 8007312:	4770      	bx	lr
 8007314:	0000      	movs	r0, r0
	...

08007318 <scalbn>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	ec55 4b10 	vmov	r4, r5, d0
 800731e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007322:	4606      	mov	r6, r0
 8007324:	462b      	mov	r3, r5
 8007326:	b99a      	cbnz	r2, 8007350 <scalbn+0x38>
 8007328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800732c:	4323      	orrs	r3, r4
 800732e:	d036      	beq.n	800739e <scalbn+0x86>
 8007330:	4b39      	ldr	r3, [pc, #228]	; (8007418 <scalbn+0x100>)
 8007332:	4629      	mov	r1, r5
 8007334:	2200      	movs	r2, #0
 8007336:	ee10 0a10 	vmov	r0, s0
 800733a:	f7f9 f941 	bl	80005c0 <__aeabi_dmul>
 800733e:	4b37      	ldr	r3, [pc, #220]	; (800741c <scalbn+0x104>)
 8007340:	4604      	mov	r4, r0
 8007342:	460d      	mov	r5, r1
 8007344:	429e      	cmp	r6, r3
 8007346:	da10      	bge.n	800736a <scalbn+0x52>
 8007348:	a32b      	add	r3, pc, #172	; (adr r3, 80073f8 <scalbn+0xe0>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	e03a      	b.n	80073c6 <scalbn+0xae>
 8007350:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007354:	428a      	cmp	r2, r1
 8007356:	d10c      	bne.n	8007372 <scalbn+0x5a>
 8007358:	ee10 2a10 	vmov	r2, s0
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f8 ff78 	bl	8000254 <__adddf3>
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	e019      	b.n	800739e <scalbn+0x86>
 800736a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800736e:	460b      	mov	r3, r1
 8007370:	3a36      	subs	r2, #54	; 0x36
 8007372:	4432      	add	r2, r6
 8007374:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007378:	428a      	cmp	r2, r1
 800737a:	dd08      	ble.n	800738e <scalbn+0x76>
 800737c:	2d00      	cmp	r5, #0
 800737e:	a120      	add	r1, pc, #128	; (adr r1, 8007400 <scalbn+0xe8>)
 8007380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007384:	da1c      	bge.n	80073c0 <scalbn+0xa8>
 8007386:	a120      	add	r1, pc, #128	; (adr r1, 8007408 <scalbn+0xf0>)
 8007388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800738c:	e018      	b.n	80073c0 <scalbn+0xa8>
 800738e:	2a00      	cmp	r2, #0
 8007390:	dd08      	ble.n	80073a4 <scalbn+0x8c>
 8007392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800739a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800739e:	ec45 4b10 	vmov	d0, r4, r5
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80073a8:	da19      	bge.n	80073de <scalbn+0xc6>
 80073aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073ae:	429e      	cmp	r6, r3
 80073b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80073b4:	dd0a      	ble.n	80073cc <scalbn+0xb4>
 80073b6:	a112      	add	r1, pc, #72	; (adr r1, 8007400 <scalbn+0xe8>)
 80073b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e2      	bne.n	8007386 <scalbn+0x6e>
 80073c0:	a30f      	add	r3, pc, #60	; (adr r3, 8007400 <scalbn+0xe8>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f9 f8fb 	bl	80005c0 <__aeabi_dmul>
 80073ca:	e7cb      	b.n	8007364 <scalbn+0x4c>
 80073cc:	a10a      	add	r1, pc, #40	; (adr r1, 80073f8 <scalbn+0xe0>)
 80073ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0b8      	beq.n	8007348 <scalbn+0x30>
 80073d6:	a10e      	add	r1, pc, #56	; (adr r1, 8007410 <scalbn+0xf8>)
 80073d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073dc:	e7b4      	b.n	8007348 <scalbn+0x30>
 80073de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073e2:	3236      	adds	r2, #54	; 0x36
 80073e4:	4620      	mov	r0, r4
 80073e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073ea:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <scalbn+0x108>)
 80073f2:	e7e8      	b.n	80073c6 <scalbn+0xae>
 80073f4:	f3af 8000 	nop.w
 80073f8:	c2f8f359 	.word	0xc2f8f359
 80073fc:	01a56e1f 	.word	0x01a56e1f
 8007400:	8800759c 	.word	0x8800759c
 8007404:	7e37e43c 	.word	0x7e37e43c
 8007408:	8800759c 	.word	0x8800759c
 800740c:	fe37e43c 	.word	0xfe37e43c
 8007410:	c2f8f359 	.word	0xc2f8f359
 8007414:	81a56e1f 	.word	0x81a56e1f
 8007418:	43500000 	.word	0x43500000
 800741c:	ffff3cb0 	.word	0xffff3cb0
 8007420:	3c900000 	.word	0x3c900000

08007424 <atoi>:
 8007424:	220a      	movs	r2, #10
 8007426:	2100      	movs	r1, #0
 8007428:	f000 b8b4 	b.w	8007594 <strtol>

0800742c <__errno>:
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <__errno+0x8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000010 	.word	0x20000010

08007438 <__libc_init_array>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4d0d      	ldr	r5, [pc, #52]	; (8007470 <__libc_init_array+0x38>)
 800743c:	2600      	movs	r6, #0
 800743e:	4c0d      	ldr	r4, [pc, #52]	; (8007474 <__libc_init_array+0x3c>)
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	42a6      	cmp	r6, r4
 8007446:	d109      	bne.n	800745c <__libc_init_array+0x24>
 8007448:	4d0b      	ldr	r5, [pc, #44]	; (8007478 <__libc_init_array+0x40>)
 800744a:	2600      	movs	r6, #0
 800744c:	4c0b      	ldr	r4, [pc, #44]	; (800747c <__libc_init_array+0x44>)
 800744e:	f000 f8ab 	bl	80075a8 <_init>
 8007452:	1b64      	subs	r4, r4, r5
 8007454:	10a4      	asrs	r4, r4, #2
 8007456:	42a6      	cmp	r6, r4
 8007458:	d105      	bne.n	8007466 <__libc_init_array+0x2e>
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007460:	3601      	adds	r6, #1
 8007462:	4798      	blx	r3
 8007464:	e7ee      	b.n	8007444 <__libc_init_array+0xc>
 8007466:	f855 3b04 	ldr.w	r3, [r5], #4
 800746a:	3601      	adds	r6, #1
 800746c:	4798      	blx	r3
 800746e:	e7f2      	b.n	8007456 <__libc_init_array+0x1e>
 8007470:	08007784 	.word	0x08007784
 8007474:	08007784 	.word	0x08007784
 8007478:	08007784 	.word	0x08007784
 800747c:	0800778c 	.word	0x0800778c

08007480 <memset>:
 8007480:	4402      	add	r2, r0
 8007482:	4603      	mov	r3, r0
 8007484:	4293      	cmp	r3, r2
 8007486:	d100      	bne.n	800748a <memset+0xa>
 8007488:	4770      	bx	lr
 800748a:	f803 1b01 	strb.w	r1, [r3], #1
 800748e:	e7f9      	b.n	8007484 <memset+0x4>

08007490 <_strtol_l.constprop.0>:
 8007490:	2b01      	cmp	r3, #1
 8007492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007496:	d001      	beq.n	800749c <_strtol_l.constprop.0+0xc>
 8007498:	2b24      	cmp	r3, #36	; 0x24
 800749a:	d906      	bls.n	80074aa <_strtol_l.constprop.0+0x1a>
 800749c:	f7ff ffc6 	bl	800742c <__errno>
 80074a0:	2316      	movs	r3, #22
 80074a2:	6003      	str	r3, [r0, #0]
 80074a4:	2000      	movs	r0, #0
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	460d      	mov	r5, r1
 80074ac:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8007590 <_strtol_l.constprop.0+0x100>
 80074b0:	462e      	mov	r6, r5
 80074b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80074ba:	f017 0708 	ands.w	r7, r7, #8
 80074be:	d1f7      	bne.n	80074b0 <_strtol_l.constprop.0+0x20>
 80074c0:	2c2d      	cmp	r4, #45	; 0x2d
 80074c2:	d132      	bne.n	800752a <_strtol_l.constprop.0+0x9a>
 80074c4:	782c      	ldrb	r4, [r5, #0]
 80074c6:	2701      	movs	r7, #1
 80074c8:	1cb5      	adds	r5, r6, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d05b      	beq.n	8007586 <_strtol_l.constprop.0+0xf6>
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d109      	bne.n	80074e6 <_strtol_l.constprop.0+0x56>
 80074d2:	2c30      	cmp	r4, #48	; 0x30
 80074d4:	d107      	bne.n	80074e6 <_strtol_l.constprop.0+0x56>
 80074d6:	782c      	ldrb	r4, [r5, #0]
 80074d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074dc:	2c58      	cmp	r4, #88	; 0x58
 80074de:	d14d      	bne.n	800757c <_strtol_l.constprop.0+0xec>
 80074e0:	786c      	ldrb	r4, [r5, #1]
 80074e2:	2310      	movs	r3, #16
 80074e4:	3502      	adds	r5, #2
 80074e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074ea:	f04f 0c00 	mov.w	ip, #0
 80074ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80074f2:	4666      	mov	r6, ip
 80074f4:	fbb8 f9f3 	udiv	r9, r8, r3
 80074f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80074fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007500:	f1be 0f09 	cmp.w	lr, #9
 8007504:	d816      	bhi.n	8007534 <_strtol_l.constprop.0+0xa4>
 8007506:	4674      	mov	r4, lr
 8007508:	42a3      	cmp	r3, r4
 800750a:	dd24      	ble.n	8007556 <_strtol_l.constprop.0+0xc6>
 800750c:	f1bc 0f00 	cmp.w	ip, #0
 8007510:	db1e      	blt.n	8007550 <_strtol_l.constprop.0+0xc0>
 8007512:	45b1      	cmp	r9, r6
 8007514:	d31c      	bcc.n	8007550 <_strtol_l.constprop.0+0xc0>
 8007516:	d101      	bne.n	800751c <_strtol_l.constprop.0+0x8c>
 8007518:	45a2      	cmp	sl, r4
 800751a:	db19      	blt.n	8007550 <_strtol_l.constprop.0+0xc0>
 800751c:	fb06 4603 	mla	r6, r6, r3, r4
 8007520:	f04f 0c01 	mov.w	ip, #1
 8007524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007528:	e7e8      	b.n	80074fc <_strtol_l.constprop.0+0x6c>
 800752a:	2c2b      	cmp	r4, #43	; 0x2b
 800752c:	bf04      	itt	eq
 800752e:	782c      	ldrbeq	r4, [r5, #0]
 8007530:	1cb5      	addeq	r5, r6, #2
 8007532:	e7ca      	b.n	80074ca <_strtol_l.constprop.0+0x3a>
 8007534:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007538:	f1be 0f19 	cmp.w	lr, #25
 800753c:	d801      	bhi.n	8007542 <_strtol_l.constprop.0+0xb2>
 800753e:	3c37      	subs	r4, #55	; 0x37
 8007540:	e7e2      	b.n	8007508 <_strtol_l.constprop.0+0x78>
 8007542:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007546:	f1be 0f19 	cmp.w	lr, #25
 800754a:	d804      	bhi.n	8007556 <_strtol_l.constprop.0+0xc6>
 800754c:	3c57      	subs	r4, #87	; 0x57
 800754e:	e7db      	b.n	8007508 <_strtol_l.constprop.0+0x78>
 8007550:	f04f 3cff 	mov.w	ip, #4294967295
 8007554:	e7e6      	b.n	8007524 <_strtol_l.constprop.0+0x94>
 8007556:	f1bc 0f00 	cmp.w	ip, #0
 800755a:	da05      	bge.n	8007568 <_strtol_l.constprop.0+0xd8>
 800755c:	2322      	movs	r3, #34	; 0x22
 800755e:	4646      	mov	r6, r8
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	b942      	cbnz	r2, 8007576 <_strtol_l.constprop.0+0xe6>
 8007564:	4630      	mov	r0, r6
 8007566:	e79e      	b.n	80074a6 <_strtol_l.constprop.0+0x16>
 8007568:	b107      	cbz	r7, 800756c <_strtol_l.constprop.0+0xdc>
 800756a:	4276      	negs	r6, r6
 800756c:	2a00      	cmp	r2, #0
 800756e:	d0f9      	beq.n	8007564 <_strtol_l.constprop.0+0xd4>
 8007570:	f1bc 0f00 	cmp.w	ip, #0
 8007574:	d000      	beq.n	8007578 <_strtol_l.constprop.0+0xe8>
 8007576:	1e69      	subs	r1, r5, #1
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	e7f3      	b.n	8007564 <_strtol_l.constprop.0+0xd4>
 800757c:	2430      	movs	r4, #48	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1b1      	bne.n	80074e6 <_strtol_l.constprop.0+0x56>
 8007582:	2308      	movs	r3, #8
 8007584:	e7af      	b.n	80074e6 <_strtol_l.constprop.0+0x56>
 8007586:	2c30      	cmp	r4, #48	; 0x30
 8007588:	d0a5      	beq.n	80074d6 <_strtol_l.constprop.0+0x46>
 800758a:	230a      	movs	r3, #10
 800758c:	e7ab      	b.n	80074e6 <_strtol_l.constprop.0+0x56>
 800758e:	bf00      	nop
 8007590:	08007679 	.word	0x08007679

08007594 <strtol>:
 8007594:	4613      	mov	r3, r2
 8007596:	460a      	mov	r2, r1
 8007598:	4601      	mov	r1, r0
 800759a:	4802      	ldr	r0, [pc, #8]	; (80075a4 <strtol+0x10>)
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	f7ff bf77 	b.w	8007490 <_strtol_l.constprop.0>
 80075a2:	bf00      	nop
 80075a4:	20000010 	.word	0x20000010

080075a8 <_init>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	bf00      	nop
 80075ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ae:	bc08      	pop	{r3}
 80075b0:	469e      	mov	lr, r3
 80075b2:	4770      	bx	lr

080075b4 <_fini>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr
