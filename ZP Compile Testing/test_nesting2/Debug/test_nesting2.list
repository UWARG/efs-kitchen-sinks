
test_nesting2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a4c  08005a4c  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a54  08005a54  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a58  08005a58  00006a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000005c  08005ab8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08005ab8  000075bc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b65a  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003add  00000000  00000000  000226ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000261d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f5  00000000  00000000  00027808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030060  00000000  00000000  000288fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2fe  00000000  00000000  0005895d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129f9d  00000000  00000000  00072c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000088  00000000  00000000  0019cbf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006194  00000000  00000000  0019cc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001a2e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000005c 	.word	0x2000005c
 8000210:	00000000 	.word	0x00000000
 8000214:	08005984 	.word	0x08005984

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000060 	.word	0x20000060
 8000230:	08005984 	.word	0x08005984

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b97e 	b.w	8000548 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xa8>
 8000270:	428a      	cmp	r2, r1
 8000272:	460f      	mov	r7, r1
 8000274:	4684      	mov	ip, r0
 8000276:	4696      	mov	lr, r2
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	d960      	bls.n	8000340 <__udivmoddi4+0xdc>
 800027e:	b14b      	cbz	r3, 8000294 <__udivmoddi4+0x30>
 8000280:	fa02 fe03 	lsl.w	lr, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa00 fc03 	lsl.w	ip, r0, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000298:	fa1f f48e 	uxth.w	r4, lr
 800029c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002a0:	fbb7 f1f6 	udiv	r1, r7, r6
 80002a4:	fb06 7711 	mls	r7, r6, r1, r7
 80002a8:	fb01 f004 	mul.w	r0, r1, r4
 80002ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d908      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b4:	eb1e 0202 	adds.w	r2, lr, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x60>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f200 812d 	bhi.w	800051e <__udivmoddi4+0x2ba>
 80002c4:	4639      	mov	r1, r7
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fa1f fc8c 	uxth.w	ip, ip
 80002cc:	fbb2 f0f6 	udiv	r0, r2, r6
 80002d0:	fb06 2210 	mls	r2, r6, r0, r2
 80002d4:	fb00 f404 	mul.w	r4, r0, r4
 80002d8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002dc:	4564      	cmp	r4, ip
 80002de:	d908      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002e0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	d202      	bcs.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	4564      	cmp	r4, ip
 80002ec:	f200 811a 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 80002f0:	4610      	mov	r0, r2
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	ebac 0c04 	sub.w	ip, ip, r4
 80002fa:	2100      	movs	r1, #0
 80002fc:	b125      	cbz	r5, 8000308 <__udivmoddi4+0xa4>
 80002fe:	fa2c f303 	lsr.w	r3, ip, r3
 8000302:	2200      	movs	r2, #0
 8000304:	e9c5 3200 	strd	r3, r2, [r5]
 8000308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d905      	bls.n	800031c <__udivmoddi4+0xb8>
 8000310:	b10d      	cbz	r5, 8000316 <__udivmoddi4+0xb2>
 8000312:	e9c5 0100 	strd	r0, r1, [r5]
 8000316:	2100      	movs	r1, #0
 8000318:	4608      	mov	r0, r1
 800031a:	e7f5      	b.n	8000308 <__udivmoddi4+0xa4>
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d14d      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000324:	42a3      	cmp	r3, r4
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4290      	cmp	r0, r2
 800032c:	f080 80ef 	bcs.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4606      	mov	r6, r0
 8000332:	4623      	mov	r3, r4
 8000334:	4608      	mov	r0, r1
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e6      	beq.n	8000308 <__udivmoddi4+0xa4>
 800033a:	e9c5 6300 	strd	r6, r3, [r5]
 800033e:	e7e3      	b.n	8000308 <__udivmoddi4+0xa4>
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 80a2 	bne.w	800048a <__udivmoddi4+0x226>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800034c:	fa1f f68e 	uxth.w	r6, lr
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f4f7 	udiv	r4, r2, r7
 8000356:	fb07 2014 	mls	r0, r7, r4, r2
 800035a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb06 f004 	mul.w	r0, r6, r4
 8000366:	4290      	cmp	r0, r2
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1e 0202 	adds.w	r2, lr, r2
 800036e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4290      	cmp	r0, r2
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80c8 	beq.w	8000518 <__udivmoddi4+0x2b4>
 8000388:	4644      	mov	r4, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fa1f fc8c 	uxth.w	ip, ip
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	fb00 f606 	mul.w	r6, r0, r6
 800039c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003a0:	4566      	cmp	r6, ip
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003a4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x150>
 80003ae:	4566      	cmp	r6, ip
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c6>
 80003b4:	4610      	mov	r0, r2
 80003b6:	ebac 0c06 	sub.w	ip, ip, r6
 80003ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa04 fe01 	lsl.w	lr, r4, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d2:	40f4      	lsrs	r4, r6
 80003d4:	408a      	lsls	r2, r1
 80003d6:	431f      	orrs	r7, r3
 80003d8:	ea4e 030c 	orr.w	r3, lr, ip
 80003dc:	fa00 fe01 	lsl.w	lr, r0, r1
 80003e0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f0:	fb08 4410 	mls	r4, r8, r0, r4
 80003f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f8:	fb00 f90c 	mul.w	r9, r0, ip
 80003fc:	45a1      	cmp	r9, r4
 80003fe:	d90e      	bls.n	800041e <__udivmoddi4+0x1ba>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f100 3aff 	add.w	sl, r0, #4294967295
 8000406:	bf2c      	ite	cs
 8000408:	f04f 0b01 	movcs.w	fp, #1
 800040c:	f04f 0b00 	movcc.w	fp, #0
 8000410:	45a1      	cmp	r9, r4
 8000412:	d903      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000414:	f1bb 0f00 	cmp.w	fp, #0
 8000418:	f000 8093 	beq.w	8000542 <__udivmoddi4+0x2de>
 800041c:	4650      	mov	r0, sl
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f8 	udiv	r3, r4, r8
 800042a:	fb08 4413 	mls	r4, r8, r3, r4
 800042e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000432:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000436:	45a4      	cmp	ip, r4
 8000438:	d906      	bls.n	8000448 <__udivmoddi4+0x1e4>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000440:	d201      	bcs.n	8000446 <__udivmoddi4+0x1e2>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d87a      	bhi.n	800053c <__udivmoddi4+0x2d8>
 8000446:	4643      	mov	r3, r8
 8000448:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	fba0 9802 	umull	r9, r8, r0, r2
 8000454:	4544      	cmp	r4, r8
 8000456:	46cc      	mov	ip, r9
 8000458:	4643      	mov	r3, r8
 800045a:	d302      	bcc.n	8000462 <__udivmoddi4+0x1fe>
 800045c:	d106      	bne.n	800046c <__udivmoddi4+0x208>
 800045e:	45ce      	cmp	lr, r9
 8000460:	d204      	bcs.n	800046c <__udivmoddi4+0x208>
 8000462:	3801      	subs	r0, #1
 8000464:	ebb9 0c02 	subs.w	ip, r9, r2
 8000468:	eb68 0307 	sbc.w	r3, r8, r7
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x222>
 800046e:	ebbe 020c 	subs.w	r2, lr, ip
 8000472:	eb64 0403 	sbc.w	r4, r4, r3
 8000476:	fa04 f606 	lsl.w	r6, r4, r6
 800047a:	fa22 f301 	lsr.w	r3, r2, r1
 800047e:	40cc      	lsrs	r4, r1
 8000480:	431e      	orrs	r6, r3
 8000482:	e9c5 6400 	strd	r6, r4, [r5]
 8000486:	2100      	movs	r1, #0
 8000488:	e73e      	b.n	8000308 <__udivmoddi4+0xa4>
 800048a:	fa02 fe03 	lsl.w	lr, r2, r3
 800048e:	f1c3 0120 	rsb	r1, r3, #32
 8000492:	fa04 f203 	lsl.w	r2, r4, r3
 8000496:	fa00 fc03 	lsl.w	ip, r0, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004a0:	fa20 f101 	lsr.w	r1, r0, r1
 80004a4:	fa1f f68e 	uxth.w	r6, lr
 80004a8:	fbb4 f0f7 	udiv	r0, r4, r7
 80004ac:	430a      	orrs	r2, r1
 80004ae:	fb07 4410 	mls	r4, r7, r0, r4
 80004b2:	0c11      	lsrs	r1, r2, #16
 80004b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004b8:	fb00 f406 	mul.w	r4, r0, r6
 80004bc:	428c      	cmp	r4, r1
 80004be:	d90e      	bls.n	80004de <__udivmoddi4+0x27a>
 80004c0:	eb1e 0101 	adds.w	r1, lr, r1
 80004c4:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c8:	bf2c      	ite	cs
 80004ca:	f04f 0901 	movcs.w	r9, #1
 80004ce:	f04f 0900 	movcc.w	r9, #0
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d902      	bls.n	80004dc <__udivmoddi4+0x278>
 80004d6:	f1b9 0f00 	cmp.w	r9, #0
 80004da:	d02c      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004dc:	4640      	mov	r0, r8
 80004de:	1b09      	subs	r1, r1, r4
 80004e0:	b292      	uxth	r2, r2
 80004e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80004e6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ee:	fb04 f106 	mul.w	r1, r4, r6
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x2a2>
 80004f6:	eb1e 0202 	adds.w	r2, lr, r2
 80004fa:	f104 38ff 	add.w	r8, r4, #4294967295
 80004fe:	d201      	bcs.n	8000504 <__udivmoddi4+0x2a0>
 8000500:	4291      	cmp	r1, r2
 8000502:	d815      	bhi.n	8000530 <__udivmoddi4+0x2cc>
 8000504:	4644      	mov	r4, r8
 8000506:	1a52      	subs	r2, r2, r1
 8000508:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800050c:	e721      	b.n	8000352 <__udivmoddi4+0xee>
 800050e:	1a86      	subs	r6, r0, r2
 8000510:	eb64 0303 	sbc.w	r3, r4, r3
 8000514:	2001      	movs	r0, #1
 8000516:	e70e      	b.n	8000336 <__udivmoddi4+0xd2>
 8000518:	3c02      	subs	r4, #2
 800051a:	4472      	add	r2, lr
 800051c:	e735      	b.n	800038a <__udivmoddi4+0x126>
 800051e:	3902      	subs	r1, #2
 8000520:	4472      	add	r2, lr
 8000522:	e6d0      	b.n	80002c6 <__udivmoddi4+0x62>
 8000524:	44f4      	add	ip, lr
 8000526:	3802      	subs	r0, #2
 8000528:	e6e3      	b.n	80002f2 <__udivmoddi4+0x8e>
 800052a:	44f4      	add	ip, lr
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x152>
 8000530:	3c02      	subs	r4, #2
 8000532:	4472      	add	r2, lr
 8000534:	e7e7      	b.n	8000506 <__udivmoddi4+0x2a2>
 8000536:	3802      	subs	r0, #2
 8000538:	4471      	add	r1, lr
 800053a:	e7d0      	b.n	80004de <__udivmoddi4+0x27a>
 800053c:	3b02      	subs	r3, #2
 800053e:	443c      	add	r4, r7
 8000540:	e782      	b.n	8000448 <__udivmoddi4+0x1e4>
 8000542:	3802      	subs	r0, #2
 8000544:	443c      	add	r4, r7
 8000546:	e76a      	b.n	800041e <__udivmoddi4+0x1ba>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_ZN9LEDDriver8flashLEDEv>:
 */

#include "led_driver.hpp"
#include "stm32l5xx_hal.h"

void LEDDriver::flashLED() {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000554:	2180      	movs	r1, #128	@ 0x80
 8000556:	4803      	ldr	r0, [pc, #12]	@ (8000564 <_ZN9LEDDriver8flashLEDEv+0x18>)
 8000558:	f002 f8c2 	bl	80026e0 <HAL_GPIO_TogglePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	42020400 	.word	0x42020400

08000568 <_ZN9LEDDriver4waitEm>:

void LEDDriver::wait(uint32_t timeout_ms) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	HAL_Delay(timeout_ms);
 8000572:	6838      	ldr	r0, [r7, #0]
 8000574:	f000 fe74 	bl	8001260 <HAL_Delay>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_ZN15DriverInterfaceD1Ev>:
class DriverInterface {
protected:
    DriverInterface() = default;

public:
    virtual ~DriverInterface() = default;
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <_ZN15DriverInterfaceD1Ev+0x1c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	080059bc 	.word	0x080059bc

080005a0 <_ZN15DriverInterfaceD0Ev>:
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffe9 	bl	8000580 <_ZN15DriverInterfaceD1Ev>
 80005ae:	2104      	movs	r1, #4
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f005 f956 	bl	8005862 <_ZdlPvj>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <_ZN9LEDDriverD1Ev>:
#ifndef INC_LED_DRIVER_HPP_
#define INC_LED_DRIVER_HPP_

#include "driver_interface.hpp"

class LEDDriver : public DriverInterface {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <_ZN9LEDDriverD1Ev+0x20>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffd5 	bl	8000580 <_ZN15DriverInterfaceD1Ev>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	080059a4 	.word	0x080059a4

080005e4 <_ZN9LEDDriverD0Ev>:
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffe7 	bl	80005c0 <_ZN9LEDDriverD1Ev>
 80005f2:	2104      	movs	r1, #4
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f005 f934 	bl	8005862 <_ZdlPvj>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800060e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000610:	4907      	ldr	r1, [pc, #28]	@ (8000630 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800061a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <LL_APB1_GRP2_EnableClock+0x2c>)
 800063e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000640:	4907      	ldr	r1, [pc, #28]	@ (8000660 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <LL_APB1_GRP2_EnableClock+0x2c>)
 800064a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4013      	ands	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40021000 	.word	0x40021000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fd82 	bl	8001172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f81f 	bl	80006b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 fa51 	bl	8000b18 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000676:	f000 f891 	bl	800079c <_ZL12MX_ADC1_Initv>
  MX_ICACHE_Init();
 800067a:	f000 f915 	bl	80008a8 <_ZL14MX_ICACHE_Initv>
  MX_LPUART1_UART_Init();
 800067e:	f000 f931 	bl	80008e4 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8000682:	f000 f991 	bl	80009a8 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8000686:	f000 f9e3 	bl	8000a50 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800068a:	f000 fa17 	bl	8000abc <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  LEDDriver driver {};
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <main+0x48>)
 8000690:	60fb      	str	r3, [r7, #12]
  Manager manager {&driver};
 8000692:	f107 020c 	add.w	r2, r7, #12
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f005 f8b3 	bl	8005806 <_ZN7ManagerC1EP15DriverInterface>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	manager.runManager();
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f8c1 	bl	800582a <_ZN7Manager10runManagerEv>
 80006a8:	e7fa      	b.n	80006a0 <main+0x3c>
 80006aa:	bf00      	nop
 80006ac:	080059a4 	.word	0x080059a4

080006b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b098      	sub	sp, #96	@ 0x60
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2248      	movs	r2, #72	@ 0x48
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 f8e8 	bl	8005894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006d2:	2000      	movs	r0, #0
 80006d4:	f002 f964 	bl	80029a0 <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80006e8:	f000 faa8 	bl	8000c3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ec:	f002 f93a 	bl	8002964 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <_Z18SystemClock_Configv+0xe8>)
 80006f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006f6:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <_Z18SystemClock_Configv+0xe8>)
 80006f8:	f023 0318 	bic.w	r3, r3, #24
 80006fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000700:	2336      	movs	r3, #54	@ 0x36
 8000702:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000704:	2381      	movs	r3, #129	@ 0x81
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800071a:	2300      	movs	r3, #0
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071e:	2360      	movs	r3, #96	@ 0x60
 8000720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000726:	2301      	movs	r3, #1
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800072e:	2337      	movs	r3, #55	@ 0x37
 8000730:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000732:	2307      	movs	r3, #7
 8000734:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	4618      	mov	r0, r3
 8000744:	f002 f9bc 	bl	8002ac0 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8000758:	f000 fa70 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2105      	movs	r1, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fe79 	bl	800346c <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800078a:	f000 fa57 	bl	8000c3c <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3760      	adds	r7, #96	@ 0x60
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b37      	ldr	r3, [pc, #220]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007c0:	4a37      	ldr	r2, [pc, #220]	@ (80008a0 <_ZL12MX_ADC1_Initv+0x104>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b35      	ldr	r3, [pc, #212]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b34      	ldr	r3, [pc, #208]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b32      	ldr	r3, [pc, #200]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b2f      	ldr	r3, [pc, #188]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007de:	2204      	movs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b29      	ldr	r3, [pc, #164]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b22      	ldr	r3, [pc, #136]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081e:	481f      	ldr	r0, [pc, #124]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 8000820:	f000 fee2 	bl	80015e8 <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf14      	ite	ne
 800082a:	2301      	movne	r3, #1
 800082c:	2300      	moveq	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8000834:	f000 fa02 	bl	8000c3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4816      	ldr	r0, [pc, #88]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 8000844:	f001 fc2c 	bl	80020a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8000858:	f000 f9f0 	bl	8000c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <_ZL12MX_ADC1_Initv+0x108>)
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2306      	movs	r3, #6
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000868:	237f      	movs	r3, #127	@ 0x7f
 800086a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	2304      	movs	r3, #4
 800086e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4808      	ldr	r0, [pc, #32]	@ (800089c <_ZL12MX_ADC1_Initv+0x100>)
 800087a:	f001 f801 	bl	8001880 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 800088e:	f000 f9d5 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000078 	.word	0x20000078
 80008a0:	42028000 	.word	0x42028000
 80008a4:	0c900008 	.word	0x0c900008

080008a8 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 ff31 	bl	8002714 <HAL_ICACHE_ConfigAssociativityMode>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 80008c2:	f000 f9bb 	bl	8000c3c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008c6:	f001 ff45 	bl	8002754 <HAL_ICACHE_Enable>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 80008da:	f000 f9af 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008ea:	4a2d      	ldr	r2, [pc, #180]	@ (80009a0 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 80008ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008f0:	4a2c      	ldr	r2, [pc, #176]	@ (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 80008f2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000900:	4b26      	ldr	r3, [pc, #152]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000906:	4b25      	ldr	r3, [pc, #148]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000908:	220c      	movs	r2, #12
 800090a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090c:	4b23      	ldr	r3, [pc, #140]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b20      	ldr	r3, [pc, #128]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000926:	2200      	movs	r2, #0
 8000928:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800092a:	481c      	ldr	r0, [pc, #112]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800092c:	f003 fed2 	bl	80046d4 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000940:	f000 f97c 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4815      	ldr	r0, [pc, #84]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000948:	f004 fc6c 	bl	8005224 <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf14      	ite	ne
 8000952:	2301      	movne	r3, #1
 8000954:	2300      	moveq	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 800095c:	f000 f96e 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000964:	f004 fc9c 	bl	80052a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf14      	ite	ne
 800096e:	2301      	movne	r3, #1
 8000970:	2300      	moveq	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8000978:	f000 f960 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800097e:	f004 fc18 	bl	80051b2 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8000992:	f000 f953 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000e0 	.word	0x200000e0
 80009a0:	40008000 	.word	0x40008000
 80009a4:	00033324 	.word	0x00033324

080009a8 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009c0:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <_ZL11MX_RTC_Initv+0xa4>)
 80009c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009cc:	227f      	movs	r2, #127	@ 0x7f
 80009ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009d2:	22ff      	movs	r2, #255	@ 0xff
 80009d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009f6:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 80009f8:	f003 fd32 	bl	8004460 <HAL_RTC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8000a0c:	f000 f916 	bl	8000c3c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <_ZL11MX_RTC_Initv+0xa0>)
 8000a26:	f003 fe29 	bl	800467c <HAL_RTCEx_PrivilegeModeSet>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000a3a:	f000 f8ff 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000174 	.word	0x20000174
 8000a4c:	40002800 	.word	0x40002800

08000a50 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a66:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000a6a:	f7ff fde3 	bl	8000634 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f7ff fdc8 	bl	8000604 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fdc5 	bl	8000604 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a80:	2303      	movs	r3, #3
 8000a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <_ZL13MX_UCPD1_Initv+0x64>)
 8000a8e:	f004 fdde 	bl	800564e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <_ZL13MX_UCPD1_Initv+0x68>)
 8000aa6:	f004 fdd2 	bl	800564e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	42020400 	.word	0x42020400
 8000ab8:	42020000 	.word	0x42020000

08000abc <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ac2:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <_ZL15MX_USB_PCD_Initv+0x58>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000af0:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000af2:	f001 fe3f 	bl	8002774 <HAL_PCD_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8000b06:	f000 f899 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000019c 	.word	0x2000019c
 8000b14:	4000d400 	.word	0x4000d400

08000b18 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a3e      	ldr	r2, [pc, #248]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a38      	ldr	r2, [pc, #224]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b76:	f001 ff6f 	bl	8002a58 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <_ZL12MX_GPIO_Initv+0x114>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	4826      	ldr	r0, [pc, #152]	@ (8000c30 <_ZL12MX_GPIO_Initv+0x118>)
 8000b98:	f001 fd8a 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ba2:	4824      	ldr	r0, [pc, #144]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ba4:	f001 fd84 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	21a0      	movs	r1, #160	@ 0xa0
 8000bac:	4822      	ldr	r0, [pc, #136]	@ (8000c38 <_ZL12MX_GPIO_Initv+0x120>)
 8000bae:	f001 fd7f 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481b      	ldr	r0, [pc, #108]	@ (8000c38 <_ZL12MX_GPIO_Initv+0x120>)
 8000bca:	f001 fbf1 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <_ZL12MX_GPIO_Initv+0x118>)
 8000be6:	f001 fbe3 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c04:	f001 fbd4 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c08:	23a0      	movs	r3, #160	@ 0xa0
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <_ZL12MX_GPIO_Initv+0x120>)
 8000c20:	f001 fbc6 	bl	80023b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	42020800 	.word	0x42020800
 8000c34:	42020000 	.word	0x42020000
 8000c38:	42020400 	.word	0x42020400

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0ae      	sub	sp, #184	@ 0xb8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2294      	movs	r2, #148	@ 0x94
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fdef 	bl	8005894 <memset>
  if(hadc->Instance==ADC1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <HAL_ADC_MspInit+0xa8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d137      	bne.n	8000d30 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000cc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 feae 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000cde:	f7ff ffad 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_ADC_MspInit+0xac>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a15      	ldr	r2, [pc, #84]	@ (8000d3c <HAL_ADC_MspInit+0xac>)
 8000ce8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <HAL_ADC_MspInit+0xac>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <HAL_ADC_MspInit+0xac>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <HAL_ADC_MspInit+0xac>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_ADC_MspInit+0xac>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d12:	2304      	movs	r3, #4
 8000d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_ADC_MspInit+0xb0>)
 8000d2c:	f001 fb40 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37b8      	adds	r7, #184	@ 0xb8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	42028000 	.word	0x42028000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	42020800 	.word	0x42020800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ae      	sub	sp, #184	@ 0xb8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2294      	movs	r2, #148	@ 0x94
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fd95 	bl	8005894 <memset>
  if(huart->Instance==LPUART1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <HAL_UART_MspInit+0xb4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d13d      	bne.n	8000df0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d74:	2320      	movs	r3, #32
 8000d76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fe57 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d8c:	f7ff ff56 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d94:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d9c:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dac:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000dc0:	f001 fe4a 	bl	8002a58 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000dc4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dde:	2308      	movs	r3, #8
 8000de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0xbc>)
 8000dec:	f001 fae0 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	37b8      	adds	r7, #184	@ 0xb8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40008000 	.word	0x40008000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	42021800 	.word	0x42021800

08000e04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0a8      	sub	sp, #160	@ 0xa0
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2294      	movs	r2, #148	@ 0x94
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fd3d 	bl	8005894 <memset>
  if(hrtc->Instance==RTC)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <HAL_RTC_MspInit+0x74>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d124      	bne.n	8000e6e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fdfc 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e42:	f7ff fefb 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_RTC_MspInit+0x78>)
 8000e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <HAL_RTC_MspInit+0x78>)
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_RTC_MspInit+0x78>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_RTC_MspInit+0x78>)
 8000e5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_RTC_MspInit+0x78>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	37a0      	adds	r7, #160	@ 0xa0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40002800 	.word	0x40002800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ae      	sub	sp, #184	@ 0xb8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2294      	movs	r2, #148	@ 0x94
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fcf7 	bl	8005894 <memset>
  if(hpcd->Instance==USB)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a22      	ldr	r2, [pc, #136]	@ (8000f34 <HAL_PCD_MspInit+0xb4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d13d      	bne.n	8000f2c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fdb7 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ecc:	f7ff feb6 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_PCD_MspInit+0xb8>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_PCD_MspInit+0xb8>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_PCD_MspInit+0xb8>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ee8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f02:	230a      	movs	r3, #10
 8000f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <HAL_PCD_MspInit+0xbc>)
 8000f10:	f001 fa4e 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_PCD_MspInit+0xb8>)
 8000f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_PCD_MspInit+0xb8>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f1e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_PCD_MspInit+0xb8>)
 8000f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	37b8      	adds	r7, #184	@ 0xb8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	4000d400 	.word	0x4000d400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	42020000 	.word	0x42020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <NMI_Handler+0x4>

08000f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 f943 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000fca:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 8000fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e005      	b.n	8000ff2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000fe6:	4b48      	ldr	r3, [pc, #288]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000ff2:	4a46      	ldr	r2, [pc, #280]	@ (800110c <SystemCoreClockUpdate+0x148>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ffc:	4b42      	ldr	r3, [pc, #264]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b0c      	cmp	r3, #12
 8001006:	d866      	bhi.n	80010d6 <SystemCoreClockUpdate+0x112>
 8001008:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <SystemCoreClockUpdate+0x4c>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001045 	.word	0x08001045
 8001014:	080010d7 	.word	0x080010d7
 8001018:	080010d7 	.word	0x080010d7
 800101c:	080010d7 	.word	0x080010d7
 8001020:	0800104d 	.word	0x0800104d
 8001024:	080010d7 	.word	0x080010d7
 8001028:	080010d7 	.word	0x080010d7
 800102c:	080010d7 	.word	0x080010d7
 8001030:	08001055 	.word	0x08001055
 8001034:	080010d7 	.word	0x080010d7
 8001038:	080010d7 	.word	0x080010d7
 800103c:	080010d7 	.word	0x080010d7
 8001040:	0800105d 	.word	0x0800105d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001044:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	6013      	str	r3, [r2, #0]
      break;
 800104a:	e048      	b.n	80010de <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800104c:	4b30      	ldr	r3, [pc, #192]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 800104e:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <SystemCoreClockUpdate+0x150>)
 8001050:	601a      	str	r2, [r3, #0]
      break;
 8001052:	e044      	b.n	80010de <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001054:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 8001056:	4a30      	ldr	r2, [pc, #192]	@ (8001118 <SystemCoreClockUpdate+0x154>)
 8001058:	601a      	str	r2, [r3, #0]
      break;
 800105a:	e040      	b.n	80010de <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800105c:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001066:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	3301      	adds	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d003      	beq.n	8001082 <SystemCoreClockUpdate+0xbe>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d006      	beq.n	800108e <SystemCoreClockUpdate+0xca>
 8001080:	e00b      	b.n	800109a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001082:	4a24      	ldr	r2, [pc, #144]	@ (8001114 <SystemCoreClockUpdate+0x150>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	613b      	str	r3, [r7, #16]
          break;
 800108c:	e00b      	b.n	80010a6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800108e:	4a22      	ldr	r2, [pc, #136]	@ (8001118 <SystemCoreClockUpdate+0x154>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	613b      	str	r3, [r7, #16]
          break;
 8001098:	e005      	b.n	80010a6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	613b      	str	r3, [r7, #16]
          break;
 80010a4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0e5b      	lsrs	r3, r3, #25
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	3301      	adds	r3, #1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 80010d2:	6013      	str	r3, [r2, #0]
      break;
 80010d4:	e003      	b.n	80010de <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80010d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	6013      	str	r3, [r2, #0]
      break;
 80010dc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SystemCoreClockUpdate+0x144>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <SystemCoreClockUpdate+0x158>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <SystemCoreClockUpdate+0x14c>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	080059e4 	.word	0x080059e4
 8001110:	20000000 	.word	0x20000000
 8001114:	00f42400 	.word	0x00f42400
 8001118:	007a1200 	.word	0x007a1200
 800111c:	080059cc 	.word	0x080059cc

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff ff3c 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001128:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800112a:	e003      	b.n	8001134 <LoopCopyDataInit>

0800112c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800112e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001130:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001132:	3104      	adds	r1, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001134:	480a      	ldr	r0, [pc, #40]	@ (8001160 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001138:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800113a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800113c:	d3f6      	bcc.n	800112c <CopyDataInit>
	ldr	r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001140:	e002      	b.n	8001148 <LoopFillZerobss>

08001142 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001142:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001144:	f842 3b04 	str.w	r3, [r2], #4

08001148 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <LoopForever+0x16>)
	cmp	r2, r3
 800114a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800114c:	d3f9      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114e:	f004 fba9 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fa87 	bl	8000664 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001158:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800115c:	08005a5c 	.word	0x08005a5c
	ldr	r0, =_sdata
 8001160:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001164:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001168:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 800116c:	200005bc 	.word	0x200005bc

08001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_2_IRQHandler>

08001172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800117c:	2004      	movs	r0, #4
 800117e:	f001 f8e5 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001182:	f7ff ff1f 	bl	8000fc4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f80e 	bl	80011a8 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e001      	b.n	800119c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001198:	f7ff fd56 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119c:	79fb      	ldrb	r3, [r7, #7]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HAL_InitTick+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_InitTick+0x70>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 f8df 	bl	8002396 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d809      	bhi.n	80011f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f001 f8b9 	bl	8002362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f0:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_InitTick+0x74>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e007      	b.n	8001208 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e004      	b.n	8001208 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e001      	b.n	8001208 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20000000 	.word	0x20000000
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000478 	.word	0x20000478

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000478 	.word	0x20000478

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3360      	adds	r3, #96	@ 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <LL_ADC_SetOffset+0x44>)
 8001332:	4013      	ands	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	4313      	orrs	r3, r2
 8001340:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	03fff000 	.word	0x03fff000

08001358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3360      	adds	r3, #96	@ 0x60
 8001366:	461a      	mov	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3360      	adds	r3, #96	@ 0x60
 8001394:	461a      	mov	r2, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3330      	adds	r3, #48	@ 0x30
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	211f      	movs	r1, #31
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0e9b      	lsrs	r3, r3, #26
 8001418:	f003 011f 	and.w	r1, r3, #31
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3314      	adds	r3, #20
 8001448:	461a      	mov	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	0e5b      	lsrs	r3, r3, #25
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	0d1b      	lsrs	r3, r3, #20
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2107      	movs	r1, #7
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	401a      	ands	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0d1b      	lsrs	r3, r3, #20
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0318 	and.w	r3, r3, #24
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014b4:	40d9      	lsrs	r1, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	400b      	ands	r3, r1
 80014ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014be:	431a      	orrs	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	0007ffff 	.word	0x0007ffff

080014d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6093      	str	r3, [r2, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800150c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001510:	d101      	bne.n	8001516 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001538:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001560:	d101      	bne.n	8001566 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <LL_ADC_IsEnabled+0x18>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <LL_ADC_IsEnabled+0x1a>
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d101      	bne.n	80015d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12e      	b.n	8001860 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fb3d 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff67 	bl	80014fc <LL_ADC_IsDeepPowerDownEnabled>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff4d 	bl	80014d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff82 	bl	800154c <LL_ADC_IsInternalRegulatorEnabled>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff66 	bl	8001524 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001658:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_ADC_Init+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	4a83      	ldr	r2, [pc, #524]	@ (800186c <HAL_ADC_Init+0x284>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	3301      	adds	r3, #1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800166c:	e002      	b.n	8001674 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3b01      	subs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f9      	bne.n	800166e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff64 	bl	800154c <LL_ADC_IsInternalRegulatorEnabled>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	f043 0210 	orr.w	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff75 	bl	800159a <LL_ADC_REG_IsConversionOngoing>
 80016b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 80c7 	bne.w	800184e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 80c3 	bne.w	800184e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016d0:	f043 0202 	orr.w	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff49 	bl	8001574 <LL_ADC_IsEnabled>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d110      	bne.n	800170a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016e8:	4861      	ldr	r0, [pc, #388]	@ (8001870 <HAL_ADC_Init+0x288>)
 80016ea:	f7ff ff43 	bl	8001574 <LL_ADC_IsEnabled>
 80016ee:	4604      	mov	r4, r0
 80016f0:	4860      	ldr	r0, [pc, #384]	@ (8001874 <HAL_ADC_Init+0x28c>)
 80016f2:	f7ff ff3f 	bl	8001574 <LL_ADC_IsEnabled>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4323      	orrs	r3, r4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d105      	bne.n	800170a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4619      	mov	r1, r3
 8001704:	485c      	ldr	r0, [pc, #368]	@ (8001878 <HAL_ADC_Init+0x290>)
 8001706:	f7ff fdcf 	bl	80012a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7e5b      	ldrb	r3, [r3, #25]
 800170e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001714:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800171a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001720:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001728:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	3b01      	subs	r3, #1
 800173e:	045b      	lsls	r3, r3, #17
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4b44      	ldr	r3, [pc, #272]	@ (800187c <HAL_ADC_Init+0x294>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	69b9      	ldr	r1, [r7, #24]
 8001772:	430b      	orrs	r3, r1
 8001774:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff20 	bl	80015c0 <LL_ADC_INJ_IsConversionOngoing>
 8001780:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d140      	bne.n	800180a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d13d      	bne.n	800180a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7e1b      	ldrb	r3, [r3, #24]
 8001796:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001798:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017b0:	f023 0306 	bic.w	r3, r3, #6
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	69b9      	ldr	r1, [r7, #24]
 80017ba:	430b      	orrs	r3, r1
 80017bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d118      	bne.n	80017fa <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017de:	4311      	orrs	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017e4:	4311      	orrs	r1, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017ea:	430a      	orrs	r2, r1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	e007      	b.n	800180a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10c      	bne.n	800182c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f023 010f 	bic.w	r1, r3, #15
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30
 800182a:	e007      	b.n	800183c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020f 	bic.w	r2, r2, #15
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f023 0303 	bic.w	r3, r3, #3
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
 800184c:	e007      	b.n	800185e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	f043 0210 	orr.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800185e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3724      	adds	r7, #36	@ 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}
 8001868:	20000000 	.word	0x20000000
 800186c:	053e2d63 	.word	0x053e2d63
 8001870:	42028000 	.word	0x42028000
 8001874:	42028100 	.word	0x42028100
 8001878:	42028300 	.word	0x42028300
 800187c:	fff0c007 	.word	0xfff0c007

08001880 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b0b7      	sub	sp, #220	@ 0xdc
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x22>
 800189e:	2302      	movs	r3, #2
 80018a0:	e3c1      	b.n	8002026 <HAL_ADC_ConfigChannel+0x7a6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fe73 	bl	800159a <LL_ADC_REG_IsConversionOngoing>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 83a6 	bne.w	8002008 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f7ff fd89 	bl	80013e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe61 	bl	800159a <LL_ADC_REG_IsConversionOngoing>
 80018d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe6d 	bl	80015c0 <LL_ADC_INJ_IsConversionOngoing>
 80018e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 81c1 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 81bc 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001906:	d10f      	bne.n	8001928 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff fd90 	bl	8001438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd4a 	bl	80013ba <LL_ADC_SetSamplingTimeCommonConfig>
 8001926:	e00e      	b.n	8001946 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	461a      	mov	r2, r3
 8001936:	f7ff fd7f 	bl	8001438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fd3a 	bl	80013ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d00a      	beq.n	800197e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6919      	ldr	r1, [r3, #16]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001978:	f7ff fcca 	bl	8001310 <LL_ADC_SetOffset>
 800197c:	e17b      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fce7 	bl	8001358 <LL_ADC_GetOffsetChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x12a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fcdc 	bl	8001358 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	0e9b      	lsrs	r3, r3, #26
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	e01e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x168>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fcd1 	bl	8001358 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e004      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80019dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x180>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	e018      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1b2>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001a1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001a24:	2320      	movs	r3, #32
 8001a26:	e004      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001a28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fca0 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fc84 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10a      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1f0>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc79 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	f003 021f 	and.w	r2, r3, #31
 8001a6e:	e01e      	b.n	8001aae <HAL_ADC_ConfigChannel+0x22e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fc6e 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e004      	b.n	8001aac <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x246>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	e018      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x278>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e004      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001aee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d106      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2101      	movs	r1, #1
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fc3d 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2102      	movs	r1, #2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fc21 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x2b6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2102      	movs	r1, #2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fc16 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	e01e      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x2f4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fc0b 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001b64:	2320      	movs	r3, #32
 8001b66:	e004      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x30c>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	e016      	b.n	8001bba <HAL_ADC_ConfigChannel+0x33a>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e004      	b.n	8001bba <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fbdc 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fbc0 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x378>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2103      	movs	r1, #3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fbb5 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	e017      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x3a8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fbaa 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c12:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	e003      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x3c0>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	e011      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x3e4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e003      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2103      	movs	r1, #3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb87 	bl	8001384 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc7a 	bl	8001574 <LL_ADC_IsEnabled>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 81c9 	bne.w	800201a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f7ff fbfb 	bl	8001490 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	4a8f      	ldr	r2, [pc, #572]	@ (8001edc <HAL_ADC_ConfigChannel+0x65c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	f040 8131 	bne.w	8001f08 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10b      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x44e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2b09      	cmp	r3, #9
 8001cc4:	bf94      	ite	ls
 8001cc6:	2301      	movls	r3, #1
 8001cc8:	2300      	movhi	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	e019      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x482>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cde:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e003      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	bf94      	ite	ls
 8001cfc:	2301      	movls	r3, #1
 8001cfe:	2300      	movhi	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d079      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x4a2>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	3301      	adds	r3, #1
 8001d1a:	069b      	lsls	r3, r3, #26
 8001d1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d20:	e015      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x4ce>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d32:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e003      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	069b      	lsls	r3, r3, #26
 8001d4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x4ee>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	3301      	adds	r3, #1
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	e017      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x51e>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001d86:	2320      	movs	r3, #32
 8001d88:	e003      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	ea42 0103 	orr.w	r1, r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x544>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 021f 	and.w	r2, r3, #31
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	e018      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x576>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e003      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 021f 	and.w	r2, r3, #31
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df6:	430b      	orrs	r3, r1
 8001df8:	e081      	b.n	8001efe <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x596>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0e9b      	lsrs	r3, r3, #26
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	069b      	lsls	r3, r3, #26
 8001e10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e14:	e015      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x5c2>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001e2e:	2320      	movs	r3, #32
 8001e30:	e003      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	069b      	lsls	r3, r3, #26
 8001e3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x5e2>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	e017      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x612>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e003      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	ea42 0103 	orr.w	r1, r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x63e>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f003 021f 	and.w	r2, r3, #31
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b1e      	subs	r3, #30
 8001eb6:	051b      	lsls	r3, r3, #20
 8001eb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ebc:	e01e      	b.n	8001efc <HAL_ADC_ConfigChannel+0x67c>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	613b      	str	r3, [r7, #16]
  return result;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e006      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x668>
 8001eda:	bf00      	nop
 8001edc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 021f 	and.w	r2, r3, #31
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b1e      	subs	r3, #30
 8001ef6:	051b      	lsls	r3, r3, #20
 8001ef8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7ff fa98 	bl	8001438 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b48      	ldr	r3, [pc, #288]	@ (8002030 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8082 	beq.w	800201a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f16:	4847      	ldr	r0, [pc, #284]	@ (8002034 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f18:	f7ff f9ec 	bl	80012f4 <LL_ADC_GetCommonPathInternalCh>
 8001f1c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f20:	4845      	ldr	r0, [pc, #276]	@ (8002038 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f22:	f7ff fb27 	bl	8001574 <LL_ADC_IsEnabled>
 8001f26:	4604      	mov	r4, r0
 8001f28:	4844      	ldr	r0, [pc, #272]	@ (800203c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f2a:	f7ff fb23 	bl	8001574 <LL_ADC_IsEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4323      	orrs	r3, r4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d15e      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a41      	ldr	r2, [pc, #260]	@ (8002040 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d127      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d121      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a39      	ldr	r2, [pc, #228]	@ (8002038 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d161      	bne.n	800201a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4834      	ldr	r0, [pc, #208]	@ (8002034 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f62:	f7ff f9b4 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f66:	4b37      	ldr	r3, [pc, #220]	@ (8002044 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	4a36      	ldr	r2, [pc, #216]	@ (8002048 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001f7e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f8e:	e044      	b.n	800201a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_ADC_ConfigChannel+0x7cc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d113      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d134      	bne.n	800201a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	4619      	mov	r1, r3
 8001fba:	481e      	ldr	r0, [pc, #120]	@ (8002034 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fbc:	f7ff f987 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc0:	e02b      	b.n	800201a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	@ (8002050 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d126      	bne.n	800201a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d120      	bne.n	800201a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d11b      	bne.n	800201a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fea:	4619      	mov	r1, r3
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fee:	f7ff f96e 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
 8001ff2:	e012      	b.n	800201a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002006:	e008      	b.n	800201a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002022:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002026:	4618      	mov	r0, r3
 8002028:	37dc      	adds	r7, #220	@ 0xdc
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	80080000 	.word	0x80080000
 8002034:	42028300 	.word	0x42028300
 8002038:	42028000 	.word	0x42028000
 800203c:	42028100 	.word	0x42028100
 8002040:	c7520000 	.word	0xc7520000
 8002044:	20000000 	.word	0x20000000
 8002048:	053e2d63 	.word	0x053e2d63
 800204c:	cb840000 	.word	0xcb840000
 8002050:	80000001 	.word	0x80000001

08002054 <LL_ADC_IsEnabled>:
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <LL_ADC_IsEnabled+0x18>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <LL_ADC_IsEnabled+0x1a>
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_REG_IsConversionOngoing>:
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d101      	bne.n	8002092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b0a1      	sub	sp, #132	@ 0x84
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e089      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020c6:	2300      	movs	r3, #0
 80020c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020ca:	2300      	movs	r3, #0
 80020cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a42      	ldr	r2, [pc, #264]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d102      	bne.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020d8:	4b41      	ldr	r3, [pc, #260]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e001      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10b      	bne.n	8002100 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e068      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ffb9 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002108:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ffb3 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d14a      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800211a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800211c:	2b00      	cmp	r3, #0
 800211e:	d147      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002120:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002122:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d027      	beq.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800212c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800213e:	035b      	lsls	r3, r3, #13
 8002140:	430b      	orrs	r3, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002146:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002148:	4824      	ldr	r0, [pc, #144]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800214a:	f7ff ff83 	bl	8002054 <LL_ADC_IsEnabled>
 800214e:	4604      	mov	r4, r0
 8002150:	4823      	ldr	r0, [pc, #140]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002152:	f7ff ff7f 	bl	8002054 <LL_ADC_IsEnabled>
 8002156:	4603      	mov	r3, r0
 8002158:	4323      	orrs	r3, r4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d132      	bne.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800215e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002166:	f023 030f 	bic.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	6811      	ldr	r1, [r2, #0]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	6892      	ldr	r2, [r2, #8]
 8002172:	430a      	orrs	r2, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002178:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800217a:	e023      	b.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800217c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002186:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002188:	4814      	ldr	r0, [pc, #80]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800218a:	f7ff ff63 	bl	8002054 <LL_ADC_IsEnabled>
 800218e:	4604      	mov	r4, r0
 8002190:	4813      	ldr	r0, [pc, #76]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002192:	f7ff ff5f 	bl	8002054 <LL_ADC_IsEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	4323      	orrs	r3, r4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d112      	bne.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800219e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021a6:	f023 030f 	bic.w	r3, r3, #15
 80021aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021ae:	e009      	b.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021c2:	e000      	b.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80021ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3784      	adds	r7, #132	@ 0x84
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	42028000 	.word	0x42028000
 80021e0:	42028100 	.word	0x42028100
 80021e4:	42028300 	.word	0x42028300

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	@ (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	@ (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0152      	lsls	r2, r2, #5
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	@ (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0152      	lsls	r2, r2, #5
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	bf28      	it	cs
 80022be:	2303      	movcs	r3, #3
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3303      	adds	r3, #3
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b04      	subs	r3, #4
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	@ 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	2107      	movs	r1, #7
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff47 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff5e 	bl	8002230 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff90 	bl	80022a0 <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5f 	bl	800224c <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffb2 	bl	8002308 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023be:	e158      	b.n	8002672 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 814a 	beq.w	800266c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x40>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80a4 	beq.w	800266c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002524:	4a5a      	ldr	r2, [pc, #360]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3318      	adds	r3, #24
 800252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a52      	ldr	r2, [pc, #328]	@ (8002694 <HAL_GPIO_Init+0x2e4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d025      	beq.n	800259c <HAL_GPIO_Init+0x1ec>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a51      	ldr	r2, [pc, #324]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d01f      	beq.n	8002598 <HAL_GPIO_Init+0x1e8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a50      	ldr	r2, [pc, #320]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d019      	beq.n	8002594 <HAL_GPIO_Init+0x1e4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a4f      	ldr	r2, [pc, #316]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_GPIO_Init+0x1e0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4e      	ldr	r2, [pc, #312]	@ (80026a4 <HAL_GPIO_Init+0x2f4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_GPIO_Init+0x1dc>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4d      	ldr	r2, [pc, #308]	@ (80026a8 <HAL_GPIO_Init+0x2f8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x1d8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4c      	ldr	r2, [pc, #304]	@ (80026ac <HAL_GPIO_Init+0x2fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_GPIO_Init+0x1d4>
 8002580:	2306      	movs	r3, #6
 8002582:	e00c      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002584:	2307      	movs	r3, #7
 8002586:	e00a      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002588:	2305      	movs	r3, #5
 800258a:	e008      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 800258c:	2304      	movs	r3, #4
 800258e:	e006      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002590:	2303      	movs	r3, #3
 8002592:	e004      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002594:	2302      	movs	r3, #2
 8002596:	e002      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 800259c:	2300      	movs	r3, #0
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	f002 0203 	and.w	r2, r2, #3
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	4093      	lsls	r3, r2
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80025ae:	4938      	ldr	r1, [pc, #224]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3318      	adds	r3, #24
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025bc:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800260a:	4a21      	ldr	r2, [pc, #132]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002636:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 8002640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f ae9f 	bne.w	80023c0 <HAL_GPIO_Init+0x10>
  }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	4002f400 	.word	0x4002f400
 8002694:	42020000 	.word	0x42020000
 8002698:	42020400 	.word	0x42020400
 800269c:	42020800 	.word	0x42020800
 80026a0:	42020c00 	.word	0x42020c00
 80026a4:	42021000 	.word	0x42021000
 80026a8:	42021400 	.word	0x42021400
 80026ac:	42021800 	.word	0x42021800

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43d9      	mvns	r1, r3
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	400b      	ands	r3, r1
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e007      	b.n	8002742 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0204 	bic.w	r2, r3, #4
 800273a:	4905      	ldr	r1, [pc, #20]	@ (8002750 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40030400 	.word	0x40030400

08002754 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_ICACHE_Enable+0x1c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_ICACHE_Enable+0x1c>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40030400 	.word	0x40030400

08002774 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0c0      	b.n	8002908 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fb70 	bl	8000e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 ffbb 	bl	8005728 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e03e      	b.n	8002836 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	3311      	adds	r3, #17
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	3310      	adds	r3, #16
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3313      	adds	r3, #19
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	3320      	adds	r3, #32
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3324      	adds	r3, #36	@ 0x24
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	3301      	adds	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	429a      	cmp	r2, r3
 800283e:	d3bb      	bcc.n	80027b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e044      	b.n	80028d0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	3301      	adds	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	791b      	ldrb	r3, [r3, #4]
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3b5      	bcc.n	8002846 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028e6:	f002 ff3a 	bl	800575e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a9b      	ldrb	r3, [r3, #10]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f805 	bl	8002910 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002934:	b29b      	uxth	r3, r3
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002948:	b29b      	uxth	r3, r3
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000

08002984 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <HAL_PWREx_GetVoltageRange+0x18>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40007000 	.word	0x40007000

080029a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029b0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80029b2:	f000 f861 	bl	8002a78 <HAL_PWREx_SMPS_GetEffectiveMode>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029bc:	d101      	bne.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e03e      	b.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80029c2:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ce:	d101      	bne.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e035      	b.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d101      	bne.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e02f      	b.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80029e8:	4917      	ldr	r1, [pc, #92]	@ (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80029f0:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	2232      	movs	r2, #50	@ 0x32
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	08db      	lsrs	r3, r3, #3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a10:	e002      	b.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a24:	d102      	bne.n	8002a2c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f2      	bne.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a38:	d101      	bne.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	0a7c5ac5 	.word	0x0a7c5ac5
 8002a54:	cccccccd 	.word	0xcccccccd

08002a58 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a5c:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a66:	6053      	str	r3, [r2, #4]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40007000 	.word	0x40007000

08002a78 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002a8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	e00a      	b.n	8002aac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	e001      	b.n	8002aac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40007000 	.word	0x40007000

08002ac0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f000 bcc2 	b.w	8003458 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad4:	4b99      	ldr	r3, [pc, #612]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ade:	4b97      	ldr	r3, [pc, #604]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80e9 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4a>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	f040 8083 	bne.w	8002c0a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d17f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b0a:	4b8c      	ldr	r3, [pc, #560]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_RCC_OscConfig+0x64>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f000 bc9a 	b.w	8003458 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b28:	4b84      	ldr	r3, [pc, #528]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_RCC_OscConfig+0x7e>
 8002b34:	4b81      	ldr	r3, [pc, #516]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b3c:	e005      	b.n	8002b4a <HAL_RCC_OscConfig+0x8a>
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d224      	bcs.n	8002b98 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fe9c 	bl	8003890 <RCC_SetFlashLatencyFromMSIRange>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f000 bc7a 	b.w	8003458 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b64:	4b75      	ldr	r3, [pc, #468]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a74      	ldr	r2, [pc, #464]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b72      	ldr	r3, [pc, #456]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	496f      	ldr	r1, [pc, #444]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b82:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	496a      	ldr	r1, [pc, #424]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
 8002b96:	e026      	b.n	8002be6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b98:	4b68      	ldr	r3, [pc, #416]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a67      	ldr	r2, [pc, #412]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b65      	ldr	r3, [pc, #404]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	4962      	ldr	r1, [pc, #392]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb6:	4b61      	ldr	r3, [pc, #388]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	495d      	ldr	r1, [pc, #372]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fe5b 	bl	8003890 <RCC_SetFlashLatencyFromMSIRange>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f000 bc39 	b.w	8003458 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002be6:	f000 fe17 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4a54      	ldr	r2, [pc, #336]	@ (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002bee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bf0:	4b54      	ldr	r3, [pc, #336]	@ (8002d44 <HAL_RCC_OscConfig+0x284>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fad7 	bl	80011a8 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d060      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	f000 bc27 	b.w	8003458 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d039      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c12:	4b4a      	ldr	r3, [pc, #296]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a49      	ldr	r2, [pc, #292]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fb13 	bl	8001248 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c24:	e00f      	b.n	8002c46 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c26:	f7fe fb0f 	bl	8001248 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d908      	bls.n	8002c46 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c34:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	f000 bc09 	b.w	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c46:	4b3d      	ldr	r3, [pc, #244]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0e9      	beq.n	8002c26 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a39      	ldr	r2, [pc, #228]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b37      	ldr	r3, [pc, #220]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	4934      	ldr	r1, [pc, #208]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b32      	ldr	r3, [pc, #200]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	492f      	ldr	r1, [pc, #188]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e020      	b.n	8002cc8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fad9 	bl	8001248 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c98:	e00e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fad5 	bl	8001248 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d907      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca8:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e3cf      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb8:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ea      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1da>
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07e      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x226>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d10e      	bne.n	8002cfe <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06e      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x310>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d16a      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e3ac      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x256>
 8002d08:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e024      	b.n	8002d60 <HAL_RCC_OscConfig+0x2a0>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1e:	d113      	bne.n	8002d48 <HAL_RCC_OscConfig+0x288>
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a02      	ldr	r2, [pc, #8]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e012      	b.n	8002d60 <HAL_RCC_OscConfig+0x2a0>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004
 8002d48:	4b8b      	ldr	r3, [pc, #556]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a8a      	ldr	r2, [pc, #552]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b88      	ldr	r3, [pc, #544]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a87      	ldr	r2, [pc, #540]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d019      	beq.n	8002d9c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fa6e 	bl	8001248 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6e:	e00e      	b.n	8002d8e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fa6a 	bl	8001248 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d907      	bls.n	8002d8e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7e:	4b7e      	ldr	r3, [pc, #504]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e364      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ea      	beq.n	8002d70 <HAL_RCC_OscConfig+0x2b0>
 8002d9a:	e01a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fa54 	bl	8001248 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	e00e      	b.n	8002dc2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fa50 	bl	8001248 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d907      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db2:	4b71      	ldr	r3, [pc, #452]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e34a      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ea      	bne.n	8002da4 <HAL_RCC_OscConfig+0x2e4>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d06c      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x330>
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d119      	bne.n	8002e1e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d116      	bne.n	8002e1e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df0:	4b61      	ldr	r3, [pc, #388]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x348>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e327      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b5b      	ldr	r3, [pc, #364]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	4958      	ldr	r1, [pc, #352]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1c:	e04c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d029      	beq.n	8002e7a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e26:	4b54      	ldr	r3, [pc, #336]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a53      	ldr	r2, [pc, #332]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fa09 	bl	8001248 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e38:	e00e      	b.n	8002e58 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fa05 	bl	8001248 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d907      	bls.n	8002e58 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	4b4b      	ldr	r3, [pc, #300]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e2ff      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e58:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ea      	beq.n	8002e3a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b44      	ldr	r3, [pc, #272]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	4941      	ldr	r1, [pc, #260]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	e01e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe f9df 	bl	8001248 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe f9db 	bl	8001248 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e9c:	4b36      	ldr	r3, [pc, #216]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e2d5      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eac:	4b32      	ldr	r3, [pc, #200]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d062      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d038      	beq.n	8002f3e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d108      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ed4:	4b28      	ldr	r3, [pc, #160]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eda:	4a27      	ldr	r2, [pc, #156]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002edc:	f023 0310 	bic.w	r3, r3, #16
 8002ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ee4:	e007      	b.n	8002ef6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eec:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	f043 0310 	orr.w	r3, r3, #16
 8002ef2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f99f 	bl	8001248 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f0c:	e00f      	b.n	8002f2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe f99b 	bl	8001248 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b07      	cmp	r3, #7
 8002f1a:	d908      	bls.n	8002f2e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1c:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e294      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2e:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0e8      	beq.n	8002f0e <HAL_RCC_OscConfig+0x44e>
 8002f3c:	e025      	b.n	8002f8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f44:	4a0c      	ldr	r2, [pc, #48]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f97b 	bl	8001248 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f54:	e012      	b.n	8002f7c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fe f977 	bl	8001248 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d90b      	bls.n	8002f7c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e270      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f7c:	4ba8      	ldr	r3, [pc, #672]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e5      	bne.n	8002f56 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 812d 	beq.w	80031f2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	4a9c      	ldr	r2, [pc, #624]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	4b97      	ldr	r3, [pc, #604]	@ (8003224 <HAL_RCC_OscConfig+0x764>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11e      	bne.n	800300e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd0:	4b94      	ldr	r3, [pc, #592]	@ (8003224 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a93      	ldr	r2, [pc, #588]	@ (8003224 <HAL_RCC_OscConfig+0x764>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe f934 	bl	8001248 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe2:	e00e      	b.n	8003002 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7fe f930 	bl	8001248 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d907      	bls.n	8003002 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	@ (8003224 <HAL_RCC_OscConfig+0x764>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e22a      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	4b88      	ldr	r3, [pc, #544]	@ (8003224 <HAL_RCC_OscConfig+0x764>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0ea      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01f      	beq.n	800305a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	d010      	beq.n	8003048 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003026:	4b7e      	ldr	r3, [pc, #504]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302c:	4a7c      	ldr	r2, [pc, #496]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003036:	4b7a      	ldr	r3, [pc, #488]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303c:	4a78      	ldr	r2, [pc, #480]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003046:	e018      	b.n	800307a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003048:	4b75      	ldr	r3, [pc, #468]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304e:	4a74      	ldr	r2, [pc, #464]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003058:	e00f      	b.n	800307a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800305a:	4b71      	ldr	r3, [pc, #452]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	4a6f      	ldr	r2, [pc, #444]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003070:	4a6b      	ldr	r2, [pc, #428]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003072:	f023 0304 	bic.w	r3, r3, #4
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d068      	beq.n	8003154 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe f8e1 	bl	8001248 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003088:	e011      	b.n	80030ae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f8dd 	bl	8001248 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d908      	bls.n	80030ae <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309c:	4b60      	ldr	r3, [pc, #384]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1d4      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0e6      	beq.n	800308a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d022      	beq.n	800310e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030c8:	4b55      	ldr	r3, [pc, #340]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ce:	4a54      	ldr	r2, [pc, #336]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80030d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030d8:	e011      	b.n	80030fe <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe f8b5 	bl	8001248 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d908      	bls.n	80030fe <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1ac      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030fe:	4b48      	ldr	r3, [pc, #288]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0e6      	beq.n	80030da <HAL_RCC_OscConfig+0x61a>
 800310c:	e068      	b.n	80031e0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800310e:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003114:	4a42      	ldr	r2, [pc, #264]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800311e:	e011      	b.n	8003144 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe f892 	bl	8001248 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d908      	bls.n	8003144 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e189      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003144:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e6      	bne.n	8003120 <HAL_RCC_OscConfig+0x660>
 8003152:	e045      	b.n	80031e0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe f878 	bl	8001248 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315a:	e011      	b.n	8003180 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe f874 	bl	8001248 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d908      	bls.n	8003180 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316e:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e16b      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003180:	4b27      	ldr	r3, [pc, #156]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e6      	bne.n	800315c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800318e:	4b24      	ldr	r3, [pc, #144]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d021      	beq.n	80031e0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800319c:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80031a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031ac:	e011      	b.n	80031d2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe f84b 	bl	8001248 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d908      	bls.n	80031d2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031c0:	4b17      	ldr	r3, [pc, #92]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e142      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031d2:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e6      	bne.n	80031ae <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031e0:	7ffb      	ldrb	r3, [r7, #31]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d04f      	beq.n	800329e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d028      	beq.n	8003258 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800320c:	4a04      	ldr	r2, [pc, #16]	@ (8003220 <HAL_RCC_OscConfig+0x760>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe f817 	bl	8001248 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321c:	e014      	b.n	8003248 <HAL_RCC_OscConfig+0x788>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003228:	f7fe f80e 	bl	8001248 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d908      	bls.n	8003248 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003236:	4b8a      	ldr	r3, [pc, #552]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e107      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003248:	4b85      	ldr	r3, [pc, #532]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 800324a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0e8      	beq.n	8003228 <HAL_RCC_OscConfig+0x768>
 8003256:	e022      	b.n	800329e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003258:	4b81      	ldr	r3, [pc, #516]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800325e:	4a80      	ldr	r2, [pc, #512]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd ffee 	bl	8001248 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800326e:	e00f      	b.n	8003290 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003270:	f7fd ffea 	bl	8001248 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d908      	bls.n	8003290 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800327e:	4b78      	ldr	r3, [pc, #480]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0e3      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003290:	4b73      	ldr	r3, [pc, #460]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e8      	bne.n	8003270 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80d7 	beq.w	8003456 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f000 8091 	beq.w	80033d8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d166      	bne.n	800338c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b68      	ldr	r3, [pc, #416]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a67      	ldr	r2, [pc, #412]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80032c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd ffbd 	bl	8001248 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fd ffb9 	bl	8001248 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0b3      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fc:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	4b58      	ldr	r3, [pc, #352]	@ (8003464 <HAL_RCC_OscConfig+0x9a4>)
 8003302:	4013      	ands	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800330c:	3a01      	subs	r2, #1
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003316:	0212      	lsls	r2, r2, #8
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800331e:	0852      	lsrs	r2, r2, #1
 8003320:	3a01      	subs	r2, #1
 8003322:	0552      	lsls	r2, r2, #21
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800332a:	0852      	lsrs	r2, r2, #1
 800332c:	3a01      	subs	r2, #1
 800332e:	0652      	lsls	r2, r2, #25
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003336:	06d2      	lsls	r2, r2, #27
 8003338:	430a      	orrs	r2, r1
 800333a:	4949      	ldr	r1, [pc, #292]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b47      	ldr	r3, [pc, #284]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a46      	ldr	r2, [pc, #280]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800334a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800334c:	4b44      	ldr	r3, [pc, #272]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a43      	ldr	r2, [pc, #268]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003356:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd ff76 	bl	8001248 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	e00e      	b.n	800337e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fd ff72 	bl	8001248 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d907      	bls.n	800337e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	4b3c      	ldr	r3, [pc, #240]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06c      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337e:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ea      	beq.n	8003360 <HAL_RCC_OscConfig+0x8a0>
 800338a:	e064      	b.n	8003456 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a33      	ldr	r2, [pc, #204]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd ff56 	bl	8001248 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339e:	e00e      	b.n	80033be <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd ff52 	bl	8001248 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d907      	bls.n	80033be <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e04c      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ea      	bne.n	80033a0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033ca:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4924      	ldr	r1, [pc, #144]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80033d0:	4b25      	ldr	r3, [pc, #148]	@ (8003468 <HAL_RCC_OscConfig+0x9a8>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60cb      	str	r3, [r1, #12]
 80033d6:	e03e      	b.n	8003456 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e039      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80033e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <HAL_RCC_OscConfig+0x9a0>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d12c      	bne.n	8003452 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003402:	3b01      	subs	r3, #1
 8003404:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d123      	bne.n	8003452 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d11b      	bne.n	8003452 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d113      	bne.n	8003452 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d109      	bne.n	8003452 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	019f800c 	.word	0x019f800c
 8003468:	feeefffc 	.word	0xfeeefffc

0800346c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e11c      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003484:	4b90      	ldr	r3, [pc, #576]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d910      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b8d      	ldr	r3, [pc, #564]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 020f 	bic.w	r2, r3, #15
 800349a:	498b      	ldr	r1, [pc, #556]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b89      	ldr	r3, [pc, #548]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e104      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d010      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4b81      	ldr	r3, [pc, #516]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d908      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d0:	4b7e      	ldr	r3, [pc, #504]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	497b      	ldr	r1, [pc, #492]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8085 	beq.w	80035fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d11f      	bne.n	8003538 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f8:	4b74      	ldr	r3, [pc, #464]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0da      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003508:	f000 fa26 	bl	8003958 <RCC_GetSysClockFreqFromPLLSource>
 800350c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4a6f      	ldr	r2, [pc, #444]	@ (80036d0 <HAL_RCC_ClockConfig+0x264>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d947      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003516:	4b6d      	ldr	r3, [pc, #436]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d141      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003522:	4b6a      	ldr	r3, [pc, #424]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800352a:	4a68      	ldr	r2, [pc, #416]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 800352c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003530:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003532:	2380      	movs	r3, #128	@ 0x80
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e036      	b.n	80035a6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d107      	bne.n	8003550 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003540:	4b62      	ldr	r3, [pc, #392]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d115      	bne.n	8003578 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0b6      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003558:	4b5c      	ldr	r3, [pc, #368]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0aa      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	4b58      	ldr	r3, [pc, #352]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0a2      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003578:	f000 f8b0 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800357c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4a53      	ldr	r2, [pc, #332]	@ (80036d0 <HAL_RCC_ClockConfig+0x264>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d90f      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003586:	4b51      	ldr	r3, [pc, #324]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003592:	4b4e      	ldr	r3, [pc, #312]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800359a:	4a4c      	ldr	r2, [pc, #304]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 800359c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4946      	ldr	r1, [pc, #280]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b8:	f7fd fe46 	bl	8001248 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e013      	b.n	80035e8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fd fe42 	bl	8001248 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d90a      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b3e      	ldr	r3, [pc, #248]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e06a      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e8:	4b38      	ldr	r3, [pc, #224]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 020c 	and.w	r2, r3, #12
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d1e2      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b80      	cmp	r3, #128	@ 0x80
 80035fe:	d105      	bne.n	800360c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003600:	4b32      	ldr	r3, [pc, #200]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a31      	ldr	r2, [pc, #196]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800360a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003624:	429a      	cmp	r2, r3
 8003626:	d208      	bcs.n	800363a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b28      	ldr	r3, [pc, #160]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4925      	ldr	r1, [pc, #148]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363a:	4b23      	ldr	r3, [pc, #140]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d210      	bcs.n	800366a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003648:	4b1f      	ldr	r3, [pc, #124]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 020f 	bic.w	r2, r3, #15
 8003650:	491d      	ldr	r1, [pc, #116]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCC_ClockConfig+0x25c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e029      	b.n	80036be <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4912      	ldr	r1, [pc, #72]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003694:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	490a      	ldr	r1, [pc, #40]	@ (80036cc <HAL_RCC_ClockConfig+0x260>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036a8:	f000 f8b6 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x268>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_ClockConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fd76 	bl	80011a8 <HAL_InitTick>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40021000 	.word	0x40021000
 80036d0:	04c4b400 	.word	0x04c4b400
 80036d4:	20000000 	.word	0x20000000
 80036d8:	20000004 	.word	0x20000004

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	@ 0x24
 80036e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ea:	4b47      	ldr	r3, [pc, #284]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f4:	4b44      	ldr	r3, [pc, #272]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x34>
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b0c      	cmp	r3, #12
 8003708:	d121      	bne.n	800374e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d11e      	bne.n	800374e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003710:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800371c:	4b3a      	ldr	r3, [pc, #232]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e005      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800372c:	4b36      	ldr	r3, [pc, #216]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003738:	4a34      	ldr	r2, [pc, #208]	@ (800380c <HAL_RCC_GetSysClockFreq+0x130>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003740:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d102      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003754:	4b2e      	ldr	r3, [pc, #184]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x134>)
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	e004      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d101      	bne.n	8003764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003760:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x138>)
 8003762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d146      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800376a:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3301      	adds	r3, #1
 8003780:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d003      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0xb4>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d00d      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0xce>
 800378e:	e019      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003790:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x134>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 800379a:	68d2      	ldr	r2, [r2, #12]
 800379c:	0a12      	lsrs	r2, r2, #8
 800379e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]
        break;
 80037a8:	e019      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x138>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	0a12      	lsrs	r2, r2, #8
 80037b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
        break;
 80037c2:	e00c      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037ce:	68d2      	ldr	r2, [r2, #12]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
        break;
 80037dc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	0e5b      	lsrs	r3, r3, #25
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	3301      	adds	r3, #1
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037f8:	69bb      	ldr	r3, [r7, #24]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3724      	adds	r7, #36	@ 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	080059e4 	.word	0x080059e4
 8003810:	00f42400 	.word	0x00f42400
 8003814:	007a1200 	.word	0x007a1200

08003818 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800381c:	f7ff ff5e 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCC_GetHCLKFreq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	4903      	ldr	r1, [pc, #12]	@ (800383c <HAL_RCC_GetHCLKFreq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	080059cc 	.word	0x080059cc

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003844:	f7ff ffe8 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	@ (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	080059dc 	.word	0x080059dc

08003868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800386c:	f7ff ffd4 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0adb      	lsrs	r3, r3, #11
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCC_GetPCLK2Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	080059dc 	.word	0x080059dc

08003890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800389c:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038a8:	f7ff f86c 	bl	8002984 <HAL_PWREx_GetVoltageRange>
 80038ac:	6138      	str	r0, [r7, #16]
 80038ae:	e014      	b.n	80038da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038c8:	f7ff f85c 	bl	8002984 <HAL_PWREx_GetVoltageRange>
 80038cc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e6:	d10b      	bne.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d919      	bls.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2ba0      	cmp	r3, #160	@ 0xa0
 80038f2:	d902      	bls.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038f4:	2302      	movs	r3, #2
 80038f6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80038f8:	e013      	b.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038fa:	2301      	movs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80038fe:	e010      	b.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d902      	bls.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003906:	2303      	movs	r3, #3
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e00a      	b.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b80      	cmp	r3, #128	@ 0x80
 8003910:	d102      	bne.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003912:	2302      	movs	r3, #2
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e004      	b.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b70      	cmp	r3, #112	@ 0x70
 800391c:	d101      	bne.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800391e:	2301      	movs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 020f 	bic.w	r2, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40022000 	.word	0x40022000

08003958 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395e:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003968:	4b2e      	ldr	r3, [pc, #184]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3301      	adds	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d015      	beq.n	80039a8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d839      	bhi.n	80039f6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d01c      	beq.n	80039c2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d133      	bne.n	80039f6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800398e:	4a26      	ldr	r2, [pc, #152]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	4a23      	ldr	r2, [pc, #140]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	0a12      	lsrs	r2, r2, #8
 800399c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	613b      	str	r3, [r7, #16]
      break;
 80039a6:	e029      	b.n	80039fc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a8:	4a20      	ldr	r2, [pc, #128]	@ (8003a2c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039b2:	68d2      	ldr	r2, [r2, #12]
 80039b4:	0a12      	lsrs	r2, r2, #8
 80039b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	613b      	str	r3, [r7, #16]
      break;
 80039c0:	e01c      	b.n	80039fc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039c2:	4b18      	ldr	r3, [pc, #96]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e005      	b.n	80039ea <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039de:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80039ea:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	613b      	str	r3, [r7, #16]
        break;
 80039f4:	e002      	b.n	80039fc <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
      break;
 80039fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0e5b      	lsrs	r3, r3, #25
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	3301      	adds	r3, #1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a16:	683b      	ldr	r3, [r7, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40021000 	.word	0x40021000
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	080059e4 	.word	0x080059e4

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a40:	2300      	movs	r3, #0
 8003a42:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d040      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a54:	2b80      	cmp	r3, #128	@ 0x80
 8003a56:	d02a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d825      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a5c:	2b60      	cmp	r3, #96	@ 0x60
 8003a5e:	d026      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a60:	2b60      	cmp	r3, #96	@ 0x60
 8003a62:	d821      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	d006      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d81d      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d010      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a74:	e018      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a76:	4b8f      	ldr	r3, [pc, #572]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a8e      	ldr	r2, [pc, #568]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a82:	e015      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3304      	adds	r3, #4
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fb56 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a94:	e00c      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3320      	adds	r3, #32
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fc33 	bl	8004308 <RCCEx_PLLSAI2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77fb      	strb	r3, [r7, #31]
        break;
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003abc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac4:	497b      	ldr	r1, [pc, #492]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003acc:	e001      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ace:	7ffb      	ldrb	r3, [r7, #31]
 8003ad0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d047      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae6:	d030      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aec:	d82a      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af2:	d02a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af8:	d824      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b04:	d81e      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0e:	d010      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b10:	e018      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b12:	4b68      	ldr	r3, [pc, #416]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4a67      	ldr	r2, [pc, #412]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b1e:	e015      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fb08 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b30:	e00c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3320      	adds	r3, #32
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fbe5 	bl	8004308 <RCCEx_PLLSAI2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	77fb      	strb	r3, [r7, #31]
        break;
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	7ffb      	ldrb	r3, [r7, #31]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b52:	4b58      	ldr	r3, [pc, #352]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4954      	ldr	r1, [pc, #336]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80ab 	beq.w	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b80:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	4a48      	ldr	r2, [pc, #288]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b98:	4b46      	ldr	r3, [pc, #280]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba8:	4b43      	ldr	r3, [pc, #268]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fb48 	bl	8001248 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bba:	e00f      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7fd fb44 	bl	8001248 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d908      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bca:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003bda:	e006      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bdc:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0e9      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003bea:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d164      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bf2:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01f      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d019      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c10:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c1c:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	4a24      	ldr	r2, [pc, #144]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2c:	4b21      	ldr	r3, [pc, #132]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	4a20      	ldr	r2, [pc, #128]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01f      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fd fafb 	bl	8001248 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c54:	e012      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fd faf7 	bl	8001248 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d909      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c68:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003c7a:	e007      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0e5      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003c8c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10c      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c94:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca4:	4903      	ldr	r1, [pc, #12]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cac:	e008      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
 8003cb0:	77bb      	strb	r3, [r7, #30]
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
 8003cbe:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	4a9b      	ldr	r2, [pc, #620]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cde:	4b96      	ldr	r3, [pc, #600]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce4:	f023 0203 	bic.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cec:	4992      	ldr	r1, [pc, #584]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d00:	4b8d      	ldr	r3, [pc, #564]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 020c 	bic.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	498a      	ldr	r1, [pc, #552]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d22:	4b85      	ldr	r3, [pc, #532]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	4981      	ldr	r1, [pc, #516]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d44:	4b7c      	ldr	r3, [pc, #496]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	4979      	ldr	r1, [pc, #484]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d66:	4b74      	ldr	r3, [pc, #464]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d74:	4970      	ldr	r1, [pc, #448]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d88:	4b6b      	ldr	r3, [pc, #428]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d96:	4968      	ldr	r1, [pc, #416]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003daa:	4b63      	ldr	r3, [pc, #396]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db8:	495f      	ldr	r1, [pc, #380]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dda:	4957      	ldr	r1, [pc, #348]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003dee:	4b52      	ldr	r3, [pc, #328]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dfc:	494e      	ldr	r1, [pc, #312]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d031      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e18:	d00e      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e1e:	d814      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e28:	d10f      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2a:	4b43      	ldr	r3, [pc, #268]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4a42      	ldr	r2, [pc, #264]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e34:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e36:	e00c      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f97c 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e48:	e003      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	77fb      	strb	r3, [r7, #31]
        break;
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e58:	4b37      	ldr	r3, [pc, #220]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e66:	4934      	ldr	r1, [pc, #208]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e6e:	e001      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
 8003e72:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e80:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	492a      	ldr	r1, [pc, #168]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea2:	4b25      	ldr	r3, [pc, #148]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb0:	4921      	ldr	r1, [pc, #132]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	4919      	ldr	r1, [pc, #100]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eec:	f023 0203 	bic.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	4910      	ldr	r1, [pc, #64]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f16:	4908      	ldr	r1, [pc, #32]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f26:	d109      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a02      	ldr	r2, [pc, #8]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	e014      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f8f5 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
 8003f5e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d04a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f74:	d108      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003f76:	4b70      	ldr	r3, [pc, #448]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f86:	e012      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003f88:	4b6b      	ldr	r3, [pc, #428]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f96:	4968      	ldr	r1, [pc, #416]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f9e:	4b66      	ldr	r3, [pc, #408]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fa4:	4a64      	ldr	r2, [pc, #400]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003faa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb6:	d10d      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f8bc 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d019      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003fce:	7ffb      	ldrb	r3, [r7, #31]
 8003fd0:	77bb      	strb	r3, [r7, #30]
 8003fd2:	e016      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fde:	4b56      	ldr	r3, [pc, #344]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a55      	ldr	r2, [pc, #340]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe8:	60d3      	str	r3, [r2, #12]
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ff6:	4b50      	ldr	r3, [pc, #320]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	4a4f      	ldr	r2, [pc, #316]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004000:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d028      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401c:	4946      	ldr	r1, [pc, #280]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402c:	d106      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402e:	4b42      	ldr	r3, [pc, #264]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4a41      	ldr	r2, [pc, #260]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004034:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004038:	60d3      	str	r3, [r2, #12]
 800403a:	e011      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f875 	bl	800413c <RCCEx_PLLSAI1_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01e      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800406c:	4b32      	ldr	r3, [pc, #200]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004072:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800407c:	492e      	ldr	r1, [pc, #184]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408e:	d10c      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f850 	bl	800413c <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040b6:	4b20      	ldr	r3, [pc, #128]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040bc:	f023 0204 	bic.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c6:	491c      	ldr	r1, [pc, #112]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040e0:	f023 0218 	bic.w	r2, r3, #24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	4913      	ldr	r1, [pc, #76]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d017      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004100:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004104:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800410e:	490a      	ldr	r1, [pc, #40]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800411c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004120:	d105      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004122:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	4a04      	ldr	r2, [pc, #16]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800412e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000

0800413c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d018      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x48>
 8004152:	2b03      	cmp	r3, #3
 8004154:	d81f      	bhi.n	8004196 <RCCEx_PLLSAI1_Config+0x5a>
 8004156:	2b01      	cmp	r3, #1
 8004158:	d002      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x24>
 800415a:	2b02      	cmp	r3, #2
 800415c:	d009      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x36>
 800415e:	e01a      	b.n	8004196 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004160:	4b65      	ldr	r3, [pc, #404]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d117      	bne.n	800419c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e014      	b.n	800419c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004172:	4b61      	ldr	r3, [pc, #388]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d110      	bne.n	80041a0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e00d      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004184:	4b5c      	ldr	r3, [pc, #368]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004194:	e006      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
      break;
 800419a:	e004      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 809f 	bne.w	80042ec <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041ae:	4b52      	ldr	r3, [pc, #328]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a51      	ldr	r2, [pc, #324]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ba:	f7fd f845 	bl	8001248 <HAL_GetTick>
 80041be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041c0:	e00f      	b.n	80041e2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c2:	f7fd f841 	bl	8001248 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d908      	bls.n	80041e2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041d0:	4b49      	ldr	r3, [pc, #292]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041e0:	e006      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041e2:	4b45      	ldr	r3, [pc, #276]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e9      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0x86>
 80041ee:	e000      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80041f0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d179      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041fe:	4b3e      	ldr	r3, [pc, #248]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	4b3e      	ldr	r3, [pc, #248]	@ (80042fc <RCCEx_PLLSAI1_Config+0x1c0>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	0211      	lsls	r1, r2, #8
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68d2      	ldr	r2, [r2, #12]
 8004210:	06d2      	lsls	r2, r2, #27
 8004212:	4311      	orrs	r1, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6852      	ldr	r2, [r2, #4]
 8004218:	3a01      	subs	r2, #1
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	4934      	ldr	r1, [pc, #208]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
 800422a:	e033      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d118      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004232:	4b31      	ldr	r3, [pc, #196]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	4b32      	ldr	r3, [pc, #200]	@ (8004300 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6892      	ldr	r2, [r2, #8]
 800423e:	0211      	lsls	r1, r2, #8
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6912      	ldr	r2, [r2, #16]
 8004244:	0852      	lsrs	r2, r2, #1
 8004246:	3a01      	subs	r2, #1
 8004248:	0552      	lsls	r2, r2, #21
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6852      	ldr	r2, [r2, #4]
 8004250:	3a01      	subs	r2, #1
 8004252:	0112      	lsls	r2, r2, #4
 8004254:	4311      	orrs	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	4926      	ldr	r1, [pc, #152]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]
 8004262:	e017      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004264:	4b24      	ldr	r3, [pc, #144]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	4b26      	ldr	r3, [pc, #152]	@ (8004304 <RCCEx_PLLSAI1_Config+0x1c8>)
 800426a:	4013      	ands	r3, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6892      	ldr	r2, [r2, #8]
 8004270:	0211      	lsls	r1, r2, #8
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6952      	ldr	r2, [r2, #20]
 8004276:	0852      	lsrs	r2, r2, #1
 8004278:	3a01      	subs	r2, #1
 800427a:	0652      	lsls	r2, r2, #25
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6852      	ldr	r2, [r2, #4]
 8004282:	3a01      	subs	r2, #1
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	491a      	ldr	r1, [pc, #104]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004294:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800429a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800429e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fc ffd2 	bl	8001248 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a6:	e00f      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a8:	f7fc ffce 	bl	8001248 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d908      	bls.n	80042c8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80042c6:	e006      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0e9      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x16c>
 80042d4:	e000      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80042d6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80042de:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	4904      	ldr	r1, [pc, #16]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	07ff800c 	.word	0x07ff800c
 8004300:	ff9f800c 	.word	0xff9f800c
 8004304:	f9ff800c 	.word	0xf9ff800c

08004308 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d018      	beq.n	8004350 <RCCEx_PLLSAI2_Config+0x48>
 800431e:	2b03      	cmp	r3, #3
 8004320:	d81f      	bhi.n	8004362 <RCCEx_PLLSAI2_Config+0x5a>
 8004322:	2b01      	cmp	r3, #1
 8004324:	d002      	beq.n	800432c <RCCEx_PLLSAI2_Config+0x24>
 8004326:	2b02      	cmp	r3, #2
 8004328:	d009      	beq.n	800433e <RCCEx_PLLSAI2_Config+0x36>
 800432a:	e01a      	b.n	8004362 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800432c:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d117      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433c:	e014      	b.n	8004368 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800433e:	4b46      	ldr	r3, [pc, #280]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d110      	bne.n	800436c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434e:	e00d      	b.n	800436c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004350:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004360:	e006      	b.n	8004370 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
      break;
 8004366:	e004      	b.n	8004372 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004368:	bf00      	nop
 800436a:	e002      	b.n	8004372 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004370:	bf00      	nop
  }

  if (status == HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d169      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004378:	4b37      	ldr	r3, [pc, #220]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a36      	ldr	r2, [pc, #216]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 800437e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fc ff60 	bl	8001248 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800438a:	e00f      	b.n	80043ac <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800438c:	f7fc ff5c 	bl	8001248 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d908      	bls.n	80043ac <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800439a:	4b2f      	ldr	r3, [pc, #188]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043aa:	e006      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e9      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x84>
 80043b8:	e000      	b.n	80043bc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80043ba:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d144      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d115      	bne.n	80043f4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043c8:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	4b23      	ldr	r3, [pc, #140]	@ (800445c <RCCEx_PLLSAI2_Config+0x154>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6892      	ldr	r2, [r2, #8]
 80043d4:	0211      	lsls	r1, r2, #8
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68d2      	ldr	r2, [r2, #12]
 80043da:	06d2      	lsls	r2, r2, #27
 80043dc:	4311      	orrs	r1, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6852      	ldr	r2, [r2, #4]
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	491a      	ldr	r1, [pc, #104]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043f4:	4b18      	ldr	r3, [pc, #96]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fc ff22 	bl	8001248 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004406:	e00f      	b.n	8004428 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004408:	f7fc ff1e 	bl	8001248 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d908      	bls.n	8004428 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004426:	e006      	b.n	8004436 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0e9      	beq.n	8004408 <RCCEx_PLLSAI2_Config+0x100>
 8004434:	e000      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004436:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800443e:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	4904      	ldr	r1, [pc, #16]	@ (8004458 <RCCEx_PLLSAI2_Config+0x150>)
 8004448:	4313      	orrs	r3, r2
 800444a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	07ff800c 	.word	0x07ff800c

08004460 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d066      	beq.n	8004540 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fcbc 	bl	8000e04 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d045      	beq.n	800452e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044a2:	4b2a      	ldr	r3, [pc, #168]	@ (800454c <HAL_RTC_Init+0xec>)
 80044a4:	22ca      	movs	r2, #202	@ 0xca
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80044a8:	4b28      	ldr	r3, [pc, #160]	@ (800454c <HAL_RTC_Init+0xec>)
 80044aa:	2253      	movs	r2, #83	@ 0x53
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f872 	bl	8004598 <RTC_EnterInitMode>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80044be:	4b23      	ldr	r3, [pc, #140]	@ (800454c <HAL_RTC_Init+0xec>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	4a22      	ldr	r2, [pc, #136]	@ (800454c <HAL_RTC_Init+0xec>)
 80044c4:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80044c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044cc:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80044ce:	4b1f      	ldr	r3, [pc, #124]	@ (800454c <HAL_RTC_Init+0xec>)
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	4319      	orrs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	491a      	ldr	r1, [pc, #104]	@ (800454c <HAL_RTC_Init+0xec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	4916      	ldr	r1, [pc, #88]	@ (800454c <HAL_RTC_Init+0xec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f881 	bl	8004600 <RTC_ExitInitMode>
 80044fe:	4603      	mov	r3, r0
 8004500:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10e      	bne.n	8004526 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004508:	4b10      	ldr	r3, [pc, #64]	@ (800454c <HAL_RTC_Init+0xec>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a19      	ldr	r1, [r3, #32]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4319      	orrs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	430b      	orrs	r3, r1
 8004520:	490a      	ldr	r1, [pc, #40]	@ (800454c <HAL_RTC_Init+0xec>)
 8004522:	4313      	orrs	r3, r2
 8004524:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004526:	4b09      	ldr	r3, [pc, #36]	@ (800454c <HAL_RTC_Init+0xec>)
 8004528:	22ff      	movs	r2, #255	@ 0xff
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24
 800452c:	e001      	b.n	8004532 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40002800 	.word	0x40002800

08004550 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004558:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <HAL_RTC_WaitForSynchro+0x40>)
 800455a:	4a0e      	ldr	r2, [pc, #56]	@ (8004594 <HAL_RTC_WaitForSynchro+0x44>)
 800455c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800455e:	f7fc fe73 	bl	8001248 <HAL_GetTick>
 8004562:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004564:	e009      	b.n	800457a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004566:	f7fc fe6f 	bl	8001248 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004574:	d901      	bls.n	800457a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e006      	b.n	8004588 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RTC_WaitForSynchro+0x40>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ef      	beq.n	8004566 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40002800 	.word	0x40002800
 8004594:	0001005c 	.word	0x0001005c

08004598 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80045a4:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <RTC_EnterInitMode+0x64>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d120      	bne.n	80045f2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045b0:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <RTC_EnterInitMode+0x64>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a11      	ldr	r2, [pc, #68]	@ (80045fc <RTC_EnterInitMode+0x64>)
 80045b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80045bc:	f7fc fe44 	bl	8001248 <HAL_GetTick>
 80045c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045c2:	e00d      	b.n	80045e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045c4:	f7fc fe40 	bl	8001248 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045d2:	d905      	bls.n	80045e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2203      	movs	r2, #3
 80045dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <RTC_EnterInitMode+0x64>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <RTC_EnterInitMode+0x5a>
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d1e8      	bne.n	80045c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40002800 	.word	0x40002800

08004600 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800460c:	4b1a      	ldr	r3, [pc, #104]	@ (8004678 <RTC_ExitInitMode+0x78>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <RTC_ExitInitMode+0x78>)
 8004612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004616:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004618:	4b17      	ldr	r3, [pc, #92]	@ (8004678 <RTC_ExitInitMode+0x78>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10c      	bne.n	800463e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff93 	bl	8004550 <HAL_RTC_WaitForSynchro>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01e      	beq.n	800466e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2203      	movs	r2, #3
 8004634:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e017      	b.n	800466e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800463e:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <RTC_ExitInitMode+0x78>)
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	4a0d      	ldr	r2, [pc, #52]	@ (8004678 <RTC_ExitInitMode+0x78>)
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff80 	bl	8004550 <HAL_RTC_WaitForSynchro>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2203      	movs	r2, #3
 800465a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <RTC_ExitInitMode+0x78>)
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <RTC_ExitInitMode+0x78>)
 8004668:	f043 0320 	orr.w	r3, r3, #32
 800466c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40002800 	.word	0x40002800

0800467c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	490f      	ldr	r1, [pc, #60]	@ (80046cc <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004690:	4313      	orrs	r3, r2
 8004692:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	490c      	ldr	r1, [pc, #48]	@ (80046d0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6919      	ldr	r1, [r3, #16]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	430b      	orrs	r3, r1
 80046b6:	4906      	ldr	r1, [pc, #24]	@ (80046d0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40002800 	.word	0x40002800
 80046d0:	40003400 	.word	0x40003400

080046d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e042      	b.n	800476c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fb23 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2224      	movs	r2, #36	@ 0x24
 8004702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fb28 	bl	8004d74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f825 	bl	8004774 <UART_SetConfig>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e01b      	b.n	800476c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fba7 	bl	8004eb8 <UART_CheckIdleState>
 800476a:	4603      	mov	r3, r0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b08c      	sub	sp, #48	@ 0x30
 800477a:	af00      	add	r7, sp, #0
 800477c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4baa      	ldr	r3, [pc, #680]	@ (8004a4c <UART_SetConfig+0x2d8>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004a50 <UART_SetConfig+0x2dc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047dc:	4313      	orrs	r3, r2
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80047ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	f023 010f 	bic.w	r1, r3, #15
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a90      	ldr	r2, [pc, #576]	@ (8004a54 <UART_SetConfig+0x2e0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0xf0>
 8004818:	4b8f      	ldr	r3, [pc, #572]	@ (8004a58 <UART_SetConfig+0x2e4>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b03      	cmp	r3, #3
 8004824:	d81a      	bhi.n	800485c <UART_SetConfig+0xe8>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <UART_SetConfig+0xb8>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800484d 	.word	0x0800484d
 8004834:	08004845 	.word	0x08004845
 8004838:	08004855 	.word	0x08004855
 800483c:	2301      	movs	r3, #1
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004842:	e116      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484a:	e112      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004852:	e10e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485a:	e10a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004862:	e106      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7c      	ldr	r2, [pc, #496]	@ (8004a5c <UART_SetConfig+0x2e8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d138      	bne.n	80048e0 <UART_SetConfig+0x16c>
 800486e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a58 <UART_SetConfig+0x2e4>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d82d      	bhi.n	80048d8 <UART_SetConfig+0x164>
 800487c:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <UART_SetConfig+0x110>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048b9 	.word	0x080048b9
 8004888:	080048d9 	.word	0x080048d9
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048d9 	.word	0x080048d9
 8004894:	080048c9 	.word	0x080048c9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048d9 	.word	0x080048d9
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048c1 	.word	0x080048c1
 80048a8:	080048d9 	.word	0x080048d9
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048d1 	.word	0x080048d1
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048be:	e0d8      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048c0:	2302      	movs	r3, #2
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c6:	e0d4      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ce:	e0d0      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d6:	e0cc      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048de:	e0c8      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a60 <UART_SetConfig+0x2ec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d125      	bne.n	8004936 <UART_SetConfig+0x1c2>
 80048ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004a58 <UART_SetConfig+0x2e4>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048f4:	2b30      	cmp	r3, #48	@ 0x30
 80048f6:	d016      	beq.n	8004926 <UART_SetConfig+0x1b2>
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d818      	bhi.n	800492e <UART_SetConfig+0x1ba>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d00a      	beq.n	8004916 <UART_SetConfig+0x1a2>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d814      	bhi.n	800492e <UART_SetConfig+0x1ba>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <UART_SetConfig+0x19a>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d008      	beq.n	800491e <UART_SetConfig+0x1aa>
 800490c:	e00f      	b.n	800492e <UART_SetConfig+0x1ba>
 800490e:	2300      	movs	r3, #0
 8004910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004914:	e0ad      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004916:	2302      	movs	r3, #2
 8004918:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491c:	e0a9      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800491e:	2304      	movs	r3, #4
 8004920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004924:	e0a5      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004926:	2308      	movs	r3, #8
 8004928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492c:	e0a1      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800492e:	2310      	movs	r3, #16
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004934:	e09d      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4a      	ldr	r2, [pc, #296]	@ (8004a64 <UART_SetConfig+0x2f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d125      	bne.n	800498c <UART_SetConfig+0x218>
 8004940:	4b45      	ldr	r3, [pc, #276]	@ (8004a58 <UART_SetConfig+0x2e4>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800494a:	2bc0      	cmp	r3, #192	@ 0xc0
 800494c:	d016      	beq.n	800497c <UART_SetConfig+0x208>
 800494e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004950:	d818      	bhi.n	8004984 <UART_SetConfig+0x210>
 8004952:	2b80      	cmp	r3, #128	@ 0x80
 8004954:	d00a      	beq.n	800496c <UART_SetConfig+0x1f8>
 8004956:	2b80      	cmp	r3, #128	@ 0x80
 8004958:	d814      	bhi.n	8004984 <UART_SetConfig+0x210>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <UART_SetConfig+0x1f0>
 800495e:	2b40      	cmp	r3, #64	@ 0x40
 8004960:	d008      	beq.n	8004974 <UART_SetConfig+0x200>
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x210>
 8004964:	2300      	movs	r3, #0
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e082      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e07e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497a:	e07a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004982:	e076      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800498a:	e072      	b.n	8004a72 <UART_SetConfig+0x2fe>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a35      	ldr	r2, [pc, #212]	@ (8004a68 <UART_SetConfig+0x2f4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d12a      	bne.n	80049ec <UART_SetConfig+0x278>
 8004996:	4b30      	ldr	r3, [pc, #192]	@ (8004a58 <UART_SetConfig+0x2e4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a4:	d01a      	beq.n	80049dc <UART_SetConfig+0x268>
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049aa:	d81b      	bhi.n	80049e4 <UART_SetConfig+0x270>
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b0:	d00c      	beq.n	80049cc <UART_SetConfig+0x258>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b6:	d815      	bhi.n	80049e4 <UART_SetConfig+0x270>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <UART_SetConfig+0x250>
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c0:	d008      	beq.n	80049d4 <UART_SetConfig+0x260>
 80049c2:	e00f      	b.n	80049e4 <UART_SetConfig+0x270>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ca:	e052      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d2:	e04e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049d4:	2304      	movs	r3, #4
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049da:	e04a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e2:	e046      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ea:	e042      	b.n	8004a72 <UART_SetConfig+0x2fe>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	@ (8004a50 <UART_SetConfig+0x2dc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d13a      	bne.n	8004a6c <UART_SetConfig+0x2f8>
 80049f6:	4b18      	ldr	r3, [pc, #96]	@ (8004a58 <UART_SetConfig+0x2e4>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a04:	d01a      	beq.n	8004a3c <UART_SetConfig+0x2c8>
 8004a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a0a:	d81b      	bhi.n	8004a44 <UART_SetConfig+0x2d0>
 8004a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a10:	d00c      	beq.n	8004a2c <UART_SetConfig+0x2b8>
 8004a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a16:	d815      	bhi.n	8004a44 <UART_SetConfig+0x2d0>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <UART_SetConfig+0x2b0>
 8004a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a20:	d008      	beq.n	8004a34 <UART_SetConfig+0x2c0>
 8004a22:	e00f      	b.n	8004a44 <UART_SetConfig+0x2d0>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2a:	e022      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a32:	e01e      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3a:	e01a      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a42:	e016      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4a:	e012      	b.n	8004a72 <UART_SetConfig+0x2fe>
 8004a4c:	cfff69f3 	.word	0xcfff69f3
 8004a50:	40008000 	.word	0x40008000
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40004400 	.word	0x40004400
 8004a60:	40004800 	.word	0x40004800
 8004a64:	40004c00 	.word	0x40004c00
 8004a68:	40005000 	.word	0x40005000
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4ab0      	ldr	r2, [pc, #704]	@ (8004d38 <UART_SetConfig+0x5c4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 809b 	bne.w	8004bb4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d827      	bhi.n	8004ad6 <UART_SetConfig+0x362>
 8004a86:	a201      	add	r2, pc, #4	@ (adr r2, 8004a8c <UART_SetConfig+0x318>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	08004ad7 	.word	0x08004ad7
 8004a9c:	08004ac7 	.word	0x08004ac7
 8004aa0:	08004ad7 	.word	0x08004ad7
 8004aa4:	08004ad7 	.word	0x08004ad7
 8004aa8:	08004ad7 	.word	0x08004ad7
 8004aac:	08004acf 	.word	0x08004acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7fe fec6 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ab6:	e014      	b.n	8004ae2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ab8:	f7fe fed6 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004abe:	e010      	b.n	8004ae2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d3c <UART_SetConfig+0x5c8>)
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ac4:	e00d      	b.n	8004ae2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac6:	f7fe fe09 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8004aca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004acc:	e009      	b.n	8004ae2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ad4:	e005      	b.n	8004ae2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8130 	beq.w	8004d4a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	4a94      	ldr	r2, [pc, #592]	@ (8004d40 <UART_SetConfig+0x5cc>)
 8004af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af4:	461a      	mov	r2, r3
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d305      	bcc.n	8004b1a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d903      	bls.n	8004b22 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b20:	e113      	b.n	8004d4a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	2200      	movs	r2, #0
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	60fa      	str	r2, [r7, #12]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	4a84      	ldr	r2, [pc, #528]	@ (8004d40 <UART_SetConfig+0x5cc>)
 8004b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2200      	movs	r2, #0
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b44:	f7fb fb76 	bl	8000234 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	020b      	lsls	r3, r1, #8
 8004b5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b5e:	0202      	lsls	r2, r0, #8
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	6849      	ldr	r1, [r1, #4]
 8004b64:	0849      	lsrs	r1, r1, #1
 8004b66:	2000      	movs	r0, #0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	eb12 0804 	adds.w	r8, r2, r4
 8004b70:	eb43 0905 	adc.w	r9, r3, r5
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	469a      	mov	sl, r3
 8004b7c:	4693      	mov	fp, r2
 8004b7e:	4652      	mov	r2, sl
 8004b80:	465b      	mov	r3, fp
 8004b82:	4640      	mov	r0, r8
 8004b84:	4649      	mov	r1, r9
 8004b86:	f7fb fb55 	bl	8000234 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4613      	mov	r3, r2
 8004b90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b98:	d308      	bcc.n	8004bac <UART_SetConfig+0x438>
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba0:	d204      	bcs.n	8004bac <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a3a      	ldr	r2, [r7, #32]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e0ce      	b.n	8004d4a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bb2:	e0ca      	b.n	8004d4a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bbc:	d166      	bne.n	8004c8c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d827      	bhi.n	8004c16 <UART_SetConfig+0x4a2>
 8004bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bcc <UART_SetConfig+0x458>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fe26 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bf6:	e014      	b.n	8004c22 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe fe36 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bfe:	e010      	b.n	8004c22 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b4e      	ldr	r3, [pc, #312]	@ (8004d3c <UART_SetConfig+0x5c8>)
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c04:	e00d      	b.n	8004c22 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fd69 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8004c0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c14:	e005      	b.n	8004c22 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8090 	beq.w	8004d4a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	4a44      	ldr	r2, [pc, #272]	@ (8004d40 <UART_SetConfig+0x5cc>)
 8004c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c3c:	005a      	lsls	r2, r3, #1
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	441a      	add	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d916      	bls.n	8004c84 <UART_SetConfig+0x510>
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5c:	d212      	bcs.n	8004c84 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f023 030f 	bic.w	r3, r3, #15
 8004c66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	8bfb      	ldrh	r3, [r7, #30]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	8bfa      	ldrh	r2, [r7, #30]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e062      	b.n	8004d4a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c8a:	e05e      	b.n	8004d4a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d828      	bhi.n	8004ce6 <UART_SetConfig+0x572>
 8004c94:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <UART_SetConfig+0x528>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004cd7 	.word	0x08004cd7
 8004cb0:	08004ce7 	.word	0x08004ce7
 8004cb4:	08004ce7 	.word	0x08004ce7
 8004cb8:	08004ce7 	.word	0x08004ce7
 8004cbc:	08004cdf 	.word	0x08004cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe fdbe 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cc6:	e014      	b.n	8004cf2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fe fdce 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8004ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cce:	e010      	b.n	8004cf2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <UART_SetConfig+0x5c8>)
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cd4:	e00d      	b.n	8004cf2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fe fd01 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8004cda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cdc:	e009      	b.n	8004cf2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ce4:	e005      	b.n	8004cf2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cf0:	bf00      	nop
    }

    if (pclk != 0U)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d028      	beq.n	8004d4a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	4a10      	ldr	r2, [pc, #64]	@ (8004d40 <UART_SetConfig+0x5cc>)
 8004cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	441a      	add	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d910      	bls.n	8004d44 <UART_SetConfig+0x5d0>
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d28:	d20c      	bcs.n	8004d44 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	e009      	b.n	8004d4a <UART_SetConfig+0x5d6>
 8004d36:	bf00      	nop
 8004d38:	40008000 	.word	0x40008000
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	08005a24 	.word	0x08005a24
      }
      else
      {
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3730      	adds	r7, #48	@ 0x30
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e72:	d10a      	bne.n	8004e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b098      	sub	sp, #96	@ 0x60
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec8:	f7fc f9be 	bl	8001248 <HAL_GetTick>
 8004ecc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d12f      	bne.n	8004f3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004edc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f88e 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d022      	beq.n	8004f3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e063      	b.n	8005004 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d149      	bne.n	8004fde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f52:	2200      	movs	r2, #0
 8004f54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f857 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03c      	beq.n	8004fde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	623b      	str	r3, [r7, #32]
   return(result);
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e6      	bne.n	8004f64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb6:	61fa      	str	r2, [r7, #28]
 8004fb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e5      	bne.n	8004f96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e012      	b.n	8005004 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3758      	adds	r7, #88	@ 0x58
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501c:	e04f      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d04b      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fc f90f 	bl	8001248 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <UART_WaitOnFlagUntilTimeout+0x30>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e04e      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d037      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xb2>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b80      	cmp	r3, #128	@ 0x80
 8005052:	d034      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xb2>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b40      	cmp	r3, #64	@ 0x40
 8005058:	d031      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d110      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2208      	movs	r2, #8
 800506e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f838 	bl	80050e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2208      	movs	r2, #8
 800507a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e029      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005098:	d111      	bne.n	80050be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f81e 	bl	80050e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e00f      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	bf0c      	ite	eq
 80050ce:	2301      	moveq	r3, #1
 80050d0:	2300      	movne	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d0a0      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b095      	sub	sp, #84	@ 0x54
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510c:	643b      	str	r3, [r7, #64]	@ 0x40
 800510e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005144:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e3      	bne.n	8005120 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d118      	bne.n	8005192 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	60bb      	str	r3, [r7, #8]
   return(result);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 0310 	bic.w	r3, r3, #16
 8005174:	647b      	str	r3, [r7, #68]	@ 0x44
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	613b      	str	r3, [r7, #16]
   return(result);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e6      	bne.n	8005160 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80051a6:	bf00      	nop
 80051a8:	3754      	adds	r7, #84	@ 0x54
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e027      	b.n	8005218 <HAL_UARTEx_DisableFifoMode+0x66>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2224      	movs	r2, #36	@ 0x24
 80051d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005238:	2302      	movs	r3, #2
 800523a:	e02d      	b.n	8005298 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	@ 0x24
 8005248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f84f 	bl	800531c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e02d      	b.n	8005314 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	@ 0x24
 80052c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f811 	bl	800531c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800533c:	e031      	b.n	80053a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800533e:	2308      	movs	r3, #8
 8005340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005342:	2308      	movs	r3, #8
 8005344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	0e5b      	lsrs	r3, r3, #25
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	0f5b      	lsrs	r3, r3, #29
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	7b3a      	ldrb	r2, [r7, #12]
 800536a:	4911      	ldr	r1, [pc, #68]	@ (80053b0 <UARTEx_SetNbDataToProcess+0x94>)
 800536c:	5c8a      	ldrb	r2, [r1, r2]
 800536e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005372:	7b3a      	ldrb	r2, [r7, #12]
 8005374:	490f      	ldr	r1, [pc, #60]	@ (80053b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005378:	fb93 f3f2 	sdiv	r3, r3, r2
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	7b7a      	ldrb	r2, [r7, #13]
 8005388:	4909      	ldr	r1, [pc, #36]	@ (80053b0 <UARTEx_SetNbDataToProcess+0x94>)
 800538a:	5c8a      	ldrb	r2, [r1, r2]
 800538c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005390:	7b7a      	ldrb	r2, [r7, #13]
 8005392:	4908      	ldr	r1, [pc, #32]	@ (80053b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005396:	fb93 f3f2 	sdiv	r3, r3, r2
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	08005a3c 	.word	0x08005a3c
 80053b4:	08005a44 	.word	0x08005a44

080053b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b08b      	sub	sp, #44	@ 0x2c
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	613b      	str	r3, [r7, #16]
  return result;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80053de:	2320      	movs	r3, #32
 80053e0:	e003      	b.n	80053ea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2103      	movs	r1, #3
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	401a      	ands	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	61fb      	str	r3, [r7, #28]
  return result;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800540c:	2320      	movs	r3, #32
 800540e:	e003      	b.n	8005418 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	372c      	adds	r7, #44	@ 0x2c
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005462:	b480      	push	{r7}
 8005464:	b08b      	sub	sp, #44	@ 0x2c
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	fa93 f3a3 	rbit	r3, r3
 800547c:	613b      	str	r3, [r7, #16]
  return result;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005488:	2320      	movs	r3, #32
 800548a:	e003      	b.n	8005494 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2103      	movs	r1, #3
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	61fb      	str	r3, [r7, #28]
  return result;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80054b6:	2320      	movs	r3, #32
 80054b8:	e003      	b.n	80054c2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	431a      	orrs	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80054d0:	bf00      	nop
 80054d2:	372c      	adds	r7, #44	@ 0x2c
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80054dc:	b480      	push	{r7}
 80054de:	b08b      	sub	sp, #44	@ 0x2c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	613b      	str	r3, [r7, #16]
  return result;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005502:	2320      	movs	r3, #32
 8005504:	e003      	b.n	800550e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2103      	movs	r1, #3
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	401a      	ands	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	61fb      	str	r3, [r7, #28]
  return result;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005530:	2320      	movs	r3, #32
 8005532:	e003      	b.n	800553c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60da      	str	r2, [r3, #12]
}
 800554a:	bf00      	nop
 800554c:	372c      	adds	r7, #44	@ 0x2c
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005556:	b480      	push	{r7}
 8005558:	b08b      	sub	sp, #44	@ 0x2c
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	fa93 f3a3 	rbit	r3, r3
 8005570:	613b      	str	r3, [r7, #16]
  return result;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800557c:	2320      	movs	r3, #32
 800557e:	e003      	b.n	8005588 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	210f      	movs	r1, #15
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	401a      	ands	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	61fb      	str	r3, [r7, #28]
  return result;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80055aa:	2320      	movs	r3, #32
 80055ac:	e003      	b.n	80055b6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	431a      	orrs	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80055c4:	bf00      	nop
 80055c6:	372c      	adds	r7, #44	@ 0x2c
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b08b      	sub	sp, #44	@ 0x2c
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	fa93 f3a3 	rbit	r3, r3
 80055ec:	613b      	str	r3, [r7, #16]
  return result;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	e003      	b.n	8005604 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	210f      	movs	r1, #15
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	401a      	ands	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	61fb      	str	r3, [r7, #28]
  return result;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	fa01 f303 	lsl.w	r3, r1, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005642:	bf00      	nop
 8005644:	372c      	adds	r7, #44	@ 0x2c
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b088      	sub	sp, #32
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	60fb      	str	r3, [r7, #12]
  return result;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <LL_GPIO_Init+0x26>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800567e:	e047      	b.n	8005710 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2101      	movs	r1, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d039      	beq.n	800570a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d003      	beq.n	80056a6 <LL_GPIO_Init+0x58>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d10d      	bne.n	80056c2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	461a      	mov	r2, r3
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fed7 	bl	8005462 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	461a      	mov	r2, r3
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff feb8 	bl	8005432 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	461a      	mov	r2, r3
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff06 	bl	80054dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d111      	bne.n	80056fc <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2bff      	cmp	r3, #255	@ 0xff
 80056dc:	d807      	bhi.n	80056ee <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	461a      	mov	r2, r3
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff35 	bl	8005556 <LL_GPIO_SetAFPin_0_7>
 80056ec:	e006      	b.n	80056fc <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	461a      	mov	r2, r3
 80056f4:	69b9      	ldr	r1, [r7, #24]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff6a 	bl	80055d0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	461a      	mov	r2, r3
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe57 	bl	80053b8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1b0      	bne.n	8005680 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005730:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005734:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	b29b      	uxth	r3, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	b29b      	uxth	r3, r3
 8005746:	4013      	ands	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_ZN7Manager9flashOnceEv>:
#include <cstdint>
#include "driver_interface.hpp"
#include "manager.hpp"

void Manager::flashOnce()
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
    LEDDriver->flashLED();
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <_ZN7Manager10flashTwiceEm>:

void Manager::flashTwice(uint32_t timeout_ms)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
    LEDDriver->flashLED();
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3308      	adds	r3, #8
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
    LEDDriver->wait(timeout_ms);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	4610      	mov	r0, r2
 80057ea:	4798      	blx	r3
    LEDDriver->flashLED();
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	4610      	mov	r0, r2
 80057fc:	4798      	blx	r3
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <_ZN7ManagerC1EP15DriverInterface>:

Manager::Manager(DriverInterface *driverPtr) : LEDDriver(driverPtr)
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	601a      	str	r2, [r3, #0]
{
    count = 0;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	711a      	strb	r2, [r3, #4]
}
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <_ZN7Manager10runManagerEv>:

void Manager::runManager()
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
    if(count % 2 == 0)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <_ZN7Manager10runManagerEv+0x1c>
    {
        flashOnce();
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ffab 	bl	800579a <_ZN7Manager9flashOnceEv>
 8005844:	e003      	b.n	800584e <_ZN7Manager10runManagerEv+0x24>
    }
    else
    {
        flashTwice(250);
 8005846:	21fa      	movs	r1, #250	@ 0xfa
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ffb7 	bl	80057bc <_ZN7Manager10flashTwiceEm>
    }

    ++count;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	3301      	adds	r3, #1
 8005854:	b2da      	uxtb	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	711a      	strb	r2, [r3, #4]
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <_ZdlPvj>:
 8005862:	f000 b800 	b.w	8005866 <_ZdlPv>

08005866 <_ZdlPv>:
 8005866:	f000 b801 	b.w	800586c <free>
	...

0800586c <free>:
 800586c:	4b02      	ldr	r3, [pc, #8]	@ (8005878 <free+0xc>)
 800586e:	4601      	mov	r1, r0
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	f000 b83d 	b.w	80058f0 <_free_r>
 8005876:	bf00      	nop
 8005878:	2000000c 	.word	0x2000000c

0800587c <__malloc_lock>:
 800587c:	4801      	ldr	r0, [pc, #4]	@ (8005884 <__malloc_lock+0x8>)
 800587e:	f000 b835 	b.w	80058ec <__retarget_lock_acquire_recursive>
 8005882:	bf00      	nop
 8005884:	200005b8 	.word	0x200005b8

08005888 <__malloc_unlock>:
 8005888:	4801      	ldr	r0, [pc, #4]	@ (8005890 <__malloc_unlock+0x8>)
 800588a:	f000 b830 	b.w	80058ee <__retarget_lock_release_recursive>
 800588e:	bf00      	nop
 8005890:	200005b8 	.word	0x200005b8

08005894 <memset>:
 8005894:	4402      	add	r2, r0
 8005896:	4603      	mov	r3, r0
 8005898:	4293      	cmp	r3, r2
 800589a:	d100      	bne.n	800589e <memset+0xa>
 800589c:	4770      	bx	lr
 800589e:	f803 1b01 	strb.w	r1, [r3], #1
 80058a2:	e7f9      	b.n	8005898 <memset+0x4>

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4d0d      	ldr	r5, [pc, #52]	@ (80058dc <__libc_init_array+0x38>)
 80058a8:	2600      	movs	r6, #0
 80058aa:	4c0d      	ldr	r4, [pc, #52]	@ (80058e0 <__libc_init_array+0x3c>)
 80058ac:	1b64      	subs	r4, r4, r5
 80058ae:	10a4      	asrs	r4, r4, #2
 80058b0:	42a6      	cmp	r6, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	4d0b      	ldr	r5, [pc, #44]	@ (80058e4 <__libc_init_array+0x40>)
 80058b6:	2600      	movs	r6, #0
 80058b8:	4c0b      	ldr	r4, [pc, #44]	@ (80058e8 <__libc_init_array+0x44>)
 80058ba:	f000 f863 	bl	8005984 <_init>
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	42a6      	cmp	r6, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058cc:	3601      	adds	r6, #1
 80058ce:	4798      	blx	r3
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d6:	3601      	adds	r6, #1
 80058d8:	4798      	blx	r3
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	08005a54 	.word	0x08005a54
 80058e0:	08005a54 	.word	0x08005a54
 80058e4:	08005a54 	.word	0x08005a54
 80058e8:	08005a58 	.word	0x08005a58

080058ec <__retarget_lock_acquire_recursive>:
 80058ec:	4770      	bx	lr

080058ee <__retarget_lock_release_recursive>:
 80058ee:	4770      	bx	lr

080058f0 <_free_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4605      	mov	r5, r0
 80058f4:	2900      	cmp	r1, #0
 80058f6:	d041      	beq.n	800597c <_free_r+0x8c>
 80058f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058fc:	1f0c      	subs	r4, r1, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfb8      	it	lt
 8005902:	18e4      	addlt	r4, r4, r3
 8005904:	f7ff ffba 	bl	800587c <__malloc_lock>
 8005908:	4a1d      	ldr	r2, [pc, #116]	@ (8005980 <_free_r+0x90>)
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	b933      	cbnz	r3, 800591c <_free_r+0x2c>
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	6014      	str	r4, [r2, #0]
 8005912:	4628      	mov	r0, r5
 8005914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005918:	f7ff bfb6 	b.w	8005888 <__malloc_unlock>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d908      	bls.n	8005932 <_free_r+0x42>
 8005920:	6820      	ldr	r0, [r4, #0]
 8005922:	1821      	adds	r1, r4, r0
 8005924:	428b      	cmp	r3, r1
 8005926:	bf01      	itttt	eq
 8005928:	6819      	ldreq	r1, [r3, #0]
 800592a:	685b      	ldreq	r3, [r3, #4]
 800592c:	1809      	addeq	r1, r1, r0
 800592e:	6021      	streq	r1, [r4, #0]
 8005930:	e7ed      	b.n	800590e <_free_r+0x1e>
 8005932:	461a      	mov	r2, r3
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b10b      	cbz	r3, 800593c <_free_r+0x4c>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d9fa      	bls.n	8005932 <_free_r+0x42>
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	1850      	adds	r0, r2, r1
 8005940:	42a0      	cmp	r0, r4
 8005942:	d10b      	bne.n	800595c <_free_r+0x6c>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	4401      	add	r1, r0
 8005948:	1850      	adds	r0, r2, r1
 800594a:	6011      	str	r1, [r2, #0]
 800594c:	4283      	cmp	r3, r0
 800594e:	d1e0      	bne.n	8005912 <_free_r+0x22>
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4408      	add	r0, r1
 8005956:	6053      	str	r3, [r2, #4]
 8005958:	6010      	str	r0, [r2, #0]
 800595a:	e7da      	b.n	8005912 <_free_r+0x22>
 800595c:	d902      	bls.n	8005964 <_free_r+0x74>
 800595e:	230c      	movs	r3, #12
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	e7d6      	b.n	8005912 <_free_r+0x22>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	1821      	adds	r1, r4, r0
 8005968:	428b      	cmp	r3, r1
 800596a:	bf02      	ittt	eq
 800596c:	6819      	ldreq	r1, [r3, #0]
 800596e:	685b      	ldreq	r3, [r3, #4]
 8005970:	1809      	addeq	r1, r1, r0
 8005972:	6063      	str	r3, [r4, #4]
 8005974:	bf08      	it	eq
 8005976:	6021      	streq	r1, [r4, #0]
 8005978:	6054      	str	r4, [r2, #4]
 800597a:	e7ca      	b.n	8005912 <_free_r+0x22>
 800597c:	bd38      	pop	{r3, r4, r5, pc}
 800597e:	bf00      	nop
 8005980:	2000047c 	.word	0x2000047c

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
