
ppm_generation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f78  08006f78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f80  08006f80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000000c  08006f94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08006f94  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de70  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fe  00000000  00000000  0003deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  000416b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00043158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e63a  00000000  00000000  00044aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0d3  00000000  00000000  000730e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013170d  00000000  00000000  0008f1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c08c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a4  00000000  00000000  001c0914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006ec0 	.word	0x08006ec0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08006ec0 	.word	0x08006ec0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 ff4e 	bl	800145a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f831 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 faad 	bl	8000b20 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 f88f 	bl	80006e8 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005ca:	f000 f903 	bl	80007d4 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005ce:	f000 f94f 	bl	8000870 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d2:	f000 fa47 	bl	8000a64 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d6:	f000 fa7b 	bl	8000ad0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80005da:	f000 f993 	bl	8000904 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __init__();
 80005de:	f000 fb59 	bl	8000c94 <__init__>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, get_ccr());
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <main+0x6c>)
 80005e4:	681c      	ldr	r4, [r3, #0]
 80005e6:	f000 fb91 	bl	8000d0c <get_ccr>
 80005ea:	4603      	mov	r3, r0
 80005ec:	6363      	str	r3, [r4, #52]	; 0x34
  uint32_t arr_val = get_arr();
 80005ee:	f000 fbad 	bl	8000d4c <get_arr>
 80005f2:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_AUTORELOAD(&htim1, arr_val);
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <main+0x6c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <main+0x6c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim1);
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x6c>)
 8000604:	f004 fa0e 	bl	8004a24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000608:	2100      	movs	r1, #0
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x6c>)
 800060c:	f004 fadc 	bl	8004bc8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, get_ccr());
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <main+0x6c>)
 8000612:	681c      	ldr	r4, [r3, #0]
 8000614:	f000 fb7a 	bl	8000d0c <get_ccr>
 8000618:	4603      	mov	r3, r0
 800061a:	6363      	str	r3, [r4, #52]	; 0x34
 800061c:	e7f8      	b.n	8000610 <main+0x5c>
 800061e:	bf00      	nop
 8000620:	20000148 	.word	0x20000148

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b098      	sub	sp, #96	; 0x60
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	2248      	movs	r2, #72	; 0x48
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 fc3c 	bl	8006eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000646:	f44f 7000 	mov.w	r0, #512	; 0x200
 800064a:	f002 faf9 	bl	8002c40 <HAL_PWREx_ControlVoltageScaling>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000654:	f000 fb18 	bl	8000c88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000658:	f002 fad4 	bl	8002c04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <SystemClock_Config+0xc0>)
 800065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xc0>)
 8000664:	f023 0318 	bic.w	r3, r3, #24
 8000668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800066c:	2334      	movs	r3, #52	; 0x34
 800066e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000670:	2381      	movs	r3, #129	; 0x81
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000680:	2360      	movs	r3, #96	; 0x60
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000688:	2301      	movs	r3, #1
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000690:	2318      	movs	r3, #24
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000694:	2307      	movs	r3, #7
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0318 	add.w	r3, r7, #24
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fb5b 	bl	8002d60 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006b0:	f000 faea 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2303      	movs	r3, #3
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 f829 	bl	8003724 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d8:	f000 fad6 	bl	8000c88 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3760      	adds	r7, #96	; 0x60
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800070c:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <MX_ADC1_Init+0xe4>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800072a:	2204      	movs	r2, #4
 800072c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	4817      	ldr	r0, [pc, #92]	; (80007c8 <MX_ADC1_Init+0xe0>)
 800076c:	f001 f88c 	bl	8001888 <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 fa87 	bl	8000c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <MX_ADC1_Init+0xe0>)
 8000786:	f001 fde1 	bl	800234c <HAL_ADCEx_MultiModeConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000790:	f000 fa7a 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_ADC1_Init+0xe8>)
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2306      	movs	r3, #6
 800079a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a0:	237f      	movs	r3, #127	; 0x7f
 80007a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a4:	2304      	movs	r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0xe0>)
 80007b2:	f001 f9bb 	bl	8001b2c <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007bc:	f000 fa64 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000028 	.word	0x20000028
 80007cc:	42028000 	.word	0x42028000
 80007d0:	0c900008 	.word	0x0c900008

080007d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_LPUART1_UART_Init+0x94>)
 80007dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007e0:	4a22      	ldr	r2, [pc, #136]	; (800086c <MX_LPUART1_UART_Init+0x98>)
 80007e2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007f8:	220c      	movs	r2, #12
 80007fa:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800081a:	4812      	ldr	r0, [pc, #72]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 800081c:	f005 fb70 	bl	8005f00 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000826:	f000 fa2f 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 800082e:	f006 f85d 	bl	80068ec <HAL_UARTEx_SetTxFifoThreshold>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000838:	f000 fa26 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000840:	f006 f892 	bl	8006968 <HAL_UARTEx_SetRxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800084a:	f000 fa1d 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000850:	f006 f813 	bl	800687a <HAL_UARTEx_DisableFifoMode>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800085a:	f000 fa15 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000090 	.word	0x20000090
 8000868:	40008000 	.word	0x40008000
 800086c:	00033324 	.word	0x00033324

08000870 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_RTC_Init+0x8c>)
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <MX_RTC_Init+0x90>)
 800088a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_RTC_Init+0x8c>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_RTC_Init+0x8c>)
 8000894:	227f      	movs	r2, #127	; 0x7f
 8000896:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_RTC_Init+0x8c>)
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_RTC_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_RTC_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_RTC_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_RTC_Init+0x8c>)
 80008b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_RTC_Init+0x8c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008be:	480f      	ldr	r0, [pc, #60]	; (80008fc <MX_RTC_Init+0x8c>)
 80008c0:	f003 ff26 	bl	8004710 <HAL_RTC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80008ca:	f000 f9dd 	bl	8000c88 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_RTC_Init+0x8c>)
 80008e4:	f004 f81a 	bl	800491c <HAL_RTCEx_PrivilegeModeSet>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80008ee:	f000 f9cb 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000120 	.word	0x20000120
 8000900:	40002800 	.word	0x40002800

08000904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2234      	movs	r2, #52	; 0x34
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f006 fab6 	bl	8006eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000946:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <MX_TIM1_Init+0x15c>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 800094a:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <MX_TIM1_Init+0x158>)
 800094c:	220e      	movs	r2, #14
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8000956:	4b41      	ldr	r3, [pc, #260]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000958:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <MX_TIM1_Init+0x158>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000970:	483a      	ldr	r0, [pc, #232]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000972:	f003 ffff 	bl	8004974 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f984 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098a:	4619      	mov	r1, r3
 800098c:	4833      	ldr	r0, [pc, #204]	; (8000a5c <MX_TIM1_Init+0x158>)
 800098e:	f004 fc51 	bl	8005234 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000998:	f000 f976 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800099c:	482f      	ldr	r0, [pc, #188]	; (8000a5c <MX_TIM1_Init+0x158>)
 800099e:	f004 f8b1 	bl	8004b04 <HAL_TIM_PWM_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009a8:	f000 f96e 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009bc:	4619      	mov	r1, r3
 80009be:	4827      	ldr	r0, [pc, #156]	; (8000a5c <MX_TIM1_Init+0x158>)
 80009c0:	f005 f958 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009ca:	f000 f95d 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ce:	2360      	movs	r3, #96	; 0x60
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	481a      	ldr	r0, [pc, #104]	; (8000a5c <MX_TIM1_Init+0x158>)
 80009f4:	f004 fb0e 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009fe:	f000 f943 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000a40:	f005 f9a0 	bl	8005d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000a4a:	f000 f91d 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM1_Init+0x158>)
 8000a50:	f000 fb4e 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3770      	adds	r7, #112	; 0x70
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000148 	.word	0x20000148
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a7a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a7e:	f7ff fd81 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a82:	2002      	movs	r0, #2
 8000a84:	f7ff fd66 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fd63 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a94:	2303      	movs	r3, #3
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_UCPD1_Init+0x64>)
 8000aa2:	f006 f938 	bl	8006d16 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_UCPD1_Init+0x68>)
 8000aba:	f006 f92c 	bl	8006d16 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	42020400 	.word	0x42020400
 8000acc:	42020000 	.word	0x42020000

08000ad0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <MX_USB_PCD_Init+0x4c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000adc:	2208      	movs	r2, #8
 8000ade:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USB_PCD_Init+0x48>)
 8000b06:	f001 ff6d 	bl	80029e4 <HAL_PCD_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b10:	f000 f8ba 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000194 	.word	0x20000194
 8000b1c:	4000d400 	.word	0x4000d400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a3e      	ldr	r2, [pc, #248]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b3c      	ldr	r3, [pc, #240]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a38      	ldr	r2, [pc, #224]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000b96:	f002 f8af 	bl	8002cf8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_GPIO_Init+0x12c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	4826      	ldr	r0, [pc, #152]	; (8000c50 <MX_GPIO_Init+0x130>)
 8000bb8:	f001 fefc 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc2:	4824      	ldr	r0, [pc, #144]	; (8000c54 <MX_GPIO_Init+0x134>)
 8000bc4:	f001 fef6 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	21a0      	movs	r1, #160	; 0xa0
 8000bcc:	4822      	ldr	r0, [pc, #136]	; (8000c58 <MX_GPIO_Init+0x138>)
 8000bce:	f001 fef1 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_GPIO_Init+0x13c>)
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_GPIO_Init+0x138>)
 8000be8:	f001 fd64 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x130>)
 8000c04:	f001 fd56 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_GPIO_Init+0x134>)
 8000c22:	f001 fd47 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c26:	23a0      	movs	r3, #160	; 0xa0
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_GPIO_Init+0x138>)
 8000c3e:	f001 fd39 	bl	80026b4 <HAL_GPIO_Init>

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	42020800 	.word	0x42020800
 8000c54:	42020000 	.word	0x42020000
 8000c58:	42020400 	.word	0x42020400
 8000c5c:	10110000 	.word	0x10110000

08000c60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	uint32_t arr_hold = get_arr();
 8000c68:	f000 f870 	bl	8000d4c <get_arr>
 8000c6c:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, arr_hold);
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000148 	.word	0x20000148

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <__init__>:
#include "ppm.h"

void __init__(void) {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	counter = BASE_FREQUENCY / (PSC_VALUE + CORRECTION);//calculate the frequency used
 8000c98:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000cc8 <__init__+0x34>
 8000c9c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <__init__+0x38>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
	counter_to_microsec = counter / SEC_TO_MICROSEC;//calculate the number of micro sec per tick
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <__init__+0x38>)
 8000cac:	ed93 7a00 	vldr	s14, [r3]
 8000cb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000cd0 <__init__+0x3c>
 8000cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <__init__+0x40>)
 8000cba:	edc3 7a00 	vstr	s15, [r3]
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	4c371b00 	.word	0x4c371b00
 8000ccc:	20000488 	.word	0x20000488
 8000cd0:	49742400 	.word	0x49742400
 8000cd4:	2000048c 	.word	0x2000048c

08000cd8 <microsecs_to_counter>:

uint32_t microsecs_to_counter(uint32_t time_length) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	return (uint32_t)(time_length * counter_to_microsec);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <microsecs_to_counter+0x30>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 3a90 	vmov	r3, s15
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	2000048c 	.word	0x2000048c

08000d0c <get_ccr>:

/*the HIGH output in ppm signal*/
uint32_t get_ccr(void) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	static uint32_t ccr_value;
	if(ccr_value == 0) {
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <get_ccr+0x34>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10c      	bne.n	8000d32 <get_ccr+0x26>
		ccr_value = (uint32_t)(counter_to_microsec * PULSE_WIDTH);//ccr_Value is a constant
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <get_ccr+0x38>)
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000d48 <get_ccr+0x3c>
 8000d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2a:	ee17 2a90 	vmov	r2, s15
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <get_ccr+0x34>)
 8000d30:	601a      	str	r2, [r3, #0]
	}
	return ccr_value;
 8000d32:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <get_ccr+0x34>)
 8000d34:	681b      	ldr	r3, [r3, #0]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000490 	.word	0x20000490
 8000d44:	2000048c 	.word	0x2000048c
 8000d48:	439b0000 	.word	0x439b0000

08000d4c <get_arr>:

uint32_t get_arr(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	static uint8_t index;
	static volatile uint32_t time_output[channel_reserved];
	if(time_output[0] == 0 || index == channel_reserved) {
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <get_arr+0x90>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <get_arr+0x16>
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <get_arr+0x94>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d129      	bne.n	8000db6 <get_arr+0x6a>
		for(int i = 0; i < channel_used; i++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	e01b      	b.n	8000da0 <get_arr+0x54>
			time_output[i] = microsecs_to_counter((uint32_t)(MIN_PULSE_WIDTH+user_input[i]*DOWN_INTERVAL));
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <get_arr+0x98>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	edd3 7a00 	vldr	s15, [r3]
 8000d74:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000de8 <get_arr+0x9c>
 8000d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000dec <get_arr+0xa0>
 8000d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d88:	ee17 0a90 	vmov	r0, s15
 8000d8c:	f7ff ffa4 	bl	8000cd8 <microsecs_to_counter>
 8000d90:	4602      	mov	r2, r0
 8000d92:	4912      	ldr	r1, [pc, #72]	; (8000ddc <get_arr+0x90>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < channel_used; i++) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	dde0      	ble.n	8000d68 <get_arr+0x1c>
		}
		time_output[channel_used] = calc_reset_pause();
 8000da6:	f000 f823 	bl	8000df0 <calc_reset_pause>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <get_arr+0x90>)
 8000dae:	6213      	str	r3, [r2, #32]
		index = 0;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <get_arr+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
	}

	int arr_value = time_output[index];
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <get_arr+0x94>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <get_arr+0x90>)
 8000dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc2:	603b      	str	r3, [r7, #0]
	index ++;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <get_arr+0x94>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <get_arr+0x94>)
 8000dce:	701a      	strb	r2, [r3, #0]
	return arr_value;
 8000dd0:	683b      	ldr	r3, [r7, #0]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000494 	.word	0x20000494
 8000de0:	200004b8 	.word	0x200004b8
 8000de4:	08006ed8 	.word	0x08006ed8
 8000de8:	44728000 	.word	0x44728000
 8000dec:	442f0000 	.word	0x442f0000

08000df0 <calc_reset_pause>:

uint32_t calc_reset_pause(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
	float remaining_out = (float)channel_used;
 8000df6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000dfa:	607b      	str	r3, [r7, #4]
	float summation;
	for(int i = 0; i < channel_used; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e00e      	b.n	8000e20 <calc_reset_pause+0x30>
		summation = summation + user_input[i];
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <calc_reset_pause+0x70>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	edd3 7a00 	vldr	s15, [r3]
 8000e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < channel_used; i++) {
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	dded      	ble.n	8000e02 <calc_reset_pause+0x12>
	}

	remaining_out = remaining_out - summation;
 8000e26:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a01 	vstr	s15, [r7, #4]

	return microsecs_to_counter((uint32_t)(remaining_out*DOWN_INTERVAL+MIN_RESET_PULSE));
 8000e36:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000e64 <calc_reset_pause+0x74>
 8000e3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e42:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000e68 <calc_reset_pause+0x78>
 8000e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4e:	ee17 0a90 	vmov	r0, s15
 8000e52:	f7ff ff41 	bl	8000cd8 <microsecs_to_counter>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	08006ed8 	.word	0x08006ed8
 8000e64:	44728000 	.word	0x44728000
 8000e68:	453b8000 	.word	0x453b8000

08000e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ae      	sub	sp, #184	; 0xb8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2294      	movs	r2, #148	; 0x94
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 ffeb 	bl	8006eb0 <memset>
  if(hadc->Instance==ADC1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <HAL_ADC_MspInit+0xa8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d137      	bne.n	8000f54 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000eea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fef4 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000f02:	f7ff fec1 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_ADC_MspInit+0xac>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_ADC_MspInit+0xac>)
 8000f0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_ADC_MspInit+0xac>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_ADC_MspInit+0xac>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_ADC_MspInit+0xac>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_ADC_MspInit+0xac>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f36:	2304      	movs	r3, #4
 8000f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_ADC_MspInit+0xb0>)
 8000f50:	f001 fbb0 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	37b8      	adds	r7, #184	; 0xb8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	42028000 	.word	0x42028000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	42020800 	.word	0x42020800

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0ae      	sub	sp, #184	; 0xb8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2294      	movs	r2, #148	; 0x94
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 ff91 	bl	8006eb0 <memset>
  if(huart->Instance==LPUART1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_UART_MspInit+0xb4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d13d      	bne.n	8001014 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f98:	2320      	movs	r3, #32
 8000f9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fe9d 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fb0:	f7ff fe6a 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000fe4:	f001 fe88 	bl	8002cf8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000fe8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001002:	2308      	movs	r3, #8
 8001004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001008:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0xbc>)
 8001010:	f001 fb50 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	37b8      	adds	r7, #184	; 0xb8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40008000 	.word	0x40008000
 8001020:	40021000 	.word	0x40021000
 8001024:	42021800 	.word	0x42021800

08001028 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a8      	sub	sp, #160	; 0xa0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2294      	movs	r2, #148	; 0x94
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f005 ff39 	bl	8006eb0 <memset>
  if(hrtc->Instance==RTC)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_RTC_MspInit+0x74>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d124      	bne.n	8001092 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fe42 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001066:	f7ff fe0f 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_RTC_MspInit+0x78>)
 800106c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_RTC_MspInit+0x78>)
 8001072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_RTC_MspInit+0x78>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_RTC_MspInit+0x78>)
 8001080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_RTC_MspInit+0x78>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	37a0      	adds	r7, #160	; 0xa0
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40002800 	.word	0x40002800
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_TIM_Base_MspInit+0x44>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d113      	bne.n	80010de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_TIM_Base_MspInit+0x48>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <HAL_TIM_Base_MspInit+0x48>)
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	6613      	str	r3, [r2, #96]	; 0x60
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_TIM_Base_MspInit+0x48>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	202a      	movs	r0, #42	; 0x2a
 80010d4:	f001 fab9 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010d8:	202a      	movs	r0, #42	; 0x2a
 80010da:	f001 fad0 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_TIM_MspPostInit+0x64>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d11c      	bne.n	800114c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_TIM_MspPostInit+0x68>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_TIM_MspPostInit+0x68>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_TIM_MspPostInit+0x68>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800113c:	2301      	movs	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_TIM_MspPostInit+0x6c>)
 8001148:	f001 fab4 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012c00 	.word	0x40012c00
 8001158:	40021000 	.word	0x40021000
 800115c:	42021000 	.word	0x42021000

08001160 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0ae      	sub	sp, #184	; 0xb8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2294      	movs	r2, #148	; 0x94
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f005 fe95 	bl	8006eb0 <memset>
  if(hpcd->Instance==USB)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <HAL_PCD_MspInit+0xb4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d13d      	bne.n	800120c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001194:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fd9f 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011ac:	f7ff fd6c 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_PCD_MspInit+0xb8>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_PCD_MspInit+0xb8>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_PCD_MspInit+0xb8>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011e2:	230a      	movs	r3, #10
 80011e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <HAL_PCD_MspInit+0xbc>)
 80011f0:	f001 fa60 	bl	80026b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_PCD_MspInit+0xb8>)
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_PCD_MspInit+0xb8>)
 80011fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_PCD_MspInit+0xb8>)
 8001202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	37b8      	adds	r7, #184	; 0xb8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	4000d400 	.word	0x4000d400
 8001218:	40021000 	.word	0x40021000
 800121c:	42020000 	.word	0x42020000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f94c 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM1_UP_IRQHandler+0x10>)
 800127a:	f003 fdab 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000148 	.word	0x20000148

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80012b2:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d107      	bne.n	80012ce <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80012be:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 80012c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e005      	b.n	80012da <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80012da:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <SystemCoreClockUpdate+0x148>)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b0c      	cmp	r3, #12
 80012ee:	d866      	bhi.n	80013be <SystemCoreClockUpdate+0x112>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <SystemCoreClockUpdate+0x4c>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	080013bf 	.word	0x080013bf
 8001300:	080013bf 	.word	0x080013bf
 8001304:	080013bf 	.word	0x080013bf
 8001308:	08001335 	.word	0x08001335
 800130c:	080013bf 	.word	0x080013bf
 8001310:	080013bf 	.word	0x080013bf
 8001314:	080013bf 	.word	0x080013bf
 8001318:	0800133d 	.word	0x0800133d
 800131c:	080013bf 	.word	0x080013bf
 8001320:	080013bf 	.word	0x080013bf
 8001324:	080013bf 	.word	0x080013bf
 8001328:	08001345 	.word	0x08001345
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800132c:	4a32      	ldr	r2, [pc, #200]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	6013      	str	r3, [r2, #0]
      break;
 8001332:	e048      	b.n	80013c6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 8001336:	4a31      	ldr	r2, [pc, #196]	; (80013fc <SystemCoreClockUpdate+0x150>)
 8001338:	601a      	str	r2, [r3, #0]
      break;
 800133a:	e044      	b.n	80013c6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <SystemCoreClockUpdate+0x154>)
 8001340:	601a      	str	r2, [r3, #0]
      break;
 8001342:	e040      	b.n	80013c6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	3301      	adds	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d003      	beq.n	800136a <SystemCoreClockUpdate+0xbe>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d006      	beq.n	8001376 <SystemCoreClockUpdate+0xca>
 8001368:	e00b      	b.n	8001382 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800136a:	4a24      	ldr	r2, [pc, #144]	; (80013fc <SystemCoreClockUpdate+0x150>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	613b      	str	r3, [r7, #16]
          break;
 8001374:	e00b      	b.n	800138e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <SystemCoreClockUpdate+0x154>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	613b      	str	r3, [r7, #16]
          break;
 8001380:	e005      	b.n	800138e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	613b      	str	r3, [r7, #16]
          break;
 800138c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0e5b      	lsrs	r3, r3, #25
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	3301      	adds	r3, #1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 80013ba:	6013      	str	r3, [r2, #0]
      break;
 80013bc:	e003      	b.n	80013c6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	6013      	str	r3, [r2, #0]
      break;
 80013c4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <SystemCoreClockUpdate+0x144>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <SystemCoreClockUpdate+0x158>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemCoreClockUpdate+0x14c>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	08006f10 	.word	0x08006f10
 80013f8:	20000000 	.word	0x20000000
 80013fc:	00f42400 	.word	0x00f42400
 8001400:	007a1200 	.word	0x007a1200
 8001404:	08006ef8 	.word	0x08006ef8

08001408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800140c:	f7ff ff3c 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001410:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001412:	e003      	b.n	800141c <LoopCopyDataInit>

08001414 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001416:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001418:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800141a:	3104      	adds	r1, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <LoopForever+0xa>)
	ldr	r3, =_edata
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001420:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001422:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001424:	d3f6      	bcc.n	8001414 <CopyDataInit>
	ldr	r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001428:	e002      	b.n	8001430 <LoopFillZerobss>

0800142a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800142a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800142c:	f842 3b04 	str.w	r3, [r2], #4

08001430 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <LoopForever+0x16>)
	cmp	r2, r3
 8001432:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001434:	d3f9      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001436:	f005 fd17 	bl	8006e68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800143a:	f7ff f8bb 	bl	80005b4 <main>

0800143e <LoopForever>:

LoopForever:
    b LoopForever
 800143e:	e7fe      	b.n	800143e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001440:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001444:	08006f88 	.word	0x08006f88
	ldr	r0, =_sdata
 8001448:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800144c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001450:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001454:	200004c0 	.word	0x200004c0

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>

0800145a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001464:	2004      	movs	r0, #4
 8001466:	f001 f8e5 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800146a:	f7ff ff1f 	bl	80012ac <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f80e 	bl	8001490 <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	e001      	b.n	8001484 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001480:	f7ff fcf4 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001484:	79fb      	ldrb	r3, [r7, #7]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_InitTick+0x70>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_InitTick+0x6c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 f8ed 	bl	800269a <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b07      	cmp	r3, #7
 80014ca:	d809      	bhi.n	80014e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f001 f8b9 	bl	800264a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e007      	b.n	80014f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e004      	b.n	80014f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	200004bc 	.word	0x200004bc

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200004bc 	.word	0x200004bc

08001548 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	609a      	str	r2, [r3, #8]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3360      	adds	r3, #96	; 0x60
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <LL_ADC_SetOffset+0x44>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	4313      	orrs	r3, r2
 80015e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015e8:	bf00      	nop
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	03fff000 	.word	0x03fff000

080015f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3360      	adds	r3, #96	; 0x60
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3360      	adds	r3, #96	; 0x60
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	615a      	str	r2, [r3, #20]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3330      	adds	r3, #48	; 0x30
 8001690:	461a      	mov	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	211f      	movs	r1, #31
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	0e9b      	lsrs	r3, r3, #26
 80016b8:	f003 011f 	and.w	r1, r3, #31
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	431a      	orrs	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3314      	adds	r3, #20
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	0e5b      	lsrs	r3, r3, #25
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	0d1b      	lsrs	r3, r3, #20
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2107      	movs	r1, #7
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	401a      	ands	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	0d1b      	lsrs	r3, r3, #20
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0318 	and.w	r3, r3, #24
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001754:	40d9      	lsrs	r1, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	400b      	ands	r3, r1
 800175a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175e:	431a      	orrs	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	0007ffff 	.word	0x0007ffff

08001778 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6093      	str	r3, [r2, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017b0:	d101      	bne.n	80017b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001800:	d101      	bne.n	8001806 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <LL_ADC_IsEnabled+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_ADC_IsEnabled+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b04      	cmp	r3, #4
 800184c:	d101      	bne.n	8001852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b08      	cmp	r3, #8
 8001872:	d101      	bne.n	8001878 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e134      	b.n	8001b0c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d109      	bne.n	80018c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff faff 	bl	8000eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff67 	bl	800179c <LL_ADC_IsDeepPowerDownEnabled>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff4d 	bl	8001778 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff82 	bl	80017ec <LL_ADC_IsInternalRegulatorEnabled>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff66 	bl	80017c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018f8:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <HAL_ADC_Init+0x28c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	4a86      	ldr	r2, [pc, #536]	; (8001b18 <HAL_ADC_Init+0x290>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800190c:	e002      	b.n	8001914 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3b01      	subs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f9      	bne.n	800190e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff64 	bl	80017ec <LL_ADC_IsInternalRegulatorEnabled>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10d      	bne.n	8001946 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f043 0210 	orr.w	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff75 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001950:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80cd 	bne.w	8001afa <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80c9 	bne.w	8001afa <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001970:	f043 0202 	orr.w	r2, r3, #2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff49 	bl	8001814 <LL_ADC_IsEnabled>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d110      	bne.n	80019aa <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001988:	4864      	ldr	r0, [pc, #400]	; (8001b1c <HAL_ADC_Init+0x294>)
 800198a:	f7ff ff43 	bl	8001814 <LL_ADC_IsEnabled>
 800198e:	4604      	mov	r4, r0
 8001990:	4863      	ldr	r0, [pc, #396]	; (8001b20 <HAL_ADC_Init+0x298>)
 8001992:	f7ff ff3f 	bl	8001814 <LL_ADC_IsEnabled>
 8001996:	4603      	mov	r3, r0
 8001998:	4323      	orrs	r3, r4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4619      	mov	r1, r3
 80019a4:	485f      	ldr	r0, [pc, #380]	; (8001b24 <HAL_ADC_Init+0x29c>)
 80019a6:	f7ff fdcf 	bl	8001548 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7e5b      	ldrb	r3, [r3, #25]
 80019ae:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019ba:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019c0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	3b01      	subs	r3, #1
 80019de:	045b      	lsls	r3, r3, #17
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_ADC_Init+0x2a0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	69b9      	ldr	r1, [r7, #24]
 8001a12:	430b      	orrs	r3, r1
 8001a14:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff0d 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001a20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff1a 	bl	8001860 <LL_ADC_INJ_IsConversionOngoing>
 8001a2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d140      	bne.n	8001ab6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d13d      	bne.n	8001ab6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e1b      	ldrb	r3, [r3, #24]
 8001a42:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a44:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5c:	f023 0306 	bic.w	r3, r3, #6
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d118      	bne.n	8001aa6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a96:	430a      	orrs	r2, r1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	e007      	b.n	8001ab6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10c      	bne.n	8001ad8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f023 010f 	bic.w	r1, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad6:	e007      	b.n	8001ae8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020f 	bic.w	r2, r2, #15
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f023 0303 	bic.w	r3, r3, #3
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3724      	adds	r7, #36	; 0x24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	053e2d63 	.word	0x053e2d63
 8001b1c:	42028000 	.word	0x42028000
 8001b20:	42028100 	.word	0x42028100
 8001b24:	42028300 	.word	0x42028300
 8001b28:	fff0c007 	.word	0xfff0c007

08001b2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b0b7      	sub	sp, #220	; 0xdc
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e3c1      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x7a6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe6d 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 83a6 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	f7ff fd83 	bl	8001680 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe5b 	bl	800183a <LL_ADC_REG_IsConversionOngoing>
 8001b84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe67 	bl	8001860 <LL_ADC_INJ_IsConversionOngoing>
 8001b92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 81c1 	bne.w	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 81bc 	bne.w	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7ff fd8a 	bl	80016d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fd44 	bl	800165a <LL_ADC_SetSamplingTimeCommonConfig>
 8001bd2:	e00e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f7ff fd79 	bl	80016d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fd34 	bl	800165a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00a      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c24:	f7ff fcc4 	bl	80015b0 <LL_ADC_SetOffset>
 8001c28:	e17b      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fce1 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x12a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fcd6 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	e01e      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x168>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fccb 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	e004      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x180>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	e018      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1b2>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e004      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d106      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fc9a 	bl	8001624 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fc7e 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1f0>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fc73 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	f003 021f 	and.w	r2, r3, #31
 8001d1a:	e01e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x22e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fc68 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e004      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x246>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	e018      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x278>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fc37 	bl	8001624 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc1b 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2b6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc10 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	e01e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x2f4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2102      	movs	r1, #2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fc05 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e004      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x30c>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	e016      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x33a>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e004      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d106      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2102      	movs	r1, #2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fbd6 	bl	8001624 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbba 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10a      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x378>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2103      	movs	r1, #3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fbaf 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	f003 021f 	and.w	r2, r3, #31
 8001ea2:	e017      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x3a8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2103      	movs	r1, #3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fba4 	bl	80015f8 <LL_ADC_GetOffsetChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x3c0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	e011      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x3e4>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001efc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	e003      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb81 	bl	8001624 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc74 	bl	8001814 <LL_ADC_IsEnabled>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 81c9 	bne.w	80022c6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f7ff fbf5 	bl	8001730 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a8f      	ldr	r2, [pc, #572]	; (8002188 <HAL_ADC_ConfigChannel+0x65c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 8131 	bne.w	80021b4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10b      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x44e>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	bf94      	ite	ls
 8001f72:	2301      	movls	r3, #1
 8001f74:	2300      	movhi	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e019      	b.n	8001fae <HAL_ADC_ConfigChannel+0x482>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	bf94      	ite	ls
 8001fa8:	2301      	movls	r3, #1
 8001faa:	2300      	movhi	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d079      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x4a2>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fcc:	e015      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x4ce>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fde:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	069b      	lsls	r3, r3, #26
 8001ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_ADC_ConfigChannel+0x4ee>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	e017      	b.n	800204a <HAL_ADC_ConfigChannel+0x51e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800202c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e003      	b.n	800203e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	ea42 0103 	orr.w	r1, r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x544>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	f003 021f 	and.w	r2, r3, #31
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	051b      	lsls	r3, r3, #20
 800206e:	e018      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x576>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800208c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a2:	430b      	orrs	r3, r1
 80020a4:	e081      	b.n	80021aa <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x596>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	3301      	adds	r3, #1
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c0:	e015      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5c2>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	069b      	lsls	r3, r3, #26
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_ADC_ConfigChannel+0x5e2>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	e017      	b.n	800213e <HAL_ADC_ConfigChannel+0x612>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	61fb      	str	r3, [r7, #28]
  return result;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	ea42 0103 	orr.w	r1, r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10d      	bne.n	800216a <HAL_ADC_ConfigChannel+0x63e>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	3301      	adds	r3, #1
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	3b1e      	subs	r3, #30
 8002162:	051b      	lsls	r3, r3, #20
 8002164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002168:	e01e      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x67c>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	613b      	str	r3, [r7, #16]
  return result;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e006      	b.n	8002194 <HAL_ADC_ConfigChannel+0x668>
 8002186:	bf00      	nop
 8002188:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	3b1e      	subs	r3, #30
 80021a2:	051b      	lsls	r3, r3, #20
 80021a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a8:	430b      	orrs	r3, r1
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6892      	ldr	r2, [r2, #8]
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7ff fa92 	bl	80016d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_ADC_ConfigChannel+0x7b0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8082 	beq.w	80022c6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c2:	4847      	ldr	r0, [pc, #284]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 80021c4:	f7ff f9e6 	bl	8001594 <LL_ADC_GetCommonPathInternalCh>
 80021c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	4845      	ldr	r0, [pc, #276]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 80021ce:	f7ff fb21 	bl	8001814 <LL_ADC_IsEnabled>
 80021d2:	4604      	mov	r4, r0
 80021d4:	4844      	ldr	r0, [pc, #272]	; (80022e8 <HAL_ADC_ConfigChannel+0x7bc>)
 80021d6:	f7ff fb1d 	bl	8001814 <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	4323      	orrs	r3, r4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15e      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a41      	ldr	r2, [pc, #260]	; (80022ec <HAL_ADC_ConfigChannel+0x7c0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d127      	bne.n	800223c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d121      	bne.n	800223c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a39      	ldr	r2, [pc, #228]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d161      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002206:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800220a:	4619      	mov	r1, r3
 800220c:	4834      	ldr	r0, [pc, #208]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800220e:	f7ff f9ae 	bl	800156e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_ADC_ConfigChannel+0x7c8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b01      	subs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800223a:	e044      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d113      	bne.n	800226e <HAL_ADC_ConfigChannel+0x742>
 8002246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d134      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800225c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002264:	4619      	mov	r1, r3
 8002266:	481e      	ldr	r0, [pc, #120]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002268:	f7ff f981 	bl	800156e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800226c:	e02b      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_ADC_ConfigChannel+0x7d0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d126      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
 8002278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d120      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11b      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800228e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002292:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002296:	4619      	mov	r1, r3
 8002298:	4811      	ldr	r0, [pc, #68]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800229a:	f7ff f968 	bl	800156e <LL_ADC_SetCommonPathInternalCh>
 800229e:	e012      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022b2:	e008      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80022ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	37dc      	adds	r7, #220	; 0xdc
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	80080000 	.word	0x80080000
 80022e0:	42028300 	.word	0x42028300
 80022e4:	42028000 	.word	0x42028000
 80022e8:	42028100 	.word	0x42028100
 80022ec:	c7520000 	.word	0xc7520000
 80022f0:	20000000 	.word	0x20000000
 80022f4:	053e2d63 	.word	0x053e2d63
 80022f8:	cb840000 	.word	0xcb840000
 80022fc:	80000001 	.word	0x80000001

08002300 <LL_ADC_IsEnabled>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <LL_ADC_IsEnabled+0x18>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_ADC_IsEnabled+0x1a>
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_REG_IsConversionOngoing>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d101      	bne.n	800233e <LL_ADC_REG_IsConversionOngoing+0x18>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b0a1      	sub	sp, #132	; 0x84
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002366:	2302      	movs	r3, #2
 8002368:	e089      	b.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002372:	2300      	movs	r3, #0
 8002374:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002376:	2300      	movs	r3, #0
 8002378:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e001      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e068      	b.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ffb9 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 80023b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffb3 	bl	8002326 <LL_ADC_REG_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d14a      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d147      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80023ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d027      	beq.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	035b      	lsls	r3, r3, #13
 80023ec:	430b      	orrs	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f4:	4824      	ldr	r0, [pc, #144]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023f6:	f7ff ff83 	bl	8002300 <LL_ADC_IsEnabled>
 80023fa:	4604      	mov	r4, r0
 80023fc:	4823      	ldr	r0, [pc, #140]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023fe:	f7ff ff7f 	bl	8002300 <LL_ADC_IsEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	4323      	orrs	r3, r4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d132      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800240a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002412:	f023 030f 	bic.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6811      	ldr	r1, [r2, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	430a      	orrs	r2, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002424:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002426:	e023      	b.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002432:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002434:	4814      	ldr	r0, [pc, #80]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002436:	f7ff ff63 	bl	8002300 <LL_ADC_IsEnabled>
 800243a:	4604      	mov	r4, r0
 800243c:	4813      	ldr	r0, [pc, #76]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800243e:	f7ff ff5f 	bl	8002300 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	4323      	orrs	r3, r4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d112      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800244a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002452:	f023 030f 	bic.w	r3, r3, #15
 8002456:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002458:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800245a:	e009      	b.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800246e:	e000      	b.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002470:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800247a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800247e:	4618      	mov	r0, r3
 8002480:	3784      	adds	r7, #132	; 0x84
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	42028000 	.word	0x42028000
 800248c:	42028100 	.word	0x42028100
 8002490:	42028300 	.word	0x42028300

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0152      	lsls	r2, r2, #5
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0152      	lsls	r2, r2, #5
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	bf28      	it	cs
 80025a6:	2303      	movcs	r3, #3
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3303      	adds	r3, #3
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	2107      	movs	r1, #7
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff40 	bl	80024dc <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff90 	bl	8002588 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5f 	bl	8002534 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff33 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa4 	bl	80025f0 <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026c2:	e158      	b.n	8002976 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 814a 	beq.w	8002970 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d00b      	beq.n	80026fc <HAL_GPIO_Init+0x48>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d007      	beq.n	80026fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f0:	2b11      	cmp	r3, #17
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d130      	bne.n	800275e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002732:	2201      	movs	r2, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 0201 	and.w	r2, r3, #1
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0xea>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80a4 	beq.w	8002970 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3318      	adds	r3, #24
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_GPIO_Init+0x2e4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d025      	beq.n	80028a0 <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a51      	ldr	r2, [pc, #324]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d01f      	beq.n	800289c <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d019      	beq.n	8002898 <HAL_GPIO_Init+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_GPIO_Init+0x2f0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_GPIO_Init+0x1e0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4e      	ldr	r2, [pc, #312]	; (80029a8 <HAL_GPIO_Init+0x2f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00d      	beq.n	8002890 <HAL_GPIO_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4d      	ldr	r2, [pc, #308]	; (80029ac <HAL_GPIO_Init+0x2f8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <HAL_GPIO_Init+0x1d8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <HAL_GPIO_Init+0x2fc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_GPIO_Init+0x1d4>
 8002884:	2306      	movs	r3, #6
 8002886:	e00c      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002888:	2307      	movs	r3, #7
 800288a:	e00a      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 800288c:	2305      	movs	r3, #5
 800288e:	e008      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002890:	2304      	movs	r3, #4
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002894:	2303      	movs	r3, #3
 8002896:	e004      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002898:	2302      	movs	r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 80028a0:	2300      	movs	r3, #0
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	4093      	lsls	r3, r2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80028b2:	4938      	ldr	r1, [pc, #224]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3318      	adds	r3, #24
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028e6:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80028ee:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f ae9f 	bne.w	80026c4 <HAL_GPIO_Init+0x10>
  }
}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	4002f400 	.word	0x4002f400
 8002998:	42020000 	.word	0x42020000
 800299c:	42020400 	.word	0x42020400
 80029a0:	42020800 	.word	0x42020800
 80029a4:	42020c00 	.word	0x42020c00
 80029a8:	42021000 	.word	0x42021000
 80029ac:	42021400 	.word	0x42021400
 80029b0:	42021800 	.word	0x42021800

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e6:	b08b      	sub	sp, #44	; 0x2c
 80029e8:	af06      	add	r7, sp, #24
 80029ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0d7      	b.n	8002ba6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fba8 	bl	8001160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2203      	movs	r2, #3
 8002a14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 f9e7 	bl	8006df0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	e04c      	b.n	8002ac2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	3301      	adds	r3, #1
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	b298      	uxth	r0, r3
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3336      	adds	r3, #54	; 0x36
 8002a66:	4602      	mov	r2, r0
 8002a68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	3303      	adds	r3, #3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3338      	adds	r3, #56	; 0x38
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	333c      	adds	r3, #60	; 0x3c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3340      	adds	r3, #64	; 0x40
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3ad      	bcc.n	8002a28 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e044      	b.n	8002b5c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3b5      	bcc.n	8002ad2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	687e      	ldr	r6, [r7, #4]
 8002b6e:	466d      	mov	r5, sp
 8002b70:	f106 0410 	add.w	r4, r6, #16
 8002b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	1d33      	adds	r3, r6, #4
 8002b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b80:	6838      	ldr	r0, [r7, #0]
 8002b82:	f004 f950 	bl	8006e26 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f805 	bl	8002bae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40007000 	.word	0x40007000

08002c40 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c50:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002c52:	f000 f861 	bl	8002d18 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5c:	d101      	bne.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e03e      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6e:	d101      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e035      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d101      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e02f      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002c88:	4917      	ldr	r1, [pc, #92]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	09db      	lsrs	r3, r3, #7
 8002c9e:	2232      	movs	r2, #50	; 0x32
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cb0:	e002      	b.n	8002cb8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d102      	bne.n	8002ccc <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f2      	bne.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d101      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e000      	b.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	0a7c5ac5 	.word	0x0a7c5ac5
 8002cf4:	cccccccd 	.word	0xcccccccd

08002cf8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d06:	6053      	str	r3, [r2, #4]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40007000 	.word	0x40007000

08002d18 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	e00a      	b.n	8002d4c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	e001      	b.n	8002d4c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002d4c:	687b      	ldr	r3, [r7, #4]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40007000 	.word	0x40007000

08002d60 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f000 bcd0 	b.w	8003714 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d74:	4b99      	ldr	r3, [pc, #612]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7e:	4b97      	ldr	r3, [pc, #604]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80e9 	beq.w	8002f68 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <HAL_RCC_OscConfig+0x4a>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	f040 8083 	bne.w	8002eaa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d17f      	bne.n	8002eaa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002daa:	4b8c      	ldr	r3, [pc, #560]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x64>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f000 bca8 	b.w	8003714 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc8:	4b84      	ldr	r3, [pc, #528]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCC_OscConfig+0x7e>
 8002dd4:	4b81      	ldr	r3, [pc, #516]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	e005      	b.n	8002dea <HAL_RCC_OscConfig+0x8a>
 8002dde:	4b7f      	ldr	r3, [pc, #508]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d224      	bcs.n	8002e38 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fe98 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f000 bc88 	b.w	8003714 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e04:	4b75      	ldr	r3, [pc, #468]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a74      	ldr	r2, [pc, #464]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	496f      	ldr	r1, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e22:	4b6e      	ldr	r3, [pc, #440]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	496a      	ldr	r1, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
 8002e36:	e026      	b.n	8002e86 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a67      	ldr	r2, [pc, #412]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4962      	ldr	r1, [pc, #392]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e56:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	495d      	ldr	r1, [pc, #372]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fe57 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f000 bc47 	b.w	8003714 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e86:	f000 fe13 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a54      	ldr	r2, [pc, #336]	; (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e90:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <HAL_RCC_OscConfig+0x284>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fafb 	bl	8001490 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d060      	beq.n	8002f66 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	f000 bc35 	b.w	8003714 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d039      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a49      	ldr	r2, [pc, #292]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fb37 	bl	8001530 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ec4:	e00f      	b.n	8002ee6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fb33 	bl	8001530 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed4:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	f000 bc17 	b.w	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0e9      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef2:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a39      	ldr	r2, [pc, #228]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4934      	ldr	r1, [pc, #208]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	492f      	ldr	r1, [pc, #188]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e020      	b.n	8002f68 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fafd 	bl	8001530 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f38:	e00e      	b.n	8002f58 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3a:	f7fe faf9 	bl	8001530 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d907      	bls.n	8002f58 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e3dd      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f58:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ea      	bne.n	8002f3a <HAL_RCC_OscConfig+0x1da>
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d07e      	beq.n	8003072 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x226>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d10e      	bne.n	8002f9e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06e      	beq.n	8003070 <HAL_RCC_OscConfig+0x310>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d16a      	bne.n	8003070 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e3ba      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x256>
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e024      	b.n	8003000 <HAL_RCC_OscConfig+0x2a0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fbe:	d113      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x288>
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a02      	ldr	r2, [pc, #8]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e012      	b.n	8003000 <HAL_RCC_OscConfig+0x2a0>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a8a      	ldr	r2, [pc, #552]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a87      	ldr	r2, [pc, #540]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d019      	beq.n	800303c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fa92 	bl	8001530 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	e00e      	b.n	800302e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fa8e 	bl	8001530 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d907      	bls.n	800302e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301e:	4b7e      	ldr	r3, [pc, #504]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e372      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800302e:	4b7a      	ldr	r3, [pc, #488]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ea      	beq.n	8003010 <HAL_RCC_OscConfig+0x2b0>
 800303a:	e01a      	b.n	8003072 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fa78 	bl	8001530 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003042:	e00e      	b.n	8003062 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fa74 	bl	8001530 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d907      	bls.n	8003062 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003052:	4b71      	ldr	r3, [pc, #452]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e358      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003062:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ea      	bne.n	8003044 <HAL_RCC_OscConfig+0x2e4>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06c      	beq.n	8003158 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x330>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d119      	bne.n	80030be <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d116      	bne.n	80030be <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x348>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e335      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	4958      	ldr	r1, [pc, #352]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	e04c      	b.n	8003158 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d029      	beq.n	800311a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c6:	4b54      	ldr	r3, [pc, #336]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a53      	ldr	r2, [pc, #332]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fa2d 	bl	8001530 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7fe fa29 	bl	8001530 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e30d      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ea      	beq.n	80030da <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	4941      	ldr	r1, [pc, #260]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e01e      	b.n	8003158 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3e      	ldr	r2, [pc, #248]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe fa03 	bl	8001530 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800312c:	e00e      	b.n	800314c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312e:	f7fe f9ff 	bl	8001530 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d907      	bls.n	800314c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e2e3      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ea      	bne.n	800312e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d062      	beq.n	800322a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d038      	beq.n	80031de <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003174:	4b28      	ldr	r3, [pc, #160]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	4a27      	ldr	r2, [pc, #156]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 800317c:	f023 0310 	bic.w	r3, r3, #16
 8003180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003184:	e007      	b.n	8003196 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f043 0310 	orr.w	r3, r3, #16
 8003192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319c:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fe f9c3 	bl	8001530 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ac:	e00f      	b.n	80031ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ae:	f7fe f9bf 	bl	8001530 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d908      	bls.n	80031ce <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e2a2      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0e8      	beq.n	80031ae <HAL_RCC_OscConfig+0x44e>
 80031dc:	e025      	b.n	800322a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe f99f 	bl	8001530 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f4:	e012      	b.n	800321c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe f99b 	bl	8001530 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b07      	cmp	r3, #7
 8003202:	d90b      	bls.n	800321c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e27e      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800321c:	4ba8      	ldr	r3, [pc, #672]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e5      	bne.n	80031f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 812d 	beq.w	8003492 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800323c:	4ba0      	ldr	r3, [pc, #640]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10d      	bne.n	8003264 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b9d      	ldr	r3, [pc, #628]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	4a9c      	ldr	r2, [pc, #624]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800324e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003252:	6593      	str	r3, [r2, #88]	; 0x58
 8003254:	4b9a      	ldr	r3, [pc, #616]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003264:	4b97      	ldr	r3, [pc, #604]	; (80034c4 <HAL_RCC_OscConfig+0x764>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11e      	bne.n	80032ae <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003270:	4b94      	ldr	r3, [pc, #592]	; (80034c4 <HAL_RCC_OscConfig+0x764>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a93      	ldr	r2, [pc, #588]	; (80034c4 <HAL_RCC_OscConfig+0x764>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327c:	f7fe f958 	bl	8001530 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003282:	e00e      	b.n	80032a2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003284:	f7fe f954 	bl	8001530 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d907      	bls.n	80032a2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003292:	4b8c      	ldr	r3, [pc, #560]	; (80034c4 <HAL_RCC_OscConfig+0x764>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e238      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	4b88      	ldr	r3, [pc, #544]	; (80034c4 <HAL_RCC_OscConfig+0x764>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ea      	beq.n	8003284 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01f      	beq.n	80032fa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032c6:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032d6:	4b7a      	ldr	r3, [pc, #488]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e6:	e018      	b.n	800331a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032e8:	4b75      	ldr	r3, [pc, #468]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a74      	ldr	r2, [pc, #464]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f8:	e00f      	b.n	800331a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032fa:	4b71      	ldr	r3, [pc, #452]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	4a6f      	ldr	r2, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	4a6b      	ldr	r2, [pc, #428]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d068      	beq.n	80033f4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fe f905 	bl	8001530 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003328:	e011      	b.n	800334e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe f901 	bl	8001530 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d908      	bls.n	800334e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333c:	4b60      	ldr	r3, [pc, #384]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1e2      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334e:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0e6      	beq.n	800332a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003378:	e011      	b.n	800339e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fe f8d9 	bl	8001530 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d908      	bls.n	800339e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800338c:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e1ba      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800339e:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0e6      	beq.n	800337a <HAL_RCC_OscConfig+0x61a>
 80033ac:	e068      	b.n	8003480 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033ae:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80033b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033be:	e011      	b.n	80033e4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe f8b6 	bl	8001530 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d908      	bls.n	80033e4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033d2:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e197      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e6      	bne.n	80033c0 <HAL_RCC_OscConfig+0x660>
 80033f2:	e045      	b.n	8003480 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe f89c 	bl	8001530 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fa:	e011      	b.n	8003420 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fe f898 	bl	8001530 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d908      	bls.n	8003420 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e179      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e6      	bne.n	80033fc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800344c:	e011      	b.n	8003472 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe f86f 	bl	8001530 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d908      	bls.n	8003472 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e150      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e6      	bne.n	800344e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003480:	7ffb      	ldrb	r3, [r7, #31]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04f      	beq.n	800353e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d028      	beq.n	80034f8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80034a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <HAL_RCC_OscConfig+0x760>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe f83b 	bl	8001530 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x788>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034c8:	f7fe f832 	bl	8001530 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034d6:	4b91      	ldr	r3, [pc, #580]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80034d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e115      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034e8:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80034ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0e8      	beq.n	80034c8 <HAL_RCC_OscConfig+0x768>
 80034f6:	e022      	b.n	800353e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f8:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80034fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fe:	4a87      	ldr	r2, [pc, #540]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe f812 	bl	8001530 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800350e:	e00f      	b.n	8003530 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003510:	f7fe f80e 	bl	8001530 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d908      	bls.n	8003530 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800351e:	4b7f      	ldr	r3, [pc, #508]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0f1      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003530:	4b7a      	ldr	r3, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e8      	bne.n	8003510 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80e5 	beq.w	8003712 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003548:	4b74      	ldr	r3, [pc, #464]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b0c      	cmp	r3, #12
 8003552:	f000 809f 	beq.w	8003694 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	2b02      	cmp	r3, #2
 800355c:	d166      	bne.n	800362c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6e      	ldr	r2, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd ffe1 	bl	8001530 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003570:	e00e      	b.n	8003590 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd ffdd 	bl	8001530 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d907      	bls.n	8003590 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0c1      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003590:	4b62      	ldr	r3, [pc, #392]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ea      	bne.n	8003572 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800359c:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <HAL_RCC_OscConfig+0x9c0>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ac:	3a01      	subs	r2, #1
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	4311      	orrs	r1, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035b6:	0212      	lsls	r2, r2, #8
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0552      	lsls	r2, r2, #21
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035ca:	0852      	lsrs	r2, r2, #1
 80035cc:	3a01      	subs	r2, #1
 80035ce:	0652      	lsls	r2, r2, #25
 80035d0:	4311      	orrs	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035d6:	06d2      	lsls	r2, r2, #27
 80035d8:	430a      	orrs	r2, r1
 80035da:	4950      	ldr	r1, [pc, #320]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4d      	ldr	r2, [pc, #308]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd ff9a 	bl	8001530 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	e00e      	b.n	800361e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd ff96 	bl	8001530 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d907      	bls.n	800361e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e07a      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ea      	beq.n	8003600 <HAL_RCC_OscConfig+0x8a0>
 800362a:	e072      	b.n	8003712 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3a      	ldr	r2, [pc, #232]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003638:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003644:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a34      	ldr	r2, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003656:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800365a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd ff66 	bl	8001530 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003666:	e00e      	b.n	8003686 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd ff62 	bl	8001530 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d907      	bls.n	8003686 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003676:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e046      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ea      	bne.n	8003668 <HAL_RCC_OscConfig+0x908>
 8003692:	e03e      	b.n	8003712 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e039      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCC_OscConfig+0x9bc>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d12c      	bne.n	800370e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	3b01      	subs	r3, #1
 80036c0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d123      	bne.n	800370e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11b      	bne.n	800370e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d113      	bne.n	800370e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d109      	bne.n	800370e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	019f800c 	.word	0x019f800c

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e10d      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b85      	ldr	r3, [pc, #532]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 020f 	bic.w	r2, r3, #15
 8003752:	4983      	ldr	r1, [pc, #524]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0f5      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8094 	beq.w	80038a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d134      	bne.n	80037ec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	4b78      	ldr	r3, [pc, #480]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0e2      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003792:	f000 fa2d 	bl	8003bf0 <RCC_GetSysClockFreqFromPLLSource>
 8003796:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4a73      	ldr	r2, [pc, #460]	; (8003968 <HAL_RCC_ClockConfig+0x244>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d956      	bls.n	800384e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037a0:	4b70      	ldr	r3, [pc, #448]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ac:	4b6d      	ldr	r3, [pc, #436]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b4:	4a6b      	ldr	r2, [pc, #428]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e045      	b.n	800384e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d03f      	beq.n	800384e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13b      	bne.n	800384e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037de:	4a61      	ldr	r2, [pc, #388]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e030      	b.n	800384e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f4:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0a9      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e09d      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381c:	4b51      	ldr	r3, [pc, #324]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e095      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800382c:	f000 f8a2 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4a4c      	ldr	r2, [pc, #304]	; (8003968 <HAL_RCC_ClockConfig+0x244>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d909      	bls.n	800384e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003842:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b45      	ldr	r3, [pc, #276]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4942      	ldr	r1, [pc, #264]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fd fe66 	bl	8001530 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e013      	b.n	8003890 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fd fe62 	bl	8001530 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d90a      	bls.n	8003890 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 020c 	and.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e063      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 020c 	and.w	r2, r3, #12
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	429a      	cmp	r2, r3
 80038a0:	d1e2      	bne.n	8003868 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	492a      	ldr	r1, [pc, #168]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038c8:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 80038ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d2:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d210      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 020f 	bic.w	r2, r3, #15
 80038ea:	491d      	ldr	r1, [pc, #116]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_ClockConfig+0x23c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e029      	b.n	8003958 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4911      	ldr	r1, [pc, #68]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4909      	ldr	r1, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x240>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003942:	f000 f8b5 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003946:	4603      	mov	r3, r0
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <HAL_RCC_ClockConfig+0x248>)
 800394a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_RCC_ClockConfig+0x24c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fd9d 	bl	8001490 <HAL_InitTick>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40022000 	.word	0x40022000
 8003964:	40021000 	.word	0x40021000
 8003968:	04c4b400 	.word	0x04c4b400
 800396c:	20000000 	.word	0x20000000
 8003970:	20000004 	.word	0x20000004

08003974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800398c:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x34>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d121      	bne.n	80039e6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d11e      	bne.n	80039e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039a8:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039b4:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e005      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x130>)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d102      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x134>)
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e004      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 80039fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d146      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a02:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0xb4>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d00d      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0xce>
 8003a26:	e019      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a28:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a32:	68d2      	ldr	r2, [r2, #12]
 8003a34:	0a12      	lsrs	r2, r2, #8
 8003a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
        break;
 8003a40:	e019      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a4c:	68d2      	ldr	r2, [r2, #12]
 8003a4e:	0a12      	lsrs	r2, r2, #8
 8003a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
        break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a66:	68d2      	ldr	r2, [r2, #12]
 8003a68:	0a12      	lsrs	r2, r2, #8
 8003a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	617b      	str	r3, [r7, #20]
        break;
 8003a74:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	0e5b      	lsrs	r3, r3, #25
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	3301      	adds	r3, #1
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a90:	69bb      	ldr	r3, [r7, #24]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08006f10 	.word	0x08006f10
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	007a1200 	.word	0x007a1200

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003ab4:	f7ff ff5e 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x20>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08006ef8 	.word	0x08006ef8

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff ffe8 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08006f08 	.word	0x08006f08

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffd4 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08006f08 	.word	0x08006f08

08003b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff f870 	bl	8002c24 <HAL_PWREx_GetVoltageRange>
 8003b44:	6138      	str	r0, [r7, #16]
 8003b46:	e014      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	; 0x58
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b60:	f7ff f860 	bl	8002c24 <HAL_PWREx_GetVoltageRange>
 8003b64:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7e:	d10b      	bne.n	8003b98 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d919      	bls.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2ba0      	cmp	r3, #160	; 0xa0
 8003b8a:	d902      	bls.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b90:	e013      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b92:	2301      	movs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b96:	e010      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b80      	cmp	r3, #128	; 0x80
 8003b9c:	d902      	bls.n	8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e00a      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d102      	bne.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003baa:	2302      	movs	r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e004      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b70      	cmp	r3, #112	; 0x70
 8003bb4:	d101      	bne.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	490a      	ldr	r1, [pc, #40]	; (8003bec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40022000 	.word	0x40022000

08003bf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d118      	bne.n	8003c38 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d107      	bne.n	8003c22 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e005      	b.n	8003c2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c38:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d003      	beq.n	8003c5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d00d      	beq.n	8003c78 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003c5c:	e019      	b.n	8003c92 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	0a12      	lsrs	r2, r2, #8
 8003c6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	613b      	str	r3, [r7, #16]
      break;
 8003c76:	e019      	b.n	8003cac <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	0a12      	lsrs	r2, r2, #8
 8003c86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	613b      	str	r3, [r7, #16]
      break;
 8003c90:	e00c      	b.n	8003cac <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	0a12      	lsrs	r2, r2, #8
 8003ca0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      break;
 8003caa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0e5b      	lsrs	r3, r3, #25
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003cc6:	683b      	ldr	r3, [r7, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	08006f10 	.word	0x08006f10
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	007a1200 	.word	0x007a1200

08003ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cec:	2300      	movs	r3, #0
 8003cee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d040      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d02a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d825      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d0c:	2b60      	cmp	r3, #96	; 0x60
 8003d0e:	d026      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d10:	2b60      	cmp	r3, #96	; 0x60
 8003d12:	d821      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d006      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d81d      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d010      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d24:	e018      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d26:	4b8f      	ldr	r3, [pc, #572]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	4a8e      	ldr	r2, [pc, #568]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d32:	e015      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fb56 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d44:	e00c      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3320      	adds	r3, #32
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fc33 	bl	80045b8 <RCCEx_PLLSAI2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d56:	e003      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	77fb      	strb	r3, [r7, #31]
        break;
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d66:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d6c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	497b      	ldr	r1, [pc, #492]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d7c:	e001      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d047      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d030      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d82a      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da2:	d02a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da8:	d824      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d81e      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbe:	d010      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003dc0:	e018      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc2:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4a67      	ldr	r2, [pc, #412]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003dce:	e015      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fb08 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003de0:	e00c      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3320      	adds	r3, #32
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fbe5 	bl	80045b8 <RCCEx_PLLSAI2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
        break;
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e02:	4b58      	ldr	r3, [pc, #352]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4954      	ldr	r1, [pc, #336]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e18:	e001      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80ab 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e30:	4b4c      	ldr	r3, [pc, #304]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b49      	ldr	r3, [pc, #292]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	4a48      	ldr	r2, [pc, #288]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6593      	str	r3, [r2, #88]	; 0x58
 8003e48:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e58:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a42      	ldr	r2, [pc, #264]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e64:	f7fd fb64 	bl	8001530 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e6a:	e00f      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fd fb60 	bl	8001530 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d908      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003e8a:	e006      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e8c:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0e9      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003e9a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d164      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ea2:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ec0:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01f      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fb17 	bl	8001530 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f04:	e012      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fd fb13 	bl	8001530 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d909      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003f2a:	e007      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0e5      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003f3a:	e000      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003f3c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	4903      	ldr	r1, [pc, #12]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f5c:	e008      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f5e:	7ffb      	ldrb	r3, [r7, #31]
 8003f60:	77bb      	strb	r3, [r7, #30]
 8003f62:	e005      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
 8003f6e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b9c      	ldr	r3, [pc, #624]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	4a9b      	ldr	r2, [pc, #620]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8e:	4b96      	ldr	r3, [pc, #600]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f023 0203 	bic.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	4992      	ldr	r1, [pc, #584]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb0:	4b8d      	ldr	r3, [pc, #564]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f023 020c 	bic.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	498a      	ldr	r1, [pc, #552]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd2:	4b85      	ldr	r3, [pc, #532]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	4981      	ldr	r1, [pc, #516]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff4:	4b7c      	ldr	r3, [pc, #496]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4979      	ldr	r1, [pc, #484]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004016:	4b74      	ldr	r3, [pc, #464]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	4970      	ldr	r1, [pc, #448]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004038:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004046:	4968      	ldr	r1, [pc, #416]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800405a:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	495f      	ldr	r1, [pc, #380]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407c:	4b5a      	ldr	r3, [pc, #360]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	4957      	ldr	r1, [pc, #348]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800409e:	4b52      	ldr	r3, [pc, #328]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ac:	494e      	ldr	r1, [pc, #312]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d031      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c8:	d00e      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80040ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ce:	d814      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d8:	d10f      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040da:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040e6:	e00c      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f97c 	bl	80043ec <RCCEx_PLLSAI1_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	77fb      	strb	r3, [r7, #31]
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	7ffb      	ldrb	r3, [r7, #31]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004108:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004116:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800411e:	e001      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	492a      	ldr	r1, [pc, #168]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004152:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	4921      	ldr	r1, [pc, #132]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004174:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	4919      	ldr	r1, [pc, #100]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800419c:	f023 0203 	bic.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	4910      	ldr	r1, [pc, #64]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	4908      	ldr	r1, [pc, #32]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d6:	d109      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a02      	ldr	r2, [pc, #8]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
 80041e4:	e014      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2101      	movs	r1, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f8f5 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004206:	7ffb      	ldrb	r3, [r7, #31]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800420c:	7ffb      	ldrb	r3, [r7, #31]
 800420e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d04a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004224:	d108      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004226:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422c:	4a6e      	ldr	r2, [pc, #440]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800422e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004232:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004236:	e012      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004246:	4968      	ldr	r1, [pc, #416]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800424e:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004254:	4a64      	ldr	r2, [pc, #400]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004266:	d10d      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f8bc 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d019      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800427e:	7ffb      	ldrb	r3, [r7, #31]
 8004280:	77bb      	strb	r3, [r7, #30]
 8004282:	e016      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428c:	d106      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428e:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4a55      	ldr	r2, [pc, #340]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004298:	60d3      	str	r3, [r2, #12]
 800429a:	e00a      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a4:	d105      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a6:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4a4f      	ldr	r2, [pc, #316]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	4946      	ldr	r1, [pc, #280]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042dc:	d106      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042de:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a41      	ldr	r2, [pc, #260]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e8:	60d3      	str	r3, [r2, #12]
 80042ea:	e011      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f875 	bl	80043ec <RCCEx_PLLSAI1_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004306:	7ffb      	ldrb	r3, [r7, #31]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800430c:	7ffb      	ldrb	r3, [r7, #31]
 800430e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01e      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432c:	492e      	ldr	r1, [pc, #184]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2102      	movs	r1, #2
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f850 	bl	80043ec <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004350:	7ffb      	ldrb	r3, [r7, #31]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004356:	7ffb      	ldrb	r3, [r7, #31]
 8004358:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436c:	f023 0204 	bic.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	491c      	ldr	r1, [pc, #112]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800438c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004390:	f023 0218 	bic.w	r2, r3, #24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	4913      	ldr	r1, [pc, #76]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043d0:	d105      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80043de:	7fbb      	ldrb	r3, [r7, #30]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000

080043ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d018      	beq.n	8004434 <RCCEx_PLLSAI1_Config+0x48>
 8004402:	2b03      	cmp	r3, #3
 8004404:	d81f      	bhi.n	8004446 <RCCEx_PLLSAI1_Config+0x5a>
 8004406:	2b01      	cmp	r3, #1
 8004408:	d002      	beq.n	8004410 <RCCEx_PLLSAI1_Config+0x24>
 800440a:	2b02      	cmp	r3, #2
 800440c:	d009      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x36>
 800440e:	e01a      	b.n	8004446 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004410:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d117      	bne.n	800444c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e014      	b.n	800444c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004422:	4b61      	ldr	r3, [pc, #388]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442a:	2b00      	cmp	r3, #0
 800442c:	d110      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e00d      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004434:	4b5c      	ldr	r3, [pc, #368]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004444:	e006      	b.n	8004454 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      break;
 800444a:	e004      	b.n	8004456 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800444c:	bf00      	nop
 800444e:	e002      	b.n	8004456 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004454:	bf00      	nop
  }

  if (status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 809f 	bne.w	800459c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800445e:	4b52      	ldr	r3, [pc, #328]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a51      	ldr	r2, [pc, #324]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004464:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fd f861 	bl	8001530 <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004470:	e00f      	b.n	8004492 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004472:	f7fd f85d 	bl	8001530 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d908      	bls.n	8004492 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004480:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004490:	e006      	b.n	80044a0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004492:	4b45      	ldr	r3, [pc, #276]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e9      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0x86>
 800449e:	e000      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80044a0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d179      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ae:	4b3e      	ldr	r3, [pc, #248]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <RCCEx_PLLSAI1_Config+0x1c0>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	0211      	lsls	r1, r2, #8
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68d2      	ldr	r2, [r2, #12]
 80044c0:	06d2      	lsls	r2, r2, #27
 80044c2:	4311      	orrs	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6852      	ldr	r2, [r2, #4]
 80044c8:	3a01      	subs	r2, #1
 80044ca:	0112      	lsls	r2, r2, #4
 80044cc:	4311      	orrs	r1, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	4934      	ldr	r1, [pc, #208]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	610b      	str	r3, [r1, #16]
 80044da:	e033      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d118      	bne.n	8004514 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e2:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1c4>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6892      	ldr	r2, [r2, #8]
 80044ee:	0211      	lsls	r1, r2, #8
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6912      	ldr	r2, [r2, #16]
 80044f4:	0852      	lsrs	r2, r2, #1
 80044f6:	3a01      	subs	r2, #1
 80044f8:	0552      	lsls	r2, r2, #21
 80044fa:	4311      	orrs	r1, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6852      	ldr	r2, [r2, #4]
 8004500:	3a01      	subs	r2, #1
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	4311      	orrs	r1, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	4926      	ldr	r1, [pc, #152]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	610b      	str	r3, [r1, #16]
 8004512:	e017      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800451a:	4013      	ands	r3, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6892      	ldr	r2, [r2, #8]
 8004520:	0211      	lsls	r1, r2, #8
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6952      	ldr	r2, [r2, #20]
 8004526:	0852      	lsrs	r2, r2, #1
 8004528:	3a01      	subs	r2, #1
 800452a:	0652      	lsls	r2, r2, #25
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6852      	ldr	r2, [r2, #4]
 8004532:	3a01      	subs	r2, #1
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	491a      	ldr	r1, [pc, #104]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800454a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800454e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fc ffee 	bl	8001530 <HAL_GetTick>
 8004554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004556:	e00f      	b.n	8004578 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004558:	f7fc ffea 	bl	8001530 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d908      	bls.n	8004578 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004576:	e006      	b.n	8004586 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0e9      	beq.n	8004558 <RCCEx_PLLSAI1_Config+0x16c>
 8004584:	e000      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004586:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	4904      	ldr	r1, [pc, #16]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	07ff800c 	.word	0x07ff800c
 80045b0:	ff9f800c 	.word	0xff9f800c
 80045b4:	f9ff800c 	.word	0xf9ff800c

080045b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d018      	beq.n	8004600 <RCCEx_PLLSAI2_Config+0x48>
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d81f      	bhi.n	8004612 <RCCEx_PLLSAI2_Config+0x5a>
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d002      	beq.n	80045dc <RCCEx_PLLSAI2_Config+0x24>
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d009      	beq.n	80045ee <RCCEx_PLLSAI2_Config+0x36>
 80045da:	e01a      	b.n	8004612 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045dc:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d117      	bne.n	8004618 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ec:	e014      	b.n	8004618 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ee:	4b46      	ldr	r3, [pc, #280]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d110      	bne.n	800461c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fe:	e00d      	b.n	800461c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004600:	4b41      	ldr	r3, [pc, #260]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004610:	e006      	b.n	8004620 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      break;
 8004616:	e004      	b.n	8004622 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004618:	bf00      	nop
 800461a:	e002      	b.n	8004622 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004620:	bf00      	nop
  }

  if (status == HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d169      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004628:	4b37      	ldr	r3, [pc, #220]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a36      	ldr	r2, [pc, #216]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fc ff7c 	bl	8001530 <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463a:	e00f      	b.n	800465c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800463c:	f7fc ff78 	bl	8001530 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d908      	bls.n	800465c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800464a:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800465a:	e006      	b.n	800466a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e9      	bne.n	800463c <RCCEx_PLLSAI2_Config+0x84>
 8004668:	e000      	b.n	800466c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800466a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d144      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d115      	bne.n	80046a4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004678:	4b23      	ldr	r3, [pc, #140]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	4b23      	ldr	r3, [pc, #140]	; (800470c <RCCEx_PLLSAI2_Config+0x154>)
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6892      	ldr	r2, [r2, #8]
 8004684:	0211      	lsls	r1, r2, #8
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68d2      	ldr	r2, [r2, #12]
 800468a:	06d2      	lsls	r2, r2, #27
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6852      	ldr	r2, [r2, #4]
 8004692:	3a01      	subs	r2, #1
 8004694:	0112      	lsls	r2, r2, #4
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	491a      	ldr	r1, [pc, #104]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fc ff3e 	bl	8001530 <HAL_GetTick>
 80046b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046b6:	e00f      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b8:	f7fc ff3a 	bl	8001530 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d908      	bls.n	80046d8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80046d6:	e006      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0e9      	beq.n	80046b8 <RCCEx_PLLSAI2_Config+0x100>
 80046e4:	e000      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80046e6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	4904      	ldr	r1, [pc, #16]	; (8004708 <RCCEx_PLLSAI2_Config+0x150>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	07ff800c 	.word	0x07ff800c

08004710 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d05c      	beq.n	80047dc <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fc76 	bl	8001028 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004744:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <HAL_RTC_Init+0xd8>)
 8004746:	22ca      	movs	r2, #202	; 0xca
 8004748:	625a      	str	r2, [r3, #36]	; 0x24
 800474a:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_RTC_Init+0xd8>)
 800474c:	2253      	movs	r2, #83	; 0x53
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f871 	bl	8004838 <RTC_EnterInitMode>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d133      	bne.n	80047c8 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <HAL_RTC_Init+0xd8>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	4a20      	ldr	r2, [pc, #128]	; (80047e8 <HAL_RTC_Init+0xd8>)
 8004766:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800476a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_RTC_Init+0xd8>)
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	4319      	orrs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	430b      	orrs	r3, r1
 8004784:	4918      	ldr	r1, [pc, #96]	; (80047e8 <HAL_RTC_Init+0xd8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	4914      	ldr	r1, [pc, #80]	; (80047e8 <HAL_RTC_Init+0xd8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f880 	bl	80048a0 <RTC_ExitInitMode>
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10e      	bne.n	80047c8 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_RTC_Init+0xd8>)
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a19      	ldr	r1, [r3, #32]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4319      	orrs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	4909      	ldr	r1, [pc, #36]	; (80047e8 <HAL_RTC_Init+0xd8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c8:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_RTC_Init+0xd8>)
 80047ca:	22ff      	movs	r2, #255	; 0xff
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d103      	bne.n	80047dc <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40002800 	.word	0x40002800

080047ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <HAL_RTC_WaitForSynchro+0x48>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <HAL_RTC_WaitForSynchro+0x48>)
 80047fa:	f023 0320 	bic.w	r3, r3, #32
 80047fe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004800:	f7fc fe96 	bl	8001530 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004806:	e009      	b.n	800481c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004808:	f7fc fe92 	bl	8001530 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004816:	d901      	bls.n	800481c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RTC_WaitForSynchro+0x48>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ef      	beq.n	8004808 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40002800 	.word	0x40002800

08004838 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <RTC_EnterInitMode+0x64>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d120      	bne.n	8004892 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <RTC_EnterInitMode+0x64>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <RTC_EnterInitMode+0x64>)
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800485c:	f7fc fe68 	bl	8001530 <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004862:	e00d      	b.n	8004880 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004864:	f7fc fe64 	bl	8001530 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004872:	d905      	bls.n	8004880 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2203      	movs	r2, #3
 800487c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <RTC_EnterInitMode+0x64>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <RTC_EnterInitMode+0x5a>
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d1e8      	bne.n	8004864 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40002800 	.word	0x40002800

080048a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <RTC_ExitInitMode+0x78>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <RTC_ExitInitMode+0x78>)
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <RTC_ExitInitMode+0x78>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10c      	bne.n	80048de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff91 	bl	80047ec <HAL_RTC_WaitForSynchro>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01e      	beq.n	800490e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2203      	movs	r2, #3
 80048d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e017      	b.n	800490e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <RTC_ExitInitMode+0x78>)
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <RTC_ExitInitMode+0x78>)
 80048e4:	f023 0320 	bic.w	r3, r3, #32
 80048e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff7e 	bl	80047ec <HAL_RTC_WaitForSynchro>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2203      	movs	r2, #3
 80048fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <RTC_ExitInitMode+0x78>)
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	4a04      	ldr	r2, [pc, #16]	; (8004918 <RTC_ExitInitMode+0x78>)
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40002800 	.word	0x40002800

0800491c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	490f      	ldr	r1, [pc, #60]	; (800496c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004930:	4313      	orrs	r3, r2
 8004932:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	490c      	ldr	r1, [pc, #48]	; (8004970 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800493e:	4313      	orrs	r3, r2
 8004940:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6919      	ldr	r1, [r3, #16]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	430b      	orrs	r3, r1
 8004956:	4906      	ldr	r1, [pc, #24]	; (8004970 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004958:	4313      	orrs	r3, r2
 800495a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40002800 	.word	0x40002800
 8004970:	40003400 	.word	0x40003400

08004974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e049      	b.n	8004a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc fb82 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 fd2c 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d001      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e04f      	b.n	8004adc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x76>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d018      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x76>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_TIM_Base_Start_IT+0xc8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x76>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x76>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x76>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIM_Base_Start_IT+0x76>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_TIM_Base_Start_IT+0xd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d115      	bne.n	8004ac6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b06      	cmp	r3, #6
 8004aaa:	d015      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0xb4>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d011      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac4:	e008      	b.n	8004ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e000      	b.n	8004ada <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	00010007 	.word	0x00010007

08004b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e049      	b.n	8004baa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f841 	bl	8004bb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f000 fc64 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_TIM_PWM_Start+0x24>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e03c      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d109      	bne.n	8004c06 <HAL_TIM_PWM_Start+0x3e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	bf14      	ite	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	2300      	moveq	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	e02f      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d109      	bne.n	8004c20 <HAL_TIM_PWM_Start+0x58>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e022      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d109      	bne.n	8004c3a <HAL_TIM_PWM_Start+0x72>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e015      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start+0x8c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e008      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e09c      	b.n	8004da8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_PWM_Start+0xb6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	e023      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start+0xc6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c8c:	e01b      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start+0xd6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	e013      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xe6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cac:	e00b      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xf6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	e003      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 ffaa 	bl	8005c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <HAL_TIM_PWM_Start+0x1e8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_TIM_PWM_Start+0x13e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a34      	ldr	r2, [pc, #208]	; (8004db4 <HAL_TIM_PWM_Start+0x1ec>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_TIM_PWM_Start+0x13e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a32      	ldr	r2, [pc, #200]	; (8004db8 <HAL_TIM_PWM_Start+0x1f0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_TIM_PWM_Start+0x13e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a31      	ldr	r2, [pc, #196]	; (8004dbc <HAL_TIM_PWM_Start+0x1f4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIM_PWM_Start+0x13e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <HAL_TIM_PWM_Start+0x1f8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x142>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_PWM_Start+0x144>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_TIM_PWM_Start+0x1e8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01d      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x19e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d018      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x19e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <HAL_TIM_PWM_Start+0x1fc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x19e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_TIM_PWM_Start+0x200>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00e      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x19e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_TIM_PWM_Start+0x204>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x19e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_TIM_PWM_Start+0x1ec>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x19e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <HAL_TIM_PWM_Start+0x1f0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d115      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <HAL_TIM_PWM_Start+0x208>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d015      	beq.n	8004da4 <HAL_TIM_PWM_Start+0x1dc>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7e:	d011      	beq.n	8004da4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	e008      	b.n	8004da4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e000      	b.n	8004da6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	00010007 	.word	0x00010007

08004dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0202 	mvn.w	r2, #2
 8004e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fadc 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 face 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fadf 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0204 	mvn.w	r2, #4
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fab2 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 faa4 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fab5 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0208 	mvn.w	r2, #8
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2204      	movs	r2, #4
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa88 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa7a 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa8b 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa5e 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa50 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa61 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0201 	mvn.w	r2, #1
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb fe84 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 ffaa 	bl	8005ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f92:	d10e      	bne.n	8004fb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d107      	bne.n	8004fb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 ff9d 	bl	8005eec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d10e      	bne.n	8004fde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d107      	bne.n	8004fde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fa0f 	bl	80053fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d10e      	bne.n	800500a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d107      	bne.n	800500a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f06f 0220 	mvn.w	r2, #32
 8005002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 ff5d 	bl	8005ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800502a:	2302      	movs	r3, #2
 800502c:	e0fd      	b.n	800522a <HAL_TIM_PWM_ConfigChannel+0x216>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b14      	cmp	r3, #20
 800503a:	f200 80f0 	bhi.w	800521e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005099 	.word	0x08005099
 8005048:	0800521f 	.word	0x0800521f
 800504c:	0800521f 	.word	0x0800521f
 8005050:	0800521f 	.word	0x0800521f
 8005054:	080050d9 	.word	0x080050d9
 8005058:	0800521f 	.word	0x0800521f
 800505c:	0800521f 	.word	0x0800521f
 8005060:	0800521f 	.word	0x0800521f
 8005064:	0800511b 	.word	0x0800511b
 8005068:	0800521f 	.word	0x0800521f
 800506c:	0800521f 	.word	0x0800521f
 8005070:	0800521f 	.word	0x0800521f
 8005074:	0800515b 	.word	0x0800515b
 8005078:	0800521f 	.word	0x0800521f
 800507c:	0800521f 	.word	0x0800521f
 8005080:	0800521f 	.word	0x0800521f
 8005084:	0800519d 	.word	0x0800519d
 8005088:	0800521f 	.word	0x0800521f
 800508c:	0800521f 	.word	0x0800521f
 8005090:	0800521f 	.word	0x0800521f
 8005094:	080051dd 	.word	0x080051dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa50 	bl	8005544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0208 	orr.w	r2, r2, #8
 80050b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6999      	ldr	r1, [r3, #24]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	619a      	str	r2, [r3, #24]
      break;
 80050d6:	e0a3      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fac0 	bl	8005664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	619a      	str	r2, [r3, #24]
      break;
 8005118:	e082      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fb29 	bl	8005778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0208 	orr.w	r2, r2, #8
 8005134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0204 	bic.w	r2, r2, #4
 8005144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69d9      	ldr	r1, [r3, #28]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	61da      	str	r2, [r3, #28]
      break;
 8005158:	e062      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fb91 	bl	8005888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	021a      	lsls	r2, r3, #8
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	61da      	str	r2, [r3, #28]
      break;
 800519a:	e041      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fbda 	bl	800595c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0208 	orr.w	r2, r2, #8
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0204 	bic.w	r2, r2, #4
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051da:	e021      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fc1e 	bl	8005a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800521c:	e000      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800521e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop

08005234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIM_ConfigClockSource+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e0b5      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x184>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800526a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800526e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005276:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005288:	d03e      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0xd4>
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	f200 8087 	bhi.w	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	f000 8085 	beq.w	80053a4 <HAL_TIM_ConfigClockSource+0x170>
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	d87f      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b70      	cmp	r3, #112	; 0x70
 80052a2:	d01a      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xa6>
 80052a4:	2b70      	cmp	r3, #112	; 0x70
 80052a6:	d87b      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b60      	cmp	r3, #96	; 0x60
 80052aa:	d050      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x11a>
 80052ac:	2b60      	cmp	r3, #96	; 0x60
 80052ae:	d877      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b50      	cmp	r3, #80	; 0x50
 80052b2:	d03c      	beq.n	800532e <HAL_TIM_ConfigClockSource+0xfa>
 80052b4:	2b50      	cmp	r3, #80	; 0x50
 80052b6:	d873      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d058      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x13a>
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d86f      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b30      	cmp	r3, #48	; 0x30
 80052c2:	d064      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	2b30      	cmp	r3, #48	; 0x30
 80052c6:	d86b      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d060      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x15a>
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d867      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d05c      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x15a>
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d05a      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052d8:	e062      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6899      	ldr	r1, [r3, #8]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f000 fc7d 	bl	8005be8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	609a      	str	r2, [r3, #8]
      break;
 8005306:	e04e      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6899      	ldr	r1, [r3, #8]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f000 fc66 	bl	8005be8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800532a:	609a      	str	r2, [r3, #8]
      break;
 800532c:	e03b      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 fbd8 	bl	8005af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2150      	movs	r1, #80	; 0x50
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fc31 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 800534c:	e02b      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6859      	ldr	r1, [r3, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	461a      	mov	r2, r3
 800535c:	f000 fbf7 	bl	8005b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2160      	movs	r1, #96	; 0x60
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fc21 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 800536c:	e01b      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	461a      	mov	r2, r3
 800537c:	f000 fbb8 	bl	8005af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2140      	movs	r1, #64	; 0x40
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fc11 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 800538c:	e00b      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f000 fc08 	bl	8005bae <TIM_ITRx_SetConfig>
        break;
 800539e:	e002      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80053a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a40      	ldr	r2, [pc, #256]	; (8005524 <TIM_Base_SetConfig+0x114>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d00f      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <TIM_Base_SetConfig+0x118>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3c      	ldr	r2, [pc, #240]	; (800552c <TIM_Base_SetConfig+0x11c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a3b      	ldr	r2, [pc, #236]	; (8005530 <TIM_Base_SetConfig+0x120>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a3a      	ldr	r2, [pc, #232]	; (8005534 <TIM_Base_SetConfig+0x124>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <TIM_Base_SetConfig+0x114>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01f      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d01b      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <TIM_Base_SetConfig+0x118>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d017      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2b      	ldr	r2, [pc, #172]	; (800552c <TIM_Base_SetConfig+0x11c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <TIM_Base_SetConfig+0x120>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a29      	ldr	r2, [pc, #164]	; (8005534 <TIM_Base_SetConfig+0x124>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <TIM_Base_SetConfig+0x128>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <TIM_Base_SetConfig+0x12c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a26      	ldr	r2, [pc, #152]	; (8005540 <TIM_Base_SetConfig+0x130>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Set the Prescaler value */




  TIMx->PSC = Structure->Prescaler;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <TIM_Base_SetConfig+0x114>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <TIM_Base_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a11      	ldr	r2, [pc, #68]	; (8005538 <TIM_Base_SetConfig+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <TIM_Base_SetConfig+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a0f      	ldr	r2, [pc, #60]	; (8005540 <TIM_Base_SetConfig+0x130>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	615a      	str	r2, [r3, #20]
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800

08005544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f023 0302 	bic.w	r3, r3, #2
 8005590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <TIM_OC1_SetConfig+0x10c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00f      	beq.n	80055c4 <TIM_OC1_SetConfig+0x80>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2b      	ldr	r2, [pc, #172]	; (8005654 <TIM_OC1_SetConfig+0x110>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <TIM_OC1_SetConfig+0x80>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2a      	ldr	r2, [pc, #168]	; (8005658 <TIM_OC1_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_OC1_SetConfig+0x80>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a29      	ldr	r2, [pc, #164]	; (800565c <TIM_OC1_SetConfig+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_OC1_SetConfig+0x80>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a28      	ldr	r2, [pc, #160]	; (8005660 <TIM_OC1_SetConfig+0x11c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10c      	bne.n	80055de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0308 	bic.w	r3, r3, #8
 80055ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 0304 	bic.w	r3, r3, #4
 80055dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <TIM_OC1_SetConfig+0x10c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_OC1_SetConfig+0xc2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1a      	ldr	r2, [pc, #104]	; (8005654 <TIM_OC1_SetConfig+0x110>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_OC1_SetConfig+0xc2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <TIM_OC1_SetConfig+0x114>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_OC1_SetConfig+0xc2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <TIM_OC1_SetConfig+0x118>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC1_SetConfig+0xc2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a17      	ldr	r2, [pc, #92]	; (8005660 <TIM_OC1_SetConfig+0x11c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d111      	bne.n	800562a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0320 	bic.w	r3, r3, #32
 80056b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a28      	ldr	r2, [pc, #160]	; (8005764 <TIM_OC2_SetConfig+0x100>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x6c>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <TIM_OC2_SetConfig+0x104>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10d      	bne.n	80056ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <TIM_OC2_SetConfig+0x100>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <TIM_OC2_SetConfig+0xb0>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <TIM_OC2_SetConfig+0x104>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_OC2_SetConfig+0xb0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a1b      	ldr	r2, [pc, #108]	; (800576c <TIM_OC2_SetConfig+0x108>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_OC2_SetConfig+0xb0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1a      	ldr	r2, [pc, #104]	; (8005770 <TIM_OC2_SetConfig+0x10c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC2_SetConfig+0xb0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a19      	ldr	r2, [pc, #100]	; (8005774 <TIM_OC2_SetConfig+0x110>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d113      	bne.n	800573c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800571a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a27      	ldr	r2, [pc, #156]	; (8005874 <TIM_OC3_SetConfig+0xfc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC3_SetConfig+0x6a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a26      	ldr	r2, [pc, #152]	; (8005878 <TIM_OC3_SetConfig+0x100>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10d      	bne.n	80057fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <TIM_OC3_SetConfig+0xfc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00f      	beq.n	8005826 <TIM_OC3_SetConfig+0xae>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <TIM_OC3_SetConfig+0x100>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00b      	beq.n	8005826 <TIM_OC3_SetConfig+0xae>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1a      	ldr	r2, [pc, #104]	; (800587c <TIM_OC3_SetConfig+0x104>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <TIM_OC3_SetConfig+0xae>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <TIM_OC3_SetConfig+0x108>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_OC3_SetConfig+0xae>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a18      	ldr	r2, [pc, #96]	; (8005884 <TIM_OC3_SetConfig+0x10c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d113      	bne.n	800584e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800582c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	621a      	str	r2, [r3, #32]
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <TIM_OC4_SetConfig+0xc0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00f      	beq.n	800590c <TIM_OC4_SetConfig+0x84>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <TIM_OC4_SetConfig+0xc4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00b      	beq.n	800590c <TIM_OC4_SetConfig+0x84>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <TIM_OC4_SetConfig+0xc8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d007      	beq.n	800590c <TIM_OC4_SetConfig+0x84>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <TIM_OC4_SetConfig+0xcc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_OC4_SetConfig+0x84>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a14      	ldr	r2, [pc, #80]	; (8005958 <TIM_OC4_SetConfig+0xd0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d109      	bne.n	8005920 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40013400 	.word	0x40013400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <TIM_OC5_SetConfig+0xb4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_OC5_SetConfig+0x7a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <TIM_OC5_SetConfig+0xb8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_OC5_SetConfig+0x7a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <TIM_OC5_SetConfig+0xbc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_OC5_SetConfig+0x7a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <TIM_OC5_SetConfig+0xc0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC5_SetConfig+0x7a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <TIM_OC5_SetConfig+0xc4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d109      	bne.n	80059ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800

08005a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	051b      	lsls	r3, r3, #20
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a18      	ldr	r2, [pc, #96]	; (8005adc <TIM_OC6_SetConfig+0xb8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_OC6_SetConfig+0x7c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <TIM_OC6_SetConfig+0xbc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_OC6_SetConfig+0x7c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <TIM_OC6_SetConfig+0xc0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_OC6_SetConfig+0x7c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <TIM_OC6_SetConfig+0xc4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC6_SetConfig+0x7c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <TIM_OC6_SetConfig+0xc8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 030a 	bic.w	r3, r3, #10
 8005b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f023 0210 	bic.w	r2, r3, #16
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	031b      	lsls	r3, r3, #12
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f043 0307 	orr.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e068      	b.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2e      	ldr	r2, [pc, #184]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10c      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40014000 	.word	0x40014000

08005d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e087      	b.n	8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1e      	ldr	r2, [pc, #120]	; (8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d126      	bne.n	8005e9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	051b      	lsls	r3, r3, #20
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d106      	bne.n	8005e9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40013400 	.word	0x40013400

08005ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e042      	b.n	8005f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fb f81f 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2224      	movs	r2, #36	; 0x24
 8005f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f82c 	bl	8005fa0 <UART_SetConfig>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e022      	b.n	8005f98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb20 	bl	80065a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fba7 	bl	80066e4 <UART_CheckIdleState>
 8005f96:	4603      	mov	r3, r0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa4:	b08c      	sub	sp, #48	; 0x30
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4baa      	ldr	r3, [pc, #680]	; (8006278 <UART_SetConfig+0x2d8>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a9f      	ldr	r2, [pc, #636]	; (800627c <UART_SetConfig+0x2dc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006008:	4313      	orrs	r3, r2
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006016:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006020:	430b      	orrs	r3, r1
 8006022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	f023 010f 	bic.w	r1, r3, #15
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a90      	ldr	r2, [pc, #576]	; (8006280 <UART_SetConfig+0x2e0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d125      	bne.n	8006090 <UART_SetConfig+0xf0>
 8006044:	4b8f      	ldr	r3, [pc, #572]	; (8006284 <UART_SetConfig+0x2e4>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b03      	cmp	r3, #3
 8006050:	d81a      	bhi.n	8006088 <UART_SetConfig+0xe8>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0xb8>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006069 	.word	0x08006069
 800605c:	08006079 	.word	0x08006079
 8006060:	08006071 	.word	0x08006071
 8006064:	08006081 	.word	0x08006081
 8006068:	2301      	movs	r3, #1
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e116      	b.n	800629e <UART_SetConfig+0x2fe>
 8006070:	2302      	movs	r3, #2
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e112      	b.n	800629e <UART_SetConfig+0x2fe>
 8006078:	2304      	movs	r3, #4
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607e:	e10e      	b.n	800629e <UART_SetConfig+0x2fe>
 8006080:	2308      	movs	r3, #8
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006086:	e10a      	b.n	800629e <UART_SetConfig+0x2fe>
 8006088:	2310      	movs	r3, #16
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608e:	e106      	b.n	800629e <UART_SetConfig+0x2fe>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a7c      	ldr	r2, [pc, #496]	; (8006288 <UART_SetConfig+0x2e8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d138      	bne.n	800610c <UART_SetConfig+0x16c>
 800609a:	4b7a      	ldr	r3, [pc, #488]	; (8006284 <UART_SetConfig+0x2e4>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	d82d      	bhi.n	8006104 <UART_SetConfig+0x164>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x110>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	08006105 	.word	0x08006105
 80060b8:	08006105 	.word	0x08006105
 80060bc:	08006105 	.word	0x08006105
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	08006105 	.word	0x08006105
 80060c8:	08006105 	.word	0x08006105
 80060cc:	08006105 	.word	0x08006105
 80060d0:	080060ed 	.word	0x080060ed
 80060d4:	08006105 	.word	0x08006105
 80060d8:	08006105 	.word	0x08006105
 80060dc:	08006105 	.word	0x08006105
 80060e0:	080060fd 	.word	0x080060fd
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ea:	e0d8      	b.n	800629e <UART_SetConfig+0x2fe>
 80060ec:	2302      	movs	r3, #2
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f2:	e0d4      	b.n	800629e <UART_SetConfig+0x2fe>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fa:	e0d0      	b.n	800629e <UART_SetConfig+0x2fe>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006102:	e0cc      	b.n	800629e <UART_SetConfig+0x2fe>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610a:	e0c8      	b.n	800629e <UART_SetConfig+0x2fe>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a5e      	ldr	r2, [pc, #376]	; (800628c <UART_SetConfig+0x2ec>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d125      	bne.n	8006162 <UART_SetConfig+0x1c2>
 8006116:	4b5b      	ldr	r3, [pc, #364]	; (8006284 <UART_SetConfig+0x2e4>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d016      	beq.n	8006152 <UART_SetConfig+0x1b2>
 8006124:	2b30      	cmp	r3, #48	; 0x30
 8006126:	d818      	bhi.n	800615a <UART_SetConfig+0x1ba>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d00a      	beq.n	8006142 <UART_SetConfig+0x1a2>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d814      	bhi.n	800615a <UART_SetConfig+0x1ba>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <UART_SetConfig+0x19a>
 8006134:	2b10      	cmp	r3, #16
 8006136:	d008      	beq.n	800614a <UART_SetConfig+0x1aa>
 8006138:	e00f      	b.n	800615a <UART_SetConfig+0x1ba>
 800613a:	2300      	movs	r3, #0
 800613c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006140:	e0ad      	b.n	800629e <UART_SetConfig+0x2fe>
 8006142:	2302      	movs	r3, #2
 8006144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006148:	e0a9      	b.n	800629e <UART_SetConfig+0x2fe>
 800614a:	2304      	movs	r3, #4
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006150:	e0a5      	b.n	800629e <UART_SetConfig+0x2fe>
 8006152:	2308      	movs	r3, #8
 8006154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006158:	e0a1      	b.n	800629e <UART_SetConfig+0x2fe>
 800615a:	2310      	movs	r3, #16
 800615c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006160:	e09d      	b.n	800629e <UART_SetConfig+0x2fe>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a4a      	ldr	r2, [pc, #296]	; (8006290 <UART_SetConfig+0x2f0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d125      	bne.n	80061b8 <UART_SetConfig+0x218>
 800616c:	4b45      	ldr	r3, [pc, #276]	; (8006284 <UART_SetConfig+0x2e4>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006176:	2bc0      	cmp	r3, #192	; 0xc0
 8006178:	d016      	beq.n	80061a8 <UART_SetConfig+0x208>
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d818      	bhi.n	80061b0 <UART_SetConfig+0x210>
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d00a      	beq.n	8006198 <UART_SetConfig+0x1f8>
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d814      	bhi.n	80061b0 <UART_SetConfig+0x210>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <UART_SetConfig+0x1f0>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d008      	beq.n	80061a0 <UART_SetConfig+0x200>
 800618e:	e00f      	b.n	80061b0 <UART_SetConfig+0x210>
 8006190:	2300      	movs	r3, #0
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006196:	e082      	b.n	800629e <UART_SetConfig+0x2fe>
 8006198:	2302      	movs	r3, #2
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619e:	e07e      	b.n	800629e <UART_SetConfig+0x2fe>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e07a      	b.n	800629e <UART_SetConfig+0x2fe>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e076      	b.n	800629e <UART_SetConfig+0x2fe>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e072      	b.n	800629e <UART_SetConfig+0x2fe>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a35      	ldr	r2, [pc, #212]	; (8006294 <UART_SetConfig+0x2f4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d12a      	bne.n	8006218 <UART_SetConfig+0x278>
 80061c2:	4b30      	ldr	r3, [pc, #192]	; (8006284 <UART_SetConfig+0x2e4>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d0:	d01a      	beq.n	8006208 <UART_SetConfig+0x268>
 80061d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d6:	d81b      	bhi.n	8006210 <UART_SetConfig+0x270>
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d00c      	beq.n	80061f8 <UART_SetConfig+0x258>
 80061de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e2:	d815      	bhi.n	8006210 <UART_SetConfig+0x270>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <UART_SetConfig+0x250>
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ec:	d008      	beq.n	8006200 <UART_SetConfig+0x260>
 80061ee:	e00f      	b.n	8006210 <UART_SetConfig+0x270>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f6:	e052      	b.n	800629e <UART_SetConfig+0x2fe>
 80061f8:	2302      	movs	r3, #2
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fe:	e04e      	b.n	800629e <UART_SetConfig+0x2fe>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e04a      	b.n	800629e <UART_SetConfig+0x2fe>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620e:	e046      	b.n	800629e <UART_SetConfig+0x2fe>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006216:	e042      	b.n	800629e <UART_SetConfig+0x2fe>
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a17      	ldr	r2, [pc, #92]	; (800627c <UART_SetConfig+0x2dc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d13a      	bne.n	8006298 <UART_SetConfig+0x2f8>
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <UART_SetConfig+0x2e4>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800622c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006230:	d01a      	beq.n	8006268 <UART_SetConfig+0x2c8>
 8006232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006236:	d81b      	bhi.n	8006270 <UART_SetConfig+0x2d0>
 8006238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623c:	d00c      	beq.n	8006258 <UART_SetConfig+0x2b8>
 800623e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006242:	d815      	bhi.n	8006270 <UART_SetConfig+0x2d0>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <UART_SetConfig+0x2b0>
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d008      	beq.n	8006260 <UART_SetConfig+0x2c0>
 800624e:	e00f      	b.n	8006270 <UART_SetConfig+0x2d0>
 8006250:	2300      	movs	r3, #0
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006256:	e022      	b.n	800629e <UART_SetConfig+0x2fe>
 8006258:	2302      	movs	r3, #2
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625e:	e01e      	b.n	800629e <UART_SetConfig+0x2fe>
 8006260:	2304      	movs	r3, #4
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006266:	e01a      	b.n	800629e <UART_SetConfig+0x2fe>
 8006268:	2308      	movs	r3, #8
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626e:	e016      	b.n	800629e <UART_SetConfig+0x2fe>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006276:	e012      	b.n	800629e <UART_SetConfig+0x2fe>
 8006278:	cfff69f3 	.word	0xcfff69f3
 800627c:	40008000 	.word	0x40008000
 8006280:	40013800 	.word	0x40013800
 8006284:	40021000 	.word	0x40021000
 8006288:	40004400 	.word	0x40004400
 800628c:	40004800 	.word	0x40004800
 8006290:	40004c00 	.word	0x40004c00
 8006294:	40005000 	.word	0x40005000
 8006298:	2310      	movs	r3, #16
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4ab0      	ldr	r2, [pc, #704]	; (8006564 <UART_SetConfig+0x5c4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	f040 809b 	bne.w	80063e0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d827      	bhi.n	8006302 <UART_SetConfig+0x362>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x318>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	08006303 	.word	0x08006303
 80062c8:	080062f3 	.word	0x080062f3
 80062cc:	08006303 	.word	0x08006303
 80062d0:	08006303 	.word	0x08006303
 80062d4:	08006303 	.word	0x08006303
 80062d8:	080062fb 	.word	0x080062fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062dc:	f7fd fbfc 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062e2:	e014      	b.n	800630e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e4:	f7fd fc0c 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 80062e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ea:	e010      	b.n	800630e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ec:	4b9e      	ldr	r3, [pc, #632]	; (8006568 <UART_SetConfig+0x5c8>)
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062f0:	e00d      	b.n	800630e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f2:	f7fd fb3f 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062f8:	e009      	b.n	800630e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006300:	e005      	b.n	800630e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800630c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8130 	beq.w	8006576 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	4a94      	ldr	r2, [pc, #592]	; (800656c <UART_SetConfig+0x5cc>)
 800631c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006320:	461a      	mov	r2, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	fbb3 f3f2 	udiv	r3, r3, r2
 8006328:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	4413      	add	r3, r2
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d305      	bcc.n	8006346 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	429a      	cmp	r2, r3
 8006344:	d903      	bls.n	800634e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800634c:	e113      	b.n	8006576 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	2200      	movs	r2, #0
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	60fa      	str	r2, [r7, #12]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	4a84      	ldr	r2, [pc, #528]	; (800656c <UART_SetConfig+0x5cc>)
 800635c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006360:	b29b      	uxth	r3, r3
 8006362:	2200      	movs	r2, #0
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006370:	f7f9 ff60 	bl	8000234 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	020b      	lsls	r3, r1, #8
 8006386:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800638a:	0202      	lsls	r2, r0, #8
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	6849      	ldr	r1, [r1, #4]
 8006390:	0849      	lsrs	r1, r1, #1
 8006392:	2000      	movs	r0, #0
 8006394:	460c      	mov	r4, r1
 8006396:	4605      	mov	r5, r0
 8006398:	eb12 0804 	adds.w	r8, r2, r4
 800639c:	eb43 0905 	adc.w	r9, r3, r5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	469a      	mov	sl, r3
 80063a8:	4693      	mov	fp, r2
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	4640      	mov	r0, r8
 80063b0:	4649      	mov	r1, r9
 80063b2:	f7f9 ff3f 	bl	8000234 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4613      	mov	r3, r2
 80063bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c4:	d308      	bcc.n	80063d8 <UART_SetConfig+0x438>
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063cc:	d204      	bcs.n	80063d8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	60da      	str	r2, [r3, #12]
 80063d6:	e0ce      	b.n	8006576 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063de:	e0ca      	b.n	8006576 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e8:	d167      	bne.n	80064ba <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 80063ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d827      	bhi.n	8006442 <UART_SetConfig+0x4a2>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x458>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fd fb5c 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006422:	e014      	b.n	800644e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fd fb6c 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8006428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800642a:	e010      	b.n	800644e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b4e      	ldr	r3, [pc, #312]	; (8006568 <UART_SetConfig+0x5c8>)
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006430:	e00d      	b.n	800644e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fd fa9f 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8006436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006438:	e009      	b.n	800644e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006440:	e005      	b.n	800644e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800644c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8090 	beq.w	8006576 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	4a44      	ldr	r2, [pc, #272]	; (800656c <UART_SetConfig+0x5cc>)
 800645c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006460:	461a      	mov	r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	fbb3 f3f2 	udiv	r3, r3, r2
 8006468:	005a      	lsls	r2, r3, #1
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	441a      	add	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	b29b      	uxth	r3, r3
 800647c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d916      	bls.n	80064b2 <UART_SetConfig+0x512>
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d212      	bcs.n	80064b2 <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	8bfb      	ldrh	r3, [r7, #30]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	8bfa      	ldrh	r2, [r7, #30]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e061      	b.n	8006576 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064b8:	e05d      	b.n	8006576 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d827      	bhi.n	8006512 <UART_SetConfig+0x572>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0x528>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	08006513 	.word	0x08006513
 80064d8:	08006503 	.word	0x08006503
 80064dc:	08006513 	.word	0x08006513
 80064e0:	08006513 	.word	0x08006513
 80064e4:	08006513 	.word	0x08006513
 80064e8:	0800650b 	.word	0x0800650b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ec:	f7fd faf4 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 80064f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064f2:	e014      	b.n	800651e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f4:	f7fd fb04 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 80064f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064fa:	e010      	b.n	800651e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064fc:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <UART_SetConfig+0x5c8>)
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006500:	e00d      	b.n	800651e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006502:	f7fd fa37 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8006506:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006508:	e009      	b.n	800651e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006510:	e005      	b.n	800651e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800651c:	bf00      	nop
    }

    if (pclk != 0U)
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d028      	beq.n	8006576 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	4a10      	ldr	r2, [pc, #64]	; (800656c <UART_SetConfig+0x5cc>)
 800652a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652e:	461a      	mov	r2, r3
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	fbb3 f2f2 	udiv	r2, r3, r2
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	441a      	add	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	fbb2 f3f3 	udiv	r3, r2, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d90f      	bls.n	8006570 <UART_SetConfig+0x5d0>
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d20b      	bcs.n	8006570 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6a3a      	ldr	r2, [r7, #32]
 800655e:	60da      	str	r2, [r3, #12]
 8006560:	e009      	b.n	8006576 <UART_SetConfig+0x5d6>
 8006562:	bf00      	nop
 8006564:	40008000 	.word	0x40008000
 8006568:	00f42400 	.word	0x00f42400
 800656c:	08006f50 	.word	0x08006f50
      }
      else
      {
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2201      	movs	r2, #1
 800657a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2201      	movs	r2, #1
 8006582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006592:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006596:	4618      	mov	r0, r3
 8006598:	3730      	adds	r7, #48	; 0x30
 800659a:	46bd      	mov	sp, r7
 800659c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669e:	d10a      	bne.n	80066b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066f4:	f7fa ff1c 	bl	8001530 <HAL_GetTick>
 80066f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10e      	bne.n	8006726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f82f 	bl	800677a <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e025      	b.n	8006772 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d10e      	bne.n	8006752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f819 	bl	800677a <UART_WaitOnFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e00f      	b.n	8006772 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	e062      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d05e      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006794:	f7fa fecc 	bl	8001530 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <UART_WaitOnFlagUntilTimeout+0x30>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11d      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e045      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02e      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006802:	d126      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800681c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0201 	bic.w	r2, r2, #1
 800682c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e00f      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d08d      	beq.n	800678c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_UARTEx_DisableFifoMode+0x16>
 800688c:	2302      	movs	r3, #2
 800688e:	e027      	b.n	80068e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006900:	2302      	movs	r3, #2
 8006902:	e02d      	b.n	8006960 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	; 0x24
 8006910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f84f 	bl	80069e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800697c:	2302      	movs	r3, #2
 800697e:	e02d      	b.n	80069dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2224      	movs	r2, #36	; 0x24
 800698c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f811 	bl	80069e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d108      	bne.n	8006a06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a04:	e031      	b.n	8006a6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a06:	2308      	movs	r3, #8
 8006a08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	0e5b      	lsrs	r3, r3, #25
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	0f5b      	lsrs	r3, r3, #29
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	7b3a      	ldrb	r2, [r7, #12]
 8006a32:	4911      	ldr	r1, [pc, #68]	; (8006a78 <UARTEx_SetNbDataToProcess+0x94>)
 8006a34:	5c8a      	ldrb	r2, [r1, r2]
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	7b3a      	ldrb	r2, [r7, #12]
 8006a3c:	490f      	ldr	r1, [pc, #60]	; (8006a7c <UARTEx_SetNbDataToProcess+0x98>)
 8006a3e:	5c8a      	ldrb	r2, [r1, r2]
 8006a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	7b7a      	ldrb	r2, [r7, #13]
 8006a50:	4909      	ldr	r1, [pc, #36]	; (8006a78 <UARTEx_SetNbDataToProcess+0x94>)
 8006a52:	5c8a      	ldrb	r2, [r1, r2]
 8006a54:	fb02 f303 	mul.w	r3, r2, r3
 8006a58:	7b7a      	ldrb	r2, [r7, #13]
 8006a5a:	4908      	ldr	r1, [pc, #32]	; (8006a7c <UARTEx_SetNbDataToProcess+0x98>)
 8006a5c:	5c8a      	ldrb	r2, [r1, r2]
 8006a5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	08006f68 	.word	0x08006f68
 8006a7c:	08006f70 	.word	0x08006f70

08006a80 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b08b      	sub	sp, #44	; 0x2c
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	fa93 f3a3 	rbit	r3, r3
 8006a9a:	613b      	str	r3, [r7, #16]
  return result;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006aa6:	2320      	movs	r3, #32
 8006aa8:	e003      	b.n	8006ab2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	fab3 f383 	clz	r3, r3
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	2103      	movs	r1, #3
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	401a      	ands	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	fa93 f3a3 	rbit	r3, r3
 8006ac8:	61fb      	str	r3, [r7, #28]
  return result;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006ad4:	2320      	movs	r3, #32
 8006ad6:	e003      	b.n	8006ae0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	fab3 f383 	clz	r3, r3
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	372c      	adds	r7, #44	; 0x2c
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	401a      	ands	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	605a      	str	r2, [r3, #4]
}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b08b      	sub	sp, #44	; 0x2c
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	613b      	str	r3, [r7, #16]
  return result;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006b50:	2320      	movs	r3, #32
 8006b52:	e003      	b.n	8006b5c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	fab3 f383 	clz	r3, r3
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	2103      	movs	r1, #3
 8006b60:	fa01 f303 	lsl.w	r3, r1, r3
 8006b64:	43db      	mvns	r3, r3
 8006b66:	401a      	ands	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	fa93 f3a3 	rbit	r3, r3
 8006b72:	61fb      	str	r3, [r7, #28]
  return result;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006b7e:	2320      	movs	r3, #32
 8006b80:	e003      	b.n	8006b8a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	fab3 f383 	clz	r3, r3
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b92:	431a      	orrs	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006b98:	bf00      	nop
 8006b9a:	372c      	adds	r7, #44	; 0x2c
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b08b      	sub	sp, #44	; 0x2c
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	fa93 f3a3 	rbit	r3, r3
 8006bbe:	613b      	str	r3, [r7, #16]
  return result;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006bca:	2320      	movs	r3, #32
 8006bcc:	e003      	b.n	8006bd6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	fab3 f383 	clz	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	2103      	movs	r1, #3
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	43db      	mvns	r3, r3
 8006be0:	401a      	ands	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	fa93 f3a3 	rbit	r3, r3
 8006bec:	61fb      	str	r3, [r7, #28]
  return result;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	e003      	b.n	8006c04 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	60da      	str	r2, [r3, #12]
}
 8006c12:	bf00      	nop
 8006c14:	372c      	adds	r7, #44	; 0x2c
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b08b      	sub	sp, #44	; 0x2c
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1a      	ldr	r2, [r3, #32]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	fa93 f3a3 	rbit	r3, r3
 8006c38:	613b      	str	r3, [r7, #16]
  return result;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006c44:	2320      	movs	r3, #32
 8006c46:	e003      	b.n	8006c50 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	fab3 f383 	clz	r3, r3
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	210f      	movs	r1, #15
 8006c54:	fa01 f303 	lsl.w	r3, r1, r3
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	fa93 f3a3 	rbit	r3, r3
 8006c66:	61fb      	str	r3, [r7, #28]
  return result;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006c72:	2320      	movs	r3, #32
 8006c74:	e003      	b.n	8006c7e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006c8c:	bf00      	nop
 8006c8e:	372c      	adds	r7, #44	; 0x2c
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b08b      	sub	sp, #44	; 0x2c
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	fa93 f3a3 	rbit	r3, r3
 8006cb4:	613b      	str	r3, [r7, #16]
  return result;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006cc0:	2320      	movs	r3, #32
 8006cc2:	e003      	b.n	8006ccc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	fab3 f383 	clz	r3, r3
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	210f      	movs	r1, #15
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	401a      	ands	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	fa93 f3a3 	rbit	r3, r3
 8006ce4:	61fb      	str	r3, [r7, #28]
  return result;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	e003      	b.n	8006cfc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006d0a:	bf00      	nop
 8006d0c:	372c      	adds	r7, #44	; 0x2c
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b088      	sub	sp, #32
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	fa93 f3a3 	rbit	r3, r3
 8006d2c:	60fb      	str	r3, [r7, #12]
  return result;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <LL_GPIO_Init+0x26>
    return 32U;
 8006d38:	2320      	movs	r3, #32
 8006d3a:	e003      	b.n	8006d44 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	fab3 f383 	clz	r3, r3
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d46:	e047      	b.n	8006dd8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	4013      	ands	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d039      	beq.n	8006dd2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d003      	beq.n	8006d6e <LL_GPIO_Init+0x58>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d10d      	bne.n	8006d8a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	461a      	mov	r2, r3
 8006d74:	69b9      	ldr	r1, [r7, #24]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fed7 	bl	8006b2a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	461a      	mov	r2, r3
 8006d82:	69b9      	ldr	r1, [r7, #24]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff feb8 	bl	8006afa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff ff06 	bl	8006ba4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d111      	bne.n	8006dc4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2bff      	cmp	r3, #255	; 0xff
 8006da4:	d807      	bhi.n	8006db6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	461a      	mov	r2, r3
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff ff35 	bl	8006c1e <LL_GPIO_SetAFPin_0_7>
 8006db4:	e006      	b.n	8006dc4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff ff6a 	bl	8006c98 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	69b9      	ldr	r1, [r7, #24]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff fe57 	bl	8006a80 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1b0      	bne.n	8006d48 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006df8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006dfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4013      	ands	r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e26:	b084      	sub	sp, #16
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	f107 0014 	add.w	r0, r7, #20
 8006e34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr

08006e68 <__libc_init_array>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	4d0d      	ldr	r5, [pc, #52]	; (8006ea0 <__libc_init_array+0x38>)
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	4c0d      	ldr	r4, [pc, #52]	; (8006ea4 <__libc_init_array+0x3c>)
 8006e70:	1b64      	subs	r4, r4, r5
 8006e72:	10a4      	asrs	r4, r4, #2
 8006e74:	42a6      	cmp	r6, r4
 8006e76:	d109      	bne.n	8006e8c <__libc_init_array+0x24>
 8006e78:	4d0b      	ldr	r5, [pc, #44]	; (8006ea8 <__libc_init_array+0x40>)
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	4c0b      	ldr	r4, [pc, #44]	; (8006eac <__libc_init_array+0x44>)
 8006e7e:	f000 f81f 	bl	8006ec0 <_init>
 8006e82:	1b64      	subs	r4, r4, r5
 8006e84:	10a4      	asrs	r4, r4, #2
 8006e86:	42a6      	cmp	r6, r4
 8006e88:	d105      	bne.n	8006e96 <__libc_init_array+0x2e>
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
 8006e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e90:	3601      	adds	r6, #1
 8006e92:	4798      	blx	r3
 8006e94:	e7ee      	b.n	8006e74 <__libc_init_array+0xc>
 8006e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9a:	3601      	adds	r6, #1
 8006e9c:	4798      	blx	r3
 8006e9e:	e7f2      	b.n	8006e86 <__libc_init_array+0x1e>
 8006ea0:	08006f80 	.word	0x08006f80
 8006ea4:	08006f80 	.word	0x08006f80
 8006ea8:	08006f80 	.word	0x08006f80
 8006eac:	08006f84 	.word	0x08006f84

08006eb0 <memset>:
 8006eb0:	4402      	add	r2, r0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d100      	bne.n	8006eba <memset+0xa>
 8006eb8:	4770      	bx	lr
 8006eba:	f803 1b01 	strb.w	r1, [r3], #1
 8006ebe:	e7f9      	b.n	8006eb4 <memset+0x4>

08006ec0 <_init>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	bf00      	nop
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr

08006ecc <_fini>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr
