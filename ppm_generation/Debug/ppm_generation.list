
ppm_generation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006efc  08006efc  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f04  08006f04  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08006f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000038  08006f44  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08006f44  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dedd  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d9  00000000  00000000  0003df4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  00041728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  000431c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e8f9  00000000  00000000  00044b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c593  00000000  00000000  000733f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001316f8  00000000  00000000  0008f98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007360  00000000  00000000  001c10d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000038 	.word	0x20000038
 8000210:	00000000 	.word	0x00000000
 8000214:	08006e64 	.word	0x08006e64

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000003c 	.word	0x2000003c
 8000230:	08006e64 	.word	0x08006e64

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 ff21 	bl	80013fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f846 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fac2 	bl	8000b48 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f8a4 	bl	8000710 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f918 	bl	80007fc <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005cc:	f000 f964 	bl	8000898 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d0:	f000 fa5c 	bl	8000a8c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d4:	f000 fa90 	bl	8000af8 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80005d8:	f000 f9a8 	bl	800092c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005dc:	2100      	movs	r1, #0
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <main+0x88>)
 80005e0:	f004 fac4 	bl	8004b6c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80005e4:	4815      	ldr	r0, [pc, #84]	; (800063c <main+0x88>)
 80005e6:	f004 f9ef 	bl	80049c8 <HAL_TIM_Base_Start_IT>
  ccr_value = microsecs_to_counter(MIN_PULSE_WIDTH, test_PSC);
 80005ea:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000640 <main+0x8c>
 80005ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005f2:	210e      	movs	r1, #14
 80005f4:	ee17 0a90 	vmov	r0, s15
 80005f8:	f000 fb92 	bl	8000d20 <microsecs_to_counter>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <main+0x90>)
 8000600:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_value);
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <main+0x88>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <main+0x90>)
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ccr_value = microsecs_to_counter(MIN_PULSE_WIDTH, test_PSC);
 800060c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000640 <main+0x8c>
 8000610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000614:	210e      	movs	r1, #14
 8000616:	ee17 0a90 	vmov	r0, s15
 800061a:	f000 fb81 	bl	8000d20 <microsecs_to_counter>
 800061e:	4603      	mov	r3, r0
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <main+0x90>)
 8000622:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_value);
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <main+0x88>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <main+0x90>)
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	  arr_value = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800062e:	4b03      	ldr	r3, [pc, #12]	; (800063c <main+0x88>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <main+0x94>)
 8000636:	6013      	str	r3, [r2, #0]
	  ccr_value = microsecs_to_counter(MIN_PULSE_WIDTH, test_PSC);
 8000638:	e7e8      	b.n	800060c <main+0x58>
 800063a:	bf00      	nop
 800063c:	20000174 	.word	0x20000174
 8000640:	442f0000 	.word	0x442f0000
 8000644:	200004b4 	.word	0x200004b4
 8000648:	200004b8 	.word	0x200004b8

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b098      	sub	sp, #96	; 0x60
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2248      	movs	r2, #72	; 0x48
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fbfa 	bl	8006e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000672:	f002 fab7 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800067c:	f000 fb4a 	bl	8000d14 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f002 fa92 	bl	8002ba8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <SystemClock_Config+0xc0>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xc0>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000694:	2334      	movs	r3, #52	; 0x34
 8000696:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2381      	movs	r3, #129	; 0x81
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b8:	2318      	movs	r3, #24
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fb19 	bl	8002d04 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d8:	f000 fb1c 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2303      	movs	r3, #3
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2102      	movs	r1, #2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 ffe7 	bl	80036c8 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000700:	f000 fb08 	bl	8000d14 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3760      	adds	r7, #96	; 0x60
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000734:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <MX_ADC1_Init+0xe4>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000752:	2204      	movs	r2, #4
 8000754:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000794:	f001 f84a 	bl	800182c <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800079e:	f000 fab9 	bl	8000d14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_ADC1_Init+0xe0>)
 80007ae:	f001 fd9f 	bl	80022f0 <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b8:	f000 faac 	bl	8000d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ADC1_Init+0xe8>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	; 0x7f
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC1_Init+0xe0>)
 80007da:	f001 f979 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007e4:	f000 fa96 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000054 	.word	0x20000054
 80007f4:	42028000 	.word	0x42028000
 80007f8:	0c900008 	.word	0x0c900008

080007fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <MX_LPUART1_UART_Init+0x94>)
 8000804:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000808:	4a22      	ldr	r2, [pc, #136]	; (8000894 <MX_LPUART1_UART_Init+0x98>)
 800080a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000820:	220c      	movs	r2, #12
 8000822:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000844:	f005 fb2e 	bl	8005ea4 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800084e:	f000 fa61 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000856:	f006 f81b 	bl	8006890 <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000860:	f000 fa58 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000868:	f006 f850 	bl	800690c <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000872:	f000 fa4f 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000878:	f005 ffd1 	bl	800681e <HAL_UARTEx_DisableFifoMode>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000882:	f000 fa47 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000bc 	.word	0x200000bc
 8000890:	40008000 	.word	0x40008000
 8000894:	00033324 	.word	0x00033324

08000898 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_RTC_Init+0x8c>)
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <MX_RTC_Init+0x90>)
 80008b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_RTC_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_RTC_Init+0x8c>)
 80008bc:	227f      	movs	r2, #127	; 0x7f
 80008be:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_RTC_Init+0x8c>)
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_RTC_Init+0x8c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_RTC_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_RTC_Init+0x8c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_RTC_Init+0x8c>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_RTC_Init+0x8c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <MX_RTC_Init+0x8c>)
 80008e8:	f003 fee4 	bl	80046b4 <HAL_RTC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80008f2:	f000 fa0f 	bl	8000d14 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_RTC_Init+0x8c>)
 800090c:	f003 ffd8 	bl	80048c0 <HAL_RTCEx_PrivilegeModeSet>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000916:	f000 f9fd 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000014c 	.word	0x2000014c
 8000928:	40002800 	.word	0x40002800

0800092c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	; 0x70
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f006 fa74 	bl	8006e54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MX_TIM1_Init+0x158>)
 800096e:	4a46      	ldr	r2, [pc, #280]	; (8000a88 <MX_TIM1_Init+0x15c>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000974:	220e      	movs	r2, #14
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <MX_TIM1_Init+0x158>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000980:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098c:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <MX_TIM1_Init+0x158>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b3c      	ldr	r3, [pc, #240]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000998:	483a      	ldr	r0, [pc, #232]	; (8000a84 <MX_TIM1_Init+0x158>)
 800099a:	f003 ffbd 	bl	8004918 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 f9b6 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b2:	4619      	mov	r1, r3
 80009b4:	4833      	ldr	r0, [pc, #204]	; (8000a84 <MX_TIM1_Init+0x158>)
 80009b6:	f004 fc0f 	bl	80051d8 <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009c0:	f000 f9a8 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c4:	482f      	ldr	r0, [pc, #188]	; (8000a84 <MX_TIM1_Init+0x158>)
 80009c6:	f004 f86f 	bl	8004aa8 <HAL_TIM_PWM_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009d0:	f000 f9a0 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e4:	4619      	mov	r1, r3
 80009e6:	4827      	ldr	r0, [pc, #156]	; (8000a84 <MX_TIM1_Init+0x158>)
 80009e8:	f005 f916 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009f2:	f000 f98f 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000a1c:	f004 facc 	bl	8004fb8 <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a26:	f000 f975 	bl	8000d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000a68:	f005 f95e 	bl	8005d28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000a72:	f000 f94f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM1_Init+0x158>)
 8000a78:	f000 fb0c 	bl	8001094 <HAL_TIM_MspPostInit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3770      	adds	r7, #112	; 0x70
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000174 	.word	0x20000174
 8000a88:	40012c00 	.word	0x40012c00

08000a8c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000aa2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000aa6:	f7ff fd6d 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f7ff fd52 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fd4f 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000abc:	2303      	movs	r3, #3
 8000abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <MX_UCPD1_Init+0x64>)
 8000aca:	f006 f8f6 	bl	8006cba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_UCPD1_Init+0x68>)
 8000ae2:	f006 f8ea 	bl	8006cba <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	42020400 	.word	0x42020400
 8000af4:	42020000 	.word	0x42020000

08000af8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <MX_USB_PCD_Init+0x4c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b04:	2208      	movs	r2, #8
 8000b06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_USB_PCD_Init+0x48>)
 8000b2e:	f001 ff2b 	bl	8002988 <HAL_PCD_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b38:	f000 f8ec 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001c0 	.word	0x200001c0
 8000b44:	4000d400 	.word	0x4000d400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a38      	ldr	r2, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000bbe:	f002 f86d 	bl	8002c9c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x12c>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x130>)
 8000be0:	f001 feba 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bec:	f001 feb4 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	21a0      	movs	r1, #160	; 0xa0
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x138>)
 8000bf6:	f001 feaf 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_GPIO_Init+0x13c>)
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481c      	ldr	r0, [pc, #112]	; (8000c80 <MX_GPIO_Init+0x138>)
 8000c10:	f001 fd22 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_GPIO_Init+0x130>)
 8000c2c:	f001 fd14 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000c4a:	f001 fd05 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c4e:	23a0      	movs	r3, #160	; 0xa0
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x138>)
 8000c66:	f001 fcf7 	bl	8002658 <HAL_GPIO_Init>

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	42020800 	.word	0x42020800
 8000c7c:	42020000 	.word	0x42020000
 8000c80:	42020400 	.word	0x42020400
 8000c84:	10110000 	.word	0x10110000

08000c88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
	if (counter < channel_used) {
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	d814      	bhi.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		arr_time = percentage_arr(channel_percentage_value[counter]);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8000caa:	f000 f871 	bl	8000d90 <percentage_arr>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cb2:	6013      	str	r3, [r2, #0]
		counter ++;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e007      	b.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x4a>
	} else {
		arr_time = reset_sync();
 8000cc2:	f000 f88f 	bl	8000de4 <reset_sync>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cca:	6013      	str	r3, [r2, #0]
		counter = 0;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
	}
	arr_value = microsecs_to_counter(arr_time, test_PSC);
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	210e      	movs	r1, #14
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f821 	bl	8000d20 <microsecs_to_counter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ce2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000cf4:	60d3      	str	r3, [r2, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200004c0 	.word	0x200004c0
 8000d04:	20000000 	.word	0x20000000
 8000d08:	200004bc 	.word	0x200004bc
 8000d0c:	200004b8 	.word	0x200004b8
 8000d10:	20000174 	.word	0x20000174

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <microsecs_to_counter>:

#ifndef PPM_SIG
#define correction 1.0f /*this correction is used in psc and arr calculation*/
#endif /*PPM_SIG*/

uint32_t microsecs_to_counter(uint32_t time_length, uint16_t psc) {
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
	float tick_length, tick_count;
	tick_length = BASE_FREQUENCY / (psc + correction);
 8000d2c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000d88 <microsecs_to_counter+0x68>
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d46:	edc7 7a03 	vstr	s15, [r7, #12]
	tick_length = tick_length / SEC_TO_MICROSEC;
 8000d4a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000d8c <microsecs_to_counter+0x6c>
 8000d4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d56:	edc7 7a03 	vstr	s15, [r7, #12]

	tick_count = time_length * tick_length;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d64:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6c:	edc7 7a02 	vstr	s15, [r7, #8]

	return (uint32_t) tick_count;
 8000d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d78:	ee17 3a90 	vmov	r3, s15
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	4c371b00 	.word	0x4c371b00
 8000d8c:	49742400 	.word	0x49742400

08000d90 <percentage_arr>:


uint32_t percentage_arr(float percentage) {
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	ed87 0a01 	vstr	s0, [r7, #4]
	float time_added;
	time_added = percentage * DOWN_INTERVAL;
 8000d9a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000ddc <percentage_arr+0x4c>
 8000d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da6:	edc7 7a03 	vstr	s15, [r7, #12]

	return MIN_PULSE_WIDTH + (uint16_t)time_added;
 8000daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db2:	ee17 3a90 	vmov	r3, s15
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000de0 <percentage_arr+0x50>
 8000dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dcc:	ee17 3a90 	vmov	r3, s15
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	44728000 	.word	0x44728000
 8000de0:	442f0000 	.word	0x442f0000

08000de4 <reset_sync>:

uint32_t reset_sync(void) {
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	return MIN_PULSE_WIDTH + MIN_RESET_PULSE;
 8000de8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e08 <reset_sync+0x24>
 8000dec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000e0c <reset_sync+0x28>
 8000df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df8:	ee17 3a90 	vmov	r3, s15
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	442f0000 	.word	0x442f0000
 8000e0c:	453b8000 	.word	0x453b8000

08000e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_MspInit+0x44>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	; 0x60
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x44>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ae      	sub	sp, #184	; 0xb8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2294      	movs	r2, #148	; 0x94
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 ffeb 	bl	8006e54 <memset>
  if(hadc->Instance==ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_ADC_MspInit+0xa8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d137      	bne.n	8000ef8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e8e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fef4 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ea6:	f7ff ff35 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_ADC_MspInit+0xac>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <HAL_ADC_MspInit+0xac>)
 8000eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_ADC_MspInit+0xac>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_ADC_MspInit+0xac>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_ADC_MspInit+0xac>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_ADC_MspInit+0xac>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000eda:	2304      	movs	r3, #4
 8000edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_ADC_MspInit+0xb0>)
 8000ef4:	f001 fbb0 	bl	8002658 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	37b8      	adds	r7, #184	; 0xb8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	42028000 	.word	0x42028000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	42020800 	.word	0x42020800

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ae      	sub	sp, #184	; 0xb8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2294      	movs	r2, #148	; 0x94
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 ff91 	bl	8006e54 <memset>
  if(huart->Instance==LPUART1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_UART_MspInit+0xb4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d13d      	bne.n	8000fb8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fe9d 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f54:	f7ff fede 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_UART_MspInit+0xb8>)
 8000f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_UART_MspInit+0xb8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_UART_MspInit+0xb8>)
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_UART_MspInit+0xb8>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_UART_MspInit+0xb8>)
 8000f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_UART_MspInit+0xb8>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000f88:	f001 fe88 	bl	8002c9c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000f8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_MspInit+0xbc>)
 8000fb4:	f001 fb50 	bl	8002658 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	37b8      	adds	r7, #184	; 0xb8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40008000 	.word	0x40008000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	42021800 	.word	0x42021800

08000fcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0a8      	sub	sp, #160	; 0xa0
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2294      	movs	r2, #148	; 0x94
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 ff39 	bl	8006e54 <memset>
  if(hrtc->Instance==RTC)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_RTC_MspInit+0x74>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d124      	bne.n	8001036 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fe42 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800100a:	f7ff fe83 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_RTC_MspInit+0x78>)
 8001010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_RTC_MspInit+0x78>)
 8001016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_RTC_MspInit+0x78>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_RTC_MspInit+0x78>)
 8001024:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_RTC_MspInit+0x78>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	37a0      	adds	r7, #160	; 0xa0
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40002800 	.word	0x40002800
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x44>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d113      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_TIM_Base_MspInit+0x48>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <HAL_TIM_Base_MspInit+0x48>)
 8001060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_TIM_Base_MspInit+0x48>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	202a      	movs	r0, #42	; 0x2a
 8001078:	f001 fab9 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800107c:	202a      	movs	r0, #42	; 0x2a
 800107e:	f001 fad0 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012c00 	.word	0x40012c00
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_TIM_MspPostInit+0x64>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11c      	bne.n	80010f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_TIM_MspPostInit+0x68>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_TIM_MspPostInit+0x68>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_MspPostInit+0x68>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010ec:	f001 fab4 	bl	8002658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40012c00 	.word	0x40012c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	42021000 	.word	0x42021000

08001104 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ae      	sub	sp, #184	; 0xb8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2294      	movs	r2, #148	; 0x94
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f005 fe95 	bl	8006e54 <memset>
  if(hpcd->Instance==USB)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_PCD_MspInit+0xb4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13d      	bne.n	80011b0 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fd9f 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001150:	f7ff fde0 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_PCD_MspInit+0xb8>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_PCD_MspInit+0xb8>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_PCD_MspInit+0xb8>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800116c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001186:	230a      	movs	r3, #10
 8001188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001190:	4619      	mov	r1, r3
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HAL_PCD_MspInit+0xbc>)
 8001194:	f001 fa60 	bl	8002658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_PCD_MspInit+0xb8>)
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_PCD_MspInit+0xb8>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_PCD_MspInit+0xb8>)
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	37b8      	adds	r7, #184	; 0xb8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	4000d400 	.word	0x4000d400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	42020000 	.word	0x42020000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f94c 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM1_UP_IRQHandler+0x10>)
 800121e:	f003 fdab 	bl	8004d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000174 	.word	0x20000174

0800122c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001256:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <SystemCoreClockUpdate+0x144>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d107      	bne.n	8001272 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <SystemCoreClockUpdate+0x144>)
 8001264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e005      	b.n	800127e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001272:	4b48      	ldr	r3, [pc, #288]	; (8001394 <SystemCoreClockUpdate+0x144>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800127e:	4a46      	ldr	r2, [pc, #280]	; (8001398 <SystemCoreClockUpdate+0x148>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001288:	4b42      	ldr	r3, [pc, #264]	; (8001394 <SystemCoreClockUpdate+0x144>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d866      	bhi.n	8001362 <SystemCoreClockUpdate+0x112>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <SystemCoreClockUpdate+0x4c>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012d1 	.word	0x080012d1
 80012a0:	08001363 	.word	0x08001363
 80012a4:	08001363 	.word	0x08001363
 80012a8:	08001363 	.word	0x08001363
 80012ac:	080012d9 	.word	0x080012d9
 80012b0:	08001363 	.word	0x08001363
 80012b4:	08001363 	.word	0x08001363
 80012b8:	08001363 	.word	0x08001363
 80012bc:	080012e1 	.word	0x080012e1
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001363 	.word	0x08001363
 80012c8:	08001363 	.word	0x08001363
 80012cc:	080012e9 	.word	0x080012e9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80012d0:	4a32      	ldr	r2, [pc, #200]	; (800139c <SystemCoreClockUpdate+0x14c>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	6013      	str	r3, [r2, #0]
      break;
 80012d6:	e048      	b.n	800136a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <SystemCoreClockUpdate+0x14c>)
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <SystemCoreClockUpdate+0x150>)
 80012dc:	601a      	str	r2, [r3, #0]
      break;
 80012de:	e044      	b.n	800136a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <SystemCoreClockUpdate+0x14c>)
 80012e2:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <SystemCoreClockUpdate+0x154>)
 80012e4:	601a      	str	r2, [r3, #0]
      break;
 80012e6:	e040      	b.n	800136a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <SystemCoreClockUpdate+0x144>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <SystemCoreClockUpdate+0x144>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	3301      	adds	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d003      	beq.n	800130e <SystemCoreClockUpdate+0xbe>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d006      	beq.n	800131a <SystemCoreClockUpdate+0xca>
 800130c:	e00b      	b.n	8001326 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <SystemCoreClockUpdate+0x150>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	613b      	str	r3, [r7, #16]
          break;
 8001318:	e00b      	b.n	8001332 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800131a:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <SystemCoreClockUpdate+0x154>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	613b      	str	r3, [r7, #16]
          break;
 8001324:	e005      	b.n	8001332 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	613b      	str	r3, [r7, #16]
          break;
 8001330:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <SystemCoreClockUpdate+0x144>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <SystemCoreClockUpdate+0x144>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0e5b      	lsrs	r3, r3, #25
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	3301      	adds	r3, #1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <SystemCoreClockUpdate+0x14c>)
 800135e:	6013      	str	r3, [r2, #0]
      break;
 8001360:	e003      	b.n	800136a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <SystemCoreClockUpdate+0x14c>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6013      	str	r3, [r2, #0]
      break;
 8001368:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <SystemCoreClockUpdate+0x144>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <SystemCoreClockUpdate+0x158>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <SystemCoreClockUpdate+0x14c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemCoreClockUpdate+0x14c>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	08006e94 	.word	0x08006e94
 800139c:	2000002c 	.word	0x2000002c
 80013a0:	00f42400 	.word	0x00f42400
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	08006e7c 	.word	0x08006e7c

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b0:	f7ff ff3c 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013b6:	e003      	b.n	80013c0 <LoopCopyDataInit>

080013b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013be:	3104      	adds	r1, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013c8:	d3f6      	bcc.n	80013b8 <CopyDataInit>
	ldr	r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013cc:	e002      	b.n	80013d4 <LoopFillZerobss>

080013ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013d0:	f842 3b04 	str.w	r3, [r2], #4

080013d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <LoopForever+0x16>)
	cmp	r2, r3
 80013d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013d8:	d3f9      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013da:	f005 fd17 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013de:	f7ff f8e9 	bl	80005b4 <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013e4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80013e8:	08006f0c 	.word	0x08006f0c
	ldr	r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013f0:	20000038 	.word	0x20000038
	ldr	r2, =_sbss
 80013f4:	20000038 	.word	0x20000038
	ldr	r3, = _ebss
 80013f8:	200004c8 	.word	0x200004c8

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>

080013fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001408:	2004      	movs	r0, #4
 800140a:	f001 f8e5 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800140e:	f7ff ff1f 	bl	8001250 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f80e 	bl	8001434 <HAL_InitTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e001      	b.n	8001428 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001424:	f7ff fcf4 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001428:	79fb      	ldrb	r3, [r7, #7]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_InitTick+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d023      	beq.n	8001490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_InitTick+0x70>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_InitTick+0x6c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f001 f8ed 	bl	800263e <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b07      	cmp	r3, #7
 800146e:	d809      	bhi.n	8001484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f001 f8b9 	bl	80025ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_InitTick+0x74>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e007      	b.n	8001494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e004      	b.n	8001494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e001      	b.n	8001494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000034 	.word	0x20000034
 80014a4:	2000002c 	.word	0x2000002c
 80014a8:	20000030 	.word	0x20000030

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000034 	.word	0x20000034
 80014d0:	200004c4 	.word	0x200004c4

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200004c4 	.word	0x200004c4

080014ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3360      	adds	r3, #96	; 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <LL_ADC_SetOffset+0x44>)
 8001576:	4013      	ands	r3, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	4313      	orrs	r3, r2
 8001584:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	03fff000 	.word	0x03fff000

0800159c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3360      	adds	r3, #96	; 0x60
 80015aa:	461a      	mov	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3360      	adds	r3, #96	; 0x60
 80015d8:	461a      	mov	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	615a      	str	r2, [r3, #20]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3330      	adds	r3, #48	; 0x30
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	211f      	movs	r1, #31
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0e9b      	lsrs	r3, r3, #26
 800165c:	f003 011f 	and.w	r1, r3, #31
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	431a      	orrs	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3314      	adds	r3, #20
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	0e5b      	lsrs	r3, r3, #25
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	0d1b      	lsrs	r3, r3, #20
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2107      	movs	r1, #7
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	401a      	ands	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	0d1b      	lsrs	r3, r3, #20
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0318 	and.w	r3, r3, #24
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f8:	40d9      	lsrs	r1, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	400b      	ands	r3, r1
 80016fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001702:	431a      	orrs	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	0007ffff 	.word	0x0007ffff

0800171c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800172c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6093      	str	r3, [r2, #8]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001754:	d101      	bne.n	800175a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800177c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017a4:	d101      	bne.n	80017aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_IsEnabled+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_IsEnabled+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b08      	cmp	r3, #8
 8001816:	d101      	bne.n	800181c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e134      	b.n	8001ab0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff faff 	bl	8000e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff67 	bl	8001740 <LL_ADC_IsDeepPowerDownEnabled>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff4d 	bl	800171c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff82 	bl	8001790 <LL_ADC_IsInternalRegulatorEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff66 	bl	8001768 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800189c:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <HAL_ADC_Init+0x28c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	4a86      	ldr	r2, [pc, #536]	; (8001abc <HAL_ADC_Init+0x290>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff64 	bl	8001790 <LL_ADC_IsInternalRegulatorEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10d      	bne.n	80018ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f043 0210 	orr.w	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff75 	bl	80017de <LL_ADC_REG_IsConversionOngoing>
 80018f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80cd 	bne.w	8001a9e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80c9 	bne.w	8001a9e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001914:	f043 0202 	orr.w	r2, r3, #2
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff49 	bl	80017b8 <LL_ADC_IsEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d110      	bne.n	800194e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800192c:	4864      	ldr	r0, [pc, #400]	; (8001ac0 <HAL_ADC_Init+0x294>)
 800192e:	f7ff ff43 	bl	80017b8 <LL_ADC_IsEnabled>
 8001932:	4604      	mov	r4, r0
 8001934:	4863      	ldr	r0, [pc, #396]	; (8001ac4 <HAL_ADC_Init+0x298>)
 8001936:	f7ff ff3f 	bl	80017b8 <LL_ADC_IsEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	4323      	orrs	r3, r4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4619      	mov	r1, r3
 8001948:	485f      	ldr	r0, [pc, #380]	; (8001ac8 <HAL_ADC_Init+0x29c>)
 800194a:	f7ff fdcf 	bl	80014ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e5b      	ldrb	r3, [r3, #25]
 8001952:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001958:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800195e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001964:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	3b01      	subs	r3, #1
 8001982:	045b      	lsls	r3, r3, #17
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_ADC_Init+0x2a0>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	69b9      	ldr	r1, [r7, #24]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff0d 	bl	80017de <LL_ADC_REG_IsConversionOngoing>
 80019c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff1a 	bl	8001804 <LL_ADC_INJ_IsConversionOngoing>
 80019d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d140      	bne.n	8001a5a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d13d      	bne.n	8001a5a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e1b      	ldrb	r3, [r3, #24]
 80019e6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019e8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a00:	f023 0306 	bic.w	r3, r3, #6
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	69b9      	ldr	r1, [r7, #24]
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d118      	bne.n	8001a4a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	e007      	b.n	8001a5a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10c      	bne.n	8001a7c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f023 010f 	bic.w	r1, r3, #15
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	1e5a      	subs	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	e007      	b.n	8001a8c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 020f 	bic.w	r2, r2, #15
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f023 0303 	bic.w	r3, r3, #3
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a9c:	e007      	b.n	8001aae <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3724      	adds	r7, #36	; 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}
 8001ab8:	2000002c 	.word	0x2000002c
 8001abc:	053e2d63 	.word	0x053e2d63
 8001ac0:	42028000 	.word	0x42028000
 8001ac4:	42028100 	.word	0x42028100
 8001ac8:	42028300 	.word	0x42028300
 8001acc:	fff0c007 	.word	0xfff0c007

08001ad0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b0b7      	sub	sp, #220	; 0xdc
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x22>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e3c1      	b.n	8002276 <HAL_ADC_ConfigChannel+0x7a6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe6d 	bl	80017de <LL_ADC_REG_IsConversionOngoing>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 83a6 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f7ff fd83 	bl	8001624 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fe5b 	bl	80017de <LL_ADC_REG_IsConversionOngoing>
 8001b28:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe67 	bl	8001804 <LL_ADC_INJ_IsConversionOngoing>
 8001b36:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 81c1 	bne.w	8001ec6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 81bc 	bne.w	8001ec6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b56:	d10f      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff fd8a 	bl	800167c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fd44 	bl	80015fe <LL_ADC_SetSamplingTimeCommonConfig>
 8001b76:	e00e      	b.n	8001b96 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	461a      	mov	r2, r3
 8001b86:	f7ff fd79 	bl	800167c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fd34 	bl	80015fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d00a      	beq.n	8001bce <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6919      	ldr	r1, [r3, #16]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bc8:	f7ff fcc4 	bl	8001554 <LL_ADC_SetOffset>
 8001bcc:	e17b      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fce1 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x12a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fcd6 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	e01e      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x168>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fccb 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e004      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x180>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	e018      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x1b2>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e004      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d106      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc9a 	bl	80015c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fc7e 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1f0>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc73 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	e01e      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x22e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fc68 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	e004      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x246>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	e018      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x278>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e004      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2200      	movs	r2, #0
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc37 	bl	80015c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fc1b 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x2b6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fc10 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	e01e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x2f4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fc05 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001db4:	2320      	movs	r3, #32
 8001db6:	e004      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x30c>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	e016      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x33a>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e004      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d106      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fbd6 	bl	80015c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2103      	movs	r1, #3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fbba 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x378>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2103      	movs	r1, #3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fbaf 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	f003 021f 	and.w	r2, r3, #31
 8001e46:	e017      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x3a8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fba4 	bl	800159c <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e62:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e003      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x3c0>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	e011      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x3e4>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	e003      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fb81 	bl	80015c8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc74 	bl	80017b8 <LL_ADC_IsEnabled>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 81c9 	bne.w	800226a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f7ff fbf5 	bl	80016d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a8f      	ldr	r2, [pc, #572]	; (800212c <HAL_ADC_ConfigChannel+0x65c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	f040 8131 	bne.w	8002158 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x44e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0e9b      	lsrs	r3, r3, #26
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2b09      	cmp	r3, #9
 8001f14:	bf94      	ite	ls
 8001f16:	2301      	movls	r3, #1
 8001f18:	2300      	movhi	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	e019      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x482>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e003      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2b09      	cmp	r3, #9
 8001f4a:	bf94      	ite	ls
 8001f4c:	2301      	movls	r3, #1
 8001f4e:	2300      	movhi	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d079      	beq.n	800204a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x4a2>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	3301      	adds	r3, #1
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f70:	e015      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x4ce>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f82:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	069b      	lsls	r3, r3, #26
 8001f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x4ee>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	e017      	b.n	8001fee <HAL_ADC_ConfigChannel+0x51e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e003      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	ea42 0103 	orr.w	r1, r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x544>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	3301      	adds	r3, #1
 8002006:	f003 021f 	and.w	r2, r3, #31
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	051b      	lsls	r3, r3, #20
 8002012:	e018      	b.n	8002046 <HAL_ADC_ConfigChannel+0x576>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e003      	b.n	8002038 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002046:	430b      	orrs	r3, r1
 8002048:	e081      	b.n	800214e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x596>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	3301      	adds	r3, #1
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002064:	e015      	b.n	8002092 <HAL_ADC_ConfigChannel+0x5c2>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e003      	b.n	800208a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3301      	adds	r3, #1
 800208c:	069b      	lsls	r3, r3, #26
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x5e2>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	e017      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x612>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	61fb      	str	r3, [r7, #28]
  return result;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e003      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	ea42 0103 	orr.w	r1, r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_ADC_ConfigChannel+0x63e>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	3301      	adds	r3, #1
 80020fa:	f003 021f 	and.w	r2, r3, #31
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3b1e      	subs	r3, #30
 8002106:	051b      	lsls	r3, r3, #20
 8002108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800210c:	e01e      	b.n	800214c <HAL_ADC_ConfigChannel+0x67c>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	613b      	str	r3, [r7, #16]
  return result;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e006      	b.n	8002138 <HAL_ADC_ConfigChannel+0x668>
 800212a:	bf00      	nop
 800212c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f003 021f 	and.w	r2, r3, #31
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	3b1e      	subs	r3, #30
 8002146:	051b      	lsls	r3, r3, #20
 8002148:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800214c:	430b      	orrs	r3, r1
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	6892      	ldr	r2, [r2, #8]
 8002152:	4619      	mov	r1, r3
 8002154:	f7ff fa92 	bl	800167c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_ADC_ConfigChannel+0x7b0>)
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8082 	beq.w	800226a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002166:	4847      	ldr	r0, [pc, #284]	; (8002284 <HAL_ADC_ConfigChannel+0x7b4>)
 8002168:	f7ff f9e6 	bl	8001538 <LL_ADC_GetCommonPathInternalCh>
 800216c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002170:	4845      	ldr	r0, [pc, #276]	; (8002288 <HAL_ADC_ConfigChannel+0x7b8>)
 8002172:	f7ff fb21 	bl	80017b8 <LL_ADC_IsEnabled>
 8002176:	4604      	mov	r4, r0
 8002178:	4844      	ldr	r0, [pc, #272]	; (800228c <HAL_ADC_ConfigChannel+0x7bc>)
 800217a:	f7ff fb1d 	bl	80017b8 <LL_ADC_IsEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	4323      	orrs	r3, r4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d15e      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a41      	ldr	r2, [pc, #260]	; (8002290 <HAL_ADC_ConfigChannel+0x7c0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d127      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d121      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a39      	ldr	r2, [pc, #228]	; (8002288 <HAL_ADC_ConfigChannel+0x7b8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d161      	bne.n	800226a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ae:	4619      	mov	r1, r3
 80021b0:	4834      	ldr	r0, [pc, #208]	; (8002284 <HAL_ADC_ConfigChannel+0x7b4>)
 80021b2:	f7ff f9ae 	bl	8001512 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_ADC_ConfigChannel+0x7c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	099b      	lsrs	r3, r3, #6
 80021bc:	4a36      	ldr	r2, [pc, #216]	; (8002298 <HAL_ADC_ConfigChannel+0x7c8>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021d0:	e002      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021de:	e044      	b.n	800226a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2d      	ldr	r2, [pc, #180]	; (800229c <HAL_ADC_ConfigChannel+0x7cc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d113      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x742>
 80021ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_ADC_ConfigChannel+0x7b8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d134      	bne.n	800226a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002208:	4619      	mov	r1, r3
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <HAL_ADC_ConfigChannel+0x7b4>)
 800220c:	f7ff f981 	bl	8001512 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002210:	e02b      	b.n	800226a <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d126      	bne.n	800226a <HAL_ADC_ConfigChannel+0x79a>
 800221c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d120      	bne.n	800226a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_ADC_ConfigChannel+0x7b8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d11b      	bne.n	800226a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223a:	4619      	mov	r1, r3
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <HAL_ADC_ConfigChannel+0x7b4>)
 800223e:	f7ff f968 	bl	8001512 <LL_ADC_SetCommonPathInternalCh>
 8002242:	e012      	b.n	800226a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002256:	e008      	b.n	800226a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002272:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002276:	4618      	mov	r0, r3
 8002278:	37dc      	adds	r7, #220	; 0xdc
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	80080000 	.word	0x80080000
 8002284:	42028300 	.word	0x42028300
 8002288:	42028000 	.word	0x42028000
 800228c:	42028100 	.word	0x42028100
 8002290:	c7520000 	.word	0xc7520000
 8002294:	2000002c 	.word	0x2000002c
 8002298:	053e2d63 	.word	0x053e2d63
 800229c:	cb840000 	.word	0xcb840000
 80022a0:	80000001 	.word	0x80000001

080022a4 <LL_ADC_IsEnabled>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <LL_ADC_IsEnabled+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_IsEnabled+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_IsConversionOngoing>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b0a1      	sub	sp, #132	; 0x84
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800230a:	2302      	movs	r3, #2
 800230c:	e089      	b.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002316:	2300      	movs	r3, #0
 8002318:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800231a:	2300      	movs	r3, #0
 800231c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a42      	ldr	r2, [pc, #264]	; (800242c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002328:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e001      	b.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e068      	b.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ffb9 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002358:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ffb3 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d14a      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800236a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236c:	2b00      	cmp	r3, #0
 800236e:	d147      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002372:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d027      	beq.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800237c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800238e:	035b      	lsls	r3, r3, #13
 8002390:	430b      	orrs	r3, r1
 8002392:	431a      	orrs	r2, r3
 8002394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002396:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002398:	4824      	ldr	r0, [pc, #144]	; (800242c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800239a:	f7ff ff83 	bl	80022a4 <LL_ADC_IsEnabled>
 800239e:	4604      	mov	r4, r0
 80023a0:	4823      	ldr	r0, [pc, #140]	; (8002430 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023a2:	f7ff ff7f 	bl	80022a4 <LL_ADC_IsEnabled>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4323      	orrs	r3, r4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d132      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023b6:	f023 030f 	bic.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6811      	ldr	r1, [r2, #0]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	431a      	orrs	r2, r3
 80023c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023ca:	e023      	b.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d8:	4814      	ldr	r0, [pc, #80]	; (800242c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023da:	f7ff ff63 	bl	80022a4 <LL_ADC_IsEnabled>
 80023de:	4604      	mov	r4, r0
 80023e0:	4813      	ldr	r0, [pc, #76]	; (8002430 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023e2:	f7ff ff5f 	bl	80022a4 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4323      	orrs	r3, r4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d112      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023f6:	f023 030f 	bic.w	r3, r3, #15
 80023fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023fe:	e009      	b.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002412:	e000      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800241e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002422:	4618      	mov	r0, r3
 8002424:	3784      	adds	r7, #132	; 0x84
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	bf00      	nop
 800242c:	42028000 	.word	0x42028000
 8002430:	42028100 	.word	0x42028100
 8002434:	42028300 	.word	0x42028300

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <__NVIC_EnableIRQ+0x38>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	; (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0152      	lsls	r2, r2, #5
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0152      	lsls	r2, r2, #5
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b03      	cmp	r3, #3
 8002548:	bf28      	it	cs
 800254a:	2303      	movcs	r3, #3
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3303      	adds	r3, #3
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b04      	subs	r3, #4
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	2107      	movs	r1, #7
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff8e 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff29 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff40 	bl	8002480 <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff90 	bl	800252c <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5f 	bl	80024d8 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff33 	bl	800249c <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa4 	bl	8002594 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002666:	e158      	b.n	800291a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 814a 	beq.w	8002914 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d00b      	beq.n	80026a0 <HAL_GPIO_Init+0x48>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002694:	2b11      	cmp	r3, #17
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b12      	cmp	r3, #18
 800269e:	d130      	bne.n	8002702 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d6:	2201      	movs	r2, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0xea>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b12      	cmp	r3, #18
 8002740:	d123      	bne.n	800278a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	08da      	lsrs	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3208      	adds	r2, #8
 800274a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	220f      	movs	r2, #15
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	08da      	lsrs	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3208      	adds	r2, #8
 8002784:	6939      	ldr	r1, [r7, #16]
 8002786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0203 	and.w	r2, r3, #3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80a4 	beq.w	8002914 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80027cc:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3318      	adds	r3, #24
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_GPIO_Init+0x2e4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d025      	beq.n	8002844 <HAL_GPIO_Init+0x1ec>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a51      	ldr	r2, [pc, #324]	; (8002940 <HAL_GPIO_Init+0x2e8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01f      	beq.n	8002840 <HAL_GPIO_Init+0x1e8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_GPIO_Init+0x2ec>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d019      	beq.n	800283c <HAL_GPIO_Init+0x1e4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a4f      	ldr	r2, [pc, #316]	; (8002948 <HAL_GPIO_Init+0x2f0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_GPIO_Init+0x1e0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_GPIO_Init+0x2f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_Init+0x1dc>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a4d      	ldr	r2, [pc, #308]	; (8002950 <HAL_GPIO_Init+0x2f8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x1d8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <HAL_GPIO_Init+0x2fc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_Init+0x1d4>
 8002828:	2306      	movs	r3, #6
 800282a:	e00c      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 800282c:	2307      	movs	r3, #7
 800282e:	e00a      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002830:	2305      	movs	r3, #5
 8002832:	e008      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002834:	2304      	movs	r3, #4
 8002836:	e006      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002838:	2303      	movs	r3, #3
 800283a:	e004      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 800283c:	2302      	movs	r3, #2
 800283e:	e002      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002844:	2300      	movs	r3, #0
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	f002 0203 	and.w	r2, r2, #3
 800284c:	00d2      	lsls	r2, r2, #3
 800284e:	4093      	lsls	r3, r2
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002856:	4938      	ldr	r1, [pc, #224]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3318      	adds	r3, #24
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 8002894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_GPIO_Init+0x2e0>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f ae9f 	bne.w	8002668 <HAL_GPIO_Init+0x10>
  }
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	4002f400 	.word	0x4002f400
 800293c:	42020000 	.word	0x42020000
 8002940:	42020400 	.word	0x42020400
 8002944:	42020800 	.word	0x42020800
 8002948:	42020c00 	.word	0x42020c00
 800294c:	42021000 	.word	0x42021000
 8002950:	42021400 	.word	0x42021400
 8002954:	42021800 	.word	0x42021800

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002974:	e002      	b.n	800297c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af06      	add	r7, sp, #24
 800298e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0d7      	b.n	8002b4a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fba8 	bl	8001104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2203      	movs	r2, #3
 80029b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 f9e7 	bl	8006d94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e04c      	b.n	8002a66 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	3301      	adds	r3, #1
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	b298      	uxth	r0, r3
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	3336      	adds	r3, #54	; 0x36
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3303      	adds	r3, #3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3338      	adds	r3, #56	; 0x38
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	333c      	adds	r3, #60	; 0x3c
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	3340      	adds	r3, #64	; 0x40
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	3301      	adds	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3ad      	bcc.n	80029cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e044      	b.n	8002b00 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	3301      	adds	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3b5      	bcc.n	8002a76 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	687e      	ldr	r6, [r7, #4]
 8002b12:	466d      	mov	r5, sp
 8002b14:	f106 0410 	add.w	r4, r6, #16
 8002b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	1d33      	adds	r3, r6, #4
 8002b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f004 f950 	bl	8006dca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f805 	bl	8002b52 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bf4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002bf6:	f000 f861 	bl	8002cbc <HAL_PWREx_SMPS_GetEffectiveMode>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c00:	d101      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e03e      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c12:	d101      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e035      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d101      	bne.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e02f      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002c2c:	4917      	ldr	r1, [pc, #92]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	09db      	lsrs	r3, r3, #7
 8002c42:	2232      	movs	r2, #50	; 0x32
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c54:	e002      	b.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d102      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d101      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e000      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	2000002c 	.word	0x2000002c
 8002c94:	0a7c5ac5 	.word	0x0a7c5ac5
 8002c98:	cccccccd 	.word	0xcccccccd

08002c9c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6053      	str	r3, [r2, #4]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	e00a      	b.n	8002cf0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	e001      	b.n	8002cf0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002cec:	2300      	movs	r3, #0
 8002cee:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002cf0:	687b      	ldr	r3, [r7, #4]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40007000 	.word	0x40007000

08002d04 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f000 bcd0 	b.w	80036b8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d22:	4b97      	ldr	r3, [pc, #604]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80e9 	beq.w	8002f0c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_RCC_OscConfig+0x4a>
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	f040 8083 	bne.w	8002e4e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d17f      	bne.n	8002e4e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d4e:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <HAL_RCC_OscConfig+0x64>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f000 bca8 	b.w	80036b8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6c:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d004      	beq.n	8002d82 <HAL_RCC_OscConfig+0x7e>
 8002d78:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d80:	e005      	b.n	8002d8e <HAL_RCC_OscConfig+0x8a>
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d224      	bcs.n	8002ddc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fe98 	bl	8003acc <RCC_SetFlashLatencyFromMSIRange>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f000 bc88 	b.w	80036b8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a74      	ldr	r2, [pc, #464]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	496f      	ldr	r1, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc6:	4b6e      	ldr	r3, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	496a      	ldr	r1, [pc, #424]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
 8002dda:	e026      	b.n	8002e2a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ddc:	4b68      	ldr	r3, [pc, #416]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	4962      	ldr	r1, [pc, #392]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfa:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	495d      	ldr	r1, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fe57 	bl	8003acc <RCC_SetFlashLatencyFromMSIRange>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f000 bc47 	b.w	80036b8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e2a:	f000 fe13 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_RCC_OscConfig+0x280>)
 8002e32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e34:	4b54      	ldr	r3, [pc, #336]	; (8002f88 <HAL_RCC_OscConfig+0x284>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fafb 	bl	8001434 <HAL_InitTick>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d060      	beq.n	8002f0a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	f000 bc35 	b.w	80036b8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d039      	beq.n	8002eca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fb37 	bl	80014d4 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e68:	e00f      	b.n	8002e8a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fb33 	bl	80014d4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d908      	bls.n	8002e8a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	f000 bc17 	b.w	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0e9      	beq.n	8002e6a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	4934      	ldr	r1, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	492f      	ldr	r1, [pc, #188]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	e020      	b.n	8002f0c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fafd 	bl	80014d4 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002edc:	e00e      	b.n	8002efc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ede:	f7fe faf9 	bl	80014d4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e3dd      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ea      	bne.n	8002ede <HAL_RCC_OscConfig+0x1da>
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d07e      	beq.n	8003016 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x226>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d10e      	bne.n	8002f42 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d06e      	beq.n	8003014 <HAL_RCC_OscConfig+0x310>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d16a      	bne.n	8003014 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e3ba      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x256>
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e024      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2a0>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f62:	d113      	bne.n	8002f8c <HAL_RCC_OscConfig+0x288>
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a02      	ldr	r2, [pc, #8]	; (8002f80 <HAL_RCC_OscConfig+0x27c>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e012      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2a0>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	2000002c 	.word	0x2000002c
 8002f88:	20000030 	.word	0x20000030
 8002f8c:	4b8b      	ldr	r3, [pc, #556]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a8a      	ldr	r2, [pc, #552]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b88      	ldr	r3, [pc, #544]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a87      	ldr	r2, [pc, #540]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d019      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fa92 	bl	80014d4 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb2:	e00e      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fa8e 	bl	80014d4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d907      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	4b7e      	ldr	r3, [pc, #504]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e372      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd2:	4b7a      	ldr	r3, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ea      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x2b0>
 8002fde:	e01a      	b.n	8003016 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fa78 	bl	80014d4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe6:	e00e      	b.n	8003006 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fa74 	bl	80014d4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d907      	bls.n	8003006 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff6:	4b71      	ldr	r3, [pc, #452]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e358      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003006:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1ea      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2e4>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d06c      	beq.n	80030fc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x330>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d119      	bne.n	8003062 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d116      	bne.n	8003062 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x348>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e335      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	4958      	ldr	r1, [pc, #352]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003060:	e04c      	b.n	80030fc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d029      	beq.n	80030be <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306a:	4b54      	ldr	r3, [pc, #336]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a53      	ldr	r2, [pc, #332]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe fa2d 	bl	80014d4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307c:	e00e      	b.n	800309c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307e:	f7fe fa29 	bl	80014d4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d907      	bls.n	800309c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308c:	4b4b      	ldr	r3, [pc, #300]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e30d      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309c:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ea      	beq.n	800307e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b44      	ldr	r3, [pc, #272]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	4941      	ldr	r1, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e01e      	b.n	80030fc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3e      	ldr	r2, [pc, #248]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fa03 	bl	80014d4 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d0:	e00e      	b.n	80030f0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe f9ff 	bl	80014d4 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d907      	bls.n	80030f0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e2e3      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ea      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d062      	beq.n	80031ce <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d038      	beq.n	8003182 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003128:	e007      	b.n	800313a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800312c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003132:	f043 0310 	orr.w	r3, r3, #16
 8003136:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800313c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003140:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f9c3 	bl	80014d4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003150:	e00f      	b.n	8003172 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003152:	f7fe f9bf 	bl	80014d4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b07      	cmp	r3, #7
 800315e:	d908      	bls.n	8003172 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2a2      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0e8      	beq.n	8003152 <HAL_RCC_OscConfig+0x44e>
 8003180:	e025      	b.n	80031ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 8003184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe f99f 	bl	80014d4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	e012      	b.n	80031c0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe f99b 	bl	80014d4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b07      	cmp	r3, #7
 80031a6:	d90b      	bls.n	80031c0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e27e      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c0:	4ba8      	ldr	r3, [pc, #672]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 812d 	beq.w	8003436 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031dc:	2300      	movs	r3, #0
 80031de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e0:	4ba0      	ldr	r3, [pc, #640]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	4b9d      	ldr	r3, [pc, #628]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	4a9c      	ldr	r2, [pc, #624]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6593      	str	r3, [r2, #88]	; 0x58
 80031f8:	4b9a      	ldr	r3, [pc, #616]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003204:	2301      	movs	r3, #1
 8003206:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003208:	4b97      	ldr	r3, [pc, #604]	; (8003468 <HAL_RCC_OscConfig+0x764>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11e      	bne.n	8003252 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003214:	4b94      	ldr	r3, [pc, #592]	; (8003468 <HAL_RCC_OscConfig+0x764>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a93      	ldr	r2, [pc, #588]	; (8003468 <HAL_RCC_OscConfig+0x764>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003220:	f7fe f958 	bl	80014d4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003226:	e00e      	b.n	8003246 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003228:	f7fe f954 	bl	80014d4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d907      	bls.n	8003246 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003236:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_RCC_OscConfig+0x764>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e238      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x764>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ea      	beq.n	8003228 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01f      	beq.n	800329e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d010      	beq.n	800328c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800326a:	4b7e      	ldr	r3, [pc, #504]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800327a:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a78      	ldr	r2, [pc, #480]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328a:	e018      	b.n	80032be <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800328c:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a74      	ldr	r2, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800329c:	e00f      	b.n	80032be <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800329e:	4b71      	ldr	r3, [pc, #452]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	4a6f      	ldr	r2, [pc, #444]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032ae:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	4a6b      	ldr	r2, [pc, #428]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d068      	beq.n	8003398 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fe f905 	bl	80014d4 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032cc:	e011      	b.n	80032f2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe f901 	bl	80014d4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d908      	bls.n	80032f2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e0:	4b60      	ldr	r3, [pc, #384]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e1e2      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0e6      	beq.n	80032ce <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800330c:	4b55      	ldr	r3, [pc, #340]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800331c:	e011      	b.n	8003342 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe f8d9 	bl	80014d4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d908      	bls.n	8003342 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1ba      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003342:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0e6      	beq.n	800331e <HAL_RCC_OscConfig+0x61a>
 8003350:	e068      	b.n	8003424 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003352:	4b44      	ldr	r3, [pc, #272]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	4a42      	ldr	r2, [pc, #264]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800335a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003362:	e011      	b.n	8003388 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fe f8b6 	bl	80014d4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d908      	bls.n	8003388 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e197      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e6      	bne.n	8003364 <HAL_RCC_OscConfig+0x660>
 8003396:	e045      	b.n	8003424 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe f89c 	bl	80014d4 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800339e:	e011      	b.n	80033c4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe f898 	bl	80014d4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d908      	bls.n	80033c4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b2:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e179      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c4:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e6      	bne.n	80033a0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d021      	beq.n	8003424 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 80033e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033f0:	e011      	b.n	8003416 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe f86f 	bl	80014d4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d908      	bls.n	8003416 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e150      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e6      	bne.n	80033f2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003424:	7ffb      	ldrb	r3, [r7, #31]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d04f      	beq.n	80034e2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d028      	beq.n	800349c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 800344c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_RCC_OscConfig+0x760>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fe f83b 	bl	80014d4 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x788>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800346c:	f7fe f832 	bl	80014d4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d908      	bls.n	800348c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800347a:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 800347c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e115      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800348c:	4b8c      	ldr	r3, [pc, #560]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 800348e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0e8      	beq.n	800346c <HAL_RCC_OscConfig+0x768>
 800349a:	e022      	b.n	80034e2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800349c:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 800349e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a2:	4a87      	ldr	r2, [pc, #540]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fe f812 	bl	80014d4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b4:	f7fe f80e 	bl	80014d4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d908      	bls.n	80034d4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034c2:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0f1      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80034d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e8      	bne.n	80034b4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80e5 	beq.w	80036b6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ec:	4b74      	ldr	r3, [pc, #464]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	f000 809f 	beq.w	8003638 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d166      	bne.n	80035d0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6e      	ldr	r2, [pc, #440]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd ffe1 	bl	80014d4 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003514:	e00e      	b.n	8003534 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fd ffdd 	bl	80014d4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d907      	bls.n	8003534 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0c1      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1ea      	bne.n	8003516 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <HAL_RCC_OscConfig+0x9c0>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003550:	3a01      	subs	r2, #1
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	4311      	orrs	r1, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800355a:	0212      	lsls	r2, r2, #8
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	3a01      	subs	r2, #1
 8003566:	0552      	lsls	r2, r2, #21
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0652      	lsls	r2, r2, #25
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800357a:	06d2      	lsls	r2, r2, #27
 800357c:	430a      	orrs	r2, r1
 800357e:	4950      	ldr	r1, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a4d      	ldr	r2, [pc, #308]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003590:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd ff9a 	bl	80014d4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a2:	e00e      	b.n	80035c2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fd ff96 	bl	80014d4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d907      	bls.n	80035c2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e07a      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ea      	beq.n	80035a4 <HAL_RCC_OscConfig+0x8a0>
 80035ce:	e072      	b.n	80036b6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d0:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80035dc:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a34      	ldr	r2, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 80035fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd ff66 	bl	80014d4 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360a:	e00e      	b.n	800362a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd ff62 	bl	80014d4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d907      	bls.n	800362a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361a:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e046      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362a:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ea      	bne.n	800360c <HAL_RCC_OscConfig+0x908>
 8003636:	e03e      	b.n	80036b6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e039      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003644:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_RCC_OscConfig+0x9bc>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	429a      	cmp	r2, r3
 8003656:	d12c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	3b01      	subs	r3, #1
 8003664:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d123      	bne.n	80036b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d11b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d113      	bne.n	80036b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d109      	bne.n	80036b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	019f800c 	.word	0x019f800c

080036c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e10d      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	4983      	ldr	r1, [pc, #524]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0f5      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8094 	beq.w	8003846 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d134      	bne.n	8003790 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003726:	4b78      	ldr	r3, [pc, #480]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0e2      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003736:	f000 fa2d 	bl	8003b94 <RCC_GetSysClockFreqFromPLLSource>
 800373a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_ClockConfig+0x244>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d956      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003744:	4b70      	ldr	r3, [pc, #448]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003750:	4b6d      	ldr	r3, [pc, #436]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003758:	4a6b      	ldr	r2, [pc, #428]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 800375a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e045      	b.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03f      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d13b      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800377a:	4b63      	ldr	r3, [pc, #396]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003782:	4a61      	ldr	r2, [pc, #388]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e030      	b.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003798:	4b5b      	ldr	r3, [pc, #364]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d115      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0a9      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037b0:	4b55      	ldr	r3, [pc, #340]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e09d      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c0:	4b51      	ldr	r3, [pc, #324]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e095      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037d0:	f000 f8a2 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	; (800390c <HAL_RCC_ClockConfig+0x244>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d909      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037de:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e6:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b45      	ldr	r3, [pc, #276]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4942      	ldr	r1, [pc, #264]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fe66 	bl	80014d4 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e013      	b.n	8003834 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fd fe62 	bl	80014d4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d90a      	bls.n	8003834 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e063      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 020c 	and.w	r2, r3, #12
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	429a      	cmp	r2, r3
 8003844:	d1e2      	bne.n	800380c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003852:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	492a      	ldr	r1, [pc, #168]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
 8003864:	e008      	b.n	8003878 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b80      	cmp	r3, #128	; 0x80
 800386a:	d105      	bne.n	8003878 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800386c:	4b26      	ldr	r3, [pc, #152]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d210      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	491d      	ldr	r1, [pc, #116]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCC_ClockConfig+0x23c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e029      	b.n	80038fc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4911      	ldr	r1, [pc, #68]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4909      	ldr	r1, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x240>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038e6:	f000 f8b5 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <HAL_RCC_ClockConfig+0x248>)
 80038ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_RCC_ClockConfig+0x24c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fd9d 	bl	8001434 <HAL_InitTick>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40022000 	.word	0x40022000
 8003908:	40021000 	.word	0x40021000
 800390c:	04c4b400 	.word	0x04c4b400
 8003910:	2000002c 	.word	0x2000002c
 8003914:	20000030 	.word	0x20000030

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003930:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d121      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11e      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d107      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e005      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x130>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d102      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003990:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x134>)
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e004      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800399c:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x138>)
 800399e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d146      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80039a6:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d003      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0xb4>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d00d      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0xce>
 80039ca:	e019      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039cc:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x134>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039d6:	68d2      	ldr	r2, [r2, #12]
 80039d8:	0a12      	lsrs	r2, r2, #8
 80039da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	617b      	str	r3, [r7, #20]
        break;
 80039e4:	e019      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x138>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0a12      	lsrs	r2, r2, #8
 80039f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
        break;
 80039fe:	e00c      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a0a:	68d2      	ldr	r2, [r2, #12]
 8003a0c:	0a12      	lsrs	r2, r2, #8
 8003a0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
        break;
 8003a18:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0e5b      	lsrs	r3, r3, #25
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a34:	69bb      	ldr	r3, [r7, #24]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08006e94 	.word	0x08006e94
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003a58:	f7ff ff5e 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08006e7c 	.word	0x08006e7c

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a80:	f7ff ffe8 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08006e8c 	.word	0x08006e8c

08003aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa8:	f7ff ffd4 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0adb      	lsrs	r3, r3, #11
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	08006e8c 	.word	0x08006e8c

08003acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ae4:	f7ff f870 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8003ae8:	6138      	str	r0, [r7, #16]
 8003aea:	e014      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6593      	str	r3, [r2, #88]	; 0x58
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b04:	f7ff f860 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8003b08:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b22:	d10b      	bne.n	8003b3c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d919      	bls.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2ba0      	cmp	r3, #160	; 0xa0
 8003b2e:	d902      	bls.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b30:	2302      	movs	r3, #2
 8003b32:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b34:	e013      	b.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b3a:	e010      	b.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d902      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b42:	2303      	movs	r3, #3
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e00a      	b.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d102      	bne.n	8003b54 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b4e:	2302      	movs	r3, #2
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e004      	b.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b70      	cmp	r3, #112	; 0x70
 8003b58:	d101      	bne.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 020f 	bic.w	r2, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40022000 	.word	0x40022000

08003b94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d118      	bne.n	8003bdc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003baa:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e005      	b.n	8003bd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bdc:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d003      	beq.n	8003c02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d00d      	beq.n	8003c1c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003c00:	e019      	b.n	8003c36 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c02:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	0a12      	lsrs	r2, r2, #8
 8003c10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	613b      	str	r3, [r7, #16]
      break;
 8003c1a:	e019      	b.n	8003c50 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c1c:	4a19      	ldr	r2, [pc, #100]	; (8003c84 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c26:	68d2      	ldr	r2, [r2, #12]
 8003c28:	0a12      	lsrs	r2, r2, #8
 8003c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	613b      	str	r3, [r7, #16]
      break;
 8003c34:	e00c      	b.n	8003c50 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	0a12      	lsrs	r2, r2, #8
 8003c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	613b      	str	r3, [r7, #16]
      break;
 8003c4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0e5b      	lsrs	r3, r3, #25
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c6a:	683b      	ldr	r3, [r7, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08006e94 	.word	0x08006e94
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d040      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	2b80      	cmp	r3, #128	; 0x80
 8003caa:	d02a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d825      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d026      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cb4:	2b60      	cmp	r3, #96	; 0x60
 8003cb6:	d821      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d006      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d81d      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d010      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003cc8:	e018      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cca:	4b8f      	ldr	r3, [pc, #572]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4a8e      	ldr	r2, [pc, #568]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd6:	e015      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fb56 	bl	8004390 <RCCEx_PLLSAI1_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ce8:	e00c      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3320      	adds	r3, #32
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fc33 	bl	800455c <RCCEx_PLLSAI2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cfa:	e003      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
        break;
 8003d00:	e000      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d04:	7ffb      	ldrb	r3, [r7, #31]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d0a:	4b7f      	ldr	r3, [pc, #508]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d10:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d18:	497b      	ldr	r1, [pc, #492]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d20:	e001      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
 8003d24:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d047      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3a:	d030      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	d82a      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d46:	d02a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d824      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d81e      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d010      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d64:	e018      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d66:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a67      	ldr	r2, [pc, #412]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d72:	e015      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fb08 	bl	8004390 <RCCEx_PLLSAI1_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d84:	e00c      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3320      	adds	r3, #32
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fbe5 	bl	800455c <RCCEx_PLLSAI2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d96:	e003      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77fb      	strb	r3, [r7, #31]
        break;
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da0:	7ffb      	ldrb	r3, [r7, #31]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003da6:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4954      	ldr	r1, [pc, #336]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80ab 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4a48      	ldr	r2, [pc, #288]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	; 0x58
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e08:	f7fd fb64 	bl	80014d4 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fd fb60 	bl	80014d4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d908      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003e2e:	e006      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0e9      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003e3e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d164      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e50:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01f      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d019      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01f      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fd fb17 	bl	80014d4 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea8:	e012      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fd fb13 	bl	80014d4 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d909      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003ece:	e007      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0e5      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003ee0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f00:	e008      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	77bb      	strb	r3, [r7, #30]
 8003f06:	e005      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	7ffb      	ldrb	r3, [r7, #31]
 8003f12:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b9c      	ldr	r3, [pc, #624]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	4a9b      	ldr	r2, [pc, #620]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f32:	4b96      	ldr	r3, [pc, #600]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f023 0203 	bic.w	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	4992      	ldr	r1, [pc, #584]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f54:	4b8d      	ldr	r3, [pc, #564]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f023 020c 	bic.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	498a      	ldr	r1, [pc, #552]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	4981      	ldr	r1, [pc, #516]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f98:	4b7c      	ldr	r3, [pc, #496]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4979      	ldr	r1, [pc, #484]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fba:	4b74      	ldr	r3, [pc, #464]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	4970      	ldr	r1, [pc, #448]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fdc:	4b6b      	ldr	r3, [pc, #428]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	4968      	ldr	r1, [pc, #416]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	495f      	ldr	r1, [pc, #380]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004020:	4b5a      	ldr	r3, [pc, #360]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	4957      	ldr	r1, [pc, #348]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004042:	4b52      	ldr	r3, [pc, #328]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004050:	494e      	ldr	r1, [pc, #312]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d031      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800406c:	d00e      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800406e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004072:	d814      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800407c:	d10f      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407e:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4a42      	ldr	r2, [pc, #264]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004088:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800408a:	e00c      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f97c 	bl	8004390 <RCCEx_PLLSAI1_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77fb      	strb	r3, [r7, #31]
        break;
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80040a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040c2:	e001      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
 80040c6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d4:	4b2d      	ldr	r3, [pc, #180]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	492a      	ldr	r1, [pc, #168]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f6:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	4921      	ldr	r1, [pc, #132]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	4919      	ldr	r1, [pc, #100]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	f023 0203 	bic.w	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	4910      	ldr	r1, [pc, #64]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02b      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	4908      	ldr	r1, [pc, #32]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417a:	d109      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a02      	ldr	r2, [pc, #8]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004186:	60d3      	str	r3, [r2, #12]
 8004188:	e014      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f8f5 	bl	8004390 <RCCEx_PLLSAI1_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80041b0:	7ffb      	ldrb	r3, [r7, #31]
 80041b2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d04a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c8:	d108      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x554>
 80041ca:	4b70      	ldr	r3, [pc, #448]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d0:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041da:	e012      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80041dc:	4b6b      	ldr	r3, [pc, #428]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ea:	4968      	ldr	r1, [pc, #416]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041f2:	4b66      	ldr	r3, [pc, #408]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f8:	4a64      	ldr	r2, [pc, #400]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004206:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800420a:	d10d      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2101      	movs	r1, #1
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f8bc 	bl	8004390 <RCCEx_PLLSAI1_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800421c:	7ffb      	ldrb	r3, [r7, #31]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d019      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	77bb      	strb	r3, [r7, #30]
 8004226:	e016      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004230:	d106      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004232:	4b56      	ldr	r3, [pc, #344]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4a55      	ldr	r2, [pc, #340]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423c:	60d3      	str	r3, [r2, #12]
 800423e:	e00a      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004248:	d105      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800424a:	4b50      	ldr	r3, [pc, #320]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4a4f      	ldr	r2, [pc, #316]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d028      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004262:	4b4a      	ldr	r3, [pc, #296]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004270:	4946      	ldr	r1, [pc, #280]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004280:	d106      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004282:	4b42      	ldr	r3, [pc, #264]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4a41      	ldr	r2, [pc, #260]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428c:	60d3      	str	r3, [r2, #12]
 800428e:	e011      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f875 	bl	8004390 <RCCEx_PLLSAI1_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042aa:	7ffb      	ldrb	r3, [r7, #31]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80042b0:	7ffb      	ldrb	r3, [r7, #31]
 80042b2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d0:	492e      	ldr	r1, [pc, #184]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e2:	d10c      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f850 	bl	8004390 <RCCEx_PLLSAI1_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042f4:	7ffb      	ldrb	r3, [r7, #31]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
 80042fc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800430c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004310:	f023 0204 	bic.w	r2, r3, #4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431a:	491c      	ldr	r1, [pc, #112]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004334:	f023 0218 	bic.w	r2, r3, #24
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	4913      	ldr	r1, [pc, #76]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004374:	d105      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a04      	ldr	r2, [pc, #16]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800437c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004380:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004382:	7fbb      	ldrb	r3, [r7, #30]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000

08004390 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d018      	beq.n	80043d8 <RCCEx_PLLSAI1_Config+0x48>
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d81f      	bhi.n	80043ea <RCCEx_PLLSAI1_Config+0x5a>
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d002      	beq.n	80043b4 <RCCEx_PLLSAI1_Config+0x24>
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d009      	beq.n	80043c6 <RCCEx_PLLSAI1_Config+0x36>
 80043b2:	e01a      	b.n	80043ea <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b4:	4b65      	ldr	r3, [pc, #404]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d117      	bne.n	80043f0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e014      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c6:	4b61      	ldr	r3, [pc, #388]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d110      	bne.n	80043f4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d6:	e00d      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80043d8:	4b5c      	ldr	r3, [pc, #368]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e8:	e006      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
      break;
 80043ee:	e004      	b.n	80043fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 809f 	bne.w	8004540 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004402:	4b52      	ldr	r3, [pc, #328]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a51      	ldr	r2, [pc, #324]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800440c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440e:	f7fd f861 	bl	80014d4 <HAL_GetTick>
 8004412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004414:	e00f      	b.n	8004436 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004416:	f7fd f85d 	bl	80014d4 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d908      	bls.n	8004436 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004424:	4b49      	ldr	r3, [pc, #292]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004434:	e006      	b.n	8004444 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004436:	4b45      	ldr	r3, [pc, #276]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e9      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0x86>
 8004442:	e000      	b.n	8004446 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004444:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d179      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004452:	4b3e      	ldr	r3, [pc, #248]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	0211      	lsls	r1, r2, #8
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68d2      	ldr	r2, [r2, #12]
 8004464:	06d2      	lsls	r2, r2, #27
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6852      	ldr	r2, [r2, #4]
 800446c:	3a01      	subs	r2, #1
 800446e:	0112      	lsls	r2, r2, #4
 8004470:	4311      	orrs	r1, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	4934      	ldr	r1, [pc, #208]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
 800447e:	e033      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d118      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	4b32      	ldr	r3, [pc, #200]	; (8004554 <RCCEx_PLLSAI1_Config+0x1c4>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	0211      	lsls	r1, r2, #8
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6912      	ldr	r2, [r2, #16]
 8004498:	0852      	lsrs	r2, r2, #1
 800449a:	3a01      	subs	r2, #1
 800449c:	0552      	lsls	r2, r2, #21
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6852      	ldr	r2, [r2, #4]
 80044a4:	3a01      	subs	r2, #1
 80044a6:	0112      	lsls	r2, r2, #4
 80044a8:	4311      	orrs	r1, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	4926      	ldr	r1, [pc, #152]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	610b      	str	r3, [r1, #16]
 80044b6:	e017      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	4b26      	ldr	r3, [pc, #152]	; (8004558 <RCCEx_PLLSAI1_Config+0x1c8>)
 80044be:	4013      	ands	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6892      	ldr	r2, [r2, #8]
 80044c4:	0211      	lsls	r1, r2, #8
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6952      	ldr	r2, [r2, #20]
 80044ca:	0852      	lsrs	r2, r2, #1
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0652      	lsls	r2, r2, #25
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6852      	ldr	r2, [r2, #4]
 80044d6:	3a01      	subs	r2, #1
 80044d8:	0112      	lsls	r2, r2, #4
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	491a      	ldr	r1, [pc, #104]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fc ffee 	bl	80014d4 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044fa:	e00f      	b.n	800451c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fc:	f7fc ffea 	bl	80014d4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d908      	bls.n	800451c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800451a:	e006      	b.n	800452a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0e9      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0x16c>
 8004528:	e000      	b.n	800452c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800452a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	4904      	ldr	r1, [pc, #16]	; (800454c <RCCEx_PLLSAI1_Config+0x1bc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	07ff800c 	.word	0x07ff800c
 8004554:	ff9f800c 	.word	0xff9f800c
 8004558:	f9ff800c 	.word	0xf9ff800c

0800455c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d018      	beq.n	80045a4 <RCCEx_PLLSAI2_Config+0x48>
 8004572:	2b03      	cmp	r3, #3
 8004574:	d81f      	bhi.n	80045b6 <RCCEx_PLLSAI2_Config+0x5a>
 8004576:	2b01      	cmp	r3, #1
 8004578:	d002      	beq.n	8004580 <RCCEx_PLLSAI2_Config+0x24>
 800457a:	2b02      	cmp	r3, #2
 800457c:	d009      	beq.n	8004592 <RCCEx_PLLSAI2_Config+0x36>
 800457e:	e01a      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004580:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d117      	bne.n	80045bc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e014      	b.n	80045bc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004592:	4b46      	ldr	r3, [pc, #280]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459a:	2b00      	cmp	r3, #0
 800459c:	d110      	bne.n	80045c0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a2:	e00d      	b.n	80045c0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80045a4:	4b41      	ldr	r3, [pc, #260]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b4:	e006      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ba:	e004      	b.n	80045c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045bc:	bf00      	nop
 80045be:	e002      	b.n	80045c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d169      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045cc:	4b37      	ldr	r3, [pc, #220]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a36      	ldr	r2, [pc, #216]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fc ff7c 	bl	80014d4 <HAL_GetTick>
 80045dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045de:	e00f      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045e0:	f7fc ff78 	bl	80014d4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d908      	bls.n	8004600 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045fe:	e006      	b.n	800460e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004600:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e9      	bne.n	80045e0 <RCCEx_PLLSAI2_Config+0x84>
 800460c:	e000      	b.n	8004610 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800460e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d144      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d115      	bne.n	8004648 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800461c:	4b23      	ldr	r3, [pc, #140]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <RCCEx_PLLSAI2_Config+0x154>)
 8004622:	4013      	ands	r3, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6892      	ldr	r2, [r2, #8]
 8004628:	0211      	lsls	r1, r2, #8
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	06d2      	lsls	r2, r2, #27
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6852      	ldr	r2, [r2, #4]
 8004636:	3a01      	subs	r2, #1
 8004638:	0112      	lsls	r2, r2, #4
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	491a      	ldr	r1, [pc, #104]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 8004644:	4313      	orrs	r3, r2
 8004646:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004648:	4b18      	ldr	r3, [pc, #96]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fc ff3e 	bl	80014d4 <HAL_GetTick>
 8004658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800465a:	e00f      	b.n	800467c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800465c:	f7fc ff3a 	bl	80014d4 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d908      	bls.n	800467c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800467a:	e006      	b.n	800468a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0e9      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x100>
 8004688:	e000      	b.n	800468c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800468a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	4904      	ldr	r1, [pc, #16]	; (80046ac <RCCEx_PLLSAI2_Config+0x150>)
 800469c:	4313      	orrs	r3, r2
 800469e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	07ff800c 	.word	0x07ff800c

080046b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d05c      	beq.n	8004780 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fc76 	bl	8000fcc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e8:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RTC_Init+0xd8>)
 80046ea:	22ca      	movs	r2, #202	; 0xca
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24
 80046ee:	4b27      	ldr	r3, [pc, #156]	; (800478c <HAL_RTC_Init+0xd8>)
 80046f0:	2253      	movs	r2, #83	; 0x53
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f871 	bl	80047dc <RTC_EnterInitMode>
 80046fa:	4603      	mov	r3, r0
 80046fc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d133      	bne.n	800476c <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004704:	4b21      	ldr	r3, [pc, #132]	; (800478c <HAL_RTC_Init+0xd8>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_RTC_Init+0xd8>)
 800470a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800470e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004712:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RTC_Init+0xd8>)
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	4319      	orrs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	430b      	orrs	r3, r1
 8004728:	4918      	ldr	r1, [pc, #96]	; (800478c <HAL_RTC_Init+0xd8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	4914      	ldr	r1, [pc, #80]	; (800478c <HAL_RTC_Init+0xd8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f880 	bl	8004844 <RTC_ExitInitMode>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <HAL_RTC_Init+0xd8>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a19      	ldr	r1, [r3, #32]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4319      	orrs	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	430b      	orrs	r3, r1
 8004766:	4909      	ldr	r1, [pc, #36]	; (800478c <HAL_RTC_Init+0xd8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <HAL_RTC_Init+0xd8>)
 800476e:	22ff      	movs	r2, #255	; 0xff
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40002800 	.word	0x40002800

08004790 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <HAL_RTC_WaitForSynchro+0x48>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_RTC_WaitForSynchro+0x48>)
 800479e:	f023 0320 	bic.w	r3, r3, #32
 80047a2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80047a4:	f7fc fe96 	bl	80014d4 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047aa:	e009      	b.n	80047c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ac:	f7fc fe92 	bl	80014d4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ba:	d901      	bls.n	80047c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e006      	b.n	80047ce <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RTC_WaitForSynchro+0x48>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40002800 	.word	0x40002800

080047dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <RTC_EnterInitMode+0x64>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d120      	bne.n	8004836 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <RTC_EnterInitMode+0x64>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a11      	ldr	r2, [pc, #68]	; (8004840 <RTC_EnterInitMode+0x64>)
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004800:	f7fc fe68 	bl	80014d4 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004806:	e00d      	b.n	8004824 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004808:	f7fc fe64 	bl	80014d4 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004816:	d905      	bls.n	8004824 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2203      	movs	r2, #3
 8004820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <RTC_EnterInitMode+0x64>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <RTC_EnterInitMode+0x5a>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d1e8      	bne.n	8004808 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40002800 	.word	0x40002800

08004844 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <RTC_ExitInitMode+0x78>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <RTC_ExitInitMode+0x78>)
 8004856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <RTC_ExitInitMode+0x78>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10c      	bne.n	8004882 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ff91 	bl	8004790 <HAL_RTC_WaitForSynchro>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01e      	beq.n	80048b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2203      	movs	r2, #3
 8004878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e017      	b.n	80048b2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004882:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <RTC_ExitInitMode+0x78>)
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <RTC_ExitInitMode+0x78>)
 8004888:	f023 0320 	bic.w	r3, r3, #32
 800488c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ff7e 	bl	8004790 <HAL_RTC_WaitForSynchro>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2203      	movs	r2, #3
 800489e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <RTC_ExitInitMode+0x78>)
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	4a04      	ldr	r2, [pc, #16]	; (80048bc <RTC_ExitInitMode+0x78>)
 80048ac:	f043 0320 	orr.w	r3, r3, #32
 80048b0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40002800 	.word	0x40002800

080048c0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	490f      	ldr	r1, [pc, #60]	; (8004910 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	490c      	ldr	r1, [pc, #48]	; (8004914 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	430b      	orrs	r3, r1
 80048fa:	4906      	ldr	r1, [pc, #24]	; (8004914 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40002800 	.word	0x40002800
 8004914:	40003400 	.word	0x40003400

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e049      	b.n	80049be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fc fb82 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 fd2c 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e04f      	b.n	8004a80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <HAL_TIM_Base_Start_IT+0xc4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01d      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x76>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d018      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x76>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x76>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1e      	ldr	r2, [pc, #120]	; (8004a94 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x76>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x76>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x76>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d115      	bne.n	8004a6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	d015      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0xb4>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a56:	d011      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a68:	e008      	b.n	8004a7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e000      	b.n	8004a7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40013400 	.word	0x40013400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	00010007 	.word	0x00010007

08004aa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e049      	b.n	8004b4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f841 	bl	8004b56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f000 fc64 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_PWM_Start+0x24>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e03c      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d109      	bne.n	8004baa <HAL_TIM_PWM_Start+0x3e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e02f      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x58>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e022      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d109      	bne.n	8004bde <HAL_TIM_PWM_Start+0x72>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	e015      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d109      	bne.n	8004bf8 <HAL_TIM_PWM_Start+0x8c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e09c      	b.n	8004d4c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0xb6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	e023      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xc6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	e01b      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xd6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	e013      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xe6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c50:	e00b      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0xf6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c60:	e003      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 ffaa 	bl	8005bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <HAL_TIM_PWM_Start+0x1e8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a34      	ldr	r2, [pc, #208]	; (8004d58 <HAL_TIM_PWM_Start+0x1ec>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <HAL_TIM_PWM_Start+0x1f0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a31      	ldr	r2, [pc, #196]	; (8004d60 <HAL_TIM_PWM_Start+0x1f4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <HAL_TIM_PWM_Start+0x1f8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_PWM_Start+0x142>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_PWM_Start+0x144>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <HAL_TIM_PWM_Start+0x1e8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01d      	beq.n	8004d0a <HAL_TIM_PWM_Start+0x19e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d018      	beq.n	8004d0a <HAL_TIM_PWM_Start+0x19e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <HAL_TIM_PWM_Start+0x1fc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_TIM_PWM_Start+0x19e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <HAL_TIM_PWM_Start+0x200>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_TIM_PWM_Start+0x19e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <HAL_TIM_PWM_Start+0x204>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_TIM_PWM_Start+0x19e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_TIM_PWM_Start+0x1ec>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_TIM_PWM_Start+0x19e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <HAL_TIM_PWM_Start+0x1f0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d115      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <HAL_TIM_PWM_Start+0x208>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b06      	cmp	r3, #6
 8004d1a:	d015      	beq.n	8004d48 <HAL_TIM_PWM_Start+0x1dc>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d22:	d011      	beq.n	8004d48 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	e008      	b.n	8004d48 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e000      	b.n	8004d4a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40013400 	.word	0x40013400
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	00010007 	.word	0x00010007

08004d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d122      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0202 	mvn.w	r2, #2
 8004da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fadc 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 face 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fadf 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d122      	bne.n	8004e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d11b      	bne.n	8004e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0204 	mvn.w	r2, #4
 8004df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fab2 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 faa4 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fab5 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0208 	mvn.w	r2, #8
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2204      	movs	r2, #4
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa88 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa7a 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa8b 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0210 	mvn.w	r2, #16
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa5e 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa50 	bl	8005364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fa61 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0201 	mvn.w	r2, #1
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fb fec6 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d10e      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d107      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ffaa 	bl	8005e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f36:	d10e      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d107      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 ff9d 	bl	8005e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d10e      	bne.n	8004f82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d107      	bne.n	8004f82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fa0f 	bl	80053a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d10e      	bne.n	8004fae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d107      	bne.n	8004fae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f06f 0220 	mvn.w	r2, #32
 8004fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 ff5d 	bl	8005e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e0fd      	b.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x216>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b14      	cmp	r3, #20
 8004fde:	f200 80f0 	bhi.w	80051c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	080051c3 	.word	0x080051c3
 8004ff0:	080051c3 	.word	0x080051c3
 8004ff4:	080051c3 	.word	0x080051c3
 8004ff8:	0800507d 	.word	0x0800507d
 8004ffc:	080051c3 	.word	0x080051c3
 8005000:	080051c3 	.word	0x080051c3
 8005004:	080051c3 	.word	0x080051c3
 8005008:	080050bf 	.word	0x080050bf
 800500c:	080051c3 	.word	0x080051c3
 8005010:	080051c3 	.word	0x080051c3
 8005014:	080051c3 	.word	0x080051c3
 8005018:	080050ff 	.word	0x080050ff
 800501c:	080051c3 	.word	0x080051c3
 8005020:	080051c3 	.word	0x080051c3
 8005024:	080051c3 	.word	0x080051c3
 8005028:	08005141 	.word	0x08005141
 800502c:	080051c3 	.word	0x080051c3
 8005030:	080051c3 	.word	0x080051c3
 8005034:	080051c3 	.word	0x080051c3
 8005038:	08005181 	.word	0x08005181
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa50 	bl	80054e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	619a      	str	r2, [r3, #24]
      break;
 800507a:	e0a3      	b.n	80051c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fac0 	bl	8005608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	619a      	str	r2, [r3, #24]
      break;
 80050bc:	e082      	b.n	80051c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb29 	bl	800571c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0208 	orr.w	r2, r2, #8
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0204 	bic.w	r2, r2, #4
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	61da      	str	r2, [r3, #28]
      break;
 80050fc:	e062      	b.n	80051c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fb91 	bl	800582c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	021a      	lsls	r2, r3, #8
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	61da      	str	r2, [r3, #28]
      break;
 800513e:	e041      	b.n	80051c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fbda 	bl	8005900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0208 	orr.w	r2, r2, #8
 800515a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0204 	bic.w	r2, r2, #4
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800517e:	e021      	b.n	80051c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fc1e 	bl	80059c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80051c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop

080051d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_ConfigClockSource+0x18>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e0b5      	b.n	800535c <HAL_TIM_ConfigClockSource+0x184>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800520e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522c:	d03e      	beq.n	80052ac <HAL_TIM_ConfigClockSource+0xd4>
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005232:	f200 8087 	bhi.w	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523a:	f000 8085 	beq.w	8005348 <HAL_TIM_ConfigClockSource+0x170>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d87f      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b70      	cmp	r3, #112	; 0x70
 8005246:	d01a      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xa6>
 8005248:	2b70      	cmp	r3, #112	; 0x70
 800524a:	d87b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b60      	cmp	r3, #96	; 0x60
 800524e:	d050      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005250:	2b60      	cmp	r3, #96	; 0x60
 8005252:	d877      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b50      	cmp	r3, #80	; 0x50
 8005256:	d03c      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005258:	2b50      	cmp	r3, #80	; 0x50
 800525a:	d873      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d058      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x13a>
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d86f      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d064      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d86b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d060      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d867      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05c      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b10      	cmp	r3, #16
 800527a:	d05a      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800527c:	e062      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6899      	ldr	r1, [r3, #8]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f000 fc7d 	bl	8005b8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	609a      	str	r2, [r3, #8]
      break;
 80052aa:	e04e      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f000 fc66 	bl	8005b8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ce:	609a      	str	r2, [r3, #8]
      break;
 80052d0:	e03b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fbd8 	bl	8005a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2150      	movs	r1, #80	; 0x50
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fc31 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e02b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	461a      	mov	r2, r3
 8005300:	f000 fbf7 	bl	8005af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2160      	movs	r1, #96	; 0x60
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fc21 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005310:	e01b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	461a      	mov	r2, r3
 8005320:	f000 fbb8 	bl	8005a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2140      	movs	r1, #64	; 0x40
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fc11 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005330:	e00b      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f000 fc08 	bl	8005b52 <TIM_ITRx_SetConfig>
        break;
 8005342:	e002      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005348:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a40      	ldr	r2, [pc, #256]	; (80054c8 <TIM_Base_SetConfig+0x114>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d2:	d00f      	beq.n	80053f4 <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a3d      	ldr	r2, [pc, #244]	; (80054cc <TIM_Base_SetConfig+0x118>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3c      	ldr	r2, [pc, #240]	; (80054d0 <TIM_Base_SetConfig+0x11c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3b      	ldr	r2, [pc, #236]	; (80054d4 <TIM_Base_SetConfig+0x120>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3a      	ldr	r2, [pc, #232]	; (80054d8 <TIM_Base_SetConfig+0x124>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2f      	ldr	r2, [pc, #188]	; (80054c8 <TIM_Base_SetConfig+0x114>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01f      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d01b      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <TIM_Base_SetConfig+0x118>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d017      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2b      	ldr	r2, [pc, #172]	; (80054d0 <TIM_Base_SetConfig+0x11c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2a      	ldr	r2, [pc, #168]	; (80054d4 <TIM_Base_SetConfig+0x120>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <TIM_Base_SetConfig+0x124>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a28      	ldr	r2, [pc, #160]	; (80054dc <TIM_Base_SetConfig+0x128>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <TIM_Base_SetConfig+0x12c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <TIM_Base_SetConfig+0x130>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <TIM_Base_SetConfig+0x114>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0xf8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <TIM_Base_SetConfig+0x124>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0xf8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a11      	ldr	r2, [pc, #68]	; (80054dc <TIM_Base_SetConfig+0x128>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0xf8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a10      	ldr	r2, [pc, #64]	; (80054e0 <TIM_Base_SetConfig+0x12c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0xf8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0f      	ldr	r2, [pc, #60]	; (80054e4 <TIM_Base_SetConfig+0x130>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	615a      	str	r2, [r3, #20]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40013400 	.word	0x40013400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40014400 	.word	0x40014400
 80054e4:	40014800 	.word	0x40014800

080054e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 0302 	bic.w	r3, r3, #2
 8005534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a2c      	ldr	r2, [pc, #176]	; (80055f4 <TIM_OC1_SetConfig+0x10c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00f      	beq.n	8005568 <TIM_OC1_SetConfig+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <TIM_OC1_SetConfig+0x110>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00b      	beq.n	8005568 <TIM_OC1_SetConfig+0x80>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <TIM_OC1_SetConfig+0x114>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_OC1_SetConfig+0x80>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a29      	ldr	r2, [pc, #164]	; (8005600 <TIM_OC1_SetConfig+0x118>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC1_SetConfig+0x80>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a28      	ldr	r2, [pc, #160]	; (8005604 <TIM_OC1_SetConfig+0x11c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10c      	bne.n	8005582 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0308 	bic.w	r3, r3, #8
 800556e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <TIM_OC1_SetConfig+0x10c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_OC1_SetConfig+0xc2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <TIM_OC1_SetConfig+0x110>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_OC1_SetConfig+0xc2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <TIM_OC1_SetConfig+0x114>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_OC1_SetConfig+0xc2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <TIM_OC1_SetConfig+0x118>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_OC1_SetConfig+0xc2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <TIM_OC1_SetConfig+0x11c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d111      	bne.n	80055ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0210 	bic.w	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0320 	bic.w	r3, r3, #32
 8005656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a28      	ldr	r2, [pc, #160]	; (8005708 <TIM_OC2_SetConfig+0x100>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC2_SetConfig+0x6c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a27      	ldr	r2, [pc, #156]	; (800570c <TIM_OC2_SetConfig+0x104>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d10d      	bne.n	8005690 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <TIM_OC2_SetConfig+0x100>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00f      	beq.n	80056b8 <TIM_OC2_SetConfig+0xb0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a1c      	ldr	r2, [pc, #112]	; (800570c <TIM_OC2_SetConfig+0x104>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00b      	beq.n	80056b8 <TIM_OC2_SetConfig+0xb0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <TIM_OC2_SetConfig+0x108>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d007      	beq.n	80056b8 <TIM_OC2_SetConfig+0xb0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <TIM_OC2_SetConfig+0x10c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC2_SetConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a19      	ldr	r2, [pc, #100]	; (8005718 <TIM_OC2_SetConfig+0x110>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d113      	bne.n	80056e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800

0800571c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a27      	ldr	r2, [pc, #156]	; (8005818 <TIM_OC3_SetConfig+0xfc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC3_SetConfig+0x6a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a26      	ldr	r2, [pc, #152]	; (800581c <TIM_OC3_SetConfig+0x100>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10d      	bne.n	80057a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800578c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <TIM_OC3_SetConfig+0xfc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_OC3_SetConfig+0xae>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <TIM_OC3_SetConfig+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_OC3_SetConfig+0xae>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <TIM_OC3_SetConfig+0x104>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_OC3_SetConfig+0xae>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <TIM_OC3_SetConfig+0x108>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC3_SetConfig+0xae>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <TIM_OC3_SetConfig+0x10c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d113      	bne.n	80057f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40013400 	.word	0x40013400
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800587a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <TIM_OC4_SetConfig+0xc0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_OC4_SetConfig+0x84>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <TIM_OC4_SetConfig+0xc4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_OC4_SetConfig+0x84>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <TIM_OC4_SetConfig+0xc8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_OC4_SetConfig+0x84>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <TIM_OC4_SetConfig+0xcc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_OC4_SetConfig+0x84>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a14      	ldr	r2, [pc, #80]	; (80058fc <TIM_OC4_SetConfig+0xd0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d109      	bne.n	80058c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <TIM_OC5_SetConfig+0xb4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00f      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <TIM_OC5_SetConfig+0xb8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a15      	ldr	r2, [pc, #84]	; (80059bc <TIM_OC5_SetConfig+0xbc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d007      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <TIM_OC5_SetConfig+0xc0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <TIM_OC5_SetConfig+0xc4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d109      	bne.n	800598e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40013400 	.word	0x40013400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800

080059c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <TIM_OC6_SetConfig+0xb8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00f      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <TIM_OC6_SetConfig+0xbc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <TIM_OC6_SetConfig+0xc0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <TIM_OC6_SetConfig+0xc4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <TIM_OC6_SetConfig+0xc8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d109      	bne.n	8005a58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40013400 	.word	0x40013400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800

08005a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 030a 	bic.w	r3, r3, #10
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0210 	bic.w	r2, r3, #16
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	031b      	lsls	r3, r3, #12
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f043 0307 	orr.w	r3, r3, #7
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2201      	movs	r2, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1a      	ldr	r2, [r3, #32]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	401a      	ands	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1a      	ldr	r2, [r3, #32]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e068      	b.n	8005d02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01d      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d018      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40014000 	.word	0x40014000

08005d28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e087      	b.n	8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d106      	bne.n	8005de0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d126      	bne.n	8005e42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	051b      	lsls	r3, r3, #20
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d106      	bne.n	8005e42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40013400 	.word	0x40013400

08005e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e042      	b.n	8005f3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb f81f 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	; 0x24
 8005ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0201 	bic.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f82c 	bl	8005f44 <UART_SetConfig>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e022      	b.n	8005f3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb20 	bl	8006544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fba7 	bl	8006688 <UART_CheckIdleState>
 8005f3a:	4603      	mov	r3, r0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f48:	b08c      	sub	sp, #48	; 0x30
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4baa      	ldr	r3, [pc, #680]	; (800621c <UART_SetConfig+0x2d8>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a9f      	ldr	r2, [pc, #636]	; (8006220 <UART_SetConfig+0x2dc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fac:	4313      	orrs	r3, r2
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	f023 010f 	bic.w	r1, r3, #15
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a90      	ldr	r2, [pc, #576]	; (8006224 <UART_SetConfig+0x2e0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d125      	bne.n	8006034 <UART_SetConfig+0xf0>
 8005fe8:	4b8f      	ldr	r3, [pc, #572]	; (8006228 <UART_SetConfig+0x2e4>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d81a      	bhi.n	800602c <UART_SetConfig+0xe8>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0xb8>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800600d 	.word	0x0800600d
 8006000:	0800601d 	.word	0x0800601d
 8006004:	08006015 	.word	0x08006015
 8006008:	08006025 	.word	0x08006025
 800600c:	2301      	movs	r3, #1
 800600e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006012:	e116      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006014:	2302      	movs	r3, #2
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601a:	e112      	b.n	8006242 <UART_SetConfig+0x2fe>
 800601c:	2304      	movs	r3, #4
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006022:	e10e      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006024:	2308      	movs	r3, #8
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602a:	e10a      	b.n	8006242 <UART_SetConfig+0x2fe>
 800602c:	2310      	movs	r3, #16
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006032:	e106      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7c      	ldr	r2, [pc, #496]	; (800622c <UART_SetConfig+0x2e8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d138      	bne.n	80060b0 <UART_SetConfig+0x16c>
 800603e:	4b7a      	ldr	r3, [pc, #488]	; (8006228 <UART_SetConfig+0x2e4>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d82d      	bhi.n	80060a8 <UART_SetConfig+0x164>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x110>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006089 	.word	0x08006089
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060a9 	.word	0x080060a9
 8006064:	08006099 	.word	0x08006099
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
 8006074:	08006091 	.word	0x08006091
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060a9 	.word	0x080060a9
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a1 	.word	0x080060a1
 8006088:	2300      	movs	r3, #0
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608e:	e0d8      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006090:	2302      	movs	r3, #2
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e0d4      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609e:	e0d0      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a6:	e0cc      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ae:	e0c8      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5e      	ldr	r2, [pc, #376]	; (8006230 <UART_SetConfig+0x2ec>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d125      	bne.n	8006106 <UART_SetConfig+0x1c2>
 80060ba:	4b5b      	ldr	r3, [pc, #364]	; (8006228 <UART_SetConfig+0x2e4>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060c4:	2b30      	cmp	r3, #48	; 0x30
 80060c6:	d016      	beq.n	80060f6 <UART_SetConfig+0x1b2>
 80060c8:	2b30      	cmp	r3, #48	; 0x30
 80060ca:	d818      	bhi.n	80060fe <UART_SetConfig+0x1ba>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d00a      	beq.n	80060e6 <UART_SetConfig+0x1a2>
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d814      	bhi.n	80060fe <UART_SetConfig+0x1ba>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <UART_SetConfig+0x19a>
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d008      	beq.n	80060ee <UART_SetConfig+0x1aa>
 80060dc:	e00f      	b.n	80060fe <UART_SetConfig+0x1ba>
 80060de:	2300      	movs	r3, #0
 80060e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e4:	e0ad      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060e6:	2302      	movs	r3, #2
 80060e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ec:	e0a9      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060ee:	2304      	movs	r3, #4
 80060f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f4:	e0a5      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060f6:	2308      	movs	r3, #8
 80060f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fc:	e0a1      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060fe:	2310      	movs	r3, #16
 8006100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006104:	e09d      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4a      	ldr	r2, [pc, #296]	; (8006234 <UART_SetConfig+0x2f0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d125      	bne.n	800615c <UART_SetConfig+0x218>
 8006110:	4b45      	ldr	r3, [pc, #276]	; (8006228 <UART_SetConfig+0x2e4>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800611a:	2bc0      	cmp	r3, #192	; 0xc0
 800611c:	d016      	beq.n	800614c <UART_SetConfig+0x208>
 800611e:	2bc0      	cmp	r3, #192	; 0xc0
 8006120:	d818      	bhi.n	8006154 <UART_SetConfig+0x210>
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d00a      	beq.n	800613c <UART_SetConfig+0x1f8>
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d814      	bhi.n	8006154 <UART_SetConfig+0x210>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <UART_SetConfig+0x1f0>
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d008      	beq.n	8006144 <UART_SetConfig+0x200>
 8006132:	e00f      	b.n	8006154 <UART_SetConfig+0x210>
 8006134:	2300      	movs	r3, #0
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613a:	e082      	b.n	8006242 <UART_SetConfig+0x2fe>
 800613c:	2302      	movs	r3, #2
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006142:	e07e      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006144:	2304      	movs	r3, #4
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614a:	e07a      	b.n	8006242 <UART_SetConfig+0x2fe>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006152:	e076      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006154:	2310      	movs	r3, #16
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800615a:	e072      	b.n	8006242 <UART_SetConfig+0x2fe>
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a35      	ldr	r2, [pc, #212]	; (8006238 <UART_SetConfig+0x2f4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d12a      	bne.n	80061bc <UART_SetConfig+0x278>
 8006166:	4b30      	ldr	r3, [pc, #192]	; (8006228 <UART_SetConfig+0x2e4>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006174:	d01a      	beq.n	80061ac <UART_SetConfig+0x268>
 8006176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617a:	d81b      	bhi.n	80061b4 <UART_SetConfig+0x270>
 800617c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006180:	d00c      	beq.n	800619c <UART_SetConfig+0x258>
 8006182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006186:	d815      	bhi.n	80061b4 <UART_SetConfig+0x270>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <UART_SetConfig+0x250>
 800618c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006190:	d008      	beq.n	80061a4 <UART_SetConfig+0x260>
 8006192:	e00f      	b.n	80061b4 <UART_SetConfig+0x270>
 8006194:	2300      	movs	r3, #0
 8006196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619a:	e052      	b.n	8006242 <UART_SetConfig+0x2fe>
 800619c:	2302      	movs	r3, #2
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a2:	e04e      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061a4:	2304      	movs	r3, #4
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061aa:	e04a      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061ac:	2308      	movs	r3, #8
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b2:	e046      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061b4:	2310      	movs	r3, #16
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ba:	e042      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <UART_SetConfig+0x2dc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d13a      	bne.n	800623c <UART_SetConfig+0x2f8>
 80061c6:	4b18      	ldr	r3, [pc, #96]	; (8006228 <UART_SetConfig+0x2e4>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d4:	d01a      	beq.n	800620c <UART_SetConfig+0x2c8>
 80061d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061da:	d81b      	bhi.n	8006214 <UART_SetConfig+0x2d0>
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d00c      	beq.n	80061fc <UART_SetConfig+0x2b8>
 80061e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e6:	d815      	bhi.n	8006214 <UART_SetConfig+0x2d0>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <UART_SetConfig+0x2b0>
 80061ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f0:	d008      	beq.n	8006204 <UART_SetConfig+0x2c0>
 80061f2:	e00f      	b.n	8006214 <UART_SetConfig+0x2d0>
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fa:	e022      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061fc:	2302      	movs	r3, #2
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006202:	e01e      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006204:	2304      	movs	r3, #4
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620a:	e01a      	b.n	8006242 <UART_SetConfig+0x2fe>
 800620c:	2308      	movs	r3, #8
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006212:	e016      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006214:	2310      	movs	r3, #16
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621a:	e012      	b.n	8006242 <UART_SetConfig+0x2fe>
 800621c:	cfff69f3 	.word	0xcfff69f3
 8006220:	40008000 	.word	0x40008000
 8006224:	40013800 	.word	0x40013800
 8006228:	40021000 	.word	0x40021000
 800622c:	40004400 	.word	0x40004400
 8006230:	40004800 	.word	0x40004800
 8006234:	40004c00 	.word	0x40004c00
 8006238:	40005000 	.word	0x40005000
 800623c:	2310      	movs	r3, #16
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4ab0      	ldr	r2, [pc, #704]	; (8006508 <UART_SetConfig+0x5c4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	f040 809b 	bne.w	8006384 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800624e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006252:	2b08      	cmp	r3, #8
 8006254:	d827      	bhi.n	80062a6 <UART_SetConfig+0x362>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x318>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	080062a7 	.word	0x080062a7
 800626c:	08006297 	.word	0x08006297
 8006270:	080062a7 	.word	0x080062a7
 8006274:	080062a7 	.word	0x080062a7
 8006278:	080062a7 	.word	0x080062a7
 800627c:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006280:	f7fd fbfc 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006286:	e014      	b.n	80062b2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7fd fc0c 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800628e:	e010      	b.n	80062b2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b9e      	ldr	r3, [pc, #632]	; (800650c <UART_SetConfig+0x5c8>)
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006294:	e00d      	b.n	80062b2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fd fb3f 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8130 	beq.w	800651a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	4a94      	ldr	r2, [pc, #592]	; (8006510 <UART_SetConfig+0x5cc>)
 80062c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d305      	bcc.n	80062ea <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062f0:	e113      	b.n	800651a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	2200      	movs	r2, #0
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	60fa      	str	r2, [r7, #12]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	4a84      	ldr	r2, [pc, #528]	; (8006510 <UART_SetConfig+0x5cc>)
 8006300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006304:	b29b      	uxth	r3, r3
 8006306:	2200      	movs	r2, #0
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006314:	f7f9 ff8e 	bl	8000234 <__aeabi_uldivmod>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	020b      	lsls	r3, r1, #8
 800632a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800632e:	0202      	lsls	r2, r0, #8
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	6849      	ldr	r1, [r1, #4]
 8006334:	0849      	lsrs	r1, r1, #1
 8006336:	2000      	movs	r0, #0
 8006338:	460c      	mov	r4, r1
 800633a:	4605      	mov	r5, r0
 800633c:	eb12 0804 	adds.w	r8, r2, r4
 8006340:	eb43 0905 	adc.w	r9, r3, r5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	469a      	mov	sl, r3
 800634c:	4693      	mov	fp, r2
 800634e:	4652      	mov	r2, sl
 8006350:	465b      	mov	r3, fp
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7f9 ff6d 	bl	8000234 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4613      	mov	r3, r2
 8006360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006368:	d308      	bcc.n	800637c <UART_SetConfig+0x438>
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006370:	d204      	bcs.n	800637c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e0ce      	b.n	800651a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006382:	e0ca      	b.n	800651a <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638c:	d167      	bne.n	800645e <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 800638e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006392:	2b08      	cmp	r3, #8
 8006394:	d827      	bhi.n	80063e6 <UART_SetConfig+0x4a2>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x458>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063e7 	.word	0x080063e7
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	080063e7 	.word	0x080063e7
 80063b4:	080063e7 	.word	0x080063e7
 80063b8:	080063e7 	.word	0x080063e7
 80063bc:	080063df 	.word	0x080063df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fd fb5c 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063c6:	e014      	b.n	80063f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fd fb6c 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 80063cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ce:	e010      	b.n	80063f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d0:	4b4e      	ldr	r3, [pc, #312]	; (800650c <UART_SetConfig+0x5c8>)
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063d4:	e00d      	b.n	80063f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fd fa9f 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80063da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063dc:	e009      	b.n	80063f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063e4:	e005      	b.n	80063f2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8090 	beq.w	800651a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	4a44      	ldr	r2, [pc, #272]	; (8006510 <UART_SetConfig+0x5cc>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	461a      	mov	r2, r3
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	005a      	lsls	r2, r3, #1
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	441a      	add	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	2b0f      	cmp	r3, #15
 8006426:	d916      	bls.n	8006456 <UART_SetConfig+0x512>
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642e:	d212      	bcs.n	8006456 <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f023 030f 	bic.w	r3, r3, #15
 8006438:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	b29b      	uxth	r3, r3
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	b29a      	uxth	r2, r3
 8006446:	8bfb      	ldrh	r3, [r7, #30]
 8006448:	4313      	orrs	r3, r2
 800644a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	8bfa      	ldrh	r2, [r7, #30]
 8006452:	60da      	str	r2, [r3, #12]
 8006454:	e061      	b.n	800651a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800645c:	e05d      	b.n	800651a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006462:	2b08      	cmp	r3, #8
 8006464:	d827      	bhi.n	80064b6 <UART_SetConfig+0x572>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <UART_SetConfig+0x528>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fd faf4 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006496:	e014      	b.n	80064c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fd fb04 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 800649c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800649e:	e010      	b.n	80064c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b1a      	ldr	r3, [pc, #104]	; (800650c <UART_SetConfig+0x5c8>)
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064a4:	e00d      	b.n	80064c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fd fa37 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80064aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064ac:	e009      	b.n	80064c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064b4:	e005      	b.n	80064c2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064c0:	bf00      	nop
    }

    if (pclk != 0U)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d028      	beq.n	800651a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	4a10      	ldr	r2, [pc, #64]	; (8006510 <UART_SetConfig+0x5cc>)
 80064ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d2:	461a      	mov	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	441a      	add	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2b0f      	cmp	r3, #15
 80064f2:	d90f      	bls.n	8006514 <UART_SetConfig+0x5d0>
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fa:	d20b      	bcs.n	8006514 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	e009      	b.n	800651a <UART_SetConfig+0x5d6>
 8006506:	bf00      	nop
 8006508:	40008000 	.word	0x40008000
 800650c:	00f42400 	.word	0x00f42400
 8006510:	08006ed4 	.word	0x08006ed4
      }
      else
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2201      	movs	r2, #1
 800651e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2201      	movs	r2, #1
 8006526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2200      	movs	r2, #0
 800652e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2200      	movs	r2, #0
 8006534:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006536:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800653a:	4618      	mov	r0, r3
 800653c:	3730      	adds	r7, #48	; 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01a      	beq.n	800665a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006642:	d10a      	bne.n	800665a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af02      	add	r7, sp, #8
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006698:	f7fa ff1c 	bl	80014d4 <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d10e      	bne.n	80066ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f82f 	bl	800671e <UART_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e025      	b.n	8006716 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d10e      	bne.n	80066f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f819 	bl	800671e <UART_WaitOnFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e00f      	b.n	8006716 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	4613      	mov	r3, r2
 800672c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672e:	e062      	b.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d05e      	beq.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006738:	f7fa fecc 	bl	80014d4 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	429a      	cmp	r2, r3
 8006746:	d302      	bcc.n	800674e <UART_WaitOnFlagUntilTimeout+0x30>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11d      	bne.n	800678a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800675c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e045      	b.n	8006816 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02e      	beq.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a6:	d126      	bne.n	80067f6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e00f      	b.n	8006816 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	bf0c      	ite	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	2300      	movne	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	429a      	cmp	r2, r3
 8006812:	d08d      	beq.n	8006730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_UARTEx_DisableFifoMode+0x16>
 8006830:	2302      	movs	r3, #2
 8006832:	e027      	b.n	8006884 <HAL_UARTEx_DisableFifoMode+0x66>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	; 0x24
 8006840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006862:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e02d      	b.n	8006904 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f84f 	bl	8006988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006920:	2302      	movs	r3, #2
 8006922:	e02d      	b.n	8006980 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2224      	movs	r2, #36	; 0x24
 8006930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f811 	bl	8006988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069a8:	e031      	b.n	8006a0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069aa:	2308      	movs	r3, #8
 80069ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069ae:	2308      	movs	r3, #8
 80069b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	0e5b      	lsrs	r3, r3, #25
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	0f5b      	lsrs	r3, r3, #29
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	7b3a      	ldrb	r2, [r7, #12]
 80069d6:	4911      	ldr	r1, [pc, #68]	; (8006a1c <UARTEx_SetNbDataToProcess+0x94>)
 80069d8:	5c8a      	ldrb	r2, [r1, r2]
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	7b3a      	ldrb	r2, [r7, #12]
 80069e0:	490f      	ldr	r1, [pc, #60]	; (8006a20 <UARTEx_SetNbDataToProcess+0x98>)
 80069e2:	5c8a      	ldrb	r2, [r1, r2]
 80069e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	7b7a      	ldrb	r2, [r7, #13]
 80069f4:	4909      	ldr	r1, [pc, #36]	; (8006a1c <UARTEx_SetNbDataToProcess+0x94>)
 80069f6:	5c8a      	ldrb	r2, [r1, r2]
 80069f8:	fb02 f303 	mul.w	r3, r2, r3
 80069fc:	7b7a      	ldrb	r2, [r7, #13]
 80069fe:	4908      	ldr	r1, [pc, #32]	; (8006a20 <UARTEx_SetNbDataToProcess+0x98>)
 8006a00:	5c8a      	ldrb	r2, [r1, r2]
 8006a02:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	08006eec 	.word	0x08006eec
 8006a20:	08006ef4 	.word	0x08006ef4

08006a24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b08b      	sub	sp, #44	; 0x2c
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	fa93 f3a3 	rbit	r3, r3
 8006a3e:	613b      	str	r3, [r7, #16]
  return result;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006a4a:	2320      	movs	r3, #32
 8006a4c:	e003      	b.n	8006a56 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	fab3 f383 	clz	r3, r3
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	2103      	movs	r1, #3
 8006a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	401a      	ands	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	fa93 f3a3 	rbit	r3, r3
 8006a6c:	61fb      	str	r3, [r7, #28]
  return result;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006a78:	2320      	movs	r3, #32
 8006a7a:	e003      	b.n	8006a84 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	fab3 f383 	clz	r3, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	601a      	str	r2, [r3, #0]
}
 8006a92:	bf00      	nop
 8006a94:	372c      	adds	r7, #44	; 0x2c
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	431a      	orrs	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	605a      	str	r2, [r3, #4]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b08b      	sub	sp, #44	; 0x2c
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	fa93 f3a3 	rbit	r3, r3
 8006ae8:	613b      	str	r3, [r7, #16]
  return result;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006af4:	2320      	movs	r3, #32
 8006af6:	e003      	b.n	8006b00 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	2103      	movs	r1, #3
 8006b04:	fa01 f303 	lsl.w	r3, r1, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	fa93 f3a3 	rbit	r3, r3
 8006b16:	61fb      	str	r3, [r7, #28]
  return result;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006b22:	2320      	movs	r3, #32
 8006b24:	e003      	b.n	8006b2e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	fab3 f383 	clz	r3, r3
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	431a      	orrs	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006b3c:	bf00      	nop
 8006b3e:	372c      	adds	r7, #44	; 0x2c
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b08b      	sub	sp, #44	; 0x2c
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	fa93 f3a3 	rbit	r3, r3
 8006b62:	613b      	str	r3, [r7, #16]
  return result;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006b6e:	2320      	movs	r3, #32
 8006b70:	e003      	b.n	8006b7a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	fab3 f383 	clz	r3, r3
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	2103      	movs	r1, #3
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	401a      	ands	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	fa93 f3a3 	rbit	r3, r3
 8006b90:	61fb      	str	r3, [r7, #28]
  return result;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	e003      	b.n	8006ba8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	fab3 f383 	clz	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	60da      	str	r2, [r3, #12]
}
 8006bb6:	bf00      	nop
 8006bb8:	372c      	adds	r7, #44	; 0x2c
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b08b      	sub	sp, #44	; 0x2c
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1a      	ldr	r2, [r3, #32]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	fa93 f3a3 	rbit	r3, r3
 8006bdc:	613b      	str	r3, [r7, #16]
  return result;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006be8:	2320      	movs	r3, #32
 8006bea:	e003      	b.n	8006bf4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	fab3 f383 	clz	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	210f      	movs	r1, #15
 8006bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	401a      	ands	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	fa93 f3a3 	rbit	r3, r3
 8006c0a:	61fb      	str	r3, [r7, #28]
  return result;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006c16:	2320      	movs	r3, #32
 8006c18:	e003      	b.n	8006c22 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	fab3 f383 	clz	r3, r3
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006c30:	bf00      	nop
 8006c32:	372c      	adds	r7, #44	; 0x2c
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b08b      	sub	sp, #44	; 0x2c
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	fa93 f3a3 	rbit	r3, r3
 8006c58:	613b      	str	r3, [r7, #16]
  return result;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006c64:	2320      	movs	r3, #32
 8006c66:	e003      	b.n	8006c70 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	fab3 f383 	clz	r3, r3
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	210f      	movs	r1, #15
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	fa93 f3a3 	rbit	r3, r3
 8006c88:	61fb      	str	r3, [r7, #28]
  return result;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006c94:	2320      	movs	r3, #32
 8006c96:	e003      	b.n	8006ca0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	fab3 f383 	clz	r3, r3
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006cae:	bf00      	nop
 8006cb0:	372c      	adds	r7, #44	; 0x2c
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	fa93 f3a3 	rbit	r3, r3
 8006cd0:	60fb      	str	r3, [r7, #12]
  return result;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <LL_GPIO_Init+0x26>
    return 32U;
 8006cdc:	2320      	movs	r3, #32
 8006cde:	e003      	b.n	8006ce8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	fab3 f383 	clz	r3, r3
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006cea:	e047      	b.n	8006d7c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d039      	beq.n	8006d76 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d003      	beq.n	8006d12 <LL_GPIO_Init+0x58>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d10d      	bne.n	8006d2e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	461a      	mov	r2, r3
 8006d18:	69b9      	ldr	r1, [r7, #24]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fed7 	bl	8006ace <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	461a      	mov	r2, r3
 8006d26:	69b9      	ldr	r1, [r7, #24]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff feb8 	bl	8006a9e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	461a      	mov	r2, r3
 8006d34:	69b9      	ldr	r1, [r7, #24]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff ff06 	bl	8006b48 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d111      	bne.n	8006d68 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2bff      	cmp	r3, #255	; 0xff
 8006d48:	d807      	bhi.n	8006d5a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	69b9      	ldr	r1, [r7, #24]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff ff35 	bl	8006bc2 <LL_GPIO_SetAFPin_0_7>
 8006d58:	e006      	b.n	8006d68 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff ff6a 	bl	8006c3c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fe57 	bl	8006a24 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	fa22 f303 	lsr.w	r3, r2, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1b0      	bne.n	8006cec <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d9c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006da0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	43db      	mvns	r3, r3
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4013      	ands	r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006dca:	b084      	sub	sp, #16
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	f107 0014 	add.w	r0, r7, #20
 8006dd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	b004      	add	sp, #16
 8006e0a:	4770      	bx	lr

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4d0d      	ldr	r5, [pc, #52]	; (8006e44 <__libc_init_array+0x38>)
 8006e10:	2600      	movs	r6, #0
 8006e12:	4c0d      	ldr	r4, [pc, #52]	; (8006e48 <__libc_init_array+0x3c>)
 8006e14:	1b64      	subs	r4, r4, r5
 8006e16:	10a4      	asrs	r4, r4, #2
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4d0b      	ldr	r5, [pc, #44]	; (8006e4c <__libc_init_array+0x40>)
 8006e1e:	2600      	movs	r6, #0
 8006e20:	4c0b      	ldr	r4, [pc, #44]	; (8006e50 <__libc_init_array+0x44>)
 8006e22:	f000 f81f 	bl	8006e64 <_init>
 8006e26:	1b64      	subs	r4, r4, r5
 8006e28:	10a4      	asrs	r4, r4, #2
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e34:	3601      	adds	r6, #1
 8006e36:	4798      	blx	r3
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3e:	3601      	adds	r6, #1
 8006e40:	4798      	blx	r3
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08006f04 	.word	0x08006f04
 8006e48:	08006f04 	.word	0x08006f04
 8006e4c:	08006f04 	.word	0x08006f04
 8006e50:	08006f08 	.word	0x08006f08

08006e54 <memset>:
 8006e54:	4402      	add	r2, r0
 8006e56:	4603      	mov	r3, r0
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d100      	bne.n	8006e5e <memset+0xa>
 8006e5c:	4770      	bx	lr
 8006e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e62:	e7f9      	b.n	8006e58 <memset+0x4>

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
