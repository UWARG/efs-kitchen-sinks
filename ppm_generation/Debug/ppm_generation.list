
ppm_generation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f24  08006f24  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f2c  08006f2c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000034  08006f68  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08006f68  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de4f  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003803  00000000  00000000  0003deb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  000416c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001948  00000000  00000000  00043160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e63a  00000000  00000000  00044aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0ac  00000000  00000000  000730e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001316fb  00000000  00000000  0008f18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c0889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000737c  00000000  00000000  001c08dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000034 	.word	0x20000034
 8000210:	00000000 	.word	0x00000000
 8000214:	08006e8c 	.word	0x08006e8c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000038 	.word	0x20000038
 8000230:	08006e8c 	.word	0x08006e8c

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 ff35 	bl	8001426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f828 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 faa4 	bl	8000b0c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f886 	bl	80006d4 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f8fa 	bl	80007c0 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005cc:	f000 f946 	bl	800085c <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d0:	f000 fa3e 	bl	8000a50 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d4:	f000 fa72 	bl	8000abc <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80005d8:	f000 f98a 	bl	80008f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __init__();
 80005dc:	f000 fb6a 	bl	8000cb4 <__init__>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e0:	2100      	movs	r1, #0
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <main+0x54>)
 80005e4:	f004 fad6 	bl	8004b94 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <main+0x54>)
 80005ea:	f004 fa01 	bl	80049f0 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_value);
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <main+0x54>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <main+0x58>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ppm_arr_gen();
 80005f8:	f000 fba8 	bl	8000d4c <ppm_arr_gen>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr_value);
 80005fc:	4b02      	ldr	r3, [pc, #8]	; (8000608 <main+0x54>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a02      	ldr	r2, [pc, #8]	; (800060c <main+0x58>)
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
	  ppm_arr_gen();
 8000606:	e7f7      	b.n	80005f8 <main+0x44>
 8000608:	200001a4 	.word	0x200001a4
 800060c:	20000050 	.word	0x20000050

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b098      	sub	sp, #96	; 0x60
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2248      	movs	r2, #72	; 0x48
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fc2c 	bl	8006e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f002 fae9 	bl	8002c0c <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 fb32 	bl	8000ca8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f002 fac4 	bl	8002bd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xc0>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064e:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xc0>)
 8000650:	f023 0318 	bic.w	r3, r3, #24
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000658:	2334      	movs	r3, #52	; 0x34
 800065a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2381      	movs	r3, #129	; 0x81
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800066c:	2360      	movs	r3, #96	; 0x60
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000674:	2301      	movs	r3, #1
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 800067c:	2318      	movs	r3, #24
 800067e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000680:	2307      	movs	r3, #7
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fb4b 	bl	8002d2c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800069c:	f000 fb04 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2303      	movs	r3, #3
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f819 	bl	80036f0 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006c4:	f000 faf0 	bl	8000ca8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3760      	adds	r7, #96	; 0x60
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f6:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <MX_ADC1_Init+0xe0>)
 80006f8:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <MX_ADC1_Init+0xe4>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <MX_ADC1_Init+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000716:	2204      	movs	r2, #4
 8000718:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000728:	2201      	movs	r2, #1
 800072a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000758:	f001 f87c 	bl	8001854 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000762:	f000 faa1 	bl	8000ca8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000772:	f001 fdd1 	bl	8002318 <HAL_ADCEx_MultiModeConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800077c:	f000 fa94 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_ADC1_Init+0xe8>)
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2306      	movs	r3, #6
 8000786:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078c:	237f      	movs	r3, #127	; 0x7f
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000790:	2304      	movs	r3, #4
 8000792:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800079e:	f001 f9ab 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007a8:	f000 fa7e 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000084 	.word	0x20000084
 80007b8:	42028000 	.word	0x42028000
 80007bc:	0c900008 	.word	0x0c900008

080007c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007c6:	4a23      	ldr	r2, [pc, #140]	; (8000854 <MX_LPUART1_UART_Init+0x94>)
 80007c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <MX_LPUART1_UART_Init+0x98>)
 80007ce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007e4:	220c      	movs	r2, #12
 80007e6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 8000808:	f005 fb60 	bl	8005ecc <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000812:	f000 fa49 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 800081a:	f006 f84d 	bl	80068b8 <HAL_UARTEx_SetTxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000824:	f000 fa40 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 800082c:	f006 f882 	bl	8006934 <HAL_UARTEx_SetRxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000836:	f000 fa37 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_LPUART1_UART_Init+0x90>)
 800083c:	f006 f803 	bl	8006846 <HAL_UARTEx_DisableFifoMode>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000846:	f000 fa2f 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000ec 	.word	0x200000ec
 8000854:	40008000 	.word	0x40008000
 8000858:	00033324 	.word	0x00033324

0800085c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_RTC_Init+0x8c>)
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <MX_RTC_Init+0x90>)
 8000876:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_RTC_Init+0x8c>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_RTC_Init+0x8c>)
 8000880:	227f      	movs	r2, #127	; 0x7f
 8000882:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_RTC_Init+0x8c>)
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_RTC_Init+0x8c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_RTC_Init+0x8c>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_RTC_Init+0x8c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_RTC_Init+0x8c>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_RTC_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008aa:	480f      	ldr	r0, [pc, #60]	; (80008e8 <MX_RTC_Init+0x8c>)
 80008ac:	f003 ff16 	bl	80046dc <HAL_RTC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80008b6:	f000 f9f7 	bl	8000ca8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_RTC_Init+0x8c>)
 80008d0:	f004 f80a 	bl	80048e8 <HAL_RTCEx_PrivilegeModeSet>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80008da:	f000 f9e5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000017c 	.word	0x2000017c
 80008ec:	40002800 	.word	0x40002800

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2234      	movs	r2, #52	; 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f006 faa6 	bl	8006e7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000932:	4a46      	ldr	r2, [pc, #280]	; (8000a4c <MX_TIM1_Init+0x15c>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8000936:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000938:	220e      	movs	r2, #14
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <MX_TIM1_Init+0x158>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8000942:	4b41      	ldr	r3, [pc, #260]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000944:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <MX_TIM1_Init+0x158>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095c:	483a      	ldr	r0, [pc, #232]	; (8000a48 <MX_TIM1_Init+0x158>)
 800095e:	f003 ffef 	bl	8004940 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f99e 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000976:	4619      	mov	r1, r3
 8000978:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_TIM1_Init+0x158>)
 800097a:	f004 fc41 	bl	8005200 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 f990 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000988:	482f      	ldr	r0, [pc, #188]	; (8000a48 <MX_TIM1_Init+0x158>)
 800098a:	f004 f8a1 	bl	8004ad0 <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000994:	f000 f988 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a8:	4619      	mov	r1, r3
 80009aa:	4827      	ldr	r0, [pc, #156]	; (8000a48 <MX_TIM1_Init+0x158>)
 80009ac:	f005 f948 	bl	8005c40 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009b6:	f000 f977 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	; 0x60
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <MX_TIM1_Init+0x158>)
 80009e0:	f004 fafe 	bl	8004fe0 <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009ea:	f000 f95d 	bl	8000ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000a2c:	f005 f990 	bl	8005d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000a36:	f000 f937 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM1_Init+0x158>)
 8000a3c:	f000 fb3e 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3770      	adds	r7, #112	; 0x70
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001a4 	.word	0x200001a4
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a66:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a6a:	f7ff fd8b 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f7ff fd70 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fd6d 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a80:	2303      	movs	r3, #3
 8000a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_UCPD1_Init+0x64>)
 8000a8e:	f006 f928 	bl	8006ce2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_UCPD1_Init+0x68>)
 8000aa6:	f006 f91c 	bl	8006ce2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	42020400 	.word	0x42020400
 8000ab8:	42020000 	.word	0x42020000

08000abc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <MX_USB_PCD_Init+0x4c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USB_PCD_Init+0x48>)
 8000af2:	f001 ff5d 	bl	80029b0 <HAL_PCD_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000afc:	f000 f8d4 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200001f0 	.word	0x200001f0
 8000b08:	4000d400 	.word	0x4000d400

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a3e      	ldr	r2, [pc, #248]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a38      	ldr	r2, [pc, #224]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000b82:	f002 f89f 	bl	8002cc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0x12c>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	4826      	ldr	r0, [pc, #152]	; (8000c3c <MX_GPIO_Init+0x130>)
 8000ba4:	f001 feec 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4824      	ldr	r0, [pc, #144]	; (8000c40 <MX_GPIO_Init+0x134>)
 8000bb0:	f001 fee6 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	21a0      	movs	r1, #160	; 0xa0
 8000bb8:	4822      	ldr	r0, [pc, #136]	; (8000c44 <MX_GPIO_Init+0x138>)
 8000bba:	f001 fee1 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_GPIO_Init+0x13c>)
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481c      	ldr	r0, [pc, #112]	; (8000c44 <MX_GPIO_Init+0x138>)
 8000bd4:	f001 fd54 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_GPIO_Init+0x130>)
 8000bf0:	f001 fd46 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_GPIO_Init+0x134>)
 8000c0e:	f001 fd37 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c12:	23a0      	movs	r3, #160	; 0xa0
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x138>)
 8000c2a:	f001 fd29 	bl	8002680 <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	42020800 	.word	0x42020800
 8000c40:	42020000 	.word	0x42020000
 8000c44:	42020400 	.word	0x42020400
 8000c48:	10110000 	.word	0x10110000

08000c4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	ppm_arr_gen();
 8000c54:	f000 f87a 	bl	8000d4c <ppm_arr_gen>
  // Check which version of the timer triggered this callback and toggle LED
	__HAL_TIM_SET_AUTORELOAD(&htim1, time_output[index_count]);
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4910      	ldr	r1, [pc, #64]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c74:	60d3      	str	r3, [r2, #12]
	if(index_count == channel_used){
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	d105      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x3e>
			index_count = 0;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
			ppm_arr_gen();
 8000c84:	f000 f862 	bl	8000d4c <ppm_arr_gen>
	} else {
		index_count++;
	}
}
 8000c88:	e004      	b.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x48>
		index_count++;
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a02      	ldr	r2, [pc, #8]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000080 	.word	0x20000080
 8000ca0:	200001a4 	.word	0x200001a4
 8000ca4:	20000054 	.word	0x20000054

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <__init__>:
#include "ppm.h"

void __init__(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	counter = BASE_FREQUENCY / (PSC_VALUE + CORRECTION);//calculate the frequency used
 8000cb8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000d00 <__init__+0x4c>
 8000cbc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <__init__+0x50>)
 8000cc6:	edc3 7a00 	vstr	s15, [r3]
	counter_to_microsec = counter / SEC_TO_MICROSEC;//calculate the number of micro sec per tick
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <__init__+0x50>)
 8000ccc:	ed93 7a00 	vldr	s14, [r3]
 8000cd0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000d08 <__init__+0x54>
 8000cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__init__+0x58>)
 8000cda:	edc3 7a00 	vstr	s15, [r3]
	ccr_value = (uint32_t)(counter_to_microsec * PULSE_WIDTH);//ccr_Value is a constant
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <__init__+0x58>)
 8000ce0:	edd3 7a00 	vldr	s15, [r3]
 8000ce4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000d10 <__init__+0x5c>
 8000ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf0:	ee17 2a90 	vmov	r2, s15
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <__init__+0x60>)
 8000cf6:	601a      	str	r2, [r3, #0]
	ppm_arr_gen();
 8000cf8:	f000 f828 	bl	8000d4c <ppm_arr_gen>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	4c371b00 	.word	0x4c371b00
 8000d04:	200004e4 	.word	0x200004e4
 8000d08:	49742400 	.word	0x49742400
 8000d0c:	200004e8 	.word	0x200004e8
 8000d10:	439b0000 	.word	0x439b0000
 8000d14:	200004ec 	.word	0x200004ec

08000d18 <microsecs_to_counter>:

uint32_t microsecs_to_counter(uint32_t time_length) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	return (uint32_t)(time_length * counter_to_microsec);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <microsecs_to_counter+0x30>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d38:	ee17 3a90 	vmov	r3, s15
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	200004e8 	.word	0x200004e8

08000d4c <ppm_arr_gen>:


void ppm_arr_gen(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	for(int i = 0; i < channel_used; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e01b      	b.n	8000d90 <ppm_arr_gen+0x44>
		time_output[i] = microsecs_to_counter((uint32_t)(MIN_PULSE_WIDTH+user_input[i]*DOWN_INTERVAL));
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <ppm_arr_gen+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000dac <ppm_arr_gen+0x60>
 8000d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000db0 <ppm_arr_gen+0x64>
 8000d70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d78:	ee17 0a90 	vmov	r0, s15
 8000d7c:	f7ff ffcc 	bl	8000d18 <microsecs_to_counter>
 8000d80:	4602      	mov	r2, r0
 8000d82:	490c      	ldr	r1, [pc, #48]	; (8000db4 <ppm_arr_gen+0x68>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < channel_used; i++) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	dde0      	ble.n	8000d58 <ppm_arr_gen+0xc>
	}
	time_output[channel_used] = calc_reset_pause();
 8000d96:	f000 f80f 	bl	8000db8 <calc_reset_pause>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <ppm_arr_gen+0x68>)
 8000d9e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	44728000 	.word	0x44728000
 8000db0:	442f0000 	.word	0x442f0000
 8000db4:	200004f0 	.word	0x200004f0

08000db8 <calc_reset_pause>:

uint32_t calc_reset_pause(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
	float remaining_out = (float)channel_used;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <calc_reset_pause+0x70>)
 8000dc0:	607b      	str	r3, [r7, #4]
	float summation;
	for(int i = 0; i < channel_used; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	e00e      	b.n	8000de6 <calc_reset_pause+0x2e>
		summation = summation + user_input[i];
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <calc_reset_pause+0x74>)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ddc:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < channel_used; i++) {
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2b09      	cmp	r3, #9
 8000dea:	dded      	ble.n	8000dc8 <calc_reset_pause+0x10>
	}

	remaining_out = remaining_out - summation;
 8000dec:	ed97 7a01 	vldr	s14, [r7, #4]
 8000df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df8:	edc7 7a01 	vstr	s15, [r7, #4]

	return microsecs_to_counter((uint32_t)(remaining_out*DOWN_INTERVAL+MIN_RESET_PULSE));
 8000dfc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e30 <calc_reset_pause+0x78>
 8000e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e08:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000e34 <calc_reset_pause+0x7c>
 8000e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e14:	ee17 0a90 	vmov	r0, s15
 8000e18:	f7ff ff7e 	bl	8000d18 <microsecs_to_counter>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	41200000 	.word	0x41200000
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	44728000 	.word	0x44728000
 8000e34:	453b8000 	.word	0x453b8000

08000e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x44>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x44>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x44>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ae      	sub	sp, #184	; 0xb8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2294      	movs	r2, #148	; 0x94
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 ffeb 	bl	8006e7c <memset>
  if(hadc->Instance==ADC1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_ADC_MspInit+0xa8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d137      	bne.n	8000f20 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000eb6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fef4 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ece:	f7ff feeb 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f02:	2304      	movs	r3, #4
 8000f04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_ADC_MspInit+0xb0>)
 8000f1c:	f001 fbb0 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	37b8      	adds	r7, #184	; 0xb8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	42028000 	.word	0x42028000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42020800 	.word	0x42020800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ae      	sub	sp, #184	; 0xb8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2294      	movs	r2, #148	; 0x94
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 ff91 	bl	8006e7c <memset>
  if(huart->Instance==LPUART1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13d      	bne.n	8000fe0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f64:	2320      	movs	r3, #32
 8000f66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fe9d 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff fe94 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000fb0:	f001 fe88 	bl	8002cc4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000fb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0xbc>)
 8000fdc:	f001 fb50 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	37b8      	adds	r7, #184	; 0xb8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40008000 	.word	0x40008000
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	42021800 	.word	0x42021800

08000ff4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0a8      	sub	sp, #160	; 0xa0
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2294      	movs	r2, #148	; 0x94
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f005 ff39 	bl	8006e7c <memset>
  if(hrtc->Instance==RTC)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_RTC_MspInit+0x74>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d124      	bne.n	800105e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800101a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fe42 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001032:	f7ff fe39 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_RTC_MspInit+0x78>)
 8001038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_RTC_MspInit+0x78>)
 800103e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_RTC_MspInit+0x78>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_RTC_MspInit+0x78>)
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_RTC_MspInit+0x78>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	37a0      	adds	r7, #160	; 0xa0
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40002800 	.word	0x40002800
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 8001088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	202a      	movs	r0, #42	; 0x2a
 80010a0:	f001 fab9 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010a4:	202a      	movs	r0, #42	; 0x2a
 80010a6:	f001 fad0 	bl	800264a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_TIM_MspPostInit+0x64>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d11c      	bne.n	8001118 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_TIM_MspPostInit+0x68>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_TIM_MspPostInit+0x68>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_TIM_MspPostInit+0x68>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_TIM_MspPostInit+0x6c>)
 8001114:	f001 fab4 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40012c00 	.word	0x40012c00
 8001124:	40021000 	.word	0x40021000
 8001128:	42021000 	.word	0x42021000

0800112c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0ae      	sub	sp, #184	; 0xb8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2294      	movs	r2, #148	; 0x94
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fe95 	bl	8006e7c <memset>
  if(hpcd->Instance==USB)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_PCD_MspInit+0xb4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d13d      	bne.n	80011d8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fd9f 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001178:	f7ff fd96 	bl	8000ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_PCD_MspInit+0xb8>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_PCD_MspInit+0xb8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_PCD_MspInit+0xb8>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001194:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011ae:	230a      	movs	r3, #10
 80011b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b8:	4619      	mov	r1, r3
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <HAL_PCD_MspInit+0xbc>)
 80011bc:	f001 fa60 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_PCD_MspInit+0xb8>)
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_PCD_MspInit+0xb8>)
 80011c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ca:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_PCD_MspInit+0xb8>)
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	37b8      	adds	r7, #184	; 0xb8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	4000d400 	.word	0x4000d400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	42020000 	.word	0x42020000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f94c 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM1_UP_IRQHandler+0x10>)
 8001246:	f003 fdab 	bl	8004da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001a4 	.word	0x200001a4

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800127e:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <SystemCoreClockUpdate+0x144>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d107      	bne.n	800129a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800128a:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <SystemCoreClockUpdate+0x144>)
 800128c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e005      	b.n	80012a6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <SystemCoreClockUpdate+0x144>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80012a6:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <SystemCoreClockUpdate+0x148>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <SystemCoreClockUpdate+0x144>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d866      	bhi.n	800138a <SystemCoreClockUpdate+0x112>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <SystemCoreClockUpdate+0x4c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012f9 	.word	0x080012f9
 80012c8:	0800138b 	.word	0x0800138b
 80012cc:	0800138b 	.word	0x0800138b
 80012d0:	0800138b 	.word	0x0800138b
 80012d4:	08001301 	.word	0x08001301
 80012d8:	0800138b 	.word	0x0800138b
 80012dc:	0800138b 	.word	0x0800138b
 80012e0:	0800138b 	.word	0x0800138b
 80012e4:	08001309 	.word	0x08001309
 80012e8:	0800138b 	.word	0x0800138b
 80012ec:	0800138b 	.word	0x0800138b
 80012f0:	0800138b 	.word	0x0800138b
 80012f4:	08001311 	.word	0x08001311
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80012f8:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	6013      	str	r3, [r2, #0]
      break;
 80012fe:	e048      	b.n	8001392 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <SystemCoreClockUpdate+0x150>)
 8001304:	601a      	str	r2, [r3, #0]
      break;
 8001306:	e044      	b.n	8001392 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 800130a:	4a30      	ldr	r2, [pc, #192]	; (80013cc <SystemCoreClockUpdate+0x154>)
 800130c:	601a      	str	r2, [r3, #0]
      break;
 800130e:	e040      	b.n	8001392 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <SystemCoreClockUpdate+0x144>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <SystemCoreClockUpdate+0x144>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	3301      	adds	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d003      	beq.n	8001336 <SystemCoreClockUpdate+0xbe>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d006      	beq.n	8001342 <SystemCoreClockUpdate+0xca>
 8001334:	e00b      	b.n	800134e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <SystemCoreClockUpdate+0x150>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	613b      	str	r3, [r7, #16]
          break;
 8001340:	e00b      	b.n	800135a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <SystemCoreClockUpdate+0x154>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	613b      	str	r3, [r7, #16]
          break;
 800134c:	e005      	b.n	800135a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	613b      	str	r3, [r7, #16]
          break;
 8001358:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <SystemCoreClockUpdate+0x144>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <SystemCoreClockUpdate+0x144>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0e5b      	lsrs	r3, r3, #25
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	3301      	adds	r3, #1
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 8001386:	6013      	str	r3, [r2, #0]
      break;
 8001388:	e003      	b.n	8001392 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	6013      	str	r3, [r2, #0]
      break;
 8001390:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <SystemCoreClockUpdate+0x144>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <SystemCoreClockUpdate+0x158>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemCoreClockUpdate+0x14c>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	08006ebc 	.word	0x08006ebc
 80013c4:	20000028 	.word	0x20000028
 80013c8:	00f42400 	.word	0x00f42400
 80013cc:	007a1200 	.word	0x007a1200
 80013d0:	08006ea4 	.word	0x08006ea4

080013d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d8:	f7ff ff3c 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013de:	e003      	b.n	80013e8 <LoopCopyDataInit>

080013e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013e6:	3104      	adds	r1, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013f0:	d3f6      	bcc.n	80013e0 <CopyDataInit>
	ldr	r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
	b	LoopFillZerobss
 80013f4:	e002      	b.n	80013fc <LoopFillZerobss>

080013f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013f8:	f842 3b04 	str.w	r3, [r2], #4

080013fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <LoopForever+0x16>)
	cmp	r2, r3
 80013fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001400:	d3f9      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001402:	f005 fd17 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001406:	f7ff f8d5 	bl	80005b4 <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800140c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001410:	08006f34 	.word	0x08006f34
	ldr	r0, =_sdata
 8001414:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001418:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 800141c:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8001420:	20000520 	.word	0x20000520

08001424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_2_IRQHandler>

08001426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001430:	2004      	movs	r0, #4
 8001432:	f001 f8e5 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001436:	f7ff ff1f 	bl	8001278 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f80e 	bl	800145c <HAL_InitTick>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e001      	b.n	8001450 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800144c:	f7ff fcf4 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001450:	79fb      	ldrb	r3, [r7, #7]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_InitTick+0x6c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d023      	beq.n	80014b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_InitTick+0x70>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_InitTick+0x6c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f001 f8ed 	bl	8002666 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10f      	bne.n	80014b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d809      	bhi.n	80014ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f001 f8b9 	bl	8002616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_InitTick+0x74>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e007      	b.n	80014bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e004      	b.n	80014bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e001      	b.n	80014bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000030 	.word	0x20000030
 80014cc:	20000028 	.word	0x20000028
 80014d0:	2000002c 	.word	0x2000002c

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000030 	.word	0x20000030
 80014f8:	2000051c 	.word	0x2000051c

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000051c 	.word	0x2000051c

08001514 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3360      	adds	r3, #96	; 0x60
 800158e:	461a      	mov	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <LL_ADC_SetOffset+0x44>)
 800159e:	4013      	ands	r3, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	03fff000 	.word	0x03fff000

080015c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3360      	adds	r3, #96	; 0x60
 80015d2:	461a      	mov	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3360      	adds	r3, #96	; 0x60
 8001600:	461a      	mov	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	615a      	str	r2, [r3, #20]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3330      	adds	r3, #48	; 0x30
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	4413      	add	r3, r2
 800166a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	211f      	movs	r1, #31
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 011f 	and.w	r1, r3, #31
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3314      	adds	r3, #20
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	0e5b      	lsrs	r3, r3, #25
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0d1b      	lsrs	r3, r3, #20
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2107      	movs	r1, #7
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	0d1b      	lsrs	r3, r3, #20
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0318 	and.w	r3, r3, #24
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001720:	40d9      	lsrs	r1, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	400b      	ands	r3, r1
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	431a      	orrs	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	0007ffff 	.word	0x0007ffff

08001744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6093      	str	r3, [r2, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017cc:	d101      	bne.n	80017d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <LL_ADC_IsEnabled+0x18>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LL_ADC_IsEnabled+0x1a>
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b04      	cmp	r3, #4
 8001818:	d101      	bne.n	800181e <LL_ADC_REG_IsConversionOngoing+0x18>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b08      	cmp	r3, #8
 800183e:	d101      	bne.n	8001844 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e134      	b.n	8001ad8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff faff 	bl	8000e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff67 	bl	8001768 <LL_ADC_IsDeepPowerDownEnabled>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff4d 	bl	8001744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff82 	bl	80017b8 <LL_ADC_IsInternalRegulatorEnabled>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d115      	bne.n	80018e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff66 	bl	8001790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018c4:	4b86      	ldr	r3, [pc, #536]	; (8001ae0 <HAL_ADC_Init+0x28c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	4a86      	ldr	r2, [pc, #536]	; (8001ae4 <HAL_ADC_Init+0x290>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	3301      	adds	r3, #1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff64 	bl	80017b8 <LL_ADC_IsInternalRegulatorEnabled>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10d      	bne.n	8001912 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f043 0210 	orr.w	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff75 	bl	8001806 <LL_ADC_REG_IsConversionOngoing>
 800191c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80cd 	bne.w	8001ac6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 80c9 	bne.w	8001ac6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800193c:	f043 0202 	orr.w	r2, r3, #2
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff49 	bl	80017e0 <LL_ADC_IsEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d110      	bne.n	8001976 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001954:	4864      	ldr	r0, [pc, #400]	; (8001ae8 <HAL_ADC_Init+0x294>)
 8001956:	f7ff ff43 	bl	80017e0 <LL_ADC_IsEnabled>
 800195a:	4604      	mov	r4, r0
 800195c:	4863      	ldr	r0, [pc, #396]	; (8001aec <HAL_ADC_Init+0x298>)
 800195e:	f7ff ff3f 	bl	80017e0 <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	4323      	orrs	r3, r4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4619      	mov	r1, r3
 8001970:	485f      	ldr	r0, [pc, #380]	; (8001af0 <HAL_ADC_Init+0x29c>)
 8001972:	f7ff fdcf 	bl	8001514 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e5b      	ldrb	r3, [r3, #25]
 800197a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001980:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001986:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800198c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	3b01      	subs	r3, #1
 80019aa:	045b      	lsls	r3, r3, #17
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_ADC_Init+0x2a0>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	69b9      	ldr	r1, [r7, #24]
 80019de:	430b      	orrs	r3, r1
 80019e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff0d 	bl	8001806 <LL_ADC_REG_IsConversionOngoing>
 80019ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff1a 	bl	800182c <LL_ADC_INJ_IsConversionOngoing>
 80019f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d140      	bne.n	8001a82 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d13d      	bne.n	8001a82 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a10:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a18:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a28:	f023 0306 	bic.w	r3, r3, #6
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	69b9      	ldr	r1, [r7, #24]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d118      	bne.n	8001a72 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a62:	430a      	orrs	r2, r1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	f023 010f 	bic.w	r1, r3, #15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	e007      	b.n	8001ab4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 020f 	bic.w	r2, r2, #15
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac4:	e007      	b.n	8001ad6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	20000028 	.word	0x20000028
 8001ae4:	053e2d63 	.word	0x053e2d63
 8001ae8:	42028000 	.word	0x42028000
 8001aec:	42028100 	.word	0x42028100
 8001af0:	42028300 	.word	0x42028300
 8001af4:	fff0c007 	.word	0xfff0c007

08001af8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b0b7      	sub	sp, #220	; 0xdc
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x22>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e3c1      	b.n	800229e <HAL_ADC_ConfigChannel+0x7a6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe6d 	bl	8001806 <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 83a6 	bne.w	8002280 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f7ff fd83 	bl	800164c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe5b 	bl	8001806 <LL_ADC_REG_IsConversionOngoing>
 8001b50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe67 	bl	800182c <LL_ADC_INJ_IsConversionOngoing>
 8001b5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 81c1 	bne.w	8001eee <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 81bc 	bne.w	8001eee <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff fd8a 	bl	80016a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fd44 	bl	8001626 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b9e:	e00e      	b.n	8001bbe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f7ff fd79 	bl	80016a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fd34 	bl	8001626 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00a      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6919      	ldr	r1, [r3, #16]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf0:	f7ff fcc4 	bl	800157c <LL_ADC_SetOffset>
 8001bf4:	e17b      	b.n	8001eee <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fce1 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10a      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x12a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fcd6 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	e01e      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x168>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fccb 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e004      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x180>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	e018      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1b2>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e004      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d106      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fc9a 	bl	80015f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fc7e 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x1f0>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fc73 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	0e9b      	lsrs	r3, r3, #26
 8001ce2:	f003 021f 	and.w	r2, r3, #31
 8001ce6:	e01e      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x22e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fc68 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e004      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x246>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0e9b      	lsrs	r3, r3, #26
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	e018      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x278>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e004      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fc37 	bl	80015f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fc1b 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10a      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x2b6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fc10 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	e01e      	b.n	8001dec <HAL_ADC_ConfigChannel+0x2f4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2102      	movs	r1, #2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc05 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e004      	b.n	8001dea <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x30c>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	e016      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x33a>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e004      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fbd6 	bl	80015f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2103      	movs	r1, #3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fbba 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x378>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2103      	movs	r1, #3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fbaf 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	e017      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3a8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2103      	movs	r1, #3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fba4 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001e92:	2320      	movs	r3, #32
 8001e94:	e003      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x3c0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	e011      	b.n	8001edc <HAL_ADC_ConfigChannel+0x3e4>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fb81 	bl	80015f0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fc74 	bl	80017e0 <LL_ADC_IsEnabled>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 81c9 	bne.w	8002292 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f7ff fbf5 	bl	80016fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <HAL_ADC_ConfigChannel+0x65c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 8131 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10b      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x44e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	bf94      	ite	ls
 8001f3e:	2301      	movls	r3, #1
 8001f40:	2300      	movhi	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e019      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x482>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e003      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d079      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x4a2>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0e9b      	lsrs	r3, r3, #26
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	e015      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x4ce>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e003      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	069b      	lsls	r3, r3, #26
 8001fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x4ee>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	e017      	b.n	8002016 <HAL_ADC_ConfigChannel+0x51e>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e003      	b.n	800200a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	ea42 0103 	orr.w	r1, r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x544>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	3301      	adds	r3, #1
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	e018      	b.n	800206e <HAL_ADC_ConfigChannel+0x576>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800204e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e003      	b.n	8002060 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f003 021f 	and.w	r2, r3, #31
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	430b      	orrs	r3, r1
 8002070:	e081      	b.n	8002176 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_ADC_ConfigChannel+0x596>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	3301      	adds	r3, #1
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208c:	e015      	b.n	80020ba <HAL_ADC_ConfigChannel+0x5c2>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	069b      	lsls	r3, r3, #26
 80020b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_ADC_ConfigChannel+0x5e2>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e9b      	lsrs	r3, r3, #26
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	e017      	b.n	800210a <HAL_ADC_ConfigChannel+0x612>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	61fb      	str	r3, [r7, #28]
  return result;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	ea42 0103 	orr.w	r1, r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x63e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	3301      	adds	r3, #1
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	3b1e      	subs	r3, #30
 800212e:	051b      	lsls	r3, r3, #20
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002134:	e01e      	b.n	8002174 <HAL_ADC_ConfigChannel+0x67c>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	613b      	str	r3, [r7, #16]
  return result;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e006      	b.n	8002160 <HAL_ADC_ConfigChannel+0x668>
 8002152:	bf00      	nop
 8002154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	430b      	orrs	r3, r1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff fa92 	bl	80016a4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8082 	beq.w	8002292 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218e:	4847      	ldr	r0, [pc, #284]	; (80022ac <HAL_ADC_ConfigChannel+0x7b4>)
 8002190:	f7ff f9e6 	bl	8001560 <LL_ADC_GetCommonPathInternalCh>
 8002194:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002198:	4845      	ldr	r0, [pc, #276]	; (80022b0 <HAL_ADC_ConfigChannel+0x7b8>)
 800219a:	f7ff fb21 	bl	80017e0 <LL_ADC_IsEnabled>
 800219e:	4604      	mov	r4, r0
 80021a0:	4844      	ldr	r0, [pc, #272]	; (80022b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80021a2:	f7ff fb1d 	bl	80017e0 <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4323      	orrs	r3, r4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d15e      	bne.n	800226c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d127      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d121      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a39      	ldr	r2, [pc, #228]	; (80022b0 <HAL_ADC_ConfigChannel+0x7b8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d161      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d6:	4619      	mov	r1, r3
 80021d8:	4834      	ldr	r0, [pc, #208]	; (80022ac <HAL_ADC_ConfigChannel+0x7b4>)
 80021da:	f7ff f9ae 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_ADC_ConfigChannel+0x7c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	4a36      	ldr	r2, [pc, #216]	; (80022c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002206:	e044      	b.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2d      	ldr	r2, [pc, #180]	; (80022c4 <HAL_ADC_ConfigChannel+0x7cc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d113      	bne.n	800223a <HAL_ADC_ConfigChannel+0x742>
 8002212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d134      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002230:	4619      	mov	r1, r3
 8002232:	481e      	ldr	r0, [pc, #120]	; (80022ac <HAL_ADC_ConfigChannel+0x7b4>)
 8002234:	f7ff f981 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002238:	e02b      	b.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d126      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
 8002244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d120      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11b      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800225a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800225e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002262:	4619      	mov	r1, r3
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <HAL_ADC_ConfigChannel+0x7b4>)
 8002266:	f7ff f968 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
 800226a:	e012      	b.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800227e:	e008      	b.n	8002292 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	f043 0220 	orr.w	r2, r3, #32
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800229a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	37dc      	adds	r7, #220	; 0xdc
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	80080000 	.word	0x80080000
 80022ac:	42028300 	.word	0x42028300
 80022b0:	42028000 	.word	0x42028000
 80022b4:	42028100 	.word	0x42028100
 80022b8:	c7520000 	.word	0xc7520000
 80022bc:	20000028 	.word	0x20000028
 80022c0:	053e2d63 	.word	0x053e2d63
 80022c4:	cb840000 	.word	0xcb840000
 80022c8:	80000001 	.word	0x80000001

080022cc <LL_ADC_IsEnabled>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <LL_ADC_IsEnabled+0x18>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <LL_ADC_IsEnabled+0x1a>
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d101      	bne.n	800230a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b0a1      	sub	sp, #132	; 0x84
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002332:	2302      	movs	r3, #2
 8002334:	e089      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800233e:	2300      	movs	r3, #0
 8002340:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002342:	2300      	movs	r3, #0
 8002344:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e001      	b.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e068      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ffb9 	bl	80022f2 <LL_ADC_REG_IsConversionOngoing>
 8002380:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ffb3 	bl	80022f2 <LL_ADC_REG_IsConversionOngoing>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d14a      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002394:	2b00      	cmp	r3, #0
 8002396:	d147      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800239a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d027      	beq.n	80023f4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023b6:	035b      	lsls	r3, r3, #13
 80023b8:	430b      	orrs	r3, r1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c0:	4824      	ldr	r0, [pc, #144]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023c2:	f7ff ff83 	bl	80022cc <LL_ADC_IsEnabled>
 80023c6:	4604      	mov	r4, r0
 80023c8:	4823      	ldr	r0, [pc, #140]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023ca:	f7ff ff7f 	bl	80022cc <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4323      	orrs	r3, r4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d132      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023de:	f023 030f 	bic.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6811      	ldr	r1, [r2, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	6892      	ldr	r2, [r2, #8]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	431a      	orrs	r2, r3
 80023ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f2:	e023      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002402:	f7ff ff63 	bl	80022cc <LL_ADC_IsEnabled>
 8002406:	4604      	mov	r4, r0
 8002408:	4813      	ldr	r0, [pc, #76]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800240a:	f7ff ff5f 	bl	80022cc <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	4323      	orrs	r3, r4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800241e:	f023 030f 	bic.w	r3, r3, #15
 8002422:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002424:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002426:	e009      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800243a:	e000      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800244a:	4618      	mov	r0, r3
 800244c:	3784      	adds	r7, #132	; 0x84
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	42028000 	.word	0x42028000
 8002458:	42028100 	.word	0x42028100
 800245c:	42028300 	.word	0x42028300

08002460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0152      	lsls	r2, r2, #5
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0152      	lsls	r2, r2, #5
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b03      	cmp	r3, #3
 8002570:	bf28      	it	cs
 8002572:	2303      	movcs	r3, #3
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3303      	adds	r3, #3
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b04      	subs	r3, #4
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	2107      	movs	r1, #7
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff40 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff90 	bl	8002554 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff5f 	bl	8002500 <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff33 	bl	80024c4 <__NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffa4 	bl	80025bc <SysTick_Config>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800268e:	e158      	b.n	8002942 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 814a 	beq.w	800293c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d00b      	beq.n	80026c8 <HAL_GPIO_Init+0x48>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d007      	beq.n	80026c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026bc:	2b11      	cmp	r3, #17
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	d130      	bne.n	800272a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fe:	2201      	movs	r2, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 0201 	and.w	r2, r3, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0xea>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b12      	cmp	r3, #18
 8002768:	d123      	bne.n	80027b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	6939      	ldr	r1, [r7, #16]
 80027ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0203 	and.w	r2, r3, #3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a4 	beq.w	800293c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3318      	adds	r3, #24
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_Init+0x2e4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d025      	beq.n	800286c <HAL_GPIO_Init+0x1ec>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a51      	ldr	r2, [pc, #324]	; (8002968 <HAL_GPIO_Init+0x2e8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d01f      	beq.n	8002868 <HAL_GPIO_Init+0x1e8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a50      	ldr	r2, [pc, #320]	; (800296c <HAL_GPIO_Init+0x2ec>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d019      	beq.n	8002864 <HAL_GPIO_Init+0x1e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_GPIO_Init+0x2f0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_GPIO_Init+0x1e0>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x2f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_GPIO_Init+0x1dc>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x2f8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <HAL_GPIO_Init+0x1d8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_GPIO_Init+0x2fc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_GPIO_Init+0x1d4>
 8002850:	2306      	movs	r3, #6
 8002852:	e00c      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002854:	2307      	movs	r3, #7
 8002856:	e00a      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002858:	2305      	movs	r3, #5
 800285a:	e008      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 800285c:	2304      	movs	r3, #4
 800285e:	e006      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002860:	2303      	movs	r3, #3
 8002862:	e004      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002864:	2302      	movs	r3, #2
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 800286c:	2300      	movs	r3, #0
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	f002 0203 	and.w	r2, r2, #3
 8002874:	00d2      	lsls	r2, r2, #3
 8002876:	4093      	lsls	r3, r2
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800287e:	4938      	ldr	r1, [pc, #224]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3318      	adds	r3, #24
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800288c:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 800288e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b2:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 80028bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_GPIO_Init+0x2e0>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3301      	adds	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ae9f 	bne.w	8002690 <HAL_GPIO_Init+0x10>
  }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	4002f400 	.word	0x4002f400
 8002964:	42020000 	.word	0x42020000
 8002968:	42020400 	.word	0x42020400
 800296c:	42020800 	.word	0x42020800
 8002970:	42020c00 	.word	0x42020c00
 8002974:	42021000 	.word	0x42021000
 8002978:	42021400 	.word	0x42021400
 800297c:	42021800 	.word	0x42021800

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b2:	b08b      	sub	sp, #44	; 0x2c
 80029b4:	af06      	add	r7, sp, #24
 80029b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0d7      	b.n	8002b72 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fba8 	bl	800112c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 f9e7 	bl	8006dbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	e04c      	b.n	8002a8e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	3301      	adds	r3, #1
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	b298      	uxth	r0, r3
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	3336      	adds	r3, #54	; 0x36
 8002a32:	4602      	mov	r2, r0
 8002a34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3303      	adds	r3, #3
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	3338      	adds	r3, #56	; 0x38
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	333c      	adds	r3, #60	; 0x3c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	3340      	adds	r3, #64	; 0x40
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3ad      	bcc.n	80029f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e044      	b.n	8002b28 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	3301      	adds	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d3b5      	bcc.n	8002a9e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	687e      	ldr	r6, [r7, #4]
 8002b3a:	466d      	mov	r5, sp
 8002b3c:	f106 0410 	add.w	r4, r6, #16
 8002b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	1d33      	adds	r3, r6, #4
 8002b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f004 f950 	bl	8006df2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f805 	bl	8002b7a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b7a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40007000 	.word	0x40007000

08002bf0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40007000 	.word	0x40007000

08002c0c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c1c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002c1e:	f000 f861 	bl	8002ce4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c28:	d101      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03e      	b.n	8002cac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3a:	d101      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e035      	b.n	8002cac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d101      	bne.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e02f      	b.n	8002cac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002c54:	4917      	ldr	r1, [pc, #92]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	09db      	lsrs	r3, r3, #7
 8002c6a:	2232      	movs	r2, #50	; 0x32
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7c:	e002      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d102      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f2      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d101      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e000      	b.n	8002cac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	20000028 	.word	0x20000028
 8002cbc:	0a7c5ac5 	.word	0x0a7c5ac5
 8002cc0:	cccccccd 	.word	0xcccccccd

08002cc4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6053      	str	r3, [r2, #4]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	e00a      	b.n	8002d18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	e001      	b.n	8002d18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002d18:	687b      	ldr	r3, [r7, #4]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000

08002d2c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f000 bcd0 	b.w	80036e0 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d40:	4b99      	ldr	r3, [pc, #612]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4a:	4b97      	ldr	r3, [pc, #604]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80e9 	beq.w	8002f34 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <HAL_RCC_OscConfig+0x4a>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	f040 8083 	bne.w	8002e76 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d17f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d76:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_RCC_OscConfig+0x64>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 bca8 	b.w	80036e0 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d94:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <HAL_RCC_OscConfig+0x7e>
 8002da0:	4b81      	ldr	r3, [pc, #516]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da8:	e005      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a>
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d224      	bcs.n	8002e04 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fe98 	bl	8003af4 <RCC_SetFlashLatencyFromMSIRange>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f000 bc88 	b.w	80036e0 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a74      	ldr	r2, [pc, #464]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b72      	ldr	r3, [pc, #456]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	496f      	ldr	r1, [pc, #444]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dee:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	496a      	ldr	r1, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e026      	b.n	8002e52 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a67      	ldr	r2, [pc, #412]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	4962      	ldr	r1, [pc, #392]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e22:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	495d      	ldr	r1, [pc, #372]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fe57 	bl	8003af4 <RCC_SetFlashLatencyFromMSIRange>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f000 bc47 	b.w	80036e0 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e52:	f000 fe13 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e5c:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_RCC_OscConfig+0x284>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe fafb 	bl	800145c <HAL_InitTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d060      	beq.n	8002f32 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	f000 bc35 	b.w	80036e0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d039      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fb37 	bl	80014fc <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e90:	e00f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e92:	f7fe fb33 	bl	80014fc <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d908      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f000 bc17 	b.w	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0e9      	beq.n	8002e92 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	4934      	ldr	r1, [pc, #208]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	492f      	ldr	r1, [pc, #188]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	e020      	b.n	8002f34 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efe:	f7fe fafd 	bl	80014fc <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f04:	e00e      	b.n	8002f24 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f06:	f7fe faf9 	bl	80014fc <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d907      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e3dd      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ea      	bne.n	8002f06 <HAL_RCC_OscConfig+0x1da>
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d07e      	beq.n	800303e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d005      	beq.n	8002f52 <HAL_RCC_OscConfig+0x226>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d10e      	bne.n	8002f6a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d10b      	bne.n	8002f6a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06e      	beq.n	800303c <HAL_RCC_OscConfig+0x310>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d16a      	bne.n	800303c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e3ba      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x256>
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e024      	b.n	8002fcc <HAL_RCC_OscConfig+0x2a0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8a:	d113      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x288>
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a02      	ldr	r2, [pc, #8]	; (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	e012      	b.n	8002fcc <HAL_RCC_OscConfig+0x2a0>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	20000028 	.word	0x20000028
 8002fb0:	2000002c 	.word	0x2000002c
 8002fb4:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d019      	beq.n	8003008 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fa92 	bl	80014fc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fda:	e00e      	b.n	8002ffa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fa8e 	bl	80014fc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d907      	bls.n	8002ffa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fea:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e372      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b7a      	ldr	r3, [pc, #488]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ea      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2b0>
 8003006:	e01a      	b.n	800303e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fa78 	bl	80014fc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300e:	e00e      	b.n	800302e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fa74 	bl	80014fc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d907      	bls.n	800302e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301e:	4b71      	ldr	r3, [pc, #452]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e358      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ea      	bne.n	8003010 <HAL_RCC_OscConfig+0x2e4>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d06c      	beq.n	8003124 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x330>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d119      	bne.n	800308a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d116      	bne.n	800308a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x348>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e335      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	4958      	ldr	r1, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003088:	e04c      	b.n	8003124 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d029      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003092:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a53      	ldr	r2, [pc, #332]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fa2d 	bl	80014fc <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a4:	e00e      	b.n	80030c4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fa29 	bl	80014fc <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d907      	bls.n	80030c4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e30d      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ea      	beq.n	80030a6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	4941      	ldr	r1, [pc, #260]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e01e      	b.n	8003124 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a3e      	ldr	r2, [pc, #248]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fa03 	bl	80014fc <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e00e      	b.n	8003118 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe f9ff 	bl	80014fc <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d907      	bls.n	8003118 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e2e3      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ea      	bne.n	80030fa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d062      	beq.n	80031f6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d038      	beq.n	80031aa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003148:	f023 0310 	bic.w	r3, r3, #16
 800314c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003150:	e007      	b.n	8003162 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 8003164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7fe f9c3 	bl	80014fc <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003178:	e00f      	b.n	800319a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317a:	f7fe f9bf 	bl	80014fc <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b07      	cmp	r3, #7
 8003186:	d908      	bls.n	800319a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e2a2      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0e8      	beq.n	800317a <HAL_RCC_OscConfig+0x44e>
 80031a8:	e025      	b.n	80031f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe f99f 	bl	80014fc <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c0:	e012      	b.n	80031e8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe f99b 	bl	80014fc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b07      	cmp	r3, #7
 80031ce:	d90b      	bls.n	80031e8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <HAL_RCC_OscConfig+0x4b8>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e27e      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e8:	4ba8      	ldr	r3, [pc, #672]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80031ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 812d 	beq.w	800345e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003208:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	4b9d      	ldr	r3, [pc, #628]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a9c      	ldr	r2, [pc, #624]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	4b9a      	ldr	r3, [pc, #616]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003230:	4b97      	ldr	r3, [pc, #604]	; (8003490 <HAL_RCC_OscConfig+0x764>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11e      	bne.n	800327a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323c:	4b94      	ldr	r3, [pc, #592]	; (8003490 <HAL_RCC_OscConfig+0x764>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a93      	ldr	r2, [pc, #588]	; (8003490 <HAL_RCC_OscConfig+0x764>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003248:	f7fe f958 	bl	80014fc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	e00e      	b.n	800326e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fe f954 	bl	80014fc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d907      	bls.n	800326e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325e:	4b8c      	ldr	r3, [pc, #560]	; (8003490 <HAL_RCC_OscConfig+0x764>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e238      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326e:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_OscConfig+0x764>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ea      	beq.n	8003250 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01f      	beq.n	80032c6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003292:	4b7e      	ldr	r3, [pc, #504]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	4a7c      	ldr	r2, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032a2:	4b7a      	ldr	r3, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a78      	ldr	r2, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b2:	e018      	b.n	80032e6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	4a74      	ldr	r2, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c4:	e00f      	b.n	80032e6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032c6:	4b71      	ldr	r3, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	4a6f      	ldr	r2, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	4a6b      	ldr	r2, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d068      	beq.n	80033c0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe f905 	bl	80014fc <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	e011      	b.n	800331a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe f901 	bl	80014fc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d908      	bls.n	800331a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003308:	4b60      	ldr	r3, [pc, #384]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1e2      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0e6      	beq.n	80032f6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	d022      	beq.n	800337a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a54      	ldr	r2, [pc, #336]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800333c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003344:	e011      	b.n	800336a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fe f8d9 	bl	80014fc <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d908      	bls.n	800336a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1ba      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0e6      	beq.n	8003346 <HAL_RCC_OscConfig+0x61a>
 8003378:	e068      	b.n	800344c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800337a:	4b44      	ldr	r3, [pc, #272]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	4a42      	ldr	r2, [pc, #264]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800338a:	e011      	b.n	80033b0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe f8b6 	bl	80014fc <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d908      	bls.n	80033b0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e197      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e6      	bne.n	800338c <HAL_RCC_OscConfig+0x660>
 80033be:	e045      	b.n	800344c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fe f89c 	bl	80014fc <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c6:	e011      	b.n	80033ec <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe f898 	bl	80014fc <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d908      	bls.n	80033ec <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033da:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e179      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e6      	bne.n	80033c8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCC_OscConfig+0x760>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d021      	beq.n	800344c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003418:	e011      	b.n	800343e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe f86f 	bl	80014fc <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d908      	bls.n	800343e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e150      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e6      	bne.n	800341a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344c:	7ffb      	ldrb	r3, [r7, #31]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a0d      	ldr	r2, [pc, #52]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d04f      	beq.n	800350a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_OscConfig+0x760>)
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_RCC_OscConfig+0x760>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe f83b 	bl	80014fc <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003488:	e014      	b.n	80034b4 <HAL_RCC_OscConfig+0x788>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003494:	f7fe f832 	bl	80014fc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d908      	bls.n	80034b4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034a2:	4b91      	ldr	r3, [pc, #580]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80034a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e115      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b4:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80034b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0e8      	beq.n	8003494 <HAL_RCC_OscConfig+0x768>
 80034c2:	e022      	b.n	800350a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034c4:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80034c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ca:	4a87      	ldr	r2, [pc, #540]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe f812 	bl	80014fc <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034da:	e00f      	b.n	80034fc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034dc:	f7fe f80e 	bl	80014fc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d908      	bls.n	80034fc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80034ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0f1      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034fc:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80034fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e8      	bne.n	80034dc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80e5 	beq.w	80036de <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003514:	4b74      	ldr	r3, [pc, #464]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b0c      	cmp	r3, #12
 800351e:	f000 809f 	beq.w	8003660 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	2b02      	cmp	r3, #2
 8003528:	d166      	bne.n	80035f8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6e      	ldr	r2, [pc, #440]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd ffe1 	bl	80014fc <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	e00e      	b.n	800355c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd ffdd 	bl	80014fc <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d907      	bls.n	800355c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0c1      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355c:	4b62      	ldr	r3, [pc, #392]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ea      	bne.n	800353e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003568:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	4b5f      	ldr	r3, [pc, #380]	; (80036ec <HAL_RCC_OscConfig+0x9c0>)
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003578:	3a01      	subs	r2, #1
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003582:	0212      	lsls	r2, r2, #8
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800358a:	0852      	lsrs	r2, r2, #1
 800358c:	3a01      	subs	r2, #1
 800358e:	0552      	lsls	r2, r2, #21
 8003590:	4311      	orrs	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003596:	0852      	lsrs	r2, r2, #1
 8003598:	3a01      	subs	r2, #1
 800359a:	0652      	lsls	r2, r2, #25
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a2:	06d2      	lsls	r2, r2, #27
 80035a4:	430a      	orrs	r2, r1
 80035a6:	4950      	ldr	r1, [pc, #320]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ac:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a4d      	ldr	r2, [pc, #308]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd ff9a 	bl	80014fc <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	e00e      	b.n	80035ea <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd ff96 	bl	80014fc <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d907      	bls.n	80035ea <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e07a      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ea      	beq.n	80035cc <HAL_RCC_OscConfig+0x8a0>
 80035f6:	e072      	b.n	80036de <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003604:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003622:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd ff66 	bl	80014fc <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003632:	e00e      	b.n	8003652 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fd ff62 	bl	80014fc <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d907      	bls.n	8003652 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e046      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003652:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ea      	bne.n	8003634 <HAL_RCC_OscConfig+0x908>
 800365e:	e03e      	b.n	80036de <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e039      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_RCC_OscConfig+0x9bc>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	429a      	cmp	r2, r3
 800367e:	d12c      	bne.n	80036da <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	3b01      	subs	r3, #1
 800368c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d123      	bne.n	80036da <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d11b      	bne.n	80036da <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d113      	bne.n	80036da <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	3b01      	subs	r3, #1
 80036c0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d109      	bne.n	80036da <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	019f800c 	.word	0x019f800c

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e10d      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b88      	ldr	r3, [pc, #544]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d910      	bls.n	8003738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b85      	ldr	r3, [pc, #532]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 020f 	bic.w	r2, r3, #15
 800371e:	4983      	ldr	r1, [pc, #524]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b81      	ldr	r3, [pc, #516]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0f5      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8094 	beq.w	800386e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d134      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	4b78      	ldr	r3, [pc, #480]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0e2      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800375e:	f000 fa2d 	bl	8003bbc <RCC_GetSysClockFreqFromPLLSource>
 8003762:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4a73      	ldr	r2, [pc, #460]	; (8003934 <HAL_RCC_ClockConfig+0x244>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d956      	bls.n	800381a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800376c:	4b70      	ldr	r3, [pc, #448]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003778:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003780:	4a6b      	ldr	r2, [pc, #428]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003786:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e045      	b.n	800381a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03f      	beq.n	800381a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d13b      	bne.n	800381a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037aa:	4a61      	ldr	r2, [pc, #388]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e030      	b.n	800381a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c0:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d115      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0a9      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e09d      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e8:	4b51      	ldr	r3, [pc, #324]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e095      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037f8:	f000 f8a2 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a4c      	ldr	r2, [pc, #304]	; (8003934 <HAL_RCC_ClockConfig+0x244>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d909      	bls.n	800381a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003806:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380e:	4a48      	ldr	r2, [pc, #288]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800381a:	4b45      	ldr	r3, [pc, #276]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4942      	ldr	r1, [pc, #264]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382c:	f7fd fe66 	bl	80014fc <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	e013      	b.n	800385c <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fd fe62 	bl	80014fc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d90a      	bls.n	800385c <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e063      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 020c 	and.w	r2, r3, #12
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	429a      	cmp	r2, r3
 800386c:	d1e2      	bne.n	8003834 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	492a      	ldr	r1, [pc, #168]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
 800388c:	e008      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800389a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d210      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	491d      	ldr	r1, [pc, #116]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_ClockConfig+0x23c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e029      	b.n	8003924 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4911      	ldr	r1, [pc, #68]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4909      	ldr	r1, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x240>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800390e:	f000 f8b5 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003912:	4603      	mov	r3, r0
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_RCC_ClockConfig+0x248>)
 8003916:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCC_ClockConfig+0x24c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fd9d 	bl	800145c <HAL_InitTick>
 8003922:	4603      	mov	r3, r0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40022000 	.word	0x40022000
 8003930:	40021000 	.word	0x40021000
 8003934:	04c4b400 	.word	0x04c4b400
 8003938:	20000028 	.word	0x20000028
 800393c:	2000002c 	.word	0x2000002c

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003958:	4b44      	ldr	r3, [pc, #272]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x34>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d121      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d11e      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003974:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003980:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e005      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800399c:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x130>)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d102      	bne.n	80039be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039b8:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x134>)
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e004      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x138>)
 80039c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d146      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3301      	adds	r3, #1
 80039e4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d003      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb4>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d00d      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0xce>
 80039f2:	e019      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x134>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 80039fe:	68d2      	ldr	r2, [r2, #12]
 8003a00:	0a12      	lsrs	r2, r2, #8
 8003a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	617b      	str	r3, [r7, #20]
        break;
 8003a0c:	e019      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a0e:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	0a12      	lsrs	r2, r2, #8
 8003a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
        break;
 8003a26:	e00c      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a32:	68d2      	ldr	r2, [r2, #12]
 8003a34:	0a12      	lsrs	r2, r2, #8
 8003a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
        break;
 8003a40:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	0e5b      	lsrs	r3, r3, #25
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	; 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08006ebc 	.word	0x08006ebc
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003a80:	f7ff ff5e 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08006ea4 	.word	0x08006ea4

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa8:	f7ff ffe8 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	08006eb4 	.word	0x08006eb4

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad0:	f7ff ffd4 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0adb      	lsrs	r3, r3, #11
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08006eb4 	.word	0x08006eb4

08003af4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b0c:	f7ff f870 	bl	8002bf0 <HAL_PWREx_GetVoltageRange>
 8003b10:	6138      	str	r0, [r7, #16]
 8003b12:	e014      	b.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b20:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b2c:	f7ff f860 	bl	8002bf0 <HAL_PWREx_GetVoltageRange>
 8003b30:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4a:	d10b      	bne.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b80      	cmp	r3, #128	; 0x80
 8003b50:	d919      	bls.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2ba0      	cmp	r3, #160	; 0xa0
 8003b56:	d902      	bls.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b58:	2302      	movs	r3, #2
 8003b5a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b5c:	e013      	b.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b62:	e010      	b.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d902      	bls.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e00a      	b.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d102      	bne.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b76:	2302      	movs	r3, #2
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e004      	b.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b70      	cmp	r3, #112	; 0x70
 8003b80:	d101      	bne.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40022000 	.word	0x40022000

08003bbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d118      	bne.n	8003c04 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bd2:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e005      	b.n	8003bfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c04:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d003      	beq.n	8003c2a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d00d      	beq.n	8003c44 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003c28:	e019      	b.n	8003c5e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	0a12      	lsrs	r2, r2, #8
 8003c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	613b      	str	r3, [r7, #16]
      break;
 8003c42:	e019      	b.n	8003c78 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c4e:	68d2      	ldr	r2, [r2, #12]
 8003c50:	0a12      	lsrs	r2, r2, #8
 8003c52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	613b      	str	r3, [r7, #16]
      break;
 8003c5c:	e00c      	b.n	8003c78 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	0a12      	lsrs	r2, r2, #8
 8003c6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	613b      	str	r3, [r7, #16]
      break;
 8003c76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0e5b      	lsrs	r3, r3, #25
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c92:	683b      	ldr	r3, [r7, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	08006ebc 	.word	0x08006ebc
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d040      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d02a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d825      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cd8:	2b60      	cmp	r3, #96	; 0x60
 8003cda:	d026      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d821      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d006      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d81d      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d010      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003cf0:	e018      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4a8e      	ldr	r2, [pc, #568]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cfe:	e015      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fb56 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d10:	e00c      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3320      	adds	r3, #32
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fc33 	bl	8004584 <RCCEx_PLLSAI2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
        break;
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2c:	7ffb      	ldrb	r3, [r7, #31]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d32:	4b7f      	ldr	r3, [pc, #508]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d38:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d40:	497b      	ldr	r1, [pc, #492]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d48:	e001      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d047      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d030      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d82a      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6e:	d02a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d74:	d824      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d81e      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d010      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d8c:	e018      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d8e:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4a67      	ldr	r2, [pc, #412]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d9a:	e015      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fb08 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003dac:	e00c      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3320      	adds	r3, #32
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fbe5 	bl	8004584 <RCCEx_PLLSAI2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	77fb      	strb	r3, [r7, #31]
        break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc8:	7ffb      	ldrb	r3, [r7, #31]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dce:	4b58      	ldr	r3, [pc, #352]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4954      	ldr	r1, [pc, #336]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80ab 	beq.w	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10d      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	4a48      	ldr	r2, [pc, #288]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	; 0x58
 8003e14:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e24:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a42      	ldr	r2, [pc, #264]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e30:	f7fd fb64 	bl	80014fc <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e36:	e00f      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e38:	f7fd fb60 	bl	80014fc <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d908      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003e56:	e006      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0e9      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003e66:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003e68:	7ffb      	ldrb	r3, [r7, #31]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d164      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e78:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01f      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d019      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01f      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fd fb17 	bl	80014fc <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	e012      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fd fb13 	bl	80014fc <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d909      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003ef6:	e007      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0e5      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003f08:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f28:	e008      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
 8003f2c:	77bb      	strb	r3, [r7, #30]
 8003f2e:	e005      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
 8003f3a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	4b9c      	ldr	r3, [pc, #624]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	4a9b      	ldr	r2, [pc, #620]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5a:	4b96      	ldr	r3, [pc, #600]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f023 0203 	bic.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	4992      	ldr	r1, [pc, #584]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f7c:	4b8d      	ldr	r3, [pc, #564]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f023 020c 	bic.w	r2, r3, #12
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	498a      	ldr	r1, [pc, #552]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	4981      	ldr	r1, [pc, #516]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc0:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4979      	ldr	r1, [pc, #484]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fe2:	4b74      	ldr	r3, [pc, #464]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	4970      	ldr	r1, [pc, #448]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004004:	4b6b      	ldr	r3, [pc, #428]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004012:	4968      	ldr	r1, [pc, #416]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004026:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	495f      	ldr	r1, [pc, #380]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004048:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	4957      	ldr	r1, [pc, #348]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800406a:	4b52      	ldr	r3, [pc, #328]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004078:	494e      	ldr	r1, [pc, #312]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d031      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004094:	d00e      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800409a:	d814      	bhi.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a4:	d10f      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a6:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040b2:	e00c      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f97c 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040c4:	e003      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]
        break;
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80040cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e2:	4934      	ldr	r1, [pc, #208]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fc:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	492a      	ldr	r1, [pc, #168]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	4921      	ldr	r1, [pc, #132]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004140:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	4919      	ldr	r1, [pc, #100]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004168:	f023 0203 	bic.w	r2, r3, #3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	4910      	ldr	r1, [pc, #64]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02b      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a2:	d109      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a02      	ldr	r2, [pc, #8]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
 80041b0:	e014      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2101      	movs	r1, #1
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f8f5 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80041d2:	7ffb      	ldrb	r3, [r7, #31]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80041d8:	7ffb      	ldrb	r3, [r7, #31]
 80041da:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d04a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f0:	d108      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80041f2:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f8:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004202:	e012      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004204:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004212:	4968      	ldr	r1, [pc, #416]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800421c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004220:	4a64      	ldr	r2, [pc, #400]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004226:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004232:	d10d      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f8bc 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004244:	7ffb      	ldrb	r3, [r7, #31]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d019      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	77bb      	strb	r3, [r7, #30]
 800424e:	e016      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004258:	d106      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425a:	4b56      	ldr	r3, [pc, #344]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004264:	60d3      	str	r3, [r2, #12]
 8004266:	e00a      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004270:	d105      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004272:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a4f      	ldr	r2, [pc, #316]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d028      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004298:	4946      	ldr	r1, [pc, #280]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a8:	d106      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042aa:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a41      	ldr	r2, [pc, #260]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b4:	60d3      	str	r3, [r2, #12]
 80042b6:	e011      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f875 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
 80042da:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f8:	492e      	ldr	r1, [pc, #184]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800430a:	d10c      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f850 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004338:	f023 0204 	bic.w	r2, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004342:	491c      	ldr	r1, [pc, #112]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004358:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435c:	f023 0218 	bic.w	r2, r3, #24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	4913      	ldr	r1, [pc, #76]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d017      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800437c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439c:	d105      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80043aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000

080043b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d018      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x48>
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d81f      	bhi.n	8004412 <RCCEx_PLLSAI1_Config+0x5a>
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d002      	beq.n	80043dc <RCCEx_PLLSAI1_Config+0x24>
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d009      	beq.n	80043ee <RCCEx_PLLSAI1_Config+0x36>
 80043da:	e01a      	b.n	8004412 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043dc:	4b65      	ldr	r3, [pc, #404]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d117      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ec:	e014      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043ee:	4b61      	ldr	r3, [pc, #388]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d110      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fe:	e00d      	b.n	800441c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004400:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e006      	b.n	8004420 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      break;
 8004416:	e004      	b.n	8004422 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004418:	bf00      	nop
 800441a:	e002      	b.n	8004422 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004420:	bf00      	nop
  }

  if (status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 809f 	bne.w	8004568 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800442a:	4b52      	ldr	r3, [pc, #328]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a51      	ldr	r2, [pc, #324]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004436:	f7fd f861 	bl	80014fc <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443c:	e00f      	b.n	800445e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800443e:	f7fd f85d 	bl	80014fc <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d908      	bls.n	800445e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800444c:	4b49      	ldr	r3, [pc, #292]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800445c:	e006      	b.n	800446c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800445e:	4b45      	ldr	r3, [pc, #276]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e9      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x86>
 800446a:	e000      	b.n	800446e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800446c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d179      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800447a:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6892      	ldr	r2, [r2, #8]
 8004486:	0211      	lsls	r1, r2, #8
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	06d2      	lsls	r2, r2, #27
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	3a01      	subs	r2, #1
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	4934      	ldr	r1, [pc, #208]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
 80044a6:	e033      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d118      	bne.n	80044e0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ae:	4b31      	ldr	r3, [pc, #196]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	4b32      	ldr	r3, [pc, #200]	; (800457c <RCCEx_PLLSAI1_Config+0x1c4>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	0211      	lsls	r1, r2, #8
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6912      	ldr	r2, [r2, #16]
 80044c0:	0852      	lsrs	r2, r2, #1
 80044c2:	3a01      	subs	r2, #1
 80044c4:	0552      	lsls	r2, r2, #21
 80044c6:	4311      	orrs	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6852      	ldr	r2, [r2, #4]
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	4926      	ldr	r1, [pc, #152]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	610b      	str	r3, [r1, #16]
 80044de:	e017      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	4b26      	ldr	r3, [pc, #152]	; (8004580 <RCCEx_PLLSAI1_Config+0x1c8>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6892      	ldr	r2, [r2, #8]
 80044ec:	0211      	lsls	r1, r2, #8
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6952      	ldr	r2, [r2, #20]
 80044f2:	0852      	lsrs	r2, r2, #1
 80044f4:	3a01      	subs	r2, #1
 80044f6:	0652      	lsls	r2, r2, #25
 80044f8:	4311      	orrs	r1, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6852      	ldr	r2, [r2, #4]
 80044fe:	3a01      	subs	r2, #1
 8004500:	0112      	lsls	r2, r2, #4
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	491a      	ldr	r1, [pc, #104]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004510:	4b18      	ldr	r3, [pc, #96]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800451a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fc ffee 	bl	80014fc <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004522:	e00f      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004524:	f7fc ffea 	bl	80014fc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d908      	bls.n	8004544 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004542:	e006      	b.n	8004552 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0e9      	beq.n	8004524 <RCCEx_PLLSAI1_Config+0x16c>
 8004550:	e000      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004552:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	4904      	ldr	r1, [pc, #16]	; (8004574 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	07ff800c 	.word	0x07ff800c
 800457c:	ff9f800c 	.word	0xff9f800c
 8004580:	f9ff800c 	.word	0xf9ff800c

08004584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d018      	beq.n	80045cc <RCCEx_PLLSAI2_Config+0x48>
 800459a:	2b03      	cmp	r3, #3
 800459c:	d81f      	bhi.n	80045de <RCCEx_PLLSAI2_Config+0x5a>
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d002      	beq.n	80045a8 <RCCEx_PLLSAI2_Config+0x24>
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d009      	beq.n	80045ba <RCCEx_PLLSAI2_Config+0x36>
 80045a6:	e01a      	b.n	80045de <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045a8:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d117      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e014      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d110      	bne.n	80045e8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ca:	e00d      	b.n	80045e8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80045cc:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e006      	b.n	80045ec <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      break;
 80045e2:	e004      	b.n	80045ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045e4:	bf00      	nop
 80045e6:	e002      	b.n	80045ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d169      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045f4:	4b37      	ldr	r3, [pc, #220]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a36      	ldr	r2, [pc, #216]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fc ff7c 	bl	80014fc <HAL_GetTick>
 8004604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004606:	e00f      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004608:	f7fc ff78 	bl	80014fc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d908      	bls.n	8004628 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004616:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004626:	e006      	b.n	8004636 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e9      	bne.n	8004608 <RCCEx_PLLSAI2_Config+0x84>
 8004634:	e000      	b.n	8004638 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004636:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d144      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d115      	bne.n	8004670 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <RCCEx_PLLSAI2_Config+0x154>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6892      	ldr	r2, [r2, #8]
 8004650:	0211      	lsls	r1, r2, #8
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68d2      	ldr	r2, [r2, #12]
 8004656:	06d2      	lsls	r2, r2, #27
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6852      	ldr	r2, [r2, #4]
 800465e:	3a01      	subs	r2, #1
 8004660:	0112      	lsls	r2, r2, #4
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	491a      	ldr	r1, [pc, #104]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 800466c:	4313      	orrs	r3, r2
 800466e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004670:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc ff3e 	bl	80014fc <HAL_GetTick>
 8004680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004682:	e00f      	b.n	80046a4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004684:	f7fc ff3a 	bl	80014fc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d908      	bls.n	80046a4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80046a2:	e006      	b.n	80046b2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0e9      	beq.n	8004684 <RCCEx_PLLSAI2_Config+0x100>
 80046b0:	e000      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80046b2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	4904      	ldr	r1, [pc, #16]	; (80046d4 <RCCEx_PLLSAI2_Config+0x150>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	07ff800c 	.word	0x07ff800c

080046dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d05c      	beq.n	80047a8 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc fc76 	bl	8000ff4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004710:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004712:	22ca      	movs	r2, #202	; 0xca
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004718:	2253      	movs	r2, #83	; 0x53
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f871 	bl	8004804 <RTC_EnterInitMode>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d133      	bne.n	8004794 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <HAL_RTC_Init+0xd8>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004732:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RTC_Init+0xd8>)
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	4319      	orrs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	430b      	orrs	r3, r1
 8004750:	4918      	ldr	r1, [pc, #96]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	4914      	ldr	r1, [pc, #80]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f880 	bl	800486c <RTC_ExitInitMode>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10e      	bne.n	8004794 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a19      	ldr	r1, [r3, #32]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	4319      	orrs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	430b      	orrs	r3, r1
 800478e:	4909      	ldr	r1, [pc, #36]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RTC_Init+0xd8>)
 8004796:	22ff      	movs	r2, #255	; 0xff
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40002800 	.word	0x40002800

080047b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <HAL_RTC_WaitForSynchro+0x48>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a0e      	ldr	r2, [pc, #56]	; (8004800 <HAL_RTC_WaitForSynchro+0x48>)
 80047c6:	f023 0320 	bic.w	r3, r3, #32
 80047ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80047cc:	f7fc fe96 	bl	80014fc <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047d2:	e009      	b.n	80047e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047d4:	f7fc fe92 	bl	80014fc <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e2:	d901      	bls.n	80047e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e006      	b.n	80047f6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RTC_WaitForSynchro+0x48>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ef      	beq.n	80047d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40002800 	.word	0x40002800

08004804 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <RTC_EnterInitMode+0x64>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d120      	bne.n	800485e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <RTC_EnterInitMode+0x64>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a11      	ldr	r2, [pc, #68]	; (8004868 <RTC_EnterInitMode+0x64>)
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004828:	f7fc fe68 	bl	80014fc <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800482e:	e00d      	b.n	800484c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004830:	f7fc fe64 	bl	80014fc <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483e:	d905      	bls.n	800484c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2203      	movs	r2, #3
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <RTC_EnterInitMode+0x64>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <RTC_EnterInitMode+0x5a>
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d1e8      	bne.n	8004830 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800485e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40002800 	.word	0x40002800

0800486c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <RTC_ExitInitMode+0x78>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <RTC_ExitInitMode+0x78>)
 800487e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004882:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004884:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <RTC_ExitInitMode+0x78>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10c      	bne.n	80048aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff91 	bl	80047b8 <HAL_RTC_WaitForSynchro>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01e      	beq.n	80048da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2203      	movs	r2, #3
 80048a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e017      	b.n	80048da <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <RTC_ExitInitMode+0x78>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <RTC_ExitInitMode+0x78>)
 80048b0:	f023 0320 	bic.w	r3, r3, #32
 80048b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff7e 	bl	80047b8 <HAL_RTC_WaitForSynchro>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <RTC_ExitInitMode+0x78>)
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <RTC_ExitInitMode+0x78>)
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40002800 	.word	0x40002800

080048e8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	490f      	ldr	r1, [pc, #60]	; (8004938 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	490c      	ldr	r1, [pc, #48]	; (800493c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800490a:	4313      	orrs	r3, r2
 800490c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	430b      	orrs	r3, r1
 8004922:	4906      	ldr	r1, [pc, #24]	; (800493c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004924:	4313      	orrs	r3, r2
 8004926:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40002800 	.word	0x40002800
 800493c:	40003400 	.word	0x40003400

08004940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e049      	b.n	80049e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc fb82 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fd2c 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d001      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e04f      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a23      	ldr	r2, [pc, #140]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x76>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d018      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x76>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x76>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_TIM_Base_Start_IT+0xcc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x76>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x76>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1b      	ldr	r2, [pc, #108]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x76>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d115      	bne.n	8004a92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b06      	cmp	r3, #6
 8004a76:	d015      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0xb4>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7e:	d011      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a90:	e008      	b.n	8004aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e000      	b.n	8004aa6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	00010007 	.word	0x00010007

08004ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e049      	b.n	8004b76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f841 	bl	8004b7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 fc64 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_TIM_PWM_Start+0x24>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	e03c      	b.n	8004c32 <HAL_TIM_PWM_Start+0x9e>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d109      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0x3e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	bf14      	ite	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	2300      	moveq	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	e02f      	b.n	8004c32 <HAL_TIM_PWM_Start+0x9e>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d109      	bne.n	8004bec <HAL_TIM_PWM_Start+0x58>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e022      	b.n	8004c32 <HAL_TIM_PWM_Start+0x9e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b0c      	cmp	r3, #12
 8004bf0:	d109      	bne.n	8004c06 <HAL_TIM_PWM_Start+0x72>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	bf14      	ite	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	2300      	moveq	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	e015      	b.n	8004c32 <HAL_TIM_PWM_Start+0x9e>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d109      	bne.n	8004c20 <HAL_TIM_PWM_Start+0x8c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e008      	b.n	8004c32 <HAL_TIM_PWM_Start+0x9e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e09c      	b.n	8004d74 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Start+0xb6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	e023      	b.n	8004c92 <HAL_TIM_PWM_Start+0xfe>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_PWM_Start+0xc6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c58:	e01b      	b.n	8004c92 <HAL_TIM_PWM_Start+0xfe>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_PWM_Start+0xd6>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c68:	e013      	b.n	8004c92 <HAL_TIM_PWM_Start+0xfe>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b0c      	cmp	r3, #12
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0xe6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c78:	e00b      	b.n	8004c92 <HAL_TIM_PWM_Start+0xfe>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0xf6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c88:	e003      	b.n	8004c92 <HAL_TIM_PWM_Start+0xfe>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 ffaa 	bl	8005bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <HAL_TIM_PWM_Start+0x1e8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x13e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <HAL_TIM_PWM_Start+0x1ec>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x13e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a32      	ldr	r2, [pc, #200]	; (8004d84 <HAL_TIM_PWM_Start+0x1f0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x13e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <HAL_TIM_PWM_Start+0x1f4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x13e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <HAL_TIM_PWM_Start+0x1f8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0x142>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_PWM_Start+0x144>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <HAL_TIM_PWM_Start+0x1e8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01d      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x19e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d018      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x19e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <HAL_TIM_PWM_Start+0x1fc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x19e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <HAL_TIM_PWM_Start+0x200>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x19e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_TIM_PWM_Start+0x204>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x19e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <HAL_TIM_PWM_Start+0x1ec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x19e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_TIM_PWM_Start+0x1f0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d115      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <HAL_TIM_PWM_Start+0x208>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d015      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x1dc>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d011      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	e008      	b.n	8004d70 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	00010007 	.word	0x00010007

08004da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0202 	mvn.w	r2, #2
 8004dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fadc 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 face 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fadf 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d122      	bne.n	8004e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0204 	mvn.w	r2, #4
 8004e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fab2 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 faa4 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fab5 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d122      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0208 	mvn.w	r2, #8
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2204      	movs	r2, #4
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa88 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa7a 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fa8b 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0210 	mvn.w	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fa5e 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa50 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa61 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0201 	mvn.w	r2, #1
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb fe94 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 ffaa 	bl	8005ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 ff9d 	bl	8005eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d10e      	bne.n	8004faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa0f 	bl	80053c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0220 	mvn.w	r2, #32
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 ff5d 	bl	8005e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0fd      	b.n	80051f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b14      	cmp	r3, #20
 8005006:	f200 80f0 	bhi.w	80051ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005065 	.word	0x08005065
 8005014:	080051eb 	.word	0x080051eb
 8005018:	080051eb 	.word	0x080051eb
 800501c:	080051eb 	.word	0x080051eb
 8005020:	080050a5 	.word	0x080050a5
 8005024:	080051eb 	.word	0x080051eb
 8005028:	080051eb 	.word	0x080051eb
 800502c:	080051eb 	.word	0x080051eb
 8005030:	080050e7 	.word	0x080050e7
 8005034:	080051eb 	.word	0x080051eb
 8005038:	080051eb 	.word	0x080051eb
 800503c:	080051eb 	.word	0x080051eb
 8005040:	08005127 	.word	0x08005127
 8005044:	080051eb 	.word	0x080051eb
 8005048:	080051eb 	.word	0x080051eb
 800504c:	080051eb 	.word	0x080051eb
 8005050:	08005169 	.word	0x08005169
 8005054:	080051eb 	.word	0x080051eb
 8005058:	080051eb 	.word	0x080051eb
 800505c:	080051eb 	.word	0x080051eb
 8005060:	080051a9 	.word	0x080051a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fa50 	bl	8005510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0208 	orr.w	r2, r2, #8
 800507e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0204 	bic.w	r2, r2, #4
 800508e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	619a      	str	r2, [r3, #24]
      break;
 80050a2:	e0a3      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fac0 	bl	8005630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	619a      	str	r2, [r3, #24]
      break;
 80050e4:	e082      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fb29 	bl	8005744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0208 	orr.w	r2, r2, #8
 8005100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0204 	bic.w	r2, r2, #4
 8005110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69d9      	ldr	r1, [r3, #28]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	61da      	str	r2, [r3, #28]
      break;
 8005124:	e062      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fb91 	bl	8005854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	61da      	str	r2, [r3, #28]
      break;
 8005166:	e041      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fbda 	bl	8005928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051a6:	e021      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fc1e 	bl	80059f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e8:	e000      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80051ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop

08005200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIM_ConfigClockSource+0x18>
 8005214:	2302      	movs	r3, #2
 8005216:	e0b5      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x184>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800523a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005254:	d03e      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	f200 8087 	bhi.w	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	f000 8085 	beq.w	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d87f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d01a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005270:	2b70      	cmp	r3, #112	; 0x70
 8005272:	d87b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d050      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x11a>
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d877      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b50      	cmp	r3, #80	; 0x50
 800527e:	d03c      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xfa>
 8005280:	2b50      	cmp	r3, #80	; 0x50
 8005282:	d873      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d058      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x13a>
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d86f      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b30      	cmp	r3, #48	; 0x30
 800528e:	d064      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	2b30      	cmp	r3, #48	; 0x30
 8005292:	d86b      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d060      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	2b20      	cmp	r3, #32
 800529a:	d867      	bhi.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05c      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d05a      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052a4:	e062      	b.n	800536c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6899      	ldr	r1, [r3, #8]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f000 fc7d 	bl	8005bb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	609a      	str	r2, [r3, #8]
      break;
 80052d2:	e04e      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f000 fc66 	bl	8005bb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f6:	609a      	str	r2, [r3, #8]
      break;
 80052f8:	e03b      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fbd8 	bl	8005abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2150      	movs	r1, #80	; 0x50
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fc31 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 8005318:	e02b      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	f000 fbf7 	bl	8005b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2160      	movs	r1, #96	; 0x60
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fc21 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 8005338:	e01b      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	461a      	mov	r2, r3
 8005348:	f000 fbb8 	bl	8005abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fc11 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 8005358:	e00b      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fc08 	bl	8005b7a <TIM_ITRx_SetConfig>
        break;
 800536a:	e002      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800536c:	bf00      	nop
 800536e:	e000      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005370:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a40      	ldr	r2, [pc, #256]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3d      	ldr	r2, [pc, #244]	; (80054f4 <TIM_Base_SetConfig+0x118>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <TIM_Base_SetConfig+0x11c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <TIM_Base_SetConfig+0x120>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a3a      	ldr	r2, [pc, #232]	; (8005500 <TIM_Base_SetConfig+0x124>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2f      	ldr	r2, [pc, #188]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01f      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d01b      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <TIM_Base_SetConfig+0x118>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d017      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <TIM_Base_SetConfig+0x11c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <TIM_Base_SetConfig+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00f      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a29      	ldr	r2, [pc, #164]	; (8005500 <TIM_Base_SetConfig+0x124>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00b      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a28      	ldr	r2, [pc, #160]	; (8005504 <TIM_Base_SetConfig+0x128>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <TIM_Base_SetConfig+0x12c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <TIM_Base_SetConfig+0x130>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a12      	ldr	r2, [pc, #72]	; (8005500 <TIM_Base_SetConfig+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a11      	ldr	r2, [pc, #68]	; (8005504 <TIM_Base_SetConfig+0x128>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <TIM_Base_SetConfig+0x12c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0f      	ldr	r2, [pc, #60]	; (800550c <TIM_Base_SetConfig+0x130>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	615a      	str	r2, [r3, #20]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0201 	bic.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 0302 	bic.w	r3, r3, #2
 800555c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a2c      	ldr	r2, [pc, #176]	; (800561c <TIM_OC1_SetConfig+0x10c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_OC1_SetConfig+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2b      	ldr	r2, [pc, #172]	; (8005620 <TIM_OC1_SetConfig+0x110>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC1_SetConfig+0x80>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <TIM_OC1_SetConfig+0x114>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC1_SetConfig+0x80>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a29      	ldr	r2, [pc, #164]	; (8005628 <TIM_OC1_SetConfig+0x118>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC1_SetConfig+0x80>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a28      	ldr	r2, [pc, #160]	; (800562c <TIM_OC1_SetConfig+0x11c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10c      	bne.n	80055aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0308 	bic.w	r3, r3, #8
 8005596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1b      	ldr	r2, [pc, #108]	; (800561c <TIM_OC1_SetConfig+0x10c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_OC1_SetConfig+0xc2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <TIM_OC1_SetConfig+0x110>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_OC1_SetConfig+0xc2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <TIM_OC1_SetConfig+0x114>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC1_SetConfig+0xc2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a18      	ldr	r2, [pc, #96]	; (8005628 <TIM_OC1_SetConfig+0x118>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC1_SetConfig+0xc2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <TIM_OC1_SetConfig+0x11c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800

08005630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f023 0210 	bic.w	r2, r3, #16
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 0320 	bic.w	r3, r3, #32
 800567e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a28      	ldr	r2, [pc, #160]	; (8005730 <TIM_OC2_SetConfig+0x100>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC2_SetConfig+0x6c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a27      	ldr	r2, [pc, #156]	; (8005734 <TIM_OC2_SetConfig+0x104>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10d      	bne.n	80056b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <TIM_OC2_SetConfig+0x100>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00f      	beq.n	80056e0 <TIM_OC2_SetConfig+0xb0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <TIM_OC2_SetConfig+0x104>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_OC2_SetConfig+0xb0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <TIM_OC2_SetConfig+0x108>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_OC2_SetConfig+0xb0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	; (800573c <TIM_OC2_SetConfig+0x10c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_OC2_SetConfig+0xb0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a19      	ldr	r2, [pc, #100]	; (8005740 <TIM_OC2_SetConfig+0x110>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d113      	bne.n	8005708 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a27      	ldr	r2, [pc, #156]	; (8005840 <TIM_OC3_SetConfig+0xfc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_OC3_SetConfig+0x6a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a26      	ldr	r2, [pc, #152]	; (8005844 <TIM_OC3_SetConfig+0x100>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10d      	bne.n	80057ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <TIM_OC3_SetConfig+0xfc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00f      	beq.n	80057f2 <TIM_OC3_SetConfig+0xae>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <TIM_OC3_SetConfig+0x100>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <TIM_OC3_SetConfig+0xae>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <TIM_OC3_SetConfig+0x104>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d007      	beq.n	80057f2 <TIM_OC3_SetConfig+0xae>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a19      	ldr	r2, [pc, #100]	; (800584c <TIM_OC3_SetConfig+0x108>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <TIM_OC3_SetConfig+0xae>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a18      	ldr	r2, [pc, #96]	; (8005850 <TIM_OC3_SetConfig+0x10c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d113      	bne.n	800581a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	621a      	str	r2, [r3, #32]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40013400 	.word	0x40013400
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800

08005854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a18      	ldr	r2, [pc, #96]	; (8005914 <TIM_OC4_SetConfig+0xc0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00f      	beq.n	80058d8 <TIM_OC4_SetConfig+0x84>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_OC4_SetConfig+0xc4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00b      	beq.n	80058d8 <TIM_OC4_SetConfig+0x84>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <TIM_OC4_SetConfig+0xc8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <TIM_OC4_SetConfig+0x84>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a15      	ldr	r2, [pc, #84]	; (8005920 <TIM_OC4_SetConfig+0xcc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC4_SetConfig+0x84>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a14      	ldr	r2, [pc, #80]	; (8005924 <TIM_OC4_SetConfig+0xd0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d109      	bne.n	80058ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40013400 	.word	0x40013400
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800596c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a17      	ldr	r2, [pc, #92]	; (80059dc <TIM_OC5_SetConfig+0xb4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_OC5_SetConfig+0x7a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <TIM_OC5_SetConfig+0xb8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_OC5_SetConfig+0x7a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <TIM_OC5_SetConfig+0xbc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC5_SetConfig+0x7a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <TIM_OC5_SetConfig+0xc0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC5_SetConfig+0x7a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <TIM_OC5_SetConfig+0xc4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d109      	bne.n	80059b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800

080059f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	051b      	lsls	r3, r3, #20
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <TIM_OC6_SetConfig+0xb8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00f      	beq.n	8005a6c <TIM_OC6_SetConfig+0x7c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <TIM_OC6_SetConfig+0xbc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_OC6_SetConfig+0x7c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <TIM_OC6_SetConfig+0xc0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_OC6_SetConfig+0x7c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <TIM_OC6_SetConfig+0xc4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC6_SetConfig+0x7c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <TIM_OC6_SetConfig+0xc8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d109      	bne.n	8005a80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	029b      	lsls	r3, r3, #10
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800

08005abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 030a 	bic.w	r3, r3, #10
 8005af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0210 	bic.w	r2, r3, #16
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	031b      	lsls	r3, r3, #12
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f043 0307 	orr.w	r3, r3, #7
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	609a      	str	r2, [r3, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	609a      	str	r2, [r3, #8]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	2201      	movs	r2, #1
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	401a      	ands	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e068      	b.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2e      	ldr	r2, [pc, #184]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d108      	bne.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cca:	d018      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d10c      	bne.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40014000 	.word	0x40014000

08005d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e087      	b.n	8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	041b      	lsls	r3, r3, #16
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d106      	bne.n	8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d126      	bne.n	8005e6a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	051b      	lsls	r3, r3, #20
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d106      	bne.n	8005e6a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400

08005e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e042      	b.n	8005f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fb f81f 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2224      	movs	r2, #36	; 0x24
 8005efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f82c 	bl	8005f6c <UART_SetConfig>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e022      	b.n	8005f64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fb20 	bl	800656c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fba7 	bl	80066b0 <UART_CheckIdleState>
 8005f62:	4603      	mov	r3, r0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b08c      	sub	sp, #48	; 0x30
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4baa      	ldr	r3, [pc, #680]	; (8006244 <UART_SetConfig+0x2d8>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a9f      	ldr	r2, [pc, #636]	; (8006248 <UART_SetConfig+0x2dc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fe2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f023 010f 	bic.w	r1, r3, #15
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a90      	ldr	r2, [pc, #576]	; (800624c <UART_SetConfig+0x2e0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d125      	bne.n	800605c <UART_SetConfig+0xf0>
 8006010:	4b8f      	ldr	r3, [pc, #572]	; (8006250 <UART_SetConfig+0x2e4>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b03      	cmp	r3, #3
 800601c:	d81a      	bhi.n	8006054 <UART_SetConfig+0xe8>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <UART_SetConfig+0xb8>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006035 	.word	0x08006035
 8006028:	08006045 	.word	0x08006045
 800602c:	0800603d 	.word	0x0800603d
 8006030:	0800604d 	.word	0x0800604d
 8006034:	2301      	movs	r3, #1
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603a:	e116      	b.n	800626a <UART_SetConfig+0x2fe>
 800603c:	2302      	movs	r3, #2
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006042:	e112      	b.n	800626a <UART_SetConfig+0x2fe>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604a:	e10e      	b.n	800626a <UART_SetConfig+0x2fe>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006052:	e10a      	b.n	800626a <UART_SetConfig+0x2fe>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605a:	e106      	b.n	800626a <UART_SetConfig+0x2fe>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a7c      	ldr	r2, [pc, #496]	; (8006254 <UART_SetConfig+0x2e8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d138      	bne.n	80060d8 <UART_SetConfig+0x16c>
 8006066:	4b7a      	ldr	r3, [pc, #488]	; (8006250 <UART_SetConfig+0x2e4>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d82d      	bhi.n	80060d0 <UART_SetConfig+0x164>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x110>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060d1 	.word	0x080060d1
 8006084:	080060d1 	.word	0x080060d1
 8006088:	080060d1 	.word	0x080060d1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060d1 	.word	0x080060d1
 8006094:	080060d1 	.word	0x080060d1
 8006098:	080060d1 	.word	0x080060d1
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e0d8      	b.n	800626a <UART_SetConfig+0x2fe>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060be:	e0d4      	b.n	800626a <UART_SetConfig+0x2fe>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e0d0      	b.n	800626a <UART_SetConfig+0x2fe>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e0cc      	b.n	800626a <UART_SetConfig+0x2fe>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e0c8      	b.n	800626a <UART_SetConfig+0x2fe>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5e      	ldr	r2, [pc, #376]	; (8006258 <UART_SetConfig+0x2ec>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d125      	bne.n	800612e <UART_SetConfig+0x1c2>
 80060e2:	4b5b      	ldr	r3, [pc, #364]	; (8006250 <UART_SetConfig+0x2e4>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ec:	2b30      	cmp	r3, #48	; 0x30
 80060ee:	d016      	beq.n	800611e <UART_SetConfig+0x1b2>
 80060f0:	2b30      	cmp	r3, #48	; 0x30
 80060f2:	d818      	bhi.n	8006126 <UART_SetConfig+0x1ba>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d00a      	beq.n	800610e <UART_SetConfig+0x1a2>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d814      	bhi.n	8006126 <UART_SetConfig+0x1ba>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <UART_SetConfig+0x19a>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d008      	beq.n	8006116 <UART_SetConfig+0x1aa>
 8006104:	e00f      	b.n	8006126 <UART_SetConfig+0x1ba>
 8006106:	2300      	movs	r3, #0
 8006108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610c:	e0ad      	b.n	800626a <UART_SetConfig+0x2fe>
 800610e:	2302      	movs	r3, #2
 8006110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006114:	e0a9      	b.n	800626a <UART_SetConfig+0x2fe>
 8006116:	2304      	movs	r3, #4
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611c:	e0a5      	b.n	800626a <UART_SetConfig+0x2fe>
 800611e:	2308      	movs	r3, #8
 8006120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006124:	e0a1      	b.n	800626a <UART_SetConfig+0x2fe>
 8006126:	2310      	movs	r3, #16
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612c:	e09d      	b.n	800626a <UART_SetConfig+0x2fe>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4a      	ldr	r2, [pc, #296]	; (800625c <UART_SetConfig+0x2f0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d125      	bne.n	8006184 <UART_SetConfig+0x218>
 8006138:	4b45      	ldr	r3, [pc, #276]	; (8006250 <UART_SetConfig+0x2e4>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006142:	2bc0      	cmp	r3, #192	; 0xc0
 8006144:	d016      	beq.n	8006174 <UART_SetConfig+0x208>
 8006146:	2bc0      	cmp	r3, #192	; 0xc0
 8006148:	d818      	bhi.n	800617c <UART_SetConfig+0x210>
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d00a      	beq.n	8006164 <UART_SetConfig+0x1f8>
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d814      	bhi.n	800617c <UART_SetConfig+0x210>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <UART_SetConfig+0x1f0>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d008      	beq.n	800616c <UART_SetConfig+0x200>
 800615a:	e00f      	b.n	800617c <UART_SetConfig+0x210>
 800615c:	2300      	movs	r3, #0
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006162:	e082      	b.n	800626a <UART_SetConfig+0x2fe>
 8006164:	2302      	movs	r3, #2
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800616a:	e07e      	b.n	800626a <UART_SetConfig+0x2fe>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006172:	e07a      	b.n	800626a <UART_SetConfig+0x2fe>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617a:	e076      	b.n	800626a <UART_SetConfig+0x2fe>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006182:	e072      	b.n	800626a <UART_SetConfig+0x2fe>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a35      	ldr	r2, [pc, #212]	; (8006260 <UART_SetConfig+0x2f4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d12a      	bne.n	80061e4 <UART_SetConfig+0x278>
 800618e:	4b30      	ldr	r3, [pc, #192]	; (8006250 <UART_SetConfig+0x2e4>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619c:	d01a      	beq.n	80061d4 <UART_SetConfig+0x268>
 800619e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a2:	d81b      	bhi.n	80061dc <UART_SetConfig+0x270>
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a8:	d00c      	beq.n	80061c4 <UART_SetConfig+0x258>
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ae:	d815      	bhi.n	80061dc <UART_SetConfig+0x270>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <UART_SetConfig+0x250>
 80061b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b8:	d008      	beq.n	80061cc <UART_SetConfig+0x260>
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x270>
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c2:	e052      	b.n	800626a <UART_SetConfig+0x2fe>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ca:	e04e      	b.n	800626a <UART_SetConfig+0x2fe>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d2:	e04a      	b.n	800626a <UART_SetConfig+0x2fe>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061da:	e046      	b.n	800626a <UART_SetConfig+0x2fe>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e2:	e042      	b.n	800626a <UART_SetConfig+0x2fe>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <UART_SetConfig+0x2dc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d13a      	bne.n	8006264 <UART_SetConfig+0x2f8>
 80061ee:	4b18      	ldr	r3, [pc, #96]	; (8006250 <UART_SetConfig+0x2e4>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061fc:	d01a      	beq.n	8006234 <UART_SetConfig+0x2c8>
 80061fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006202:	d81b      	bhi.n	800623c <UART_SetConfig+0x2d0>
 8006204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006208:	d00c      	beq.n	8006224 <UART_SetConfig+0x2b8>
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620e:	d815      	bhi.n	800623c <UART_SetConfig+0x2d0>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <UART_SetConfig+0x2b0>
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006218:	d008      	beq.n	800622c <UART_SetConfig+0x2c0>
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x2d0>
 800621c:	2300      	movs	r3, #0
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006222:	e022      	b.n	800626a <UART_SetConfig+0x2fe>
 8006224:	2302      	movs	r3, #2
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622a:	e01e      	b.n	800626a <UART_SetConfig+0x2fe>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e01a      	b.n	800626a <UART_SetConfig+0x2fe>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e016      	b.n	800626a <UART_SetConfig+0x2fe>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e012      	b.n	800626a <UART_SetConfig+0x2fe>
 8006244:	cfff69f3 	.word	0xcfff69f3
 8006248:	40008000 	.word	0x40008000
 800624c:	40013800 	.word	0x40013800
 8006250:	40021000 	.word	0x40021000
 8006254:	40004400 	.word	0x40004400
 8006258:	40004800 	.word	0x40004800
 800625c:	40004c00 	.word	0x40004c00
 8006260:	40005000 	.word	0x40005000
 8006264:	2310      	movs	r3, #16
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4ab0      	ldr	r2, [pc, #704]	; (8006530 <UART_SetConfig+0x5c4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	f040 809b 	bne.w	80063ac <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800627a:	2b08      	cmp	r3, #8
 800627c:	d827      	bhi.n	80062ce <UART_SetConfig+0x362>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x318>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fd fbfc 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ae:	e014      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fd fc0c 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b9e      	ldr	r3, [pc, #632]	; (8006534 <UART_SetConfig+0x5c8>)
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fd fb3f 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8130 	beq.w	8006542 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	4a94      	ldr	r2, [pc, #592]	; (8006538 <UART_SetConfig+0x5cc>)
 80062e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d305      	bcc.n	8006312 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	d903      	bls.n	800631a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006318:	e113      	b.n	8006542 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	2200      	movs	r2, #0
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	60fa      	str	r2, [r7, #12]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	4a84      	ldr	r2, [pc, #528]	; (8006538 <UART_SetConfig+0x5cc>)
 8006328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632c:	b29b      	uxth	r3, r3
 800632e:	2200      	movs	r2, #0
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800633c:	f7f9 ff7a 	bl	8000234 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4610      	mov	r0, r2
 8006346:	4619      	mov	r1, r3
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	020b      	lsls	r3, r1, #8
 8006352:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006356:	0202      	lsls	r2, r0, #8
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	6849      	ldr	r1, [r1, #4]
 800635c:	0849      	lsrs	r1, r1, #1
 800635e:	2000      	movs	r0, #0
 8006360:	460c      	mov	r4, r1
 8006362:	4605      	mov	r5, r0
 8006364:	eb12 0804 	adds.w	r8, r2, r4
 8006368:	eb43 0905 	adc.w	r9, r3, r5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	469a      	mov	sl, r3
 8006374:	4693      	mov	fp, r2
 8006376:	4652      	mov	r2, sl
 8006378:	465b      	mov	r3, fp
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7f9 ff59 	bl	8000234 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4613      	mov	r3, r2
 8006388:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006390:	d308      	bcc.n	80063a4 <UART_SetConfig+0x438>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006398:	d204      	bcs.n	80063a4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e0ce      	b.n	8006542 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063aa:	e0ca      	b.n	8006542 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b4:	d167      	bne.n	8006486 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 80063b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d827      	bhi.n	800640e <UART_SetConfig+0x4a2>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <UART_SetConfig+0x458>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	0800640f 	.word	0x0800640f
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	0800640f 	.word	0x0800640f
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006407 	.word	0x08006407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e8:	f7fd fb5c 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ee:	e014      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f0:	f7fd fb6c 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063f6:	e010      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f8:	4b4e      	ldr	r3, [pc, #312]	; (8006534 <UART_SetConfig+0x5c8>)
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063fc:	e00d      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fe:	f7fd fa9f 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006404:	e009      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800640c:	e005      	b.n	800641a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8090 	beq.w	8006542 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	4a44      	ldr	r2, [pc, #272]	; (8006538 <UART_SetConfig+0x5cc>)
 8006428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642c:	461a      	mov	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	fbb3 f3f2 	udiv	r3, r3, r2
 8006434:	005a      	lsls	r2, r3, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	441a      	add	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	b29b      	uxth	r3, r3
 8006448:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b0f      	cmp	r3, #15
 800644e:	d916      	bls.n	800647e <UART_SetConfig+0x512>
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006456:	d212      	bcs.n	800647e <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f023 030f 	bic.w	r3, r3, #15
 8006460:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	b29b      	uxth	r3, r3
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	b29a      	uxth	r2, r3
 800646e:	8bfb      	ldrh	r3, [r7, #30]
 8006470:	4313      	orrs	r3, r2
 8006472:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	8bfa      	ldrh	r2, [r7, #30]
 800647a:	60da      	str	r2, [r3, #12]
 800647c:	e061      	b.n	8006542 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006484:	e05d      	b.n	8006542 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800648a:	2b08      	cmp	r3, #8
 800648c:	d827      	bhi.n	80064de <UART_SetConfig+0x572>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x528>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	080064df 	.word	0x080064df
 80064a4:	080064cf 	.word	0x080064cf
 80064a8:	080064df 	.word	0x080064df
 80064ac:	080064df 	.word	0x080064df
 80064b0:	080064df 	.word	0x080064df
 80064b4:	080064d7 	.word	0x080064d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7fd faf4 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064be:	e014      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c0:	f7fd fb04 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064c6:	e010      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <UART_SetConfig+0x5c8>)
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064cc:	e00d      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ce:	f7fd fa37 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064d4:	e009      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064dc:	e005      	b.n	80064ea <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064e8:	bf00      	nop
    }

    if (pclk != 0U)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d028      	beq.n	8006542 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	4a10      	ldr	r2, [pc, #64]	; (8006538 <UART_SetConfig+0x5cc>)
 80064f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	441a      	add	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	b29b      	uxth	r3, r3
 8006514:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2b0f      	cmp	r3, #15
 800651a:	d90f      	bls.n	800653c <UART_SetConfig+0x5d0>
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d20b      	bcs.n	800653c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6a3a      	ldr	r2, [r7, #32]
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	e009      	b.n	8006542 <UART_SetConfig+0x5d6>
 800652e:	bf00      	nop
 8006530:	40008000 	.word	0x40008000
 8006534:	00f42400 	.word	0x00f42400
 8006538:	08006efc 	.word	0x08006efc
      }
      else
      {
        ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2201      	movs	r2, #1
 8006546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2201      	movs	r2, #1
 800654e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800655e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006562:	4618      	mov	r0, r3
 8006564:	3730      	adds	r7, #48	; 0x30
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800656c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01a      	beq.n	8006682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800666a:	d10a      	bne.n	8006682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c0:	f7fa ff1c 	bl	80014fc <HAL_GetTick>
 80066c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d10e      	bne.n	80066f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f82f 	bl	8006746 <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e025      	b.n	800673e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d10e      	bne.n	800671e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f819 	bl	8006746 <UART_WaitOnFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e00f      	b.n	800673e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	4613      	mov	r3, r2
 8006754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006756:	e062      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d05e      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006760:	f7fa fecc 	bl	80014fc <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <UART_WaitOnFlagUntilTimeout+0x30>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d11d      	bne.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006784:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e045      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d02e      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ce:	d126      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e00f      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	429a      	cmp	r2, r3
 800683a:	d08d      	beq.n	8006758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_UARTEx_DisableFifoMode+0x16>
 8006858:	2302      	movs	r3, #2
 800685a:	e027      	b.n	80068ac <HAL_UARTEx_DisableFifoMode+0x66>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800688a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e02d      	b.n	800692c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2224      	movs	r2, #36	; 0x24
 80068dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f84f 	bl	80069b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006948:	2302      	movs	r3, #2
 800694a:	e02d      	b.n	80069a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2224      	movs	r2, #36	; 0x24
 8006958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f811 	bl	80069b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069d0:	e031      	b.n	8006a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069d2:	2308      	movs	r3, #8
 80069d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069d6:	2308      	movs	r3, #8
 80069d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	0e5b      	lsrs	r3, r3, #25
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	0f5b      	lsrs	r3, r3, #29
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	7b3a      	ldrb	r2, [r7, #12]
 80069fe:	4911      	ldr	r1, [pc, #68]	; (8006a44 <UARTEx_SetNbDataToProcess+0x94>)
 8006a00:	5c8a      	ldrb	r2, [r1, r2]
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	7b3a      	ldrb	r2, [r7, #12]
 8006a08:	490f      	ldr	r1, [pc, #60]	; (8006a48 <UARTEx_SetNbDataToProcess+0x98>)
 8006a0a:	5c8a      	ldrb	r2, [r1, r2]
 8006a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	7b7a      	ldrb	r2, [r7, #13]
 8006a1c:	4909      	ldr	r1, [pc, #36]	; (8006a44 <UARTEx_SetNbDataToProcess+0x94>)
 8006a1e:	5c8a      	ldrb	r2, [r1, r2]
 8006a20:	fb02 f303 	mul.w	r3, r2, r3
 8006a24:	7b7a      	ldrb	r2, [r7, #13]
 8006a26:	4908      	ldr	r1, [pc, #32]	; (8006a48 <UARTEx_SetNbDataToProcess+0x98>)
 8006a28:	5c8a      	ldrb	r2, [r1, r2]
 8006a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	08006f14 	.word	0x08006f14
 8006a48:	08006f1c 	.word	0x08006f1c

08006a4c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b08b      	sub	sp, #44	; 0x2c
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	fa93 f3a3 	rbit	r3, r3
 8006a66:	613b      	str	r3, [r7, #16]
  return result;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006a72:	2320      	movs	r3, #32
 8006a74:	e003      	b.n	8006a7e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	fab3 f383 	clz	r3, r3
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	2103      	movs	r1, #3
 8006a82:	fa01 f303 	lsl.w	r3, r1, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	401a      	ands	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	fa93 f3a3 	rbit	r3, r3
 8006a94:	61fb      	str	r3, [r7, #28]
  return result;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006aa0:	2320      	movs	r3, #32
 8006aa2:	e003      	b.n	8006aac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	fab3 f383 	clz	r3, r3
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	372c      	adds	r7, #44	; 0x2c
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	605a      	str	r2, [r3, #4]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b08b      	sub	sp, #44	; 0x2c
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	fa93 f3a3 	rbit	r3, r3
 8006b10:	613b      	str	r3, [r7, #16]
  return result;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	e003      	b.n	8006b28 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	2103      	movs	r1, #3
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	43db      	mvns	r3, r3
 8006b32:	401a      	ands	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	fa93 f3a3 	rbit	r3, r3
 8006b3e:	61fb      	str	r3, [r7, #28]
  return result;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	e003      	b.n	8006b56 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	fab3 f383 	clz	r3, r3
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006b64:	bf00      	nop
 8006b66:	372c      	adds	r7, #44	; 0x2c
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b08b      	sub	sp, #44	; 0x2c
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	fa93 f3a3 	rbit	r3, r3
 8006b8a:	613b      	str	r3, [r7, #16]
  return result;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006b96:	2320      	movs	r3, #32
 8006b98:	e003      	b.n	8006ba2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	2103      	movs	r1, #3
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	43db      	mvns	r3, r3
 8006bac:	401a      	ands	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	61fb      	str	r3, [r7, #28]
  return result;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006bc4:	2320      	movs	r3, #32
 8006bc6:	e003      	b.n	8006bd0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	60da      	str	r2, [r3, #12]
}
 8006bde:	bf00      	nop
 8006be0:	372c      	adds	r7, #44	; 0x2c
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b08b      	sub	sp, #44	; 0x2c
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1a      	ldr	r2, [r3, #32]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	fa93 f3a3 	rbit	r3, r3
 8006c04:	613b      	str	r3, [r7, #16]
  return result;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006c10:	2320      	movs	r3, #32
 8006c12:	e003      	b.n	8006c1c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	fab3 f383 	clz	r3, r3
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	210f      	movs	r1, #15
 8006c20:	fa01 f303 	lsl.w	r3, r1, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	401a      	ands	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	fa93 f3a3 	rbit	r3, r3
 8006c32:	61fb      	str	r3, [r7, #28]
  return result;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006c3e:	2320      	movs	r3, #32
 8006c40:	e003      	b.n	8006c4a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	fab3 f383 	clz	r3, r3
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c52:	431a      	orrs	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006c58:	bf00      	nop
 8006c5a:	372c      	adds	r7, #44	; 0x2c
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b08b      	sub	sp, #44	; 0x2c
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	fa93 f3a3 	rbit	r3, r3
 8006c80:	613b      	str	r3, [r7, #16]
  return result;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	e003      	b.n	8006c98 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	fab3 f383 	clz	r3, r3
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	210f      	movs	r1, #15
 8006c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	0a1b      	lsrs	r3, r3, #8
 8006ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	fa93 f3a3 	rbit	r3, r3
 8006cb0:	61fb      	str	r3, [r7, #28]
  return result;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	e003      	b.n	8006cc8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	fab3 f383 	clz	r3, r3
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006cd6:	bf00      	nop
 8006cd8:	372c      	adds	r7, #44	; 0x2c
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b088      	sub	sp, #32
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	fa93 f3a3 	rbit	r3, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
  return result;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <LL_GPIO_Init+0x26>
    return 32U;
 8006d04:	2320      	movs	r3, #32
 8006d06:	e003      	b.n	8006d10 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	fab3 f383 	clz	r3, r3
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d12:	e047      	b.n	8006da4 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	2101      	movs	r1, #1
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d039      	beq.n	8006d9e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d003      	beq.n	8006d3a <LL_GPIO_Init+0x58>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d10d      	bne.n	8006d56 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fed7 	bl	8006af6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	69b9      	ldr	r1, [r7, #24]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff feb8 	bl	8006ac6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff ff06 	bl	8006b70 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d111      	bne.n	8006d90 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2bff      	cmp	r3, #255	; 0xff
 8006d70:	d807      	bhi.n	8006d82 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	461a      	mov	r2, r3
 8006d78:	69b9      	ldr	r1, [r7, #24]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff ff35 	bl	8006bea <LL_GPIO_SetAFPin_0_7>
 8006d80:	e006      	b.n	8006d90 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	461a      	mov	r2, r3
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff ff6a 	bl	8006c64 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	461a      	mov	r2, r3
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff fe57 	bl	8006a4c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3301      	adds	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1b0      	bne.n	8006d14 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3720      	adds	r7, #32
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006dc4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006dc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4013      	ands	r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006df2:	b084      	sub	sp, #16
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	f107 0014 	add.w	r0, r7, #20
 8006e00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	b004      	add	sp, #16
 8006e32:	4770      	bx	lr

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	; (8006e6c <__libc_init_array+0x38>)
 8006e38:	2600      	movs	r6, #0
 8006e3a:	4c0d      	ldr	r4, [pc, #52]	; (8006e70 <__libc_init_array+0x3c>)
 8006e3c:	1b64      	subs	r4, r4, r5
 8006e3e:	10a4      	asrs	r4, r4, #2
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	; (8006e74 <__libc_init_array+0x40>)
 8006e46:	2600      	movs	r6, #0
 8006e48:	4c0b      	ldr	r4, [pc, #44]	; (8006e78 <__libc_init_array+0x44>)
 8006e4a:	f000 f81f 	bl	8006e8c <_init>
 8006e4e:	1b64      	subs	r4, r4, r5
 8006e50:	10a4      	asrs	r4, r4, #2
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	4798      	blx	r3
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	3601      	adds	r6, #1
 8006e68:	4798      	blx	r3
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	08006f2c 	.word	0x08006f2c
 8006e70:	08006f2c 	.word	0x08006f2c
 8006e74:	08006f2c 	.word	0x08006f2c
 8006e78:	08006f30 	.word	0x08006f30

08006e7c <memset>:
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d100      	bne.n	8006e86 <memset+0xa>
 8006e84:	4770      	bx	lr
 8006e86:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8a:	e7f9      	b.n	8006e80 <memset+0x4>

08006e8c <_init>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr

08006e98 <_fini>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr
