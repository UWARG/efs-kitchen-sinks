
cpp_can_initial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d54  08006d54  00008038  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d54  08006d54  00007d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d5c  08006d5c  00008038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d60  08006d60  00007d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08006d64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f14  20000038  08006d9c  00008038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f4c  08006d9c  00008f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019466  00000000  00000000  0000806e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003713  00000000  00000000  000214d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00024be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e5  00000000  00000000  000261f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039df  00000000  00000000  000272dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018092  00000000  00000000  0002acbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f6ad  00000000  00000000  00042d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001523fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b84  00000000  00000000  00152440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00157fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000038 	.word	0x20000038
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c58 	.word	0x08006c58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000003c 	.word	0x2000003c
 800023c:	08006c58 	.word	0x08006c58

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b9b0 	b.w	80005b8 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000276:	4688      	mov	r8, r1
 8000278:	4604      	mov	r4, r0
 800027a:	468e      	mov	lr, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d95f      	bls.n	8000346 <__udivmoddi4+0xd6>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 fe06 	lsl.w	lr, r1, r6
 8000294:	40b7      	lsls	r7, r6
 8000296:	40b4      	lsls	r4, r6
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	ea43 0e0e 	orr.w	lr, r3, lr
 80002a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	0c23      	lsrs	r3, r4, #16
 80002aa:	fbbe f1f8 	udiv	r1, lr, r8
 80002ae:	fb08 ee11 	mls	lr, r8, r1, lr
 80002b2:	fb01 f20c 	mul.w	r2, r1, ip
 80002b6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x5e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x5c>
 80002c6:	429a      	cmp	r2, r3
 80002c8:	f200 8154 	bhi.w	8000574 <__udivmoddi4+0x304>
 80002cc:	4601      	mov	r1, r0
 80002ce:	1a9b      	subs	r3, r3, r2
 80002d0:	b2a2      	uxth	r2, r4
 80002d2:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d6:	fb08 3310 	mls	r3, r8, r0, r3
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002e2:	4594      	cmp	ip, r2
 80002e4:	d90b      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002e6:	18ba      	adds	r2, r7, r2
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	bf2c      	ite	cs
 80002ee:	2401      	movcs	r4, #1
 80002f0:	2400      	movcc	r4, #0
 80002f2:	4594      	cmp	ip, r2
 80002f4:	d902      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002f6:	2c00      	cmp	r4, #0
 80002f8:	f000 813f 	beq.w	800057a <__udivmoddi4+0x30a>
 80002fc:	4618      	mov	r0, r3
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba2 020c 	sub.w	r2, r2, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f2      	lsrs	r2, r6
 800030c:	2300      	movs	r3, #0
 800030e:	e9c5 2300 	strd	r2, r3, [r5]
 8000312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d14e      	bne.n	80003cc <__udivmoddi4+0x15c>
 800032e:	4543      	cmp	r3, r8
 8000330:	f0c0 8112 	bcc.w	8000558 <__udivmoddi4+0x2e8>
 8000334:	4282      	cmp	r2, r0
 8000336:	f240 810f 	bls.w	8000558 <__udivmoddi4+0x2e8>
 800033a:	4608      	mov	r0, r1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e8      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000340:	e9c5 4e00 	strd	r4, lr, [r5]
 8000344:	e7e5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f000 80ac 	beq.w	80004a4 <__udivmoddi4+0x234>
 800034c:	fab2 f682 	clz	r6, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	f040 80bb 	bne.w	80004cc <__udivmoddi4+0x25c>
 8000356:	1a8b      	subs	r3, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b2bc      	uxth	r4, r7
 800035e:	2101      	movs	r1, #1
 8000360:	0c02      	lsrs	r2, r0, #16
 8000362:	b280      	uxth	r0, r0
 8000364:	fbb3 fcfe 	udiv	ip, r3, lr
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000370:	fb04 f20c 	mul.w	r2, r4, ip
 8000374:	429a      	cmp	r2, r3
 8000376:	d90e      	bls.n	8000396 <__udivmoddi4+0x126>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	429a      	cmp	r2, r3
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80ec 	beq.w	800056c <__udivmoddi4+0x2fc>
 8000394:	46c4      	mov	ip, r8
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	fbb3 f8fe 	udiv	r8, r3, lr
 800039c:	fb0e 3318 	mls	r3, lr, r8, r3
 80003a0:	fb04 f408 	mul.w	r4, r4, r8
 80003a4:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003a8:	4294      	cmp	r4, r2
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x154>
 80003ac:	18ba      	adds	r2, r7, r2
 80003ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	2001      	movcs	r0, #1
 80003b6:	2000      	movcc	r0, #0
 80003b8:	4294      	cmp	r4, r2
 80003ba:	d902      	bls.n	80003c2 <__udivmoddi4+0x152>
 80003bc:	2800      	cmp	r0, #0
 80003be:	f000 80d1 	beq.w	8000564 <__udivmoddi4+0x2f4>
 80003c2:	4698      	mov	r8, r3
 80003c4:	1b12      	subs	r2, r2, r4
 80003c6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003ca:	e79d      	b.n	8000308 <__udivmoddi4+0x98>
 80003cc:	f1c1 0620 	rsb	r6, r1, #32
 80003d0:	408b      	lsls	r3, r1
 80003d2:	fa08 f401 	lsl.w	r4, r8, r1
 80003d6:	fa00 f901 	lsl.w	r9, r0, r1
 80003da:	fa22 f706 	lsr.w	r7, r2, r6
 80003de:	fa28 f806 	lsr.w	r8, r8, r6
 80003e2:	408a      	lsls	r2, r1
 80003e4:	431f      	orrs	r7, r3
 80003e6:	fa20 f306 	lsr.w	r3, r0, r6
 80003ea:	0c38      	lsrs	r0, r7, #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fa1f fc87 	uxth.w	ip, r7
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	fbb8 fef0 	udiv	lr, r8, r0
 80003f8:	fb00 881e 	mls	r8, r0, lr, r8
 80003fc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000400:	fb0e f80c 	mul.w	r8, lr, ip
 8000404:	45a0      	cmp	r8, r4
 8000406:	d90e      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 80b8 	beq.w	8000594 <__udivmoddi4+0x324>
 8000424:	46d6      	mov	lr, sl
 8000426:	eba4 0408 	sub.w	r4, r4, r8
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	fb03 fc0c 	mul.w	ip, r3, ip
 800043a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800043e:	45a4      	cmp	ip, r4
 8000440:	d90e      	bls.n	8000460 <__udivmoddi4+0x1f0>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	bf2c      	ite	cs
 800044a:	f04f 0801 	movcs.w	r8, #1
 800044e:	f04f 0800 	movcc.w	r8, #0
 8000452:	45a4      	cmp	ip, r4
 8000454:	d903      	bls.n	800045e <__udivmoddi4+0x1ee>
 8000456:	f1b8 0f00 	cmp.w	r8, #0
 800045a:	f000 809f 	beq.w	800059c <__udivmoddi4+0x32c>
 800045e:	4603      	mov	r3, r0
 8000460:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	fba0 ec02 	umull	lr, ip, r0, r2
 800046c:	4564      	cmp	r4, ip
 800046e:	4673      	mov	r3, lr
 8000470:	46e0      	mov	r8, ip
 8000472:	d302      	bcc.n	800047a <__udivmoddi4+0x20a>
 8000474:	d107      	bne.n	8000486 <__udivmoddi4+0x216>
 8000476:	45f1      	cmp	r9, lr
 8000478:	d205      	bcs.n	8000486 <__udivmoddi4+0x216>
 800047a:	ebbe 0302 	subs.w	r3, lr, r2
 800047e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000482:	3801      	subs	r0, #1
 8000484:	46e0      	mov	r8, ip
 8000486:	b15d      	cbz	r5, 80004a0 <__udivmoddi4+0x230>
 8000488:	ebb9 0203 	subs.w	r2, r9, r3
 800048c:	eb64 0408 	sbc.w	r4, r4, r8
 8000490:	fa04 f606 	lsl.w	r6, r4, r6
 8000494:	fa22 f301 	lsr.w	r3, r2, r1
 8000498:	40cc      	lsrs	r4, r1
 800049a:	431e      	orrs	r6, r3
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e736      	b.n	8000312 <__udivmoddi4+0xa2>
 80004a4:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a8:	0c01      	lsrs	r1, r0, #16
 80004aa:	4614      	mov	r4, r2
 80004ac:	b280      	uxth	r0, r0
 80004ae:	4696      	mov	lr, r2
 80004b0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004b4:	2620      	movs	r6, #32
 80004b6:	4690      	mov	r8, r2
 80004b8:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004bc:	4610      	mov	r0, r2
 80004be:	fbb1 f1f2 	udiv	r1, r1, r2
 80004c2:	eba3 0308 	sub.w	r3, r3, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e74b      	b.n	8000364 <__udivmoddi4+0xf4>
 80004cc:	40b7      	lsls	r7, r6
 80004ce:	f1c6 0320 	rsb	r3, r6, #32
 80004d2:	fa01 f206 	lsl.w	r2, r1, r6
 80004d6:	fa21 f803 	lsr.w	r8, r1, r3
 80004da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004de:	fa20 f303 	lsr.w	r3, r0, r3
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	40b0      	lsls	r0, r6
 80004e6:	4313      	orrs	r3, r2
 80004e8:	0c02      	lsrs	r2, r0, #16
 80004ea:	0c19      	lsrs	r1, r3, #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	fbb8 f9fe 	udiv	r9, r8, lr
 80004f2:	fb0e 8819 	mls	r8, lr, r9, r8
 80004f6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	4588      	cmp	r8, r1
 8000500:	d951      	bls.n	80005a6 <__udivmoddi4+0x336>
 8000502:	1879      	adds	r1, r7, r1
 8000504:	f109 3cff 	add.w	ip, r9, #4294967295
 8000508:	bf2c      	ite	cs
 800050a:	f04f 0a01 	movcs.w	sl, #1
 800050e:	f04f 0a00 	movcc.w	sl, #0
 8000512:	4588      	cmp	r8, r1
 8000514:	d902      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000516:	f1ba 0f00 	cmp.w	sl, #0
 800051a:	d031      	beq.n	8000580 <__udivmoddi4+0x310>
 800051c:	eba1 0108 	sub.w	r1, r1, r8
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	fb0e 1119 	mls	r1, lr, r9, r1
 800052c:	b29b      	uxth	r3, r3
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	4543      	cmp	r3, r8
 8000534:	d235      	bcs.n	80005a2 <__udivmoddi4+0x332>
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	f109 31ff 	add.w	r1, r9, #4294967295
 800053c:	bf2c      	ite	cs
 800053e:	f04f 0a01 	movcs.w	sl, #1
 8000542:	f04f 0a00 	movcc.w	sl, #0
 8000546:	4543      	cmp	r3, r8
 8000548:	d2bb      	bcs.n	80004c2 <__udivmoddi4+0x252>
 800054a:	f1ba 0f00 	cmp.w	sl, #0
 800054e:	d1b8      	bne.n	80004c2 <__udivmoddi4+0x252>
 8000550:	f1a9 0102 	sub.w	r1, r9, #2
 8000554:	443b      	add	r3, r7
 8000556:	e7b4      	b.n	80004c2 <__udivmoddi4+0x252>
 8000558:	1a84      	subs	r4, r0, r2
 800055a:	eb68 0203 	sbc.w	r2, r8, r3
 800055e:	2001      	movs	r0, #1
 8000560:	4696      	mov	lr, r2
 8000562:	e6eb      	b.n	800033c <__udivmoddi4+0xcc>
 8000564:	443a      	add	r2, r7
 8000566:	f1a8 0802 	sub.w	r8, r8, #2
 800056a:	e72b      	b.n	80003c4 <__udivmoddi4+0x154>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	443b      	add	r3, r7
 8000572:	e710      	b.n	8000396 <__udivmoddi4+0x126>
 8000574:	3902      	subs	r1, #2
 8000576:	443b      	add	r3, r7
 8000578:	e6a9      	b.n	80002ce <__udivmoddi4+0x5e>
 800057a:	443a      	add	r2, r7
 800057c:	3802      	subs	r0, #2
 800057e:	e6be      	b.n	80002fe <__udivmoddi4+0x8e>
 8000580:	eba7 0808 	sub.w	r8, r7, r8
 8000584:	f1a9 0c02 	sub.w	ip, r9, #2
 8000588:	4441      	add	r1, r8
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	e7c9      	b.n	8000528 <__udivmoddi4+0x2b8>
 8000594:	f1ae 0e02 	sub.w	lr, lr, #2
 8000598:	443c      	add	r4, r7
 800059a:	e744      	b.n	8000426 <__udivmoddi4+0x1b6>
 800059c:	3b02      	subs	r3, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e75e      	b.n	8000460 <__udivmoddi4+0x1f0>
 80005a2:	4649      	mov	r1, r9
 80005a4:	e78d      	b.n	80004c2 <__udivmoddi4+0x252>
 80005a6:	eba1 0108 	sub.w	r1, r1, r8
 80005aa:	46cc      	mov	ip, r9
 80005ac:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b0:	fb09 f804 	mul.w	r8, r9, r4
 80005b4:	e7b8      	b.n	8000528 <__udivmoddi4+0x2b8>
 80005b6:	bf00      	nop

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fd7e 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f842 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8ec 	bl	80007a4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005cc:	f000 f8d6 	bl	800077c <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 80005d0:	f000 f88e 	bl	80006f0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f003 ffc2 	bl	800455c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d8:	4a18      	ldr	r2, [pc, #96]	@ (800063c <main+0x80>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4818      	ldr	r0, [pc, #96]	@ (8000640 <main+0x84>)
 80005de:	f004 f807 	bl	80045f0 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <main+0x88>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fac1 	bl	8000b70 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fabe 	bl	8000b70 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 fabb 	bl	8000b70 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005fa:	2101      	movs	r1, #1
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fb15 	bl	8000c2c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <main+0x8c>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000608:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <main+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <main+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <main+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <main+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000622:	4909      	ldr	r1, [pc, #36]	@ (8000648 <main+0x8c>)
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fbbd 	bl	8000da4 <BSP_COM_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x78>
  {
    Error_Handler();
 8000630:	f000 f8f0 	bl	8000814 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000634:	f003 ffb6 	bl	80045a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <main+0x7c>
 800063c:	08006cc0 	.word	0x08006cc0
 8000640:	08000805 	.word	0x08000805
 8000644:	200000c8 	.word	0x200000c8
 8000648:	20000054 	.word	0x20000054

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b098      	sub	sp, #96	@ 0x60
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2248      	movs	r2, #72	@ 0x48
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fac2 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800066e:	2000      	movs	r0, #0
 8000670:	f001 fc46 	bl	8001f00 <HAL_PWREx_ControlVoltageScaling>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800067a:	f000 f8cb 	bl	8000814 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800067e:	2310      	movs	r3, #16
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000686:	2300      	movs	r3, #0
 8000688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800068a:	2360      	movs	r3, #96	@ 0x60
 800068c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000692:	2301      	movs	r3, #1
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800069a:	2337      	movs	r3, #55	@ 0x37
 800069c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069e:	2307      	movs	r3, #7
 80006a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fcc6 	bl	8002040 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ba:	f000 f8ab 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 f988 	bl	80029ec <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e2:	f000 f897 	bl	8000814 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3760      	adds	r7, #96	@ 0x60
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 80006f6:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <MX_FDCAN1_Init+0x88>)
 80006f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000708:	2203      	movs	r2, #3
 800070a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 800070e:	2201      	movs	r2, #1
 8000710:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 800071a:	2200      	movs	r2, #0
 800071c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000720:	2204      	movs	r2, #4
 8000722:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000724:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000726:	2201      	movs	r2, #1
 8000728:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000732:	2201      	movs	r2, #1
 8000734:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000738:	2204      	movs	r2, #4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 800073e:	2201      	movs	r2, #1
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000744:	2201      	movs	r2, #1
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 800074a:	2201      	movs	r2, #1
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000756:	2201      	movs	r2, #1
 8000758:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_FDCAN1_Init+0x84>)
 8000762:	f000 fea7 	bl	80014b4 <HAL_FDCAN_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800076c:	f000 f852 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000064 	.word	0x20000064
 8000778:	4000a400 	.word	0x4000a400

0800077c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000780:	2000      	movs	r0, #0
 8000782:	f001 fb7f 	bl	8001e84 <HAL_ICACHE_ConfigAssociativityMode>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800078c:	f000 f842 	bl	8000814 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000790:	f001 fb98 	bl	8001ec4 <HAL_ICACHE_Enable>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800079a:	f000 f83b 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_GPIO_Init+0x5c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f003 ff81 	bl	8004714 <osDelay>
 8000812:	e7fb      	b.n	800080c <StartDefaultTask+0x8>

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_MspInit+0x50>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <HAL_MspInit+0x50>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	@ 0x60
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_MspInit+0x50>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <HAL_MspInit+0x50>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000842:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <HAL_MspInit+0x50>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	@ 0x58
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_MspInit+0x50>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2107      	movs	r1, #7
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fd6c 	bl	800133a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000862:	f001 fbb9 	bl	8001fd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0ae      	sub	sp, #184	@ 0xb8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2294      	movs	r2, #148	@ 0x94
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f006 f9a5 	bl	8006be4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a26      	ldr	r2, [pc, #152]	@ (8000938 <HAL_FDCAN_MspInit+0xc4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d145      	bne.n	8000930 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80008aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fb7d 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008c0:	f7ff ffa8 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <HAL_FDCAN_MspInit+0xc8>)
 80008c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008c8:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <HAL_FDCAN_MspInit+0xc8>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <HAL_FDCAN_MspInit+0xc8>)
 80008d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <HAL_FDCAN_MspInit+0xc8>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	4a16      	ldr	r2, [pc, #88]	@ (800093c <HAL_FDCAN_MspInit+0xc8>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_FDCAN_MspInit+0xc8>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800090e:	2309      	movs	r3, #9
 8000910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000918:	4619      	mov	r1, r3
 800091a:	4809      	ldr	r0, [pc, #36]	@ (8000940 <HAL_FDCAN_MspInit+0xcc>)
 800091c:	f001 f91a 	bl	8001b54 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2105      	movs	r1, #5
 8000924:	2027      	movs	r0, #39	@ 0x27
 8000926:	f000 fd08 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800092a:	2027      	movs	r0, #39	@ 0x27
 800092c:	f000 fd1f 	bl	800136e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000930:	bf00      	nop
 8000932:	37b8      	adds	r7, #184	@ 0xb8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	4000a400 	.word	0x4000a400
 800093c:	40021000 	.word	0x40021000
 8000940:	42020000 	.word	0x42020000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f9fa 	bl	8000d78 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <FDCAN1_IT0_IRQHandler+0x10>)
 800098e:	f000 fee3 	bl	8001758 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000064 	.word	0x20000064

0800099c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80009c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d107      	bne.n	80009e2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80009d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 80009d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e005      	b.n	80009ee <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80009e2:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 030f 	and.w	r3, r3, #15
 80009ec:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80009ee:	4a46      	ldr	r2, [pc, #280]	@ (8000b08 <SystemCoreClockUpdate+0x148>)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009f8:	4b42      	ldr	r3, [pc, #264]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f003 030c 	and.w	r3, r3, #12
 8000a00:	2b0c      	cmp	r3, #12
 8000a02:	d866      	bhi.n	8000ad2 <SystemCoreClockUpdate+0x112>
 8000a04:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <SystemCoreClockUpdate+0x4c>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000ad3 	.word	0x08000ad3
 8000a14:	08000ad3 	.word	0x08000ad3
 8000a18:	08000ad3 	.word	0x08000ad3
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000ad3 	.word	0x08000ad3
 8000a24:	08000ad3 	.word	0x08000ad3
 8000a28:	08000ad3 	.word	0x08000ad3
 8000a2c:	08000a51 	.word	0x08000a51
 8000a30:	08000ad3 	.word	0x08000ad3
 8000a34:	08000ad3 	.word	0x08000ad3
 8000a38:	08000ad3 	.word	0x08000ad3
 8000a3c:	08000a59 	.word	0x08000a59
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000a40:	4a32      	ldr	r2, [pc, #200]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	6013      	str	r3, [r2, #0]
      break;
 8000a46:	e048      	b.n	8000ada <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a48:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000a4a:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <SystemCoreClockUpdate+0x150>)
 8000a4c:	601a      	str	r2, [r3, #0]
      break;
 8000a4e:	e044      	b.n	8000ada <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000a52:	4a30      	ldr	r2, [pc, #192]	@ (8000b14 <SystemCoreClockUpdate+0x154>)
 8000a54:	601a      	str	r2, [r3, #0]
      break;
 8000a56:	e040      	b.n	8000ada <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a58:	4b2a      	ldr	r3, [pc, #168]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	091b      	lsrs	r3, r3, #4
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d003      	beq.n	8000a7e <SystemCoreClockUpdate+0xbe>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d006      	beq.n	8000a8a <SystemCoreClockUpdate+0xca>
 8000a7c:	e00b      	b.n	8000a96 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000a7e:	4a24      	ldr	r2, [pc, #144]	@ (8000b10 <SystemCoreClockUpdate+0x150>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	613b      	str	r3, [r7, #16]
          break;
 8000a88:	e00b      	b.n	8000aa2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000a8a:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <SystemCoreClockUpdate+0x154>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	613b      	str	r3, [r7, #16]
          break;
 8000a94:	e005      	b.n	8000aa2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	613b      	str	r3, [r7, #16]
          break;
 8000aa0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0e5b      	lsrs	r3, r3, #25
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	3301      	adds	r3, #1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000acc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000ace:	6013      	str	r3, [r2, #0]
      break;
 8000ad0:	e003      	b.n	8000ada <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	6013      	str	r3, [r2, #0]
      break;
 8000ad8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <SystemCoreClockUpdate+0x144>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	f003 030f 	and.w	r3, r3, #15
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <SystemCoreClockUpdate+0x158>)
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	fa22 f303 	lsr.w	r3, r2, r3
 8000af4:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <SystemCoreClockUpdate+0x14c>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000
 8000b08:	08006cfc 	.word	0x08006cfc
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	00f42400 	.word	0x00f42400
 8000b14:	007a1200 	.word	0x007a1200
 8000b18:	08006ce4 	.word	0x08006ce4

08000b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff ff3c 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b26:	e003      	b.n	8000b30 <LoopCopyDataInit>

08000b28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b2e:	3104      	adds	r1, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b38:	d3f6      	bcc.n	8000b28 <CopyDataInit>
	ldr	r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b3c:	e002      	b.n	8000b44 <LoopFillZerobss>

08000b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b40:	f842 3b04 	str.w	r3, [r2], #4

08000b44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <LoopForever+0x16>)
	cmp	r2, r3
 8000b46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b48:	d3f9      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f006 f853 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4e:	f7ff fd35 	bl	80005bc <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b54:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000b58:	08006d64 	.word	0x08006d64
	ldr	r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b60:	20000038 	.word	0x20000038
	ldr	r2, =_sbss
 8000b64:	20000038 	.word	0x20000038
	ldr	r3, = _ebss
 8000b68:	20002f4c 	.word	0x20002f4c

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10c      	bne.n	8000b9a <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b84:	4a26      	ldr	r2, [pc, #152]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8c:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	e01b      	b.n	8000bd2 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10c      	bne.n	8000bba <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bac:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	e00b      	b.n	8000bd2 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <BSP_LED_Init+0xb0>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	@ (8000c24 <BSP_LED_Init+0xb4>)
 8000bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <BSP_LED_Init+0xb8>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	f107 0214 	add.w	r2, r7, #20
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 ffac 	bl	8001b54 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <BSP_LED_Init+0xb8>)
 8000c00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <BSP_LED_Init+0xb4>)
 8000c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f001 f920 	bl	8001e54 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	20000004 	.word	0x20000004
 8000c28:	2000000c 	.word	0x2000000c

08000c2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	@ 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000c40:	230f      	movs	r3, #15
 8000c42:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000c44:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <BSP_PB_Init+0x118>)
 8000c46:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000c48:	4b3f      	ldr	r3, [pc, #252]	@ (8000d48 <BSP_PB_Init+0x11c>)
 8000c4a:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d4c <BSP_PB_Init+0x120>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a3e      	ldr	r2, [pc, #248]	@ (8000d4c <BSP_PB_Init+0x120>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b3c      	ldr	r3, [pc, #240]	@ (8000d4c <BSP_PB_Init+0x120>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a3a      	ldr	r2, [pc, #232]	@ (8000d50 <BSP_PB_Init+0x124>)
 8000c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10b      	bne.n	8000c94 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a34      	ldr	r2, [pc, #208]	@ (8000d54 <BSP_PB_Init+0x128>)
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	f107 0218 	add.w	r2, r7, #24
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 ff60 	bl	8001b54 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d14f      	bne.n	8000d3a <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8000c9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d54 <BSP_PB_Init+0x128>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	f107 0218 	add.w	r2, r7, #24
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ff50 	bl	8001b54 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4a26      	ldr	r2, [pc, #152]	@ (8000d58 <BSP_PB_Init+0x12c>)
 8000cc0:	441a      	add	r2, r3
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	3330      	adds	r3, #48	@ 0x30
 8000cc8:	443b      	add	r3, r7
 8000cca:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f000 fb92 	bl	80013fa <HAL_EXTI_GetHandle>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12b      	bne.n	8000d34 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <BSP_PB_Init+0x12c>)
 8000ce8:	1898      	adds	r0, r3, r2
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	3330      	adds	r3, #48	@ 0x30
 8000cf0:	443b      	add	r3, r7
 8000cf2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f000 fb52 	bl	80013a2 <HAL_EXTI_RegisterCallback>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d113      	bne.n	8000d2c <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <BSP_PB_Init+0x130>)
 8000d08:	56d0      	ldrsb	r0, [r2, r3]
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	3330      	adds	r3, #48	@ 0x30
 8000d10:	443b      	add	r3, r7
 8000d12:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f000 fb0e 	bl	800133a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <BSP_PB_Init+0x130>)
 8000d22:	56d3      	ldrsb	r3, [r2, r3]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fb22 	bl	800136e <HAL_NVIC_EnableIRQ>
 8000d2a:	e006      	b.n	8000d3a <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000d2c:	f06f 0303 	mvn.w	r3, #3
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d32:	e002      	b.n	8000d3a <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000d34:	f06f 0303 	mvn.w	r3, #3
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8000d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3730      	adds	r7, #48	@ 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	0600000d 	.word	0x0600000d
 8000d48:	08000f11 	.word	0x08000f11
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	20000018 	.word	0x20000018
 8000d54:	2000001c 	.word	0x2000001c
 8000d58:	200001f4 	.word	0x200001f4
 8000d5c:	20000020 	.word	0x20000020

08000d60 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <BSP_PB_IRQHandler+0x28>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fb47 	bl	8001424 <HAL_EXTI_IRQHandler>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001f4 	.word	0x200001f4

08000da4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000dba:	f06f 0301 	mvn.w	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e03a      	b.n	8000e38 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	491f      	ldr	r1, [pc, #124]	@ (8000e44 <BSP_COM_Init+0xa0>)
 8000dc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dcc:	491e      	ldr	r1, [pc, #120]	@ (8000e48 <BSP_COM_Init+0xa4>)
 8000dce:	2094      	movs	r0, #148	@ 0x94
 8000dd0:	fb00 f303 	mul.w	r3, r0, r3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2294      	movs	r2, #148	@ 0x94
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <BSP_COM_Init+0xa4>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f89b 	bl	8000f20 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d123      	bne.n	8000e38 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d110      	bne.n	8000e18 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2294      	movs	r2, #148	@ 0x94
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <BSP_COM_Init+0xa4>)
 8000e00:	4413      	add	r3, r2
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f821 	bl	8000e4c <MX_LPUART1_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000e10:	f06f 0303 	mvn.w	r3, #3
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e00f      	b.n	8000e38 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2294      	movs	r2, #148	@ 0x94
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	4a09      	ldr	r2, [pc, #36]	@ (8000e48 <BSP_COM_Init+0xa4>)
 8000e22:	4413      	add	r3, r2
 8000e24:	6839      	ldr	r1, [r7, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f841 	bl	8000eae <MX_USART3_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000e32:	f06f 0303 	mvn.w	r3, #3
 8000e36:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8000e38:	68fb      	ldr	r3, [r7, #12]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000024 	.word	0x20000024
 8000e48:	200000cc 	.word	0x200000cc

08000e4c <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	891b      	ldrh	r3, [r3, #8]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	895b      	ldrh	r3, [r3, #10]
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	899b      	ldrh	r3, [r3, #12]
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e90:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f002 fd9e 	bl	80039e0 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	891b      	ldrh	r3, [r3, #8]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	895b      	ldrh	r3, [r3, #10]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	899b      	ldrh	r3, [r3, #12]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ef2:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f002 fd6d 	bl	80039e0 <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ff23 	bl	8000d60 <BSP_PB_Callback>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b098      	sub	sp, #96	@ 0x60
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8000f28:	4a60      	ldr	r2, [pc, #384]	@ (80010ac <UART_MspInit+0x18c>)
 8000f2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f32:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8000f36:	4a5d      	ldr	r2, [pc, #372]	@ (80010ac <UART_MspInit+0x18c>)
 8000f38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8000f44:	4b5a      	ldr	r3, [pc, #360]	@ (80010b0 <UART_MspInit+0x190>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80010b4 <UART_MspInit+0x194>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8000f50:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000f54:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8000f56:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000f5a:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a55      	ldr	r2, [pc, #340]	@ (80010b8 <UART_MspInit+0x198>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8000f70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d132      	bne.n	8000fde <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b50      	ldr	r3, [pc, #320]	@ (80010bc <UART_MspInit+0x19c>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	@ (80010bc <UART_MspInit+0x19c>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f84:	4b4d      	ldr	r3, [pc, #308]	@ (80010bc <UART_MspInit+0x19c>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8000f90:	f001 f812 	bl	8001fb8 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8000f94:	4b49      	ldr	r3, [pc, #292]	@ (80010bc <UART_MspInit+0x19c>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	4a48      	ldr	r2, [pc, #288]	@ (80010bc <UART_MspInit+0x19c>)
 8000f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa0:	4b46      	ldr	r3, [pc, #280]	@ (80010bc <UART_MspInit+0x19c>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa8:	623b      	str	r3, [r7, #32]
 8000faa:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8000fac:	4b43      	ldr	r3, [pc, #268]	@ (80010bc <UART_MspInit+0x19c>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	4a42      	ldr	r2, [pc, #264]	@ (80010bc <UART_MspInit+0x19c>)
 8000fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb8:	4b40      	ldr	r3, [pc, #256]	@ (80010bc <UART_MspInit+0x19c>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80010bc <UART_MspInit+0x19c>)
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80010bc <UART_MspInit+0x19c>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80010bc <UART_MspInit+0x19c>)
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	e023      	b.n	8001026 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8000fde:	4b37      	ldr	r3, [pc, #220]	@ (80010bc <UART_MspInit+0x19c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a36      	ldr	r2, [pc, #216]	@ (80010bc <UART_MspInit+0x19c>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <UART_MspInit+0x19c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <UART_MspInit+0x19c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a30      	ldr	r2, [pc, #192]	@ (80010bc <UART_MspInit+0x19c>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b2e      	ldr	r3, [pc, #184]	@ (80010bc <UART_MspInit+0x19c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <UART_MspInit+0x19c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <UART_MspInit+0x19c>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001018:	6593      	str	r3, [r2, #88]	@ 0x58
 800101a:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <UART_MspInit+0x19c>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8001026:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	3360      	adds	r3, #96	@ 0x60
 800102e:	443b      	add	r3, r7
 8001030:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 800103a:	2302      	movs	r3, #2
 800103c:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 8001042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001046:	3360      	adds	r3, #96	@ 0x60
 8001048:	443b      	add	r3, r7
 800104a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800104e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8001050:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	3360      	adds	r3, #96	@ 0x60
 8001058:	443b      	add	r3, r7
 800105a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800105e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fd75 	bl	8001b54 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 800106a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	3360      	adds	r3, #96	@ 0x60
 8001072:	443b      	add	r3, r7
 8001074:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 800107a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800107e:	3360      	adds	r3, #96	@ 0x60
 8001080:	443b      	add	r3, r7
 8001082:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001086:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8001088:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	3360      	adds	r3, #96	@ 0x60
 8001090:	443b      	add	r3, r7
 8001092:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001096:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fd59 	bl	8001b54 <HAL_GPIO_Init>
}
 80010a2:	bf00      	nop
 80010a4:	3760      	adds	r7, #96	@ 0x60
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	08006c98 	.word	0x08006c98
 80010b0:	08006ca0 	.word	0x08006ca0
 80010b4:	08006ca4 	.word	0x08006ca4
 80010b8:	40008000 	.word	0x40008000
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010ca:	2004      	movs	r0, #4
 80010cc:	f000 f92a 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80010d0:	f7ff fc76 	bl	80009c0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d4:	2007      	movs	r0, #7
 80010d6:	f000 f80d 	bl	80010f4 <HAL_InitTick>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	e001      	b.n	80010ea <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e6:	f7ff fb9b 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d023      	beq.n	8001150 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_InitTick+0x70>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <HAL_InitTick+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f933 	bl	800138a <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b07      	cmp	r3, #7
 800112e:	d809      	bhi.n	8001144 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f8ff 	bl	800133a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_InitTick+0x74>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e007      	b.n	8001154 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e004      	b.n	8001154 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e001      	b.n	8001154 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000030 	.word	0x20000030
 8001164:	20000000 	.word	0x20000000
 8001168:	2000002c 	.word	0x2000002c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000200 	.word	0x20000200

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	@ (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0152      	lsls	r2, r2, #5
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0152      	lsls	r2, r2, #5
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b03      	cmp	r3, #3
 8001294:	bf28      	it	cs
 8001296:	2303      	movcs	r3, #3
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3303      	adds	r3, #3
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b04      	subs	r3, #4
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	2107      	movs	r1, #7
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff40 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff90 	bl	8001278 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5f 	bl	8001224 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff33 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa4 	bl	80012e0 <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	460b      	mov	r3, r1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d011      	beq.n	80013de <HAL_EXTI_RegisterCallback+0x3c>
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	dc13      	bgt.n	80013e6 <HAL_EXTI_RegisterCallback+0x44>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_EXTI_RegisterCallback+0x26>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d007      	beq.n	80013d6 <HAL_EXTI_RegisterCallback+0x34>
 80013c6:	e00e      	b.n	80013e6 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
      break;
 80013d4:	e00a      	b.n	80013ec <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]
      break;
 80013dc:	e006      	b.n	80013ec <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
      break;
 80013e4:	e002      	b.n	80013ec <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
      break;
 80013ea:	bf00      	nop
  }

  return status;
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e003      	b.n	8001416 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	2201      	movs	r2, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <HAL_EXTI_IRQHandler+0x88>)
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_EXTI_IRQHandler+0x8c>)
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4798      	blx	r3
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	4002f40c 	.word	0x4002f40c
 80014b0:	4002f410 	.word	0x4002f410

080014b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e142      	b.n	800174c <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff f9ca 	bl	8000874 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0210 	bic.w	r2, r2, #16
 80014ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f0:	f7ff fe3c 	bl	800116c <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014f6:	e012      	b.n	800151e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014f8:	f7ff fe38 	bl	800116c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b0a      	cmp	r3, #10
 8001504:	d90b      	bls.n	800151e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e116      	b.n	800174c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b08      	cmp	r3, #8
 800152a:	d0e5      	beq.n	80014f8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153c:	f7ff fe16 	bl	800116c <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001542:	e012      	b.n	800156a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001544:	f7ff fe12 	bl	800116c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b0a      	cmp	r3, #10
 8001550:	d90b      	bls.n	800156a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0f0      	b.n	800174c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0e5      	beq.n	8001544 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0202 	orr.w	r2, r2, #2
 8001586:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001588:	4a72      	ldr	r2, [pc, #456]	@ (8001754 <HAL_FDCAN_Init+0x2a0>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7c1b      	ldrb	r3, [r3, #16]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	e007      	b.n	80015ba <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7c5b      	ldrb	r3, [r3, #17]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015d0:	619a      	str	r2, [r3, #24]
 80015d2:	e007      	b.n	80015e4 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80015e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7c9b      	ldrb	r3, [r3, #18]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	e007      	b.n	800160e <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699a      	ldr	r2, [r3, #24]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800160c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001632:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0210 	bic.w	r2, r2, #16
 8001642:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0204 	orr.w	r2, r2, #4
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	e02c      	b.n	80016b8 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d028      	beq.n	80016b8 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d01c      	beq.n	80016a8 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800167c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0210 	orr.w	r2, r2, #16
 800168c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d110      	bne.n	80016b8 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0220 	orr.w	r2, r2, #32
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	e007      	b.n	80016b8 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0220 	orr.w	r2, r2, #32
 80016b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	3b01      	subs	r3, #1
 80016be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	3b01      	subs	r3, #1
 80016da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80016ec:	d115      	bne.n	800171a <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	3b01      	subs	r3, #1
 80016fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	3b01      	subs	r3, #1
 8001704:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001706:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001716:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001718:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f9b9 	bl	8001aa8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	4000a500 	.word	0x4000a500

08001758 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001766:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001774:	4013      	ands	r3, r2
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800178c:	4013      	ands	r3, r2
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a4:	4013      	ands	r3, r2
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ae:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80017b2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	4013      	ands	r3, r2
 80017be:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017ca:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017de:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017e6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	099b      	lsrs	r3, r3, #6
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2240      	movs	r2, #64	@ 0x40
 8001806:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f92d 	bl	8001a68 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01a      	beq.n	8001850 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d014      	beq.n	8001850 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800182e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001846:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001848:	6939      	ldr	r1, [r7, #16]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8ed 	bl	8001a2a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800185e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8ac 	bl	80019be <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001872:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8ac 	bl	80019d4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001888:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800188a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8ac 	bl	80019ea <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	0a5b      	lsrs	r3, r3, #9
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	0a5b      	lsrs	r3, r3, #9
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f8a3 	bl	8001a00 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	09db      	lsrs	r3, r3, #7
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	09db      	lsrs	r3, r3, #7
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d013      	beq.n	80018fa <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018da:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2280      	movs	r2, #128	@ 0x80
 80018f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f88d 	bl	8001a14 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	0b5b      	lsrs	r3, r3, #13
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00d      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	0b5b      	lsrs	r3, r3, #13
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800191a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f88f 	bl	8001a40 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	0bdb      	lsrs	r3, r3, #15
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00d      	beq.n	800194a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	0bdb      	lsrs	r3, r3, #15
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001942:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f885 	bl	8001a54 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	0b9b      	lsrs	r3, r3, #14
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d010      	beq.n	8001978 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	0b9b      	lsrs	r3, r3, #14
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800196a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001970:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001986:	69f9      	ldr	r1, [r7, #28]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f881 	bl	8001a90 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f863 	bl	8001a7c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	@ 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ab0:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aca:	041a      	lsls	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af0:	061a      	lsls	r2, r3, #24
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e005      	b.n	8001b36 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3f3      	bcc.n	8001b2a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	4000ac00 	.word	0x4000ac00

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b62:	e158      	b.n	8001e16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 814a 	beq.w	8001e10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d017      	beq.n	8001c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80a4 	beq.w	8001e10 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3318      	adds	r3, #24
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d025      	beq.n	8001d40 <HAL_GPIO_Init+0x1ec>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a51      	ldr	r2, [pc, #324]	@ (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d01f      	beq.n	8001d3c <HAL_GPIO_Init+0x1e8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <HAL_GPIO_Init+0x2ec>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d019      	beq.n	8001d38 <HAL_GPIO_Init+0x1e4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_GPIO_Init+0x1e0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x2f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_GPIO_Init+0x1dc>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x2f8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <HAL_GPIO_Init+0x1d8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_GPIO_Init+0x1d4>
 8001d24:	2306      	movs	r3, #6
 8001d26:	e00c      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d28:	2307      	movs	r3, #7
 8001d2a:	e00a      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	e008      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d30:	2304      	movs	r3, #4
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e004      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d40:	2300      	movs	r3, #0
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	f002 0203 	and.w	r2, r2, #3
 8001d48:	00d2      	lsls	r2, r2, #3
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001d52:	4938      	ldr	r1, [pc, #224]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3318      	adds	r3, #24
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d84:	4a2b      	ldr	r2, [pc, #172]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dae:	4a21      	ldr	r2, [pc, #132]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dda:	4a16      	ldr	r2, [pc, #88]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001de2:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e08:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f ae9f 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	4002f400 	.word	0x4002f400
 8001e38:	42020000 	.word	0x42020000
 8001e3c:	42020400 	.word	0x42020400
 8001e40:	42020800 	.word	0x42020800
 8001e44:	42020c00 	.word	0x42020c00
 8001e48:	42021000 	.word	0x42021000
 8001e4c:	42021400 	.word	0x42021400
 8001e50:	42021800 	.word	0x42021800

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e007      	b.n	8001eb2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0204 	bic.w	r2, r3, #4
 8001eaa:	4905      	ldr	r1, [pc, #20]	@ (8001ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40030400 	.word	0x40030400

08001ec4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_ICACHE_Enable+0x1c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_ICACHE_Enable+0x1c>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40030400 	.word	0x40030400

08001ee4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <HAL_PWREx_GetVoltageRange+0x18>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40007000 	.word	0x40007000

08001f00 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f10:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001f12:	f000 f871 	bl	8001ff8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f1c:	d101      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e03e      	b.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001f22:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f2e:	d101      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e035      	b.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d101      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e02f      	b.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f40:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001f48:	4917      	ldr	r1, [pc, #92]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	4a16      	ldr	r2, [pc, #88]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	09db      	lsrs	r3, r3, #7
 8001f5e:	2232      	movs	r2, #50	@ 0x32
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f70:	e002      	b.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f84:	d102      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f2      	bne.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f98:	d101      	bne.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e000      	b.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	0a7c5ac5 	.word	0x0a7c5ac5
 8001fb4:	cccccccd 	.word	0xcccccccd

08001fb8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc6:	6053      	str	r3, [r2, #4]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800200e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	e00a      	b.n	800202c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	e001      	b.n	800202c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f000 bcc2 	b.w	80029d8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002054:	4b99      	ldr	r3, [pc, #612]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205e:	4b97      	ldr	r3, [pc, #604]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80e9 	beq.w	8002248 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_RCC_OscConfig+0x4a>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	f040 8083 	bne.w	800218a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d17f      	bne.n	800218a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208a:	4b8c      	ldr	r3, [pc, #560]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_RCC_OscConfig+0x64>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	f000 bc9a 	b.w	80029d8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020a8:	4b84      	ldr	r3, [pc, #528]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_RCC_OscConfig+0x7e>
 80020b4:	4b81      	ldr	r3, [pc, #516]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020bc:	e005      	b.n	80020ca <HAL_RCC_OscConfig+0x8a>
 80020be:	4b7f      	ldr	r3, [pc, #508]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d224      	bcs.n	8002118 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fe9c 	bl	8002e10 <RCC_SetFlashLatencyFromMSIRange>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f000 bc7a 	b.w	80029d8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	4b75      	ldr	r3, [pc, #468]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a74      	ldr	r2, [pc, #464]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b72      	ldr	r3, [pc, #456]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	496f      	ldr	r1, [pc, #444]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	4b6e      	ldr	r3, [pc, #440]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	496a      	ldr	r1, [pc, #424]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e026      	b.n	8002166 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002118:	4b68      	ldr	r3, [pc, #416]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a67      	ldr	r2, [pc, #412]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b65      	ldr	r3, [pc, #404]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	4962      	ldr	r1, [pc, #392]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002136:	4b61      	ldr	r3, [pc, #388]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	495d      	ldr	r1, [pc, #372]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fe5b 	bl	8002e10 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	f000 bc39 	b.w	80029d8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002166:	f000 fe17 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 800216a:	4603      	mov	r3, r0
 800216c:	4a54      	ldr	r2, [pc, #336]	@ (80022c0 <HAL_RCC_OscConfig+0x280>)
 800216e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002170:	4b54      	ldr	r3, [pc, #336]	@ (80022c4 <HAL_RCC_OscConfig+0x284>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ffbd 	bl	80010f4 <HAL_InitTick>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d060      	beq.n	8002246 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	f000 bc27 	b.w	80029d8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d039      	beq.n	8002206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002192:	4b4a      	ldr	r3, [pc, #296]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a49      	ldr	r2, [pc, #292]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219e:	f7fe ffe5 	bl	800116c <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a4:	e00f      	b.n	80021c6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a6:	f7fe ffe1 	bl	800116c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d908      	bls.n	80021c6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b4:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	f000 bc09 	b.w	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c6:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0e9      	beq.n	80021a6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d2:	4b3a      	ldr	r3, [pc, #232]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a39      	ldr	r2, [pc, #228]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b37      	ldr	r3, [pc, #220]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	4934      	ldr	r1, [pc, #208]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f0:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	492f      	ldr	r1, [pc, #188]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e020      	b.n	8002248 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002206:	4b2d      	ldr	r3, [pc, #180]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2c      	ldr	r2, [pc, #176]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002212:	f7fe ffab 	bl	800116c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	e00e      	b.n	8002238 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221a:	f7fe ffa7 	bl	800116c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d907      	bls.n	8002238 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002228:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e3cf      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002238:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ea      	bne.n	800221a <HAL_RCC_OscConfig+0x1da>
 8002244:	e000      	b.n	8002248 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002246:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d07e      	beq.n	8002352 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b08      	cmp	r3, #8
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x226>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d10e      	bne.n	800227e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d06e      	beq.n	8002350 <HAL_RCC_OscConfig+0x310>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d16a      	bne.n	8002350 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e3ac      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x256>
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0b      	ldr	r2, [pc, #44]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e024      	b.n	80022e0 <HAL_RCC_OscConfig+0x2a0>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800229e:	d113      	bne.n	80022c8 <HAL_RCC_OscConfig+0x288>
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80022a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a02      	ldr	r2, [pc, #8]	@ (80022bc <HAL_RCC_OscConfig+0x27c>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e012      	b.n	80022e0 <HAL_RCC_OscConfig+0x2a0>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	20000000 	.word	0x20000000
 80022c4:	2000002c 	.word	0x2000002c
 80022c8:	4b8b      	ldr	r3, [pc, #556]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8a      	ldr	r2, [pc, #552]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b88      	ldr	r3, [pc, #544]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a87      	ldr	r2, [pc, #540]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d019      	beq.n	800231c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ff40 	bl	800116c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ee:	e00e      	b.n	800230e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe ff3c 	bl	800116c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	@ 0x64
 80022fc:	d907      	bls.n	800230e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	4b7e      	ldr	r3, [pc, #504]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e364      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	4b7a      	ldr	r3, [pc, #488]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0ea      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2b0>
 800231a:	e01a      	b.n	8002352 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe ff26 	bl	800116c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	e00e      	b.n	8002342 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe ff22 	bl	800116c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d907      	bls.n	8002342 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	4b71      	ldr	r3, [pc, #452]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e34a      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002342:	4b6d      	ldr	r3, [pc, #436]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ea      	bne.n	8002324 <HAL_RCC_OscConfig+0x2e4>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d06c      	beq.n	8002438 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x330>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d119      	bne.n	800239e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d116      	bne.n	800239e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002370:	4b61      	ldr	r3, [pc, #388]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x348>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e327      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b5b      	ldr	r3, [pc, #364]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4958      	ldr	r1, [pc, #352]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239c:	e04c      	b.n	8002438 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d029      	beq.n	80023fa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a6:	4b54      	ldr	r3, [pc, #336]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a53      	ldr	r2, [pc, #332]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fedb 	bl	800116c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	e00e      	b.n	80023d8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fed7 	bl	800116c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d907      	bls.n	80023d8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e2ff      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ea      	beq.n	80023ba <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b44      	ldr	r3, [pc, #272]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	4941      	ldr	r1, [pc, #260]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	e01e      	b.n	8002438 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3e      	ldr	r2, [pc, #248]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe feb1 	bl	800116c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800240c:	e00e      	b.n	800242c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fead 	bl	800116c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d907      	bls.n	800242c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800241c:	4b36      	ldr	r3, [pc, #216]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2d5      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ea      	bne.n	800240e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d062      	beq.n	800250a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d038      	beq.n	80024be <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d108      	bne.n	8002466 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245a:	4a27      	ldr	r2, [pc, #156]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f023 0310 	bic.w	r3, r3, #16
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002464:	e007      	b.n	8002476 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800246c:	4a22      	ldr	r2, [pc, #136]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247c:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7fe fe71 	bl	800116c <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248c:	e00f      	b.n	80024ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248e:	f7fe fe6d 	bl	800116c <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b07      	cmp	r3, #7
 800249a:	d908      	bls.n	80024ae <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249c:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e294      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0e8      	beq.n	800248e <HAL_RCC_OscConfig+0x44e>
 80024bc:	e025      	b.n	800250a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c4:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fe4d 	bl	800116c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d4:	e012      	b.n	80024fc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7fe fe49 	bl	800116c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b07      	cmp	r3, #7
 80024e2:	d90b      	bls.n	80024fc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e270      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	4ba8      	ldr	r3, [pc, #672]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e5      	bne.n	80024d6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 812d 	beq.w	8002772 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800251c:	4ba0      	ldr	r3, [pc, #640]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002528:	4b9d      	ldr	r3, [pc, #628]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	4a9c      	ldr	r2, [pc, #624]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800252e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	@ 0x58
 8002534:	4b9a      	ldr	r3, [pc, #616]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002540:	2301      	movs	r3, #1
 8002542:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	4b97      	ldr	r3, [pc, #604]	@ (80027a4 <HAL_RCC_OscConfig+0x764>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11e      	bne.n	800258e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002550:	4b94      	ldr	r3, [pc, #592]	@ (80027a4 <HAL_RCC_OscConfig+0x764>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a93      	ldr	r2, [pc, #588]	@ (80027a4 <HAL_RCC_OscConfig+0x764>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255c:	f7fe fe06 	bl	800116c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	e00e      	b.n	8002582 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002564:	f7fe fe02 	bl	800116c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d907      	bls.n	8002582 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002572:	4b8c      	ldr	r3, [pc, #560]	@ (80027a4 <HAL_RCC_OscConfig+0x764>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e22a      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002582:	4b88      	ldr	r3, [pc, #544]	@ (80027a4 <HAL_RCC_OscConfig+0x764>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ea      	beq.n	8002564 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01f      	beq.n	80025da <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025a6:	4b7e      	ldr	r3, [pc, #504]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ac:	4a7c      	ldr	r2, [pc, #496]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025b6:	4b7a      	ldr	r3, [pc, #488]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025bc:	4a78      	ldr	r2, [pc, #480]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c6:	e018      	b.n	80025fa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025c8:	4b75      	ldr	r3, [pc, #468]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	4a74      	ldr	r2, [pc, #464]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d8:	e00f      	b.n	80025fa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025da:	4b71      	ldr	r3, [pc, #452]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e0:	4a6f      	ldr	r2, [pc, #444]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025ea:	4b6d      	ldr	r3, [pc, #436]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	4a6b      	ldr	r2, [pc, #428]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d068      	beq.n	80026d4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fdb3 	bl	800116c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002608:	e011      	b.n	800262e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fdaf 	bl	800116c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d908      	bls.n	800262e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261c:	4b60      	ldr	r3, [pc, #384]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e1d4      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262e:	4b5c      	ldr	r3, [pc, #368]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0e6      	beq.n	800260a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d022      	beq.n	800268e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002648:	4b55      	ldr	r3, [pc, #340]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	4a54      	ldr	r2, [pc, #336]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002658:	e011      	b.n	800267e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fd87 	bl	800116c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d908      	bls.n	800267e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800266c:	4b4c      	ldr	r3, [pc, #304]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1ac      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800267e:	4b48      	ldr	r3, [pc, #288]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0e6      	beq.n	800265a <HAL_RCC_OscConfig+0x61a>
 800268c:	e068      	b.n	8002760 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800268e:	4b44      	ldr	r3, [pc, #272]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002694:	4a42      	ldr	r2, [pc, #264]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800269a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800269e:	e011      	b.n	80026c4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe fd64 	bl	800116c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d908      	bls.n	80026c4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026b2:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e189      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026c4:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e6      	bne.n	80026a0 <HAL_RCC_OscConfig+0x660>
 80026d2:	e045      	b.n	8002760 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fd4a 	bl	800116c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026da:	e011      	b.n	8002700 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fd46 	bl	800116c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d908      	bls.n	8002700 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ee:	4b2c      	ldr	r3, [pc, #176]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e16b      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e6      	bne.n	80026dc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d021      	beq.n	8002760 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800271c:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	4a1f      	ldr	r2, [pc, #124]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800272c:	e011      	b.n	8002752 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe fd1d 	bl	800116c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d908      	bls.n	8002752 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e142      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002752:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e6      	bne.n	800272e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04f      	beq.n	800281e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d028      	beq.n	80027d8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800278c:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <HAL_RCC_OscConfig+0x760>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe fce9 	bl	800116c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x788>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a8:	f7fe fce0 	bl	800116c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d908      	bls.n	80027c8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027b6:	4b8a      	ldr	r3, [pc, #552]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80027b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e107      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027c8:	4b85      	ldr	r3, [pc, #532]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80027ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0e8      	beq.n	80027a8 <HAL_RCC_OscConfig+0x768>
 80027d6:	e022      	b.n	800281e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d8:	4b81      	ldr	r3, [pc, #516]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80027da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027de:	4a80      	ldr	r2, [pc, #512]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe fcc0 	bl	800116c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027ee:	e00f      	b.n	8002810 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f0:	f7fe fcbc 	bl	800116c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d908      	bls.n	8002810 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027fe:	4b78      	ldr	r3, [pc, #480]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0e3      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002810:	4b73      	ldr	r3, [pc, #460]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e8      	bne.n	80027f0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80d7 	beq.w	80029d6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b6d      	ldr	r3, [pc, #436]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b0c      	cmp	r3, #12
 8002832:	f000 8091 	beq.w	8002958 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	2b02      	cmp	r3, #2
 800283c:	d166      	bne.n	800290c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a67      	ldr	r2, [pc, #412]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002844:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fc8f 	bl	800116c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002850:	e00e      	b.n	8002870 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe fc8b 	bl	800116c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d907      	bls.n	8002870 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002860:	4b5f      	ldr	r3, [pc, #380]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0b3      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	4b5b      	ldr	r3, [pc, #364]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ea      	bne.n	8002852 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287c:	4b58      	ldr	r3, [pc, #352]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	4b58      	ldr	r3, [pc, #352]	@ (80029e4 <HAL_RCC_OscConfig+0x9a4>)
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800288c:	3a01      	subs	r2, #1
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002896:	0212      	lsls	r2, r2, #8
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800289e:	0852      	lsrs	r2, r2, #1
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0552      	lsls	r2, r2, #21
 80028a4:	4311      	orrs	r1, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028aa:	0852      	lsrs	r2, r2, #1
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0652      	lsls	r2, r2, #25
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028b6:	06d2      	lsls	r2, r2, #27
 80028b8:	430a      	orrs	r2, r1
 80028ba:	4949      	ldr	r1, [pc, #292]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b47      	ldr	r3, [pc, #284]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a46      	ldr	r2, [pc, #280]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028cc:	4b44      	ldr	r3, [pc, #272]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a43      	ldr	r2, [pc, #268]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc48 	bl	800116c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	e00e      	b.n	80028fe <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fc44 	bl	800116c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d907      	bls.n	80028fe <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b3c      	ldr	r3, [pc, #240]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e06c      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ea      	beq.n	80028e0 <HAL_RCC_OscConfig+0x8a0>
 800290a:	e064      	b.n	80029d6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a33      	ldr	r2, [pc, #204]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fc28 	bl	800116c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291e:	e00e      	b.n	800293e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fc24 	bl	800116c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d907      	bls.n	800293e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292e:	4b2c      	ldr	r3, [pc, #176]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e04c      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293e:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ea      	bne.n	8002920 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800294a:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4924      	ldr	r1, [pc, #144]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_RCC_OscConfig+0x9a8>)
 8002952:	4013      	ands	r3, r2
 8002954:	60cb      	str	r3, [r1, #12]
 8002956:	e03e      	b.n	80029d6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e039      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002964:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <HAL_RCC_OscConfig+0x9a0>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	429a      	cmp	r2, r3
 8002976:	d12c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002982:	3b01      	subs	r3, #1
 8002984:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d123      	bne.n	80029d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d11b      	bne.n	80029d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d113      	bne.n	80029d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	019f800c 	.word	0x019f800c
 80029e8:	feeefffc 	.word	0xfeeefffc

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e11c      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b90      	ldr	r3, [pc, #576]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d910      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b8d      	ldr	r3, [pc, #564]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	498b      	ldr	r1, [pc, #556]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b89      	ldr	r3, [pc, #548]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e104      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	4b81      	ldr	r3, [pc, #516]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d908      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a50:	4b7e      	ldr	r3, [pc, #504]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	497b      	ldr	r1, [pc, #492]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8085 	beq.w	8002b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d11f      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	4b74      	ldr	r3, [pc, #464]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0da      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a88:	f000 fa26 	bl	8002ed8 <RCC_GetSysClockFreqFromPLLSource>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4a6f      	ldr	r2, [pc, #444]	@ (8002c50 <HAL_RCC_ClockConfig+0x264>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d947      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a96:	4b6d      	ldr	r3, [pc, #436]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d141      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aaa:	4a68      	ldr	r2, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e036      	b.n	8002b26 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac0:	4b62      	ldr	r3, [pc, #392]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b6      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0aa      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae8:	4b58      	ldr	r3, [pc, #352]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0a2      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002af8:	f000 f8b0 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4a53      	ldr	r2, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x264>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d90f      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b06:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b12:	4b4e      	ldr	r3, [pc, #312]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4946      	ldr	r1, [pc, #280]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7fe fb18 	bl	800116c <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e013      	b.n	8002b68 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fb14 	bl	800116c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d90a      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e06a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b68:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 020c 	and.w	r2, r3, #12
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d1e2      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b80      	cmp	r3, #128	@ 0x80
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b80:	4b32      	ldr	r3, [pc, #200]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a31      	ldr	r2, [pc, #196]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b8a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d208      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4925      	ldr	r1, [pc, #148]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bba:	4b23      	ldr	r3, [pc, #140]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d210      	bcs.n	8002bea <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 020f 	bic.w	r2, r3, #15
 8002bd0:	491d      	ldr	r1, [pc, #116]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e029      	b.n	8002c3e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4912      	ldr	r1, [pc, #72]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	490a      	ldr	r1, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c28:	f000 f8b6 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4a09      	ldr	r2, [pc, #36]	@ (8002c54 <HAL_RCC_ClockConfig+0x268>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fa5c 	bl	80010f4 <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	04c4b400 	.word	0x04c4b400
 8002c54:	20000000 	.word	0x20000000
 8002c58:	2000002c 	.word	0x2000002c

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	@ 0x24
 8002c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b47      	ldr	r3, [pc, #284]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b44      	ldr	r3, [pc, #272]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x34>
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d121      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d11e      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c90:	4b3d      	ldr	r3, [pc, #244]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cac:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002cb8:	4a34      	ldr	r2, [pc, #208]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x130>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x134>)
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e004      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d146      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cea:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3301      	adds	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d003      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb4>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d00d      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0xce>
 8002d0e:	e019      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d10:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x134>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	4a1b      	ldr	r2, [pc, #108]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002d1a:	68d2      	ldr	r2, [r2, #12]
 8002d1c:	0a12      	lsrs	r2, r2, #8
 8002d1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	617b      	str	r3, [r7, #20]
        break;
 8002d28:	e019      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	0a12      	lsrs	r2, r2, #8
 8002d38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
        break;
 8002d42:	e00c      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002d4e:	68d2      	ldr	r2, [r2, #12]
 8002d50:	0a12      	lsrs	r2, r2, #8
 8002d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
        break;
 8002d5c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	0e5b      	lsrs	r3, r3, #25
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d78:	69bb      	ldr	r3, [r7, #24]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08006cfc 	.word	0x08006cfc
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002d9c:	f7ff ff5e 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	4903      	ldr	r1, [pc, #12]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08006ce4 	.word	0x08006ce4

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff ffe8 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	@ (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08006cf4 	.word	0x08006cf4

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffd4 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0adb      	lsrs	r3, r3, #11
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08006cf4 	.word	0x08006cf4

08002e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e28:	f7ff f85c 	bl	8001ee4 <HAL_PWREx_GetVoltageRange>
 8002e2c:	6138      	str	r0, [r7, #16]
 8002e2e:	e014      	b.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	4a26      	ldr	r2, [pc, #152]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e48:	f7ff f84c 	bl	8001ee4 <HAL_PWREx_GetVoltageRange>
 8002e4c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e66:	d10b      	bne.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b80      	cmp	r3, #128	@ 0x80
 8002e6c:	d919      	bls.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e72:	d902      	bls.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e74:	2302      	movs	r3, #2
 8002e76:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002e78:	e013      	b.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002e7e:	e010      	b.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b80      	cmp	r3, #128	@ 0x80
 8002e84:	d902      	bls.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e86:	2303      	movs	r3, #3
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e00a      	b.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d102      	bne.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e92:	2302      	movs	r3, #2
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e004      	b.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b70      	cmp	r3, #112	@ 0x70
 8002e9c:	d101      	bne.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 020f 	bic.w	r2, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002eb2:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40022000 	.word	0x40022000

08002ed8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d015      	beq.n	8002f28 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d839      	bhi.n	8002f76 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d01c      	beq.n	8002f42 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d133      	bne.n	8002f76 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f0e:	4a26      	ldr	r2, [pc, #152]	@ (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	4a23      	ldr	r2, [pc, #140]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	0a12      	lsrs	r2, r2, #8
 8002f1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	613b      	str	r3, [r7, #16]
      break;
 8002f26:	e029      	b.n	8002f7c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f28:	4a20      	ldr	r2, [pc, #128]	@ (8002fac <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f32:	68d2      	ldr	r2, [r2, #12]
 8002f34:	0a12      	lsrs	r2, r2, #8
 8002f36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	613b      	str	r3, [r7, #16]
      break;
 8002f40:	e01c      	b.n	8002f7c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d107      	bne.n	8002f5e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e005      	b.n	8002f6a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002f6a:	4a11      	ldr	r2, [pc, #68]	@ (8002fb0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	613b      	str	r3, [r7, #16]
        break;
 8002f74:	e002      	b.n	8002f7c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
      break;
 8002f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0e5b      	lsrs	r3, r3, #25
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f96:	683b      	ldr	r3, [r7, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200
 8002fb0:	08006cfc 	.word	0x08006cfc

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d040      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd4:	2b80      	cmp	r3, #128	@ 0x80
 8002fd6:	d02a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fd8:	2b80      	cmp	r3, #128	@ 0x80
 8002fda:	d825      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d026      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fe0:	2b60      	cmp	r3, #96	@ 0x60
 8002fe2:	d821      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d006      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d81d      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d010      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ff4:	e018      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ff6:	4b8f      	ldr	r3, [pc, #572]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a8e      	ldr	r2, [pc, #568]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003002:	e015      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fb56 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3320      	adds	r3, #32
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fc33 	bl	8003888 <RCCEx_PLLSAI2_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
        break;
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800302e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003036:	4b7f      	ldr	r3, [pc, #508]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800303c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003044:	497b      	ldr	r1, [pc, #492]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800304c:	e001      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d047      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003066:	d030      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306c:	d82a      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800306e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003072:	d02a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003078:	d824      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800307a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003084:	d81e      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800308a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800308e:	d010      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003090:	e018      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003092:	4b68      	ldr	r3, [pc, #416]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4a67      	ldr	r2, [pc, #412]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800309e:	e015      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fb08 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80030b0:	e00c      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3320      	adds	r3, #32
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fbe5 	bl	8003888 <RCCEx_PLLSAI2_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]
        break;
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	7ffb      	ldrb	r3, [r7, #31]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d2:	4b58      	ldr	r3, [pc, #352]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4954      	ldr	r1, [pc, #336]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80030e8:	e001      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	7ffb      	ldrb	r3, [r7, #31]
 80030ec:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80ab 	beq.w	8003252 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003100:	4b4c      	ldr	r3, [pc, #304]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	4a48      	ldr	r2, [pc, #288]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003116:	6593      	str	r3, [r2, #88]	@ 0x58
 8003118:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003128:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003134:	f7fe f81a 	bl	800116c <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800313a:	e00f      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fe f816 	bl	800116c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d908      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800314a:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800315a:	e006      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315c:	4b36      	ldr	r3, [pc, #216]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0e9      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003168:	e000      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800316a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800316c:	7ffb      	ldrb	r3, [r7, #31]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d164      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003172:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d019      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003190:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a24      	ldr	r2, [pc, #144]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01f      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fd ffcd 	bl	800116c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d4:	e012      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fd ffc9 	bl	800116c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d909      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e8:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80031fa:	e007      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0e5      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800320c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10c      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003214:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003224:	4903      	ldr	r1, [pc, #12]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322e:	7ffb      	ldrb	r3, [r7, #31]
 8003230:	77bb      	strb	r3, [r7, #30]
 8003232:	e005      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7ffb      	ldrb	r3, [r7, #31]
 800323e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b9c      	ldr	r3, [pc, #624]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	4a9b      	ldr	r2, [pc, #620]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	4b96      	ldr	r3, [pc, #600]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f023 0203 	bic.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326c:	4992      	ldr	r1, [pc, #584]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003280:	4b8d      	ldr	r3, [pc, #564]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f023 020c 	bic.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	498a      	ldr	r1, [pc, #552]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a2:	4b85      	ldr	r3, [pc, #532]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	4981      	ldr	r1, [pc, #516]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c4:	4b7c      	ldr	r3, [pc, #496]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	4979      	ldr	r1, [pc, #484]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e6:	4b74      	ldr	r3, [pc, #464]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f4:	4970      	ldr	r1, [pc, #448]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003308:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003316:	4968      	ldr	r1, [pc, #416]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332a:	4b63      	ldr	r3, [pc, #396]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	495f      	ldr	r1, [pc, #380]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800334c:	4b5a      	ldr	r3, [pc, #360]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	4957      	ldr	r1, [pc, #348]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800336e:	4b52      	ldr	r3, [pc, #328]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337c:	494e      	ldr	r1, [pc, #312]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d031      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003398:	d00e      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800339a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800339e:	d814      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d015      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a8:	d10f      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033aa:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a42      	ldr	r2, [pc, #264]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80033b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80033b6:	e00c      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f97c 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	77fb      	strb	r3, [r7, #31]
        break;
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80033d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e6:	4934      	ldr	r1, [pc, #208]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033ee:	e001      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003400:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	492a      	ldr	r1, [pc, #168]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003422:	4b25      	ldr	r3, [pc, #148]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003428:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003430:	4921      	ldr	r1, [pc, #132]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003444:	4b1c      	ldr	r3, [pc, #112]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	4919      	ldr	r1, [pc, #100]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003466:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800346c:	f023 0203 	bic.w	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	4910      	ldr	r1, [pc, #64]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02b      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003496:	4908      	ldr	r1, [pc, #32]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034a6:	d109      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a02      	ldr	r2, [pc, #8]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	e014      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f8f5 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80034dc:	7ffb      	ldrb	r3, [r7, #31]
 80034de:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d04a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f4:	d108      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80034f6:	4b70      	ldr	r3, [pc, #448]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80034f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034fc:	4a6e      	ldr	r2, [pc, #440]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80034fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003502:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003506:	e012      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003508:	4b6b      	ldr	r3, [pc, #428]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003516:	4968      	ldr	r1, [pc, #416]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800351e:	4b66      	ldr	r3, [pc, #408]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003524:	4a64      	ldr	r2, [pc, #400]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800352a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003532:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003536:	d10d      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f8bc 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d019      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	77bb      	strb	r3, [r7, #30]
 8003552:	e016      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800355c:	d106      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355e:	4b56      	ldr	r3, [pc, #344]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a55      	ldr	r2, [pc, #340]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003568:	60d3      	str	r3, [r2, #12]
 800356a:	e00a      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003570:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003574:	d105      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003576:	4b50      	ldr	r3, [pc, #320]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4a4f      	ldr	r2, [pc, #316]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800358e:	4b4a      	ldr	r3, [pc, #296]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003594:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800359c:	4946      	ldr	r1, [pc, #280]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ac:	d106      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ae:	4b42      	ldr	r3, [pc, #264]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a41      	ldr	r2, [pc, #260]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80035b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b8:	60d3      	str	r3, [r2, #12]
 80035ba:	e011      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f875 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80035dc:	7ffb      	ldrb	r3, [r7, #31]
 80035de:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01e      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ec:	4b32      	ldr	r3, [pc, #200]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fc:	492e      	ldr	r1, [pc, #184]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800360e:	d10c      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f850 	bl	80036bc <RCCEx_PLLSAI1_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003620:	7ffb      	ldrb	r3, [r7, #31]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003636:	4b20      	ldr	r3, [pc, #128]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003638:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800363c:	f023 0204 	bic.w	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003646:	491c      	ldr	r1, [pc, #112]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800365a:	4b17      	ldr	r3, [pc, #92]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800365c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003660:	f023 0218 	bic.w	r2, r3, #24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366a:	4913      	ldr	r1, [pc, #76]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d017      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800367e:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003684:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800368e:	490a      	ldr	r1, [pc, #40]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800369c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036a0:	d105      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a04      	ldr	r2, [pc, #16]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80036a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80036ae:	7fbb      	ldrb	r3, [r7, #30]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000

080036bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d018      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x48>
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d81f      	bhi.n	8003716 <RCCEx_PLLSAI1_Config+0x5a>
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d002      	beq.n	80036e0 <RCCEx_PLLSAI1_Config+0x24>
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d009      	beq.n	80036f2 <RCCEx_PLLSAI1_Config+0x36>
 80036de:	e01a      	b.n	8003716 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e0:	4b65      	ldr	r3, [pc, #404]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d117      	bne.n	800371c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e014      	b.n	800371c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f2:	4b61      	ldr	r3, [pc, #388]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d110      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003702:	e00d      	b.n	8003720 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003704:	4b5c      	ldr	r3, [pc, #368]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e006      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      break;
 800371a:	e004      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003724:	bf00      	nop
  }

  if (status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 809f 	bne.w	800386c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800372e:	4b52      	ldr	r3, [pc, #328]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a51      	ldr	r2, [pc, #324]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003734:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373a:	f7fd fd17 	bl	800116c <HAL_GetTick>
 800373e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003740:	e00f      	b.n	8003762 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003742:	f7fd fd13 	bl	800116c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d908      	bls.n	8003762 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003750:	4b49      	ldr	r3, [pc, #292]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003760:	e006      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003762:	4b45      	ldr	r3, [pc, #276]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e9      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x86>
 800376e:	e000      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003770:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d179      	bne.n	800386c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800377e:	4b3e      	ldr	r3, [pc, #248]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <RCCEx_PLLSAI1_Config+0x1c0>)
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	0211      	lsls	r1, r2, #8
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68d2      	ldr	r2, [r2, #12]
 8003790:	06d2      	lsls	r2, r2, #27
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6852      	ldr	r2, [r2, #4]
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	4934      	ldr	r1, [pc, #208]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	610b      	str	r3, [r1, #16]
 80037aa:	e033      	b.n	8003814 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d118      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b2:	4b31      	ldr	r3, [pc, #196]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1c4>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	0211      	lsls	r1, r2, #8
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6912      	ldr	r2, [r2, #16]
 80037c4:	0852      	lsrs	r2, r2, #1
 80037c6:	3a01      	subs	r2, #1
 80037c8:	0552      	lsls	r2, r2, #21
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	4311      	orrs	r1, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	4926      	ldr	r1, [pc, #152]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	610b      	str	r3, [r1, #16]
 80037e2:	e017      	b.n	8003814 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e4:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	4b26      	ldr	r3, [pc, #152]	@ (8003884 <RCCEx_PLLSAI1_Config+0x1c8>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6892      	ldr	r2, [r2, #8]
 80037f0:	0211      	lsls	r1, r2, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6952      	ldr	r2, [r2, #20]
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0652      	lsls	r2, r2, #25
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6852      	ldr	r2, [r2, #4]
 8003802:	3a01      	subs	r2, #1
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	491a      	ldr	r1, [pc, #104]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 800381a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800381e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd fca4 	bl	800116c <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003826:	e00f      	b.n	8003848 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003828:	f7fd fca0 	bl	800116c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d908      	bls.n	8003848 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003846:	e006      	b.n	8003856 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003848:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0e9      	beq.n	8003828 <RCCEx_PLLSAI1_Config+0x16c>
 8003854:	e000      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8003856:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4904      	ldr	r1, [pc, #16]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	07ff800c 	.word	0x07ff800c
 8003880:	ff9f800c 	.word	0xff9f800c
 8003884:	f9ff800c 	.word	0xf9ff800c

08003888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d018      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x48>
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d81f      	bhi.n	80038e2 <RCCEx_PLLSAI2_Config+0x5a>
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d002      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0x24>
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d009      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x36>
 80038aa:	e01a      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ac:	4b4a      	ldr	r3, [pc, #296]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d117      	bne.n	80038e8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e014      	b.n	80038e8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038be:	4b46      	ldr	r3, [pc, #280]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d110      	bne.n	80038ec <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e00d      	b.n	80038ec <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80038d0:	4b41      	ldr	r3, [pc, #260]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e0:	e006      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      break;
 80038e6:	e004      	b.n	80038f2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80038f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d169      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038f8:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a36      	ldr	r2, [pc, #216]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fc32 	bl	800116c <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800390a:	e00f      	b.n	800392c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800390c:	f7fd fc2e 	bl	800116c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d908      	bls.n	800392c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391a:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800392a:	e006      	b.n	800393a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800392c:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e9      	bne.n	800390c <RCCEx_PLLSAI2_Config+0x84>
 8003938:	e000      	b.n	800393c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800393a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d144      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d115      	bne.n	8003974 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003948:	4b23      	ldr	r3, [pc, #140]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <RCCEx_PLLSAI2_Config+0x154>)
 800394e:	4013      	ands	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	06d2      	lsls	r2, r2, #27
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6852      	ldr	r2, [r2, #4]
 8003962:	3a01      	subs	r2, #1
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	4311      	orrs	r1, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	491a      	ldr	r1, [pc, #104]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 8003970:	4313      	orrs	r3, r2
 8003972:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fbf4 	bl	800116c <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003986:	e00f      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003988:	f7fd fbf0 	bl	800116c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d908      	bls.n	80039a8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003996:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80039a6:	e006      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0e9      	beq.n	8003988 <RCCEx_PLLSAI2_Config+0x100>
 80039b4:	e000      	b.n	80039b8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80039b6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	4904      	ldr	r1, [pc, #16]	@ (80039d8 <RCCEx_PLLSAI2_Config+0x150>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	07ff800c 	.word	0x07ff800c

080039e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e042      	b.n	8003a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f83b 	bl	8003a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2224      	movs	r2, #36	@ 0x24
 8003a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb32 	bl	8004094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f82f 	bl	8003a94 <UART_SetConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e01b      	b.n	8003a78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fbb1 	bl	80041d8 <UART_CheckIdleState>
 8003a76:	4603      	mov	r3, r0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b08c      	sub	sp, #48	@ 0x30
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4baa      	ldr	r3, [pc, #680]	@ (8003d6c <UART_SetConfig+0x2d8>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a9f      	ldr	r2, [pc, #636]	@ (8003d70 <UART_SetConfig+0x2dc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003afc:	4313      	orrs	r3, r2
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b0a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	f023 010f 	bic.w	r1, r3, #15
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a90      	ldr	r2, [pc, #576]	@ (8003d74 <UART_SetConfig+0x2e0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d125      	bne.n	8003b84 <UART_SetConfig+0xf0>
 8003b38:	4b8f      	ldr	r3, [pc, #572]	@ (8003d78 <UART_SetConfig+0x2e4>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d81a      	bhi.n	8003b7c <UART_SetConfig+0xe8>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <UART_SetConfig+0xb8>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b75 	.word	0x08003b75
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e116      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6a:	e112      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e10e      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e10a      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e106      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a7c      	ldr	r2, [pc, #496]	@ (8003d7c <UART_SetConfig+0x2e8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d138      	bne.n	8003c00 <UART_SetConfig+0x16c>
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d78 <UART_SetConfig+0x2e4>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d82d      	bhi.n	8003bf8 <UART_SetConfig+0x164>
 8003b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <UART_SetConfig+0x110>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bd9 	.word	0x08003bd9
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003bf9 	.word	0x08003bf9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003bf9 	.word	0x08003bf9
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003be1 	.word	0x08003be1
 8003bc8:	08003bf9 	.word	0x08003bf9
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003bf9 	.word	0x08003bf9
 8003bd4:	08003bf1 	.word	0x08003bf1
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	e0d8      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be6:	e0d4      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003be8:	2304      	movs	r3, #4
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	e0d0      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e0cc      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e0c8      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <UART_SetConfig+0x2ec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d125      	bne.n	8003c56 <UART_SetConfig+0x1c2>
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d78 <UART_SetConfig+0x2e4>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c14:	2b30      	cmp	r3, #48	@ 0x30
 8003c16:	d016      	beq.n	8003c46 <UART_SetConfig+0x1b2>
 8003c18:	2b30      	cmp	r3, #48	@ 0x30
 8003c1a:	d818      	bhi.n	8003c4e <UART_SetConfig+0x1ba>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d00a      	beq.n	8003c36 <UART_SetConfig+0x1a2>
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d814      	bhi.n	8003c4e <UART_SetConfig+0x1ba>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <UART_SetConfig+0x19a>
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d008      	beq.n	8003c3e <UART_SetConfig+0x1aa>
 8003c2c:	e00f      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c34:	e0ad      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c36:	2302      	movs	r3, #2
 8003c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c3c:	e0a9      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c44:	e0a5      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c46:	2308      	movs	r3, #8
 8003c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4c:	e0a1      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c4e:	2310      	movs	r3, #16
 8003c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c54:	e09d      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d84 <UART_SetConfig+0x2f0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d125      	bne.n	8003cac <UART_SetConfig+0x218>
 8003c60:	4b45      	ldr	r3, [pc, #276]	@ (8003d78 <UART_SetConfig+0x2e4>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c6c:	d016      	beq.n	8003c9c <UART_SetConfig+0x208>
 8003c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c70:	d818      	bhi.n	8003ca4 <UART_SetConfig+0x210>
 8003c72:	2b80      	cmp	r3, #128	@ 0x80
 8003c74:	d00a      	beq.n	8003c8c <UART_SetConfig+0x1f8>
 8003c76:	2b80      	cmp	r3, #128	@ 0x80
 8003c78:	d814      	bhi.n	8003ca4 <UART_SetConfig+0x210>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <UART_SetConfig+0x1f0>
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d008      	beq.n	8003c94 <UART_SetConfig+0x200>
 8003c82:	e00f      	b.n	8003ca4 <UART_SetConfig+0x210>
 8003c84:	2300      	movs	r3, #0
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8a:	e082      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c92:	e07e      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c94:	2304      	movs	r3, #4
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9a:	e07a      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e076      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e072      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a35      	ldr	r2, [pc, #212]	@ (8003d88 <UART_SetConfig+0x2f4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d12a      	bne.n	8003d0c <UART_SetConfig+0x278>
 8003cb6:	4b30      	ldr	r3, [pc, #192]	@ (8003d78 <UART_SetConfig+0x2e4>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc4:	d01a      	beq.n	8003cfc <UART_SetConfig+0x268>
 8003cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cca:	d81b      	bhi.n	8003d04 <UART_SetConfig+0x270>
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd0:	d00c      	beq.n	8003cec <UART_SetConfig+0x258>
 8003cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd6:	d815      	bhi.n	8003d04 <UART_SetConfig+0x270>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <UART_SetConfig+0x250>
 8003cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce0:	d008      	beq.n	8003cf4 <UART_SetConfig+0x260>
 8003ce2:	e00f      	b.n	8003d04 <UART_SetConfig+0x270>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cea:	e052      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003cec:	2302      	movs	r3, #2
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf2:	e04e      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfa:	e04a      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d02:	e046      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d04:	2310      	movs	r3, #16
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d0a:	e042      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a17      	ldr	r2, [pc, #92]	@ (8003d70 <UART_SetConfig+0x2dc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d13a      	bne.n	8003d8c <UART_SetConfig+0x2f8>
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <UART_SetConfig+0x2e4>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d24:	d01a      	beq.n	8003d5c <UART_SetConfig+0x2c8>
 8003d26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d2a:	d81b      	bhi.n	8003d64 <UART_SetConfig+0x2d0>
 8003d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d30:	d00c      	beq.n	8003d4c <UART_SetConfig+0x2b8>
 8003d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d36:	d815      	bhi.n	8003d64 <UART_SetConfig+0x2d0>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <UART_SetConfig+0x2b0>
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d40:	d008      	beq.n	8003d54 <UART_SetConfig+0x2c0>
 8003d42:	e00f      	b.n	8003d64 <UART_SetConfig+0x2d0>
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	e022      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d52:	e01e      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d54:	2304      	movs	r3, #4
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5a:	e01a      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d62:	e016      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d64:	2310      	movs	r3, #16
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6a:	e012      	b.n	8003d92 <UART_SetConfig+0x2fe>
 8003d6c:	cfff69f3 	.word	0xcfff69f3
 8003d70:	40008000 	.word	0x40008000
 8003d74:	40013800 	.word	0x40013800
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40004400 	.word	0x40004400
 8003d80:	40004800 	.word	0x40004800
 8003d84:	40004c00 	.word	0x40004c00
 8003d88:	40005000 	.word	0x40005000
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4ab0      	ldr	r2, [pc, #704]	@ (8004058 <UART_SetConfig+0x5c4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	f040 809b 	bne.w	8003ed4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d827      	bhi.n	8003df6 <UART_SetConfig+0x362>
 8003da6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <UART_SetConfig+0x318>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	08003df7 	.word	0x08003df7
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003df7 	.word	0x08003df7
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7fe fff6 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dd6:	e014      	b.n	8003e02 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7ff f806 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dde:	e010      	b.n	8003e02 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de0:	4b9e      	ldr	r3, [pc, #632]	@ (800405c <UART_SetConfig+0x5c8>)
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003de4:	e00d      	b.n	8003e02 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de6:	f7fe ff39 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003dea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dec:	e009      	b.n	8003e02 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003df4:	e005      	b.n	8003e02 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8130 	beq.w	800406a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	4a94      	ldr	r2, [pc, #592]	@ (8004060 <UART_SetConfig+0x5cc>)
 8003e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d305      	bcc.n	8003e3a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e40:	e113      	b.n	800406a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	2200      	movs	r2, #0
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	60fa      	str	r2, [r7, #12]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	4a84      	ldr	r2, [pc, #528]	@ (8004060 <UART_SetConfig+0x5cc>)
 8003e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2200      	movs	r2, #0
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e64:	f7fc f9ec 	bl	8000240 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	020b      	lsls	r3, r1, #8
 8003e7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e7e:	0202      	lsls	r2, r0, #8
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	6849      	ldr	r1, [r1, #4]
 8003e84:	0849      	lsrs	r1, r1, #1
 8003e86:	2000      	movs	r0, #0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	eb12 0804 	adds.w	r8, r2, r4
 8003e90:	eb43 0905 	adc.w	r9, r3, r5
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	469a      	mov	sl, r3
 8003e9c:	4693      	mov	fp, r2
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	465b      	mov	r3, fp
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	f7fc f9cb 	bl	8000240 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4613      	mov	r3, r2
 8003eb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb8:	d308      	bcc.n	8003ecc <UART_SetConfig+0x438>
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec0:	d204      	bcs.n	8003ecc <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e0ce      	b.n	800406a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ed2:	e0ca      	b.n	800406a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003edc:	d166      	bne.n	8003fac <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8003ede:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d827      	bhi.n	8003f36 <UART_SetConfig+0x4a2>
 8003ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <UART_SetConfig+0x458>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fe ff56 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f16:	e014      	b.n	8003f42 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe ff66 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f1e:	e010      	b.n	8003f42 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b4e      	ldr	r3, [pc, #312]	@ (800405c <UART_SetConfig+0x5c8>)
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f24:	e00d      	b.n	8003f42 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fe99 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003f2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f2c:	e009      	b.n	8003f42 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f34:	e005      	b.n	8003f42 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8090 	beq.w	800406a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	4a44      	ldr	r2, [pc, #272]	@ (8004060 <UART_SetConfig+0x5cc>)
 8003f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f5c:	005a      	lsls	r2, r3, #1
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	441a      	add	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d916      	bls.n	8003fa4 <UART_SetConfig+0x510>
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7c:	d212      	bcs.n	8003fa4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f023 030f 	bic.w	r3, r3, #15
 8003f86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	8bfb      	ldrh	r3, [r7, #30]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	8bfa      	ldrh	r2, [r7, #30]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	e062      	b.n	800406a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003faa:	e05e      	b.n	800406a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d828      	bhi.n	8004006 <UART_SetConfig+0x572>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0x528>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe feee 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fe6:	e014      	b.n	8004012 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fefe 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8003fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fee:	e010      	b.n	8004012 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <UART_SetConfig+0x5c8>)
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ff4:	e00d      	b.n	8004012 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe fe31 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003ffa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004010:	bf00      	nop
    }

    if (pclk != 0U)
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	2b00      	cmp	r3, #0
 8004016:	d028      	beq.n	800406a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	4a10      	ldr	r2, [pc, #64]	@ (8004060 <UART_SetConfig+0x5cc>)
 800401e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004022:	461a      	mov	r2, r3
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	fbb3 f2f2 	udiv	r2, r3, r2
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	441a      	add	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	d910      	bls.n	8004064 <UART_SetConfig+0x5d0>
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004048:	d20c      	bcs.n	8004064 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	b29a      	uxth	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
 8004054:	e009      	b.n	800406a <UART_SetConfig+0x5d6>
 8004056:	bf00      	nop
 8004058:	40008000 	.word	0x40008000
 800405c:	00f42400 	.word	0x00f42400
 8004060:	08006d3c 	.word	0x08006d3c
      }
      else
      {
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2201      	movs	r2, #1
 800406e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2201      	movs	r2, #1
 8004076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2200      	movs	r2, #0
 8004084:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004086:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800408a:	4618      	mov	r0, r3
 800408c:	3730      	adds	r7, #48	@ 0x30
 800408e:	46bd      	mov	sp, r7
 8004090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01a      	beq.n	80041aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004192:	d10a      	bne.n	80041aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b098      	sub	sp, #96	@ 0x60
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e8:	f7fc ffc0 	bl	800116c <HAL_GetTick>
 80041ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d12f      	bne.n	800425c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f88e 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800422a:	653b      	str	r3, [r7, #80]	@ 0x50
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	647b      	str	r3, [r7, #68]	@ 0x44
 8004236:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800423a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e063      	b.n	8004324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d149      	bne.n	80042fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	2200      	movs	r2, #0
 8004274:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f857 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03c      	beq.n	80042fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	623b      	str	r3, [r7, #32]
   return(result);
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e6      	bne.n	8004284 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d6:	61fa      	str	r2, [r7, #28]
 80042d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	617b      	str	r3, [r7, #20]
   return(result);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e5      	bne.n	80042b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e012      	b.n	8004324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3758      	adds	r7, #88	@ 0x58
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433c:	e04f      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d04b      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004346:	f7fc ff11 	bl	800116c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <UART_WaitOnFlagUntilTimeout+0x30>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e04e      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d037      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xb2>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b80      	cmp	r3, #128	@ 0x80
 8004372:	d034      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b40      	cmp	r3, #64	@ 0x40
 8004378:	d031      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d110      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2208      	movs	r2, #8
 800438e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f838 	bl	8004406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2208      	movs	r2, #8
 800439a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e029      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b8:	d111      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f81e 	bl	8004406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e00f      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d0a0      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b095      	sub	sp, #84	@ 0x54
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
 800442e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004432:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800446a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d118      	bne.n	80044b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	60bb      	str	r3, [r7, #8]
   return(result);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f023 0310 	bic.w	r3, r3, #16
 8004494:	647b      	str	r3, [r7, #68]	@ 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	613b      	str	r3, [r7, #16]
   return(result);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e6      	bne.n	8004480 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044c6:	bf00      	nop
 80044c8:	3754      	adds	r7, #84	@ 0x54
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <__NVIC_SetPriority>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db0a      	blt.n	80044fe <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	490c      	ldr	r1, [pc, #48]	@ (8004520 <__NVIC_SetPriority+0x4c>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	0152      	lsls	r2, r2, #5
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	440b      	add	r3, r1
 80044f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80044fc:	e00a      	b.n	8004514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4908      	ldr	r1, [pc, #32]	@ (8004524 <__NVIC_SetPriority+0x50>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3b04      	subs	r3, #4
 800450c:	0152      	lsls	r2, r2, #5
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	440b      	add	r3, r1
 8004512:	761a      	strb	r2, [r3, #24]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000e100 	.word	0xe000e100
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <SysTick_Handler+0x1c>)
 800452e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004530:	f001 fbba 	bl	8005ca8 <xTaskGetSchedulerState>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800453a:	f002 f81f 	bl	800657c <xPortSysTickHandler>
  }
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800454c:	2100      	movs	r1, #0
 800454e:	f06f 0004 	mvn.w	r0, #4
 8004552:	f7ff ffbf 	bl	80044d4 <__NVIC_SetPriority>
#endif
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004562:	f3ef 8305 	mrs	r3, IPSR
 8004566:	603b      	str	r3, [r7, #0]
  return(result);
 8004568:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800456e:	f06f 0305 	mvn.w	r3, #5
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e00c      	b.n	8004590 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004576:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <osKernelInitialize+0x44>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800457e:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <osKernelInitialize+0x44>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e002      	b.n	8004590 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000204 	.word	0x20000204

080045a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045aa:	f3ef 8305 	mrs	r3, IPSR
 80045ae:	603b      	str	r3, [r7, #0]
  return(result);
 80045b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <osKernelStart+0x1a>
    stat = osErrorISR;
 80045b6:	f06f 0305 	mvn.w	r3, #5
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	e010      	b.n	80045e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <osKernelStart+0x48>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d109      	bne.n	80045da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045c6:	f7ff ffbf 	bl	8004548 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045ca:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <osKernelStart+0x48>)
 80045cc:	2202      	movs	r2, #2
 80045ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045d0:	f000 ff86 	bl	80054e0 <vTaskStartScheduler>
      stat = osOK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	e002      	b.n	80045e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045e0:	687b      	ldr	r3, [r7, #4]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000204 	.word	0x20000204

080045f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08e      	sub	sp, #56	@ 0x38
 80045f4:	af04      	add	r7, sp, #16
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004600:	f3ef 8305 	mrs	r3, IPSR
 8004604:	617b      	str	r3, [r7, #20]
  return(result);
 8004606:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004608:	2b00      	cmp	r3, #0
 800460a:	d17e      	bne.n	800470a <osThreadNew+0x11a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d07b      	beq.n	800470a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004616:	2318      	movs	r3, #24
 8004618:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d045      	beq.n	80046b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <osThreadNew+0x48>
        name = attr->name;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <osThreadNew+0x6e>
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b38      	cmp	r3, #56	@ 0x38
 8004650:	d805      	bhi.n	800465e <osThreadNew+0x6e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <osThreadNew+0x72>
        return (NULL);
 800465e:	2300      	movs	r3, #0
 8004660:	e054      	b.n	800470c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <osThreadNew+0xa8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004680:	d90a      	bls.n	8004698 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <osThreadNew+0xa8>
        mem = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e010      	b.n	80046ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10c      	bne.n	80046ba <osThreadNew+0xca>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <osThreadNew+0xca>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <osThreadNew+0xca>
          mem = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e001      	b.n	80046ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d110      	bne.n	80046e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046c8:	9202      	str	r2, [sp, #8]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fd5c 	bl	8005194 <xTaskCreateStatic>
 80046dc:	4603      	mov	r3, r0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e013      	b.n	800470a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d110      	bne.n	800470a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fd92 	bl	8005224 <xTaskCreate>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d001      	beq.n	800470a <osThreadNew+0x11a>
            hTask = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800470a:	693b      	ldr	r3, [r7, #16]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	@ 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471c:	f3ef 8305 	mrs	r3, IPSR
 8004720:	60bb      	str	r3, [r7, #8]
  return(result);
 8004722:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <osDelay+0x1c>
    stat = osErrorISR;
 8004728:	f06f 0305 	mvn.w	r3, #5
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e007      	b.n	8004740 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <osDelay+0x2c>
      vTaskDelay(ticks);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 feaa 	bl	8005494 <vTaskDelay>
    }
  }

  return (stat);
 8004740:	68fb      	ldr	r3, [r7, #12]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a07      	ldr	r2, [pc, #28]	@ (8004778 <vApplicationGetIdleTaskMemory+0x2c>)
 800475c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a06      	ldr	r2, [pc, #24]	@ (800477c <vApplicationGetIdleTaskMemory+0x30>)
 8004762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2280      	movs	r2, #128	@ 0x80
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000208 	.word	0x20000208
 800477c:	20000264 	.word	0x20000264

08004780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a07      	ldr	r2, [pc, #28]	@ (80047ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a06      	ldr	r2, [pc, #24]	@ (80047b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800479e:	601a      	str	r2, [r3, #0]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20000464 	.word	0x20000464
 80047b0:	200004c0 	.word	0x200004c0

080047b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f103 0208 	add.w	r2, r3, #8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295
 80047cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f103 0208 	add.w	r2, r3, #8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0208 	add.w	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d103      	bne.n	8004876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e00c      	b.n	8004890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3308      	adds	r3, #8
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e002      	b.n	8004884 <vListInsert+0x2e>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d2f6      	bcs.n	800487e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6892      	ldr	r2, [r2, #8]
 80048de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d103      	bne.n	80048fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <xQueueGenericReset+0x1c>
 8004930:	f001 ff32 	bl	8006798 <ulSetInterruptMask>
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8004938:	f001 fdf4 	bl	8006524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	3b01      	subs	r3, #1
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	22ff      	movs	r2, #255	@ 0xff
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	22ff      	movs	r2, #255	@ 0xff
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10e      	bne.n	80049ac <xQueueGenericReset+0x90>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <xQueueGenericReset+0xa4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3310      	adds	r3, #16
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ffec 	bl	8005978 <xTaskRemoveFromEventList>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <xQueueGenericReset+0xa4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a6:	f001 fdab 	bl	8006500 <vPortYield>
 80049aa:	e009      	b.n	80049c0 <xQueueGenericReset+0xa4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3310      	adds	r3, #16
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff feff 	bl	80047b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3324      	adds	r3, #36	@ 0x24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fefa 	bl	80047b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049c0:	f001 fdc2 	bl	8006548 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049c4:	2301      	movs	r3, #1
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b088      	sub	sp, #32
 80049d2:	af02      	add	r7, sp, #8
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <xQueueGenericCreateStatic+0x1c>
 80049e2:	f001 fed9 	bl	8006798 <ulSetInterruptMask>
 80049e6:	bf00      	nop
 80049e8:	e7fd      	b.n	80049e6 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <xQueueGenericCreateStatic+0x2a>
 80049f0:	f001 fed2 	bl	8006798 <ulSetInterruptMask>
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xQueueGenericCreateStatic+0x26>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <xQueueGenericCreateStatic+0x36>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <xQueueGenericCreateStatic+0x3a>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <xQueueGenericCreateStatic+0x3c>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <xQueueGenericCreateStatic+0x48>
 8004a0e:	f001 fec3 	bl	8006798 <ulSetInterruptMask>
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <xQueueGenericCreateStatic+0x54>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericCreateStatic+0x58>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericCreateStatic+0x5a>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <xQueueGenericCreateStatic+0x66>
 8004a2c:	f001 feb4 	bl	8006798 <ulSetInterruptMask>
 8004a30:	bf00      	nop
 8004a32:	e7fd      	b.n	8004a30 <xQueueGenericCreateStatic+0x62>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a34:	2350      	movs	r3, #80	@ 0x50
 8004a36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b50      	cmp	r3, #80	@ 0x50
 8004a3c:	d003      	beq.n	8004a46 <xQueueGenericCreateStatic+0x78>
 8004a3e:	f001 feab 	bl	8006798 <ulSetInterruptMask>
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a46:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <xQueueGenericCreateStatic+0xa0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f805 	bl	8004a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a6e:	697b      	ldr	r3, [r7, #20]
	}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	69b8      	ldr	r0, [r7, #24]
 8004aaa:	f7ff ff37 	bl	800491c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b08a      	sub	sp, #40	@ 0x28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <xQueueGenericSend+0x24>
 8004ada:	f001 fe5d 	bl	8006798 <ulSetInterruptMask>
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <xQueueGenericSend+0x32>
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <xQueueGenericSend+0x36>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <xQueueGenericSend+0x38>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x44>
 8004afa:	f001 fe4d 	bl	8006798 <ulSetInterruptMask>
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d103      	bne.n	8004b10 <xQueueGenericSend+0x52>
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <xQueueGenericSend+0x56>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xQueueGenericSend+0x58>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <xQueueGenericSend+0x64>
 8004b1a:	f001 fe3d 	bl	8006798 <ulSetInterruptMask>
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xQueueGenericSend+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b22:	f001 f8c1 	bl	8005ca8 <xTaskGetSchedulerState>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xQueueGenericSend+0x74>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueGenericSend+0x78>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueGenericSend+0x7a>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d103      	bne.n	8004b44 <xQueueGenericSend+0x86>
 8004b3c:	f001 fe2c 	bl	8006798 <ulSetInterruptMask>
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <xQueueGenericSend+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b44:	f001 fcee 	bl	8006524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <xQueueGenericSend+0x9c>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d11d      	bne.n	8004b96 <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6a38      	ldr	r0, [r7, #32]
 8004b60:	f000 f9aa 	bl	8004eb8 <prvCopyDataToQueue>
 8004b64:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <xQueueGenericSend+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	3324      	adds	r3, #36	@ 0x24
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 ff00 	bl	8005978 <xTaskRemoveFromEventList>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b7e:	f001 fcbf 	bl	8006500 <vPortYield>
 8004b82:	e004      	b.n	8004b8e <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b8a:	f001 fcb9 	bl	8006500 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b8e:	f001 fcdb 	bl	8006548 <vPortExitCritical>
				return pdPASS;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e05c      	b.n	8004c50 <xQueueGenericSend+0x192>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d103      	bne.n	8004ba4 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b9c:	f001 fcd4 	bl	8006548 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e055      	b.n	8004c50 <xQueueGenericSend+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ff3e 	bl	8005a30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bb8:	f001 fcc6 	bl	8006548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bbc:	f000 fce8 	bl	8005590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bc0:	f001 fcb0 	bl	8006524 <vPortEnterCritical>
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d103      	bne.n	8004bda <xQueueGenericSend+0x11c>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d103      	bne.n	8004bf0 <xQueueGenericSend+0x132>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bf0:	f001 fcaa 	bl	8006548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bf4:	1d3a      	adds	r2, r7, #4
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 ff2d 	bl	8005a5c <xTaskCheckForTimeOut>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11d      	bne.n	8004c44 <xQueueGenericSend+0x186>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c08:	6a38      	ldr	r0, [r7, #32]
 8004c0a:	f000 fa4d 	bl	80050a8 <prvIsQueueFull>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d011      	beq.n	8004c38 <xQueueGenericSend+0x17a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	3310      	adds	r3, #16
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fe69 	bl	80058f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c22:	6a38      	ldr	r0, [r7, #32]
 8004c24:	f000 f9d8 	bl	8004fd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c28:	f000 fcc0 	bl	80055ac <xTaskResumeAll>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d188      	bne.n	8004b44 <xQueueGenericSend+0x86>
				{
					portYIELD_WITHIN_API();
 8004c32:	f001 fc65 	bl	8006500 <vPortYield>
 8004c36:	e785      	b.n	8004b44 <xQueueGenericSend+0x86>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c38:	6a38      	ldr	r0, [r7, #32]
 8004c3a:	f000 f9cd 	bl	8004fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c3e:	f000 fcb5 	bl	80055ac <xTaskResumeAll>
 8004c42:	e77f      	b.n	8004b44 <xQueueGenericSend+0x86>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c44:	6a38      	ldr	r0, [r7, #32]
 8004c46:	f000 f9c7 	bl	8004fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c4a:	f000 fcaf 	bl	80055ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3728      	adds	r7, #40	@ 0x28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <xQueueGenericSendFromISR+0x20>
 8004c70:	f001 fd92 	bl	8006798 <ulSetInterruptMask>
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <xQueueGenericSendFromISR+0x2e>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <xQueueGenericSendFromISR+0x32>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueGenericSendFromISR+0x34>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <xQueueGenericSendFromISR+0x40>
 8004c90:	f001 fd82 	bl	8006798 <ulSetInterruptMask>
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d103      	bne.n	8004ca6 <xQueueGenericSendFromISR+0x4e>
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <xQueueGenericSendFromISR+0x52>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericSendFromISR+0x54>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <xQueueGenericSendFromISR+0x60>
 8004cb0:	f001 fd72 	bl	8006798 <ulSetInterruptMask>
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericSendFromISR+0x5c>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cb8:	f001 fd6e 	bl	8006798 <ulSetInterruptMask>
 8004cbc:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <xQueueGenericSendFromISR+0x78>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d12d      	bne.n	8004d2c <xQueueGenericSendFromISR+0xd4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cd6:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	6a38      	ldr	r0, [r7, #32]
 8004ce4:	f000 f8e8 	bl	8004eb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ce8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d112      	bne.n	8004d18 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d015      	beq.n	8004d26 <xQueueGenericSendFromISR+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	3324      	adds	r3, #36	@ 0x24
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fe3a 	bl	8005978 <xTaskRemoveFromEventList>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <xQueueGenericSendFromISR+0xce>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <xQueueGenericSendFromISR+0xce>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e006      	b.n	8004d26 <xQueueGenericSendFromISR+0xce>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d18:	7efb      	ldrb	r3, [r7, #27]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	b25a      	sxtb	r2, r3
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d26:	2301      	movs	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 8004d2a:	e001      	b.n	8004d30 <xQueueGenericSendFromISR+0xd8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004d30:	69f8      	ldr	r0, [r7, #28]
 8004d32:	f001 fd3e 	bl	80067b2 <vClearInterruptMask>

	return xReturn;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3728      	adds	r7, #40	@ 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	@ 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <xQueueReceive+0x22>
 8004d5a:	f001 fd1d 	bl	8006798 <ulSetInterruptMask>
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <xQueueReceive+0x30>
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <xQueueReceive+0x34>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <xQueueReceive+0x36>
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <xQueueReceive+0x42>
 8004d7a:	f001 fd0d 	bl	8006798 <ulSetInterruptMask>
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xQueueReceive+0x3e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d82:	f000 ff91 	bl	8005ca8 <xTaskGetSchedulerState>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <xQueueReceive+0x52>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <xQueueReceive+0x56>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <xQueueReceive+0x58>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <xQueueReceive+0x64>
 8004d9c:	f001 fcfc 	bl	8006798 <ulSetInterruptMask>
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <xQueueReceive+0x60>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004da4:	f001 fbbe 	bl	8006524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d019      	beq.n	8004de8 <xQueueReceive+0xa8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	6a38      	ldr	r0, [r7, #32]
 8004db8:	f000 f8e8 	bl	8004f8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <xQueueReceive+0xa0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	3310      	adds	r3, #16
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fdd1 	bl	8005978 <xTaskRemoveFromEventList>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <xQueueReceive+0xa0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ddc:	f001 fb90 	bl	8006500 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004de0:	f001 fbb2 	bl	8006548 <vPortExitCritical>
				return pdPASS;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e063      	b.n	8004eb0 <xQueueReceive+0x170>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <xQueueReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dee:	f001 fbab 	bl	8006548 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e05c      	b.n	8004eb0 <xQueueReceive+0x170>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <xQueueReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fe15 	bl	8005a30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e0a:	f001 fb9d 	bl	8006548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e0e:	f000 fbbf 	bl	8005590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e12:	f001 fb87 	bl	8006524 <vPortEnterCritical>
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e1c:	b25b      	sxtb	r3, r3
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d103      	bne.n	8004e2c <xQueueReceive+0xec>
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e32:	b25b      	sxtb	r3, r3
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d103      	bne.n	8004e42 <xQueueReceive+0x102>
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e42:	f001 fb81 	bl	8006548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e46:	1d3a      	adds	r2, r7, #4
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fe04 	bl	8005a5c <xTaskCheckForTimeOut>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d11d      	bne.n	8004e96 <xQueueReceive+0x156>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e5a:	6a38      	ldr	r0, [r7, #32]
 8004e5c:	f000 f90e 	bl	800507c <prvIsQueueEmpty>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d011      	beq.n	8004e8a <xQueueReceive+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	3324      	adds	r3, #36	@ 0x24
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd40 	bl	80058f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e74:	6a38      	ldr	r0, [r7, #32]
 8004e76:	f000 f8af 	bl	8004fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e7a:	f000 fb97 	bl	80055ac <xTaskResumeAll>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d18f      	bne.n	8004da4 <xQueueReceive+0x64>
				{
					portYIELD_WITHIN_API();
 8004e84:	f001 fb3c 	bl	8006500 <vPortYield>
 8004e88:	e78c      	b.n	8004da4 <xQueueReceive+0x64>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e8a:	6a38      	ldr	r0, [r7, #32]
 8004e8c:	f000 f8a4 	bl	8004fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e90:	f000 fb8c 	bl	80055ac <xTaskResumeAll>
 8004e94:	e786      	b.n	8004da4 <xQueueReceive+0x64>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e96:	6a38      	ldr	r0, [r7, #32]
 8004e98:	f000 f89e 	bl	8004fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e9c:	f000 fb86 	bl	80055ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea0:	6a38      	ldr	r0, [r7, #32]
 8004ea2:	f000 f8eb 	bl	800507c <prvIsQueueEmpty>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f43f af7b 	beq.w	8004da4 <xQueueReceive+0x64>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3728      	adds	r7, #40	@ 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ecc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d14d      	bne.n	8004f7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fefe 	bl	8005ce4 <xTaskPriorityDisinherit>
 8004ee8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	e043      	b.n	8004f7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d119      	bne.n	8004f2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6858      	ldr	r0, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	461a      	mov	r2, r3
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	f001 fe9a 	bl	8006c3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	441a      	add	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d32b      	bcc.n	8004f7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	e026      	b.n	8004f7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68d8      	ldr	r0, [r3, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	461a      	mov	r2, r3
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	f001 fe80 	bl	8006c3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	425b      	negs	r3, r3
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d207      	bcs.n	8004f68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	425b      	negs	r3, r3
 8004f62:	441a      	add	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d105      	bne.n	8004f7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f82:	697b      	ldr	r3, [r7, #20]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d018      	beq.n	8004fd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	441a      	add	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d303      	bcc.n	8004fc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68d9      	ldr	r1, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6838      	ldr	r0, [r7, #0]
 8004fcc:	f001 fe36 	bl	8006c3c <memcpy>
	}
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fe0:	f001 faa0 	bl	8006524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fec:	e011      	b.n	8005012 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d012      	beq.n	800501c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3324      	adds	r3, #36	@ 0x24
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fcbc 	bl	8005978 <xTaskRemoveFromEventList>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005006:	f000 fd7d 	bl	8005b04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	3b01      	subs	r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	dce9      	bgt.n	8004fee <prvUnlockQueue+0x16>
 800501a:	e000      	b.n	800501e <prvUnlockQueue+0x46>
					break;
 800501c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	22ff      	movs	r2, #255	@ 0xff
 8005022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005026:	f001 fa8f 	bl	8006548 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800502a:	f001 fa7b 	bl	8006524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005034:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005036:	e011      	b.n	800505c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3310      	adds	r3, #16
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fc97 	bl	8005978 <xTaskRemoveFromEventList>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005050:	f000 fd58 	bl	8005b04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005054:	7bbb      	ldrb	r3, [r7, #14]
 8005056:	3b01      	subs	r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800505c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005060:	2b00      	cmp	r3, #0
 8005062:	dce9      	bgt.n	8005038 <prvUnlockQueue+0x60>
 8005064:	e000      	b.n	8005068 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005066:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	22ff      	movs	r2, #255	@ 0xff
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005070:	f001 fa6a 	bl	8006548 <vPortExitCritical>
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005084:	f001 fa4e 	bl	8006524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e001      	b.n	800509a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800509a:	f001 fa55 	bl	8006548 <vPortExitCritical>

	return xReturn;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b0:	f001 fa38 	bl	8006524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	429a      	cmp	r2, r3
 80050be:	d102      	bne.n	80050c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e001      	b.n	80050ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ca:	f001 fa3d 	bl	8006548 <vPortExitCritical>

	return xReturn;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e014      	b.n	8005112 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005128 <vQueueAddToRegistry+0x50>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050f4:	490c      	ldr	r1, [pc, #48]	@ (8005128 <vQueueAddToRegistry+0x50>)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005128 <vQueueAddToRegistry+0x50>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800510a:	e006      	b.n	800511a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b07      	cmp	r3, #7
 8005116:	d9e7      	bls.n	80050e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	200008c0 	.word	0x200008c0

0800512c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800513c:	f001 f9f2 	bl	8006524 <vPortEnterCritical>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005146:	b25b      	sxtb	r3, r3
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d103      	bne.n	8005156 <vQueueWaitForMessageRestricted+0x2a>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800515c:	b25b      	sxtb	r3, r3
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d103      	bne.n	800516c <vQueueWaitForMessageRestricted+0x40>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516c:	f001 f9ec 	bl	8006548 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3324      	adds	r3, #36	@ 0x24
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fbd5 	bl	8005930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f7ff ff26 	bl	8004fd8 <prvUnlockQueue>
	}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	@ 0x30
 8005198:	af04      	add	r7, sp, #16
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <xTaskCreateStatic+0x1c>
 80051a8:	f001 faf6 	bl	8006798 <ulSetInterruptMask>
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 80051b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <xTaskCreateStatic+0x2a>
 80051b6:	f001 faef 	bl	8006798 <ulSetInterruptMask>
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <xTaskCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051be:	235c      	movs	r3, #92	@ 0x5c
 80051c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80051c6:	d003      	beq.n	80051d0 <xTaskCreateStatic+0x3c>
 80051c8:	f001 fae6 	bl	8006798 <ulSetInterruptMask>
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <xTaskCreateStatic+0x38>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051d0:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01e      	beq.n	8005216 <xTaskCreateStatic+0x82>
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01b      	beq.n	8005216 <xTaskCreateStatic+0x82>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051f0:	2300      	movs	r3, #0
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	f107 0318 	add.w	r3, r7, #24
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f850 	bl	80052ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800520e:	69f8      	ldr	r0, [r7, #28]
 8005210:	f000 f8d8 	bl	80053c4 <prvAddNewTaskToReadyList>
 8005214:	e001      	b.n	800521a <xTaskCreateStatic+0x86>
		}
		else
		{
			xReturn = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800521a:	69bb      	ldr	r3, [r7, #24]
	}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	@ 0x30
 8005228:	af04      	add	r7, sp, #16
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fb0d 	bl	8006858 <pvPortMalloc>
 800523e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00e      	beq.n	8005264 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005246:	205c      	movs	r0, #92	@ 0x5c
 8005248:	f001 fb06 	bl	8006858 <pvPortMalloc>
 800524c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
 800525a:	e005      	b.n	8005268 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800525c:	6978      	ldr	r0, [r7, #20]
 800525e:	f001 fbb1 	bl	80069c4 <vPortFree>
 8005262:	e001      	b.n	8005268 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	2300      	movs	r3, #0
 800527a:	9303      	str	r3, [sp, #12]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	9302      	str	r3, [sp, #8]
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f80e 	bl	80052ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005292:	69f8      	ldr	r0, [r7, #28]
 8005294:	f000 f896 	bl	80053c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005298:	2301      	movs	r3, #1
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e002      	b.n	80052a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052a4:	69bb      	ldr	r3, [r7, #24]
	}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	461a      	mov	r2, r3
 80052c6:	21a5      	movs	r1, #165	@ 0xa5
 80052c8:	f001 fc8c 	bl	8006be4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052d6:	3b01      	subs	r3, #1
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f023 0307 	bic.w	r3, r3, #7
 80052e4:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <prvInitialiseNewTask+0x4a>
 80052f0:	f001 fa52 	bl	8006798 <ulSetInterruptMask>
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01f      	beq.n	800533e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e012      	b.n	800532a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	7819      	ldrb	r1, [r3, #0]
 800530c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	3334      	adds	r3, #52	@ 0x34
 8005314:	460a      	mov	r2, r1
 8005316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	4413      	add	r3, r2
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3301      	adds	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b0f      	cmp	r3, #15
 800532e:	d9e9      	bls.n	8005304 <prvInitialiseNewTask+0x56>
 8005330:	e000      	b.n	8005334 <prvInitialiseNewTask+0x86>
			{
				break;
 8005332:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800533c:	e003      	b.n	8005346 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b37      	cmp	r3, #55	@ 0x37
 800534a:	d901      	bls.n	8005350 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800534c:	2337      	movs	r3, #55	@ 0x37
 800534e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	6a3a      	ldr	r2, [r7, #32]
 8005354:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	2200      	movs	r2, #0
 8005360:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	3304      	adds	r3, #4
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fa44 	bl	80047f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	3318      	adds	r3, #24
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fa3f 	bl	80047f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800537a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800538a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	2200      	movs	r2, #0
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	6938      	ldr	r0, [r7, #16]
 80053a4:	f001 f91c 	bl	80065e0 <pxPortInitialiseStack>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ba:	bf00      	nop
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053cc:	f001 f8aa 	bl	8006524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053d0:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <prvAddNewTaskToReadyList+0xb8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a29      	ldr	r2, [pc, #164]	@ (800547c <prvAddNewTaskToReadyList+0xb8>)
 80053d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053da:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <prvAddNewTaskToReadyList+0xbc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053e2:	4a27      	ldr	r2, [pc, #156]	@ (8005480 <prvAddNewTaskToReadyList+0xbc>)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e8:	4b24      	ldr	r3, [pc, #144]	@ (800547c <prvAddNewTaskToReadyList+0xb8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d110      	bne.n	8005412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053f0:	f000 fba4 	bl	8005b3c <prvInitialiseTaskLists>
 80053f4:	e00d      	b.n	8005412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053f6:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <prvAddNewTaskToReadyList+0xc0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053fe:	4b20      	ldr	r3, [pc, #128]	@ (8005480 <prvAddNewTaskToReadyList+0xbc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	429a      	cmp	r2, r3
 800540a:	d802      	bhi.n	8005412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800540c:	4a1c      	ldr	r2, [pc, #112]	@ (8005480 <prvAddNewTaskToReadyList+0xbc>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005412:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <prvAddNewTaskToReadyList+0xc4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a1b      	ldr	r2, [pc, #108]	@ (8005488 <prvAddNewTaskToReadyList+0xc4>)
 800541a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800541c:	4b1a      	ldr	r3, [pc, #104]	@ (8005488 <prvAddNewTaskToReadyList+0xc4>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005428:	4b18      	ldr	r3, [pc, #96]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d903      	bls.n	8005438 <prvAddNewTaskToReadyList+0x74>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	4a15      	ldr	r2, [pc, #84]	@ (800548c <prvAddNewTaskToReadyList+0xc8>)
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4a12      	ldr	r2, [pc, #72]	@ (8005490 <prvAddNewTaskToReadyList+0xcc>)
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7ff f9dd 	bl	800480e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005454:	f001 f878 	bl	8006548 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <prvAddNewTaskToReadyList+0xc0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005460:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <prvAddNewTaskToReadyList+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	429a      	cmp	r2, r3
 800546c:	d201      	bcs.n	8005472 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800546e:	f001 f847 	bl	8006500 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000dd4 	.word	0x20000dd4
 8005480:	20000900 	.word	0x20000900
 8005484:	20000de0 	.word	0x20000de0
 8005488:	20000df0 	.word	0x20000df0
 800548c:	20000ddc 	.word	0x20000ddc
 8005490:	20000904 	.word	0x20000904

08005494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d010      	beq.n	80054c8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <vTaskDelay+0x48>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <vTaskDelay+0x22>
 80054ae:	f001 f973 	bl	8006798 <ulSetInterruptMask>
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 80054b6:	f000 f86b 	bl	8005590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ba:	2100      	movs	r1, #0
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fc71 	bl	8005da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054c2:	f000 f873 	bl	80055ac <xTaskResumeAll>
 80054c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80054ce:	f001 f817 	bl	8006500 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000dfc 	.word	0x20000dfc

080054e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054ee:	463a      	mov	r2, r7
 80054f0:	1d39      	adds	r1, r7, #4
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff f928 	bl	800474c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	9202      	str	r2, [sp, #8]
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	2300      	movs	r3, #0
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2300      	movs	r3, #0
 800550c:	460a      	mov	r2, r1
 800550e:	491a      	ldr	r1, [pc, #104]	@ (8005578 <vTaskStartScheduler+0x98>)
 8005510:	481a      	ldr	r0, [pc, #104]	@ (800557c <vTaskStartScheduler+0x9c>)
 8005512:	f7ff fe3f 	bl	8005194 <xTaskCreateStatic>
 8005516:	4603      	mov	r3, r0
 8005518:	4a19      	ldr	r2, [pc, #100]	@ (8005580 <vTaskStartScheduler+0xa0>)
 800551a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800551c:	4b18      	ldr	r3, [pc, #96]	@ (8005580 <vTaskStartScheduler+0xa0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005524:	2301      	movs	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e001      	b.n	800552e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d102      	bne.n	800553a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005534:	f000 fc8a 	bl	8005e4c <xTimerCreateTimerTask>
 8005538:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10e      	bne.n	800555e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005540:	f001 f92a 	bl	8006798 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005544:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <vTaskStartScheduler+0xa4>)
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800554c:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <vTaskStartScheduler+0xa8>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005552:	4b0e      	ldr	r3, [pc, #56]	@ (800558c <vTaskStartScheduler+0xac>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005558:	f001 f8cc 	bl	80066f4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800555c:	e007      	b.n	800556e <vTaskStartScheduler+0x8e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d103      	bne.n	800556e <vTaskStartScheduler+0x8e>
 8005566:	f001 f917 	bl	8006798 <ulSetInterruptMask>
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <vTaskStartScheduler+0x8a>
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	08006ca8 	.word	0x08006ca8
 800557c:	08005b1d 	.word	0x08005b1d
 8005580:	20000df8 	.word	0x20000df8
 8005584:	20000df4 	.word	0x20000df4
 8005588:	20000de0 	.word	0x20000de0
 800558c:	20000dd8 	.word	0x20000dd8

08005590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <vTaskSuspendAll+0x18>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	4a03      	ldr	r2, [pc, #12]	@ (80055a8 <vTaskSuspendAll+0x18>)
 800559c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000dfc 	.word	0x20000dfc

080055ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ba:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <xTaskResumeAll+0xfc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <xTaskResumeAll+0x1e>
 80055c2:	f001 f8e9 	bl	8006798 <ulSetInterruptMask>
 80055c6:	bf00      	nop
 80055c8:	e7fd      	b.n	80055c6 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055ca:	f000 ffab 	bl	8006524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055ce:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <xTaskResumeAll+0xfc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4a34      	ldr	r2, [pc, #208]	@ (80056a8 <xTaskResumeAll+0xfc>)
 80055d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d8:	4b33      	ldr	r3, [pc, #204]	@ (80056a8 <xTaskResumeAll+0xfc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d15c      	bne.n	800569a <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055e0:	4b32      	ldr	r3, [pc, #200]	@ (80056ac <xTaskResumeAll+0x100>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d058      	beq.n	800569a <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055e8:	e02f      	b.n	800564a <xTaskResumeAll+0x9e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ea:	4b31      	ldr	r3, [pc, #196]	@ (80056b0 <xTaskResumeAll+0x104>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3318      	adds	r3, #24
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff f966 	bl	80048c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3304      	adds	r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f961 	bl	80048c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560a:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <xTaskResumeAll+0x108>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d903      	bls.n	800561a <xTaskResumeAll+0x6e>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	4a27      	ldr	r2, [pc, #156]	@ (80056b4 <xTaskResumeAll+0x108>)
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4a24      	ldr	r2, [pc, #144]	@ (80056b8 <xTaskResumeAll+0x10c>)
 8005628:	441a      	add	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f7ff f8ec 	bl	800480e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563a:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <xTaskResumeAll+0x110>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8005644:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <xTaskResumeAll+0x114>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800564a:	4b19      	ldr	r3, [pc, #100]	@ (80056b0 <xTaskResumeAll+0x104>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1cb      	bne.n	80055ea <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005658:	f000 fb06 	bl	8005c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <xTaskResumeAll+0x118>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005668:	f000 f83e 	bl	80056e8 <xTaskIncrementTick>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <xTaskResumeAll+0x114>)
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f1      	bne.n	8005668 <xTaskResumeAll+0xbc>

						xPendedTicks = 0;
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <xTaskResumeAll+0x118>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <xTaskResumeAll+0x114>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <xTaskResumeAll+0xee>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005696:	f000 ff33 	bl	8006500 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800569a:	f000 ff55 	bl	8006548 <vPortExitCritical>

	return xAlreadyYielded;
 800569e:	68bb      	ldr	r3, [r7, #8]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000dfc 	.word	0x20000dfc
 80056ac:	20000dd4 	.word	0x20000dd4
 80056b0:	20000d94 	.word	0x20000d94
 80056b4:	20000ddc 	.word	0x20000ddc
 80056b8:	20000904 	.word	0x20000904
 80056bc:	20000900 	.word	0x20000900
 80056c0:	20000de8 	.word	0x20000de8
 80056c4:	20000de4 	.word	0x20000de4

080056c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <xTaskGetTickCount+0x1c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056d4:	687b      	ldr	r3, [r7, #4]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000dd8 	.word	0x20000dd8

080056e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005820 <xTaskIncrementTick+0x138>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 8088 	bne.w	800580c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056fc:	4b49      	ldr	r3, [pc, #292]	@ (8005824 <xTaskIncrementTick+0x13c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005704:	4a47      	ldr	r2, [pc, #284]	@ (8005824 <xTaskIncrementTick+0x13c>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d119      	bne.n	8005744 <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005710:	4b45      	ldr	r3, [pc, #276]	@ (8005828 <xTaskIncrementTick+0x140>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <xTaskIncrementTick+0x3a>
 800571a:	f001 f83d 	bl	8006798 <ulSetInterruptMask>
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <xTaskIncrementTick+0x36>
 8005722:	4b41      	ldr	r3, [pc, #260]	@ (8005828 <xTaskIncrementTick+0x140>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	4b40      	ldr	r3, [pc, #256]	@ (800582c <xTaskIncrementTick+0x144>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3e      	ldr	r2, [pc, #248]	@ (8005828 <xTaskIncrementTick+0x140>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4a3e      	ldr	r2, [pc, #248]	@ (800582c <xTaskIncrementTick+0x144>)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	4b3e      	ldr	r3, [pc, #248]	@ (8005830 <xTaskIncrementTick+0x148>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a3c      	ldr	r2, [pc, #240]	@ (8005830 <xTaskIncrementTick+0x148>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	f000 fa92 	bl	8005c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005744:	4b3b      	ldr	r3, [pc, #236]	@ (8005834 <xTaskIncrementTick+0x14c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d349      	bcc.n	80057e2 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800574e:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <xTaskIncrementTick+0x140>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005758:	4b36      	ldr	r3, [pc, #216]	@ (8005834 <xTaskIncrementTick+0x14c>)
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	601a      	str	r2, [r3, #0]
					break;
 8005760:	e03f      	b.n	80057e2 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005762:	4b31      	ldr	r3, [pc, #196]	@ (8005828 <xTaskIncrementTick+0x140>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d203      	bcs.n	8005782 <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800577a:	4a2e      	ldr	r2, [pc, #184]	@ (8005834 <xTaskIncrementTick+0x14c>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005780:	e02f      	b.n	80057e2 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff f89e 	bl	80048c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3318      	adds	r3, #24
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff f895 	bl	80048c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a2:	4b25      	ldr	r3, [pc, #148]	@ (8005838 <xTaskIncrementTick+0x150>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d903      	bls.n	80057b2 <xTaskIncrementTick+0xca>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a22      	ldr	r2, [pc, #136]	@ (8005838 <xTaskIncrementTick+0x150>)
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4a1f      	ldr	r2, [pc, #124]	@ (800583c <xTaskIncrementTick+0x154>)
 80057c0:	441a      	add	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7ff f820 	bl	800480e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <xTaskIncrementTick+0x158>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	429a      	cmp	r2, r3
 80057da:	d3b8      	bcc.n	800574e <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e0:	e7b5      	b.n	800574e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057e2:	4b17      	ldr	r3, [pc, #92]	@ (8005840 <xTaskIncrementTick+0x158>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e8:	4914      	ldr	r1, [pc, #80]	@ (800583c <xTaskIncrementTick+0x154>)
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d901      	bls.n	80057fe <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057fe:	4b11      	ldr	r3, [pc, #68]	@ (8005844 <xTaskIncrementTick+0x15c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e004      	b.n	8005816 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800580c:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <xTaskIncrementTick+0x160>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	4a0d      	ldr	r2, [pc, #52]	@ (8005848 <xTaskIncrementTick+0x160>)
 8005814:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005816:	697b      	ldr	r3, [r7, #20]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000dfc 	.word	0x20000dfc
 8005824:	20000dd8 	.word	0x20000dd8
 8005828:	20000d8c 	.word	0x20000d8c
 800582c:	20000d90 	.word	0x20000d90
 8005830:	20000dec 	.word	0x20000dec
 8005834:	20000df4 	.word	0x20000df4
 8005838:	20000ddc 	.word	0x20000ddc
 800583c:	20000904 	.word	0x20000904
 8005840:	20000900 	.word	0x20000900
 8005844:	20000de8 	.word	0x20000de8
 8005848:	20000de4 	.word	0x20000de4

0800584c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005852:	4b23      	ldr	r3, [pc, #140]	@ (80058e0 <vTaskSwitchContext+0x94>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800585a:	4b22      	ldr	r3, [pc, #136]	@ (80058e4 <vTaskSwitchContext+0x98>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005860:	e03a      	b.n	80058d8 <vTaskSwitchContext+0x8c>
		xYieldPending = pdFALSE;
 8005862:	4b20      	ldr	r3, [pc, #128]	@ (80058e4 <vTaskSwitchContext+0x98>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005868:	4b1f      	ldr	r3, [pc, #124]	@ (80058e8 <vTaskSwitchContext+0x9c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	e009      	b.n	8005884 <vTaskSwitchContext+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <vTaskSwitchContext+0x32>
 8005876:	f000 ff8f 	bl	8006798 <ulSetInterruptMask>
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <vTaskSwitchContext+0x2e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3b01      	subs	r3, #1
 8005882:	607b      	str	r3, [r7, #4]
 8005884:	4919      	ldr	r1, [pc, #100]	@ (80058ec <vTaskSwitchContext+0xa0>)
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0eb      	beq.n	8005870 <vTaskSwitchContext+0x24>
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a12      	ldr	r2, [pc, #72]	@ (80058ec <vTaskSwitchContext+0xa0>)
 80058a4:	4413      	add	r3, r2
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d104      	bne.n	80058c8 <vTaskSwitchContext+0x7c>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4a08      	ldr	r2, [pc, #32]	@ (80058f0 <vTaskSwitchContext+0xa4>)
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4a05      	ldr	r2, [pc, #20]	@ (80058e8 <vTaskSwitchContext+0x9c>)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6013      	str	r3, [r2, #0]
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000dfc 	.word	0x20000dfc
 80058e4:	20000de8 	.word	0x20000de8
 80058e8:	20000ddc 	.word	0x20000ddc
 80058ec:	20000904 	.word	0x20000904
 80058f0:	20000900 	.word	0x20000900

080058f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <vTaskPlaceOnEventList+0x18>
 8005904:	f000 ff48 	bl	8006798 <ulSetInterruptMask>
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800590c:	4b07      	ldr	r3, [pc, #28]	@ (800592c <vTaskPlaceOnEventList+0x38>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3318      	adds	r3, #24
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fe ff9e 	bl	8004856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800591a:	2101      	movs	r1, #1
 800591c:	6838      	ldr	r0, [r7, #0]
 800591e:	f000 fa41 	bl	8005da4 <prvAddCurrentTaskToDelayedList>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000900 	.word	0x20000900

08005930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <vTaskPlaceOnEventListRestricted+0x1a>
 8005942:	f000 ff29 	bl	8006798 <ulSetInterruptMask>
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800594a:	4b0a      	ldr	r3, [pc, #40]	@ (8005974 <vTaskPlaceOnEventListRestricted+0x44>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3318      	adds	r3, #24
 8005950:	4619      	mov	r1, r3
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7fe ff5b 	bl	800480e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	68b8      	ldr	r0, [r7, #8]
 8005968:	f000 fa1c 	bl	8005da4 <prvAddCurrentTaskToDelayedList>
	}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000900 	.word	0x20000900

08005978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d103      	bne.n	8005996 <xTaskRemoveFromEventList+0x1e>
 800598e:	f000 ff03 	bl	8006798 <ulSetInterruptMask>
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3318      	adds	r3, #24
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe ff94 	bl	80048c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <xTaskRemoveFromEventList+0xa0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11d      	bne.n	80059e4 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe ff8b 	bl	80048c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b6:	4b19      	ldr	r3, [pc, #100]	@ (8005a1c <xTaskRemoveFromEventList+0xa4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d903      	bls.n	80059c6 <xTaskRemoveFromEventList+0x4e>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c2:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <xTaskRemoveFromEventList+0xa4>)
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4a13      	ldr	r2, [pc, #76]	@ (8005a20 <xTaskRemoveFromEventList+0xa8>)
 80059d4:	441a      	add	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3304      	adds	r3, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f7fe ff16 	bl	800480e <vListInsertEnd>
 80059e2:	e005      	b.n	80059f0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	3318      	adds	r3, #24
 80059e8:	4619      	mov	r1, r3
 80059ea:	480e      	ldr	r0, [pc, #56]	@ (8005a24 <xTaskRemoveFromEventList+0xac>)
 80059ec:	f7fe ff0f 	bl	800480e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a28 <xTaskRemoveFromEventList+0xb0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d905      	bls.n	8005a0a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059fe:	2301      	movs	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a02:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <xTaskRemoveFromEventList+0xb4>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e001      	b.n	8005a0e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000dfc 	.word	0x20000dfc
 8005a1c:	20000ddc 	.word	0x20000ddc
 8005a20:	20000904 	.word	0x20000904
 8005a24:	20000d94 	.word	0x20000d94
 8005a28:	20000900 	.word	0x20000900
 8005a2c:	20000de8 	.word	0x20000de8

08005a30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a38:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <vTaskInternalSetTimeOutState+0x24>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <vTaskInternalSetTimeOutState+0x28>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	605a      	str	r2, [r3, #4]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000dec 	.word	0x20000dec
 8005a58:	20000dd8 	.word	0x20000dd8

08005a5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <xTaskCheckForTimeOut+0x18>
 8005a6c:	f000 fe94 	bl	8006798 <ulSetInterruptMask>
 8005a70:	bf00      	nop
 8005a72:	e7fd      	b.n	8005a70 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <xTaskCheckForTimeOut+0x26>
 8005a7a:	f000 fe8d 	bl	8006798 <ulSetInterruptMask>
 8005a7e:	bf00      	nop
 8005a80:	e7fd      	b.n	8005a7e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
 8005a82:	f000 fd4f 	bl	8006524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a86:	4b1d      	ldr	r3, [pc, #116]	@ (8005afc <xTaskCheckForTimeOut+0xa0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d102      	bne.n	8005aa6 <xTaskCheckForTimeOut+0x4a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e023      	b.n	8005aee <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <xTaskCheckForTimeOut+0xa4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d007      	beq.n	8005ac2 <xTaskCheckForTimeOut+0x66>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <xTaskCheckForTimeOut+0x66>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e015      	b.n	8005aee <xTaskCheckForTimeOut+0x92>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d20b      	bcs.n	8005ae4 <xTaskCheckForTimeOut+0x88>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ffa9 	bl	8005a30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e004      	b.n	8005aee <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aea:	2301      	movs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005aee:	f000 fd2b 	bl	8006548 <vPortExitCritical>

	return xReturn;
 8005af2:	697b      	ldr	r3, [r7, #20]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000dd8 	.word	0x20000dd8
 8005b00:	20000dec 	.word	0x20000dec

08005b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b08:	4b03      	ldr	r3, [pc, #12]	@ (8005b18 <vTaskMissedYield+0x14>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000de8 	.word	0x20000de8

08005b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b24:	f000 f84a 	bl	8005bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b28:	4b03      	ldr	r3, [pc, #12]	@ (8005b38 <prvIdleTask+0x1c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d9f9      	bls.n	8005b24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b30:	f000 fce6 	bl	8006500 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005b34:	e7f6      	b.n	8005b24 <prvIdleTask+0x8>
 8005b36:	bf00      	nop
 8005b38:	20000904 	.word	0x20000904

08005b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e00c      	b.n	8005b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a12      	ldr	r2, [pc, #72]	@ (8005b9c <prvInitialiseTaskLists+0x60>)
 8005b54:	4413      	add	r3, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fe2c 	bl	80047b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b37      	cmp	r3, #55	@ 0x37
 8005b66:	d9ef      	bls.n	8005b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b68:	480d      	ldr	r0, [pc, #52]	@ (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b6a:	f7fe fe23 	bl	80047b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b6e:	480d      	ldr	r0, [pc, #52]	@ (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b70:	f7fe fe20 	bl	80047b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b74:	480c      	ldr	r0, [pc, #48]	@ (8005ba8 <prvInitialiseTaskLists+0x6c>)
 8005b76:	f7fe fe1d 	bl	80047b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b7a:	480c      	ldr	r0, [pc, #48]	@ (8005bac <prvInitialiseTaskLists+0x70>)
 8005b7c:	f7fe fe1a 	bl	80047b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b80:	480b      	ldr	r0, [pc, #44]	@ (8005bb0 <prvInitialiseTaskLists+0x74>)
 8005b82:	f7fe fe17 	bl	80047b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <prvInitialiseTaskLists+0x78>)
 8005b88:	4a05      	ldr	r2, [pc, #20]	@ (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <prvInitialiseTaskLists+0x7c>)
 8005b8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000904 	.word	0x20000904
 8005ba0:	20000d64 	.word	0x20000d64
 8005ba4:	20000d78 	.word	0x20000d78
 8005ba8:	20000d94 	.word	0x20000d94
 8005bac:	20000da8 	.word	0x20000da8
 8005bb0:	20000dc0 	.word	0x20000dc0
 8005bb4:	20000d8c 	.word	0x20000d8c
 8005bb8:	20000d90 	.word	0x20000d90

08005bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc2:	e019      	b.n	8005bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bc4:	f000 fcae 	bl	8006524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b10      	ldr	r3, [pc, #64]	@ (8005c0c <prvCheckTasksWaitingTermination+0x50>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fe77 	bl	80048c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bee:	f000 fcab 	bl	8006548 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f810 	bl	8005c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf8:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e1      	bne.n	8005bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000da8 	.word	0x20000da8
 8005c10:	20000dd4 	.word	0x20000dd4
 8005c14:	20000dbc 	.word	0x20000dbc

08005c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fec8 	bl	80069c4 <vPortFree>
				vPortFree( pxTCB );
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fec5 	bl	80069c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c3a:	e011      	b.n	8005c60 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d103      	bne.n	8005c4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 febc 	bl	80069c4 <vPortFree>
	}
 8005c4c:	e008      	b.n	8005c60 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d003      	beq.n	8005c60 <prvDeleteTCB+0x48>
 8005c58:	f000 fd9e 	bl	8006798 <ulSetInterruptMask>
 8005c5c:	bf00      	nop
 8005c5e:	e7fd      	b.n	8005c5c <prvDeleteTCB+0x44>
	}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <prvResetNextTaskUnblockTime+0x38>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c80:	e008      	b.n	8005c94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c82:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <prvResetNextTaskUnblockTime+0x38>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a04      	ldr	r2, [pc, #16]	@ (8005ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c92:	6013      	str	r3, [r2, #0]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000d8c 	.word	0x20000d8c
 8005ca4:	20000df4 	.word	0x20000df4

08005ca8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cae:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <xTaskGetSchedulerState+0x34>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	e008      	b.n	8005cce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cbc:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <xTaskGetSchedulerState+0x38>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	e001      	b.n	8005cce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cce:	687b      	ldr	r3, [r7, #4]
	}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000de0 	.word	0x20000de0
 8005ce0:	20000dfc 	.word	0x20000dfc

08005ce4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d048      	beq.n	8005d8c <xTaskPriorityDisinherit+0xa8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cfa:	4b27      	ldr	r3, [pc, #156]	@ (8005d98 <xTaskPriorityDisinherit+0xb4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d003      	beq.n	8005d0c <xTaskPriorityDisinherit+0x28>
 8005d04:	f000 fd48 	bl	8006798 <ulSetInterruptMask>
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <xTaskPriorityDisinherit+0x38>
 8005d14:	f000 fd40 	bl	8006798 <ulSetInterruptMask>
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <xTaskPriorityDisinherit+0x34>
			( pxTCB->uxMutexesHeld )--;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d20:	1e5a      	subs	r2, r3, #1
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d02c      	beq.n	8005d8c <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d128      	bne.n	8005d8c <xTaskPriorityDisinherit+0xa8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fdc2 	bl	80048c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <xTaskPriorityDisinherit+0xb8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d903      	bls.n	8005d6c <xTaskPriorityDisinherit+0x88>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4a0c      	ldr	r2, [pc, #48]	@ (8005d9c <xTaskPriorityDisinherit+0xb8>)
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <xTaskPriorityDisinherit+0xbc>)
 8005d7a:	441a      	add	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7fe fd43 	bl	800480e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000900 	.word	0x20000900
 8005d9c:	20000ddc 	.word	0x20000ddc
 8005da0:	20000904 	.word	0x20000904

08005da4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dae:	4b21      	ldr	r3, [pc, #132]	@ (8005e34 <prvAddCurrentTaskToDelayedList+0x90>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db4:	4b20      	ldr	r3, [pc, #128]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fd84 	bl	80048c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc6:	d10a      	bne.n	8005dde <prvAddCurrentTaskToDelayedList+0x3a>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dce:	4b1a      	ldr	r3, [pc, #104]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4819      	ldr	r0, [pc, #100]	@ (8005e3c <prvAddCurrentTaskToDelayedList+0x98>)
 8005dd8:	f7fe fd19 	bl	800480e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ddc:	e026      	b.n	8005e2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005de6:	4b14      	ldr	r3, [pc, #80]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d209      	bcs.n	8005e0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df6:	4b12      	ldr	r3, [pc, #72]	@ (8005e40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7fe fd27 	bl	8004856 <vListInsert>
}
 8005e08:	e010      	b.n	8005e2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe fd1d 	bl	8004856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d202      	bcs.n	8005e2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e26:	4a08      	ldr	r2, [pc, #32]	@ (8005e48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000dd8 	.word	0x20000dd8
 8005e38:	20000900 	.word	0x20000900
 8005e3c:	20000dc0 	.word	0x20000dc0
 8005e40:	20000d90 	.word	0x20000d90
 8005e44:	20000d8c 	.word	0x20000d8c
 8005e48:	20000df4 	.word	0x20000df4

08005e4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e56:	f000 fad3 	bl	8006400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e5a:	4b18      	ldr	r3, [pc, #96]	@ (8005ebc <xTimerCreateTimerTask+0x70>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d020      	beq.n	8005ea4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	1d39      	adds	r1, r7, #4
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fc84 	bl	8004780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	9202      	str	r2, [sp, #8]
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	2302      	movs	r3, #2
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	460a      	mov	r2, r1
 8005e8a:	490d      	ldr	r1, [pc, #52]	@ (8005ec0 <xTimerCreateTimerTask+0x74>)
 8005e8c:	480d      	ldr	r0, [pc, #52]	@ (8005ec4 <xTimerCreateTimerTask+0x78>)
 8005e8e:	f7ff f981 	bl	8005194 <xTaskCreateStatic>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec8 <xTimerCreateTimerTask+0x7c>)
 8005e96:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec8 <xTimerCreateTimerTask+0x7c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <xTimerCreateTimerTask+0x66>
 8005eaa:	f000 fc75 	bl	8006798 <ulSetInterruptMask>
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <xTimerCreateTimerTask+0x62>
	return xReturn;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000e30 	.word	0x20000e30
 8005ec0:	08006cb0 	.word	0x08006cb0
 8005ec4:	08005fe5 	.word	0x08005fe5
 8005ec8:	20000e34 	.word	0x20000e34

08005ecc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <xTimerGenericCommand+0x20>
 8005ee4:	f000 fc58 	bl	8006798 <ulSetInterruptMask>
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005eec:	4b19      	ldr	r3, [pc, #100]	@ (8005f54 <xTimerGenericCommand+0x88>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02a      	beq.n	8005f4a <xTimerGenericCommand+0x7e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	dc18      	bgt.n	8005f38 <xTimerGenericCommand+0x6c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f06:	f7ff fecf 	bl	8005ca8 <xTaskGetSchedulerState>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d109      	bne.n	8005f24 <xTimerGenericCommand+0x58>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f10:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <xTimerGenericCommand+0x88>)
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	f107 0114 	add.w	r1, r7, #20
 8005f18:	2300      	movs	r3, #0
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f1c:	f7fe fdcf 	bl	8004abe <xQueueGenericSend>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f22:	e012      	b.n	8005f4a <xTimerGenericCommand+0x7e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f24:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <xTimerGenericCommand+0x88>)
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	f107 0114 	add.w	r1, r7, #20
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f7fe fdc5 	bl	8004abe <xQueueGenericSend>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f36:	e008      	b.n	8005f4a <xTimerGenericCommand+0x7e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f38:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <xTimerGenericCommand+0x88>)
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	f107 0114 	add.w	r1, r7, #20
 8005f40:	2300      	movs	r3, #0
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	f7fe fe88 	bl	8004c58 <xQueueGenericSendFromISR>
 8005f48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3728      	adds	r7, #40	@ 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000e30 	.word	0x20000e30

08005f58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f62:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe0 <prvProcessExpiredTimer+0x88>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe fca9 	bl	80048c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <prvProcessExpiredTimer+0x64>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	18d1      	adds	r1, r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f8c5 	bl	8006120 <prvInsertTimerInActiveList>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d018      	beq.n	8005fce <prvProcessExpiredTimer+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff ff90 	bl	8005ecc <xTimerGenericCommand>
 8005fac:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10c      	bne.n	8005fce <prvProcessExpiredTimer+0x76>
 8005fb4:	f000 fbf0 	bl	8006798 <ulSetInterruptMask>
 8005fb8:	bf00      	nop
 8005fba:	e7fd      	b.n	8005fb8 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	4798      	blx	r3
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000e28 	.word	0x20000e28

08005fe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fec:	f107 0308 	add.w	r3, r7, #8
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 f851 	bl	8006098 <prvGetNextExpireTime>
 8005ff6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f805 	bl	800600c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006002:	f000 f8cf 	bl	80061a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006006:	bf00      	nop
 8006008:	e7f0      	b.n	8005fec <prvTimerTask+0x8>
	...

0800600c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006016:	f7ff fabb 	bl	8005590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f85e 	bl	80060e0 <prvSampleTimeNow>
 8006024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d12a      	bne.n	8006082 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <prvProcessTimerOrBlockTask+0x3c>
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	429a      	cmp	r2, r3
 8006038:	d806      	bhi.n	8006048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800603a:	f7ff fab7 	bl	80055ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff89 	bl	8005f58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006046:	e01e      	b.n	8006086 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800604e:	4b10      	ldr	r3, [pc, #64]	@ (8006090 <prvProcessTimerOrBlockTask+0x84>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <prvProcessTimerOrBlockTask+0x50>
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <prvProcessTimerOrBlockTask+0x52>
 800605c:	2300      	movs	r3, #0
 800605e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <prvProcessTimerOrBlockTask+0x88>)
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	f7ff f85d 	bl	800512c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006072:	f7ff fa9b 	bl	80055ac <xTaskResumeAll>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800607c:	f000 fa40 	bl	8006500 <vPortYield>
}
 8006080:	e001      	b.n	8006086 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006082:	f7ff fa93 	bl	80055ac <xTaskResumeAll>
}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000e2c 	.word	0x20000e2c
 8006094:	20000e30 	.word	0x20000e30

08006098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060a0:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <prvGetNextExpireTime+0x44>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <prvGetNextExpireTime+0x16>
 80060aa:	2201      	movs	r2, #1
 80060ac:	e000      	b.n	80060b0 <prvGetNextExpireTime+0x18>
 80060ae:	2200      	movs	r2, #0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060bc:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <prvGetNextExpireTime+0x44>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e001      	b.n	80060cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000e28 	.word	0x20000e28

080060e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060e8:	f7ff faee 	bl	80056c8 <xTaskGetTickCount>
 80060ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060ee:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <prvSampleTimeNow+0x3c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d205      	bcs.n	8006104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060f8:	f000 f924 	bl	8006344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e002      	b.n	800610a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800610a:	4a04      	ldr	r2, [pc, #16]	@ (800611c <prvSampleTimeNow+0x3c>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000e38 	.word	0x20000e38

08006120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d812      	bhi.n	800616c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e01b      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800615a:	4b10      	ldr	r3, [pc, #64]	@ (800619c <prvInsertTimerInActiveList+0x7c>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3304      	adds	r3, #4
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7fe fb76 	bl	8004856 <vListInsert>
 800616a:	e012      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d206      	bcs.n	8006182 <prvInsertTimerInActiveList+0x62>
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e007      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006182:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <prvInsertTimerInActiveList+0x80>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fe fb62 	bl	8004856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006192:	697b      	ldr	r3, [r7, #20]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000e2c 	.word	0x20000e2c
 80061a0:	20000e28 	.word	0x20000e28

080061a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	@ 0x30
 80061a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061aa:	e0b8      	b.n	800631e <prvProcessReceivedCommands+0x17a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da12      	bge.n	80061d8 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061b2:	f107 0308 	add.w	r3, r7, #8
 80061b6:	3304      	adds	r3, #4
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <prvProcessReceivedCommands+0x24>
 80061c0:	f000 faea 	bl	8006798 <ulSetInterruptMask>
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	6850      	ldr	r0, [r2, #4]
 80061d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d2:	6892      	ldr	r2, [r2, #8]
 80061d4:	4611      	mov	r1, r2
 80061d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f2c0 809f 	blt.w	800631e <prvProcessReceivedCommands+0x17a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fb69 	bl	80048c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ff71 	bl	80060e0 <prvSampleTimeNow>
 80061fe:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b09      	cmp	r3, #9
 8006204:	f200 8088 	bhi.w	8006318 <prvProcessReceivedCommands+0x174>
 8006208:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <prvProcessReceivedCommands+0x6c>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006239 	.word	0x08006239
 8006214:	08006239 	.word	0x08006239
 8006218:	08006239 	.word	0x08006239
 800621c:	0800629f 	.word	0x0800629f
 8006220:	080062b3 	.word	0x080062b3
 8006224:	080062ef 	.word	0x080062ef
 8006228:	08006239 	.word	0x08006239
 800622c:	08006239 	.word	0x08006239
 8006230:	0800629f 	.word	0x0800629f
 8006234:	080062b3 	.word	0x080062b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	18d1      	adds	r1, r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	6a38      	ldr	r0, [r7, #32]
 8006258:	f7ff ff62 	bl	8006120 <prvInsertTimerInActiveList>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d05c      	beq.n	800631c <prvProcessReceivedCommands+0x178>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	6a38      	ldr	r0, [r7, #32]
 8006268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d051      	beq.n	800631c <prvProcessReceivedCommands+0x178>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	441a      	add	r2, r3
 8006280:	2300      	movs	r3, #0
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	2100      	movs	r1, #0
 8006288:	6a38      	ldr	r0, [r7, #32]
 800628a:	f7ff fe1f 	bl	8005ecc <xTimerGenericCommand>
 800628e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d142      	bne.n	800631c <prvProcessReceivedCommands+0x178>
 8006296:	f000 fa7f 	bl	8006798 <ulSetInterruptMask>
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <prvProcessReceivedCommands+0xf6>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062b0:	e035      	b.n	800631e <prvProcessReceivedCommands+0x17a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <prvProcessReceivedCommands+0x136>
 80062d2:	f000 fa61 	bl	8006798 <ulSetInterruptMask>
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <prvProcessReceivedCommands+0x132>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	18d1      	adds	r1, r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	6a38      	ldr	r0, [r7, #32]
 80062e8:	f7ff ff1a 	bl	8006120 <prvInsertTimerInActiveList>
					break;
 80062ec:	e017      	b.n	800631e <prvProcessReceivedCommands+0x17a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <prvProcessReceivedCommands+0x160>
						{
							vPortFree( pxTimer );
 80062fc:	6a38      	ldr	r0, [r7, #32]
 80062fe:	f000 fb61 	bl	80069c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006302:	e00c      	b.n	800631e <prvProcessReceivedCommands+0x17a>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006316:	e002      	b.n	800631e <prvProcessReceivedCommands+0x17a>

				default	:
					/* Don't expect to get here. */
					break;
 8006318:	bf00      	nop
 800631a:	e000      	b.n	800631e <prvProcessReceivedCommands+0x17a>
					break;
 800631c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800631e:	4b08      	ldr	r3, [pc, #32]	@ (8006340 <prvProcessReceivedCommands+0x19c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f107 0108 	add.w	r1, r7, #8
 8006326:	2200      	movs	r2, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe fd09 	bl	8004d40 <xQueueReceive>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f af3b 	bne.w	80061ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	3728      	adds	r7, #40	@ 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000e30 	.word	0x20000e30

08006344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800634a:	e041      	b.n	80063d0 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800634c:	4b2a      	ldr	r3, [pc, #168]	@ (80063f8 <prvSwitchTimerLists+0xb4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006356:	4b28      	ldr	r3, [pc, #160]	@ (80063f8 <prvSwitchTimerLists+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3304      	adds	r3, #4
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe faaf 	bl	80048c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d027      	beq.n	80063d0 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	d90e      	bls.n	80063b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800639e:	4b16      	ldr	r3, [pc, #88]	@ (80063f8 <prvSwitchTimerLists+0xb4>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f7fe fa54 	bl	8004856 <vListInsert>
 80063ae:	e00f      	b.n	80063d0 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063b0:	2300      	movs	r3, #0
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	2100      	movs	r1, #0
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff fd86 	bl	8005ecc <xTimerGenericCommand>
 80063c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <prvSwitchTimerLists+0x8c>
 80063c8:	f000 f9e6 	bl	8006798 <ulSetInterruptMask>
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063d0:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <prvSwitchTimerLists+0xb4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1b8      	bne.n	800634c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063da:	4b07      	ldr	r3, [pc, #28]	@ (80063f8 <prvSwitchTimerLists+0xb4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063e0:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <prvSwitchTimerLists+0xb8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a04      	ldr	r2, [pc, #16]	@ (80063f8 <prvSwitchTimerLists+0xb4>)
 80063e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063e8:	4a04      	ldr	r2, [pc, #16]	@ (80063fc <prvSwitchTimerLists+0xb8>)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6013      	str	r3, [r2, #0]
}
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000e28 	.word	0x20000e28
 80063fc:	20000e2c 	.word	0x20000e2c

08006400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006406:	f000 f88d 	bl	8006524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800640a:	4b15      	ldr	r3, [pc, #84]	@ (8006460 <prvCheckForValidListAndQueue+0x60>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d120      	bne.n	8006454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006412:	4814      	ldr	r0, [pc, #80]	@ (8006464 <prvCheckForValidListAndQueue+0x64>)
 8006414:	f7fe f9ce 	bl	80047b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006418:	4813      	ldr	r0, [pc, #76]	@ (8006468 <prvCheckForValidListAndQueue+0x68>)
 800641a:	f7fe f9cb 	bl	80047b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800641e:	4b13      	ldr	r3, [pc, #76]	@ (800646c <prvCheckForValidListAndQueue+0x6c>)
 8006420:	4a10      	ldr	r2, [pc, #64]	@ (8006464 <prvCheckForValidListAndQueue+0x64>)
 8006422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006424:	4b12      	ldr	r3, [pc, #72]	@ (8006470 <prvCheckForValidListAndQueue+0x70>)
 8006426:	4a10      	ldr	r2, [pc, #64]	@ (8006468 <prvCheckForValidListAndQueue+0x68>)
 8006428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4b11      	ldr	r3, [pc, #68]	@ (8006474 <prvCheckForValidListAndQueue+0x74>)
 8006430:	4a11      	ldr	r2, [pc, #68]	@ (8006478 <prvCheckForValidListAndQueue+0x78>)
 8006432:	2110      	movs	r1, #16
 8006434:	200a      	movs	r0, #10
 8006436:	f7fe faca 	bl	80049ce <xQueueGenericCreateStatic>
 800643a:	4603      	mov	r3, r0
 800643c:	4a08      	ldr	r2, [pc, #32]	@ (8006460 <prvCheckForValidListAndQueue+0x60>)
 800643e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006440:	4b07      	ldr	r3, [pc, #28]	@ (8006460 <prvCheckForValidListAndQueue+0x60>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <prvCheckForValidListAndQueue+0x60>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	490b      	ldr	r1, [pc, #44]	@ (800647c <prvCheckForValidListAndQueue+0x7c>)
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fe42 	bl	80050d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006454:	f000 f878 	bl	8006548 <vPortExitCritical>
}
 8006458:	bf00      	nop
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000e30 	.word	0x20000e30
 8006464:	20000e00 	.word	0x20000e00
 8006468:	20000e14 	.word	0x20000e14
 800646c:	20000e28 	.word	0x20000e28
 8006470:	20000e2c 	.word	0x20000e2c
 8006474:	20000edc 	.word	0x20000edc
 8006478:	20000e3c 	.word	0x20000e3c
 800647c:	08006cb8 	.word	0x08006cb8

08006480 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006484:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <vPortSetupTimerInterrupt+0x34>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <vPortSetupTimerInterrupt+0x38>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006490:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortSetupTimerInterrupt+0x3c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0a      	ldr	r2, [pc, #40]	@ (80064c0 <vPortSetupTimerInterrupt+0x40>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	099b      	lsrs	r3, r3, #6
 800649c:	4a09      	ldr	r2, [pc, #36]	@ (80064c4 <vPortSetupTimerInterrupt+0x44>)
 800649e:	3b01      	subs	r3, #1
 80064a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80064a2:	4b04      	ldr	r3, [pc, #16]	@ (80064b4 <vPortSetupTimerInterrupt+0x34>)
 80064a4:	2207      	movs	r2, #7
 80064a6:	601a      	str	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	e000e010 	.word	0xe000e010
 80064b8:	e000e018 	.word	0xe000e018
 80064bc:	20000000 	.word	0x20000000
 80064c0:	10624dd3 	.word	0x10624dd3
 80064c4:	e000e014 	.word	0xe000e014

080064c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <prvTaskExitError+0x34>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d003      	beq.n	80064e4 <prvTaskExitError+0x1c>
 80064dc:	f000 f95c 	bl	8006798 <ulSetInterruptMask>
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 80064e4:	f000 f958 	bl	8006798 <ulSetInterruptMask>

	while( ulDummy == 0 )
 80064e8:	bf00      	nop
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0fc      	beq.n	80064ea <prvTaskExitError+0x22>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000034 	.word	0x20000034

08006500 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006504:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <vPortYield+0x20>)
 8006506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800650c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006510:	f3bf 8f6f 	isb	sy
}
 8006514:	bf00      	nop
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8006528:	f000 f936 	bl	8006798 <ulSetInterruptMask>
	ulCriticalNesting++;
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <vPortEnterCritical+0x20>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a04      	ldr	r2, [pc, #16]	@ (8006544 <vPortEnterCritical+0x20>)
 8006534:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006536:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800653a:	f3bf 8f6f 	isb	sy
}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000034 	.word	0x20000034

08006548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800654c:	4b0a      	ldr	r3, [pc, #40]	@ (8006578 <vPortExitCritical+0x30>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <vPortExitCritical+0x14>
 8006554:	f000 f920 	bl	8006798 <ulSetInterruptMask>
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <vPortExitCritical+0x30>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	4a05      	ldr	r2, [pc, #20]	@ (8006578 <vPortExitCritical+0x30>)
 8006564:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8006566:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <vPortExitCritical+0x30>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <vPortExitCritical+0x2c>
	{
		portENABLE_INTERRUPTS();
 800656e:	2000      	movs	r0, #0
 8006570:	f000 f91f 	bl	80067b2 <vClearInterruptMask>
	}
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000034 	.word	0x20000034

0800657c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006582:	f000 f909 	bl	8006798 <ulSetInterruptMask>
 8006586:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006588:	f7ff f8ae 	bl	80056e8 <xTaskIncrementTick>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006592:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <xPortSysTickHandler+0x2c>)
 8006594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006598:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f909 	bl	80067b2 <vClearInterruptMask>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b02      	subs	r3, #2
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d102      	bne.n	80065ce <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 80065c8:	f000 f8ba 	bl	8006740 <vRestoreContextOfFirstTask>
		}
		break;
 80065cc:	e003      	b.n	80065d6 <vPortSVCHandler_C+0x2a>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 80065ce:	f000 f8e3 	bl	8006798 <ulSetInterruptMask>
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <vPortSVCHandler_C+0x26>
		}
	}
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3b04      	subs	r3, #4
 80065f2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065fa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b04      	subs	r3, #4
 8006600:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b04      	subs	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800660e:	4a38      	ldr	r2, [pc, #224]	@ (80066f0 <pxPortInitialiseStack+0x110>)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3b04      	subs	r3, #4
 8006618:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8006620:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3b04      	subs	r3, #4
 8006626:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800662e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3b04      	subs	r3, #4
 8006634:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800663c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3b04      	subs	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800664a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3b04      	subs	r3, #4
 8006650:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3b04      	subs	r3, #4
 800665c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8006664:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3b04      	subs	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8006672:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b04      	subs	r3, #4
 8006678:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8006680:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b04      	subs	r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800668e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3b04      	subs	r3, #4
 8006694:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800669c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80066aa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b04      	subs	r3, #4
 80066b0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80066b8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b04      	subs	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80066c6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3b04      	subs	r3, #4
 80066cc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 80066d4:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b04      	subs	r3, #4
 80066da:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 80066e2:	68fb      	ldr	r3, [r7, #12]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	080064c9 	.word	0x080064c9

080066f4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066f8:	4b0c      	ldr	r3, [pc, #48]	@ (800672c <xPortStartScheduler+0x38>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0b      	ldr	r2, [pc, #44]	@ (800672c <xPortStartScheduler+0x38>)
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006702:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006704:	4b09      	ldr	r3, [pc, #36]	@ (800672c <xPortStartScheduler+0x38>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a08      	ldr	r2, [pc, #32]	@ (800672c <xPortStartScheduler+0x38>)
 800670a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8006710:	f7ff feb6 	bl	8006480 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <xPortStartScheduler+0x3c>)
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800671a:	f000 f829 	bl	8006770 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800671e:	f7ff f895 	bl	800584c <vTaskSwitchContext>
	prvTaskExitError();
 8006722:	f7ff fed1 	bl	80064c8 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	bd80      	pop	{r7, pc}
 800672c:	e000ed20 	.word	0xe000ed20
 8006730:	20000034 	.word	0x20000034
	...

08006740 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8006740:	4a07      	ldr	r2, [pc, #28]	@ (8006760 <pxCurrentTCBConst2>)
 8006742:	6811      	ldr	r1, [r2, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	c806      	ldmia	r0!, {r1, r2}
 8006748:	f381 880b 	msr	PSPLIM, r1
 800674c:	2102      	movs	r1, #2
 800674e:	f381 8814 	msr	CONTROL, r1
 8006752:	3020      	adds	r0, #32
 8006754:	f380 8809 	msr	PSP, r0
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	4710      	bx	r2
 800675e:	bf00      	nop

08006760 <pxCurrentTCBConst2>:
 8006760:	20000900 	.word	0x20000900
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
	...

08006770 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8006770:	4807      	ldr	r0, [pc, #28]	@ (8006790 <xVTORConst>)
 8006772:	6800      	ldr	r0, [r0, #0]
 8006774:	6800      	ldr	r0, [r0, #0]
 8006776:	f380 8808 	msr	MSP, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df02      	svc	2
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w

08006790 <xVTORConst>:
 8006790:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8006798:	f3ef 8011 	mrs	r0, BASEPRI
 800679c:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 80067a0:	f381 8811 	msr	BASEPRI, r1
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ae:	bf00      	nop
 80067b0:	4618      	mov	r0, r3

080067b2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80067b2:	f380 8811 	msr	BASEPRI, r0
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80067c0:	bf00      	nop
	...

080067d0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80067d0:	f3ef 8009 	mrs	r0, PSP
 80067d4:	f3ef 820b 	mrs	r2, PSPLIM
 80067d8:	4673      	mov	r3, lr
 80067da:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80067de:	4a10      	ldr	r2, [pc, #64]	@ (8006820 <pxCurrentTCBConst>)
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	6008      	str	r0, [r1, #0]
 80067e4:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 80067e8:	f380 8811 	msr	BASEPRI, r0
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f7ff f82a 	bl	800584c <vTaskSwitchContext>
 80067f8:	f04f 0000 	mov.w	r0, #0
 80067fc:	f380 8811 	msr	BASEPRI, r0
 8006800:	4a07      	ldr	r2, [pc, #28]	@ (8006820 <pxCurrentTCBConst>)
 8006802:	6811      	ldr	r1, [r2, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800680a:	f382 880b 	msr	PSPLIM, r2
 800680e:	f380 8809 	msr	PSP, r0
 8006812:	4718      	bx	r3
 8006814:	f3af 8000 	nop.w
 8006818:	f3af 8000 	nop.w
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst>:
 8006820:	20000900 	.word	0x20000900
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
	...

08006830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8006830:	f01e 0f04 	tst.w	lr, #4
 8006834:	bf0c      	ite	eq
 8006836:	f3ef 8008 	mrseq	r0, MSP
 800683a:	f3ef 8009 	mrsne	r0, PSP
 800683e:	4904      	ldr	r1, [pc, #16]	@ (8006850 <svchandler_address_const>)
 8006840:	4708      	bx	r1
 8006842:	bf00      	nop
 8006844:	f3af 8000 	nop.w
 8006848:	f3af 8000 	nop.w
 800684c:	f3af 8000 	nop.w

08006850 <svchandler_address_const>:
 8006850:	080065ad 	.word	0x080065ad
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop

08006858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006864:	f7fe fe94 	bl	8005590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006868:	4b50      	ldr	r3, [pc, #320]	@ (80069ac <pvPortMalloc+0x154>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006870:	f000 f8fc 	bl	8006a6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006874:	4b4e      	ldr	r3, [pc, #312]	@ (80069b0 <pvPortMalloc+0x158>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 8085 	bne.w	800698c <pvPortMalloc+0x134>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d016      	beq.n	80068b6 <pvPortMalloc+0x5e>
			{
				xWantedSize += xHeapStructSize;
 8006888:	2208      	movs	r2, #8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <pvPortMalloc+0x5e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f023 0307 	bic.w	r3, r3, #7
 80068a0:	3308      	adds	r3, #8
 80068a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <pvPortMalloc+0x5e>
 80068ae:	f7ff ff73 	bl	8006798 <ulSetInterruptMask>
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d067      	beq.n	800698c <pvPortMalloc+0x134>
 80068bc:	4b3d      	ldr	r3, [pc, #244]	@ (80069b4 <pvPortMalloc+0x15c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d862      	bhi.n	800698c <pvPortMalloc+0x134>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068c6:	4b3c      	ldr	r3, [pc, #240]	@ (80069b8 <pvPortMalloc+0x160>)
 80068c8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80068ca:	4b3b      	ldr	r3, [pc, #236]	@ (80069b8 <pvPortMalloc+0x160>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068d0:	e004      	b.n	80068dc <pvPortMalloc+0x84>
				{
					pxPreviousBlock = pxBlock;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d903      	bls.n	80068ee <pvPortMalloc+0x96>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f1      	bne.n	80068d2 <pvPortMalloc+0x7a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068ee:	4b2f      	ldr	r3, [pc, #188]	@ (80069ac <pvPortMalloc+0x154>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d049      	beq.n	800698c <pvPortMalloc+0x134>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2208      	movs	r2, #8
 80068fe:	4413      	add	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	2308      	movs	r3, #8
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	429a      	cmp	r2, r3
 8006918:	d918      	bls.n	800694c <pvPortMalloc+0xf4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <pvPortMalloc+0xdc>
 800692c:	f7ff ff34 	bl	8006798 <ulSetInterruptMask>
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <pvPortMalloc+0xd8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006946:	68b8      	ldr	r0, [r7, #8]
 8006948:	f000 f8f2 	bl	8006b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800694c:	4b19      	ldr	r3, [pc, #100]	@ (80069b4 <pvPortMalloc+0x15c>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4a17      	ldr	r2, [pc, #92]	@ (80069b4 <pvPortMalloc+0x15c>)
 8006958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800695a:	4b16      	ldr	r3, [pc, #88]	@ (80069b4 <pvPortMalloc+0x15c>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b17      	ldr	r3, [pc, #92]	@ (80069bc <pvPortMalloc+0x164>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d203      	bcs.n	800696e <pvPortMalloc+0x116>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006966:	4b13      	ldr	r3, [pc, #76]	@ (80069b4 <pvPortMalloc+0x15c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a14      	ldr	r2, [pc, #80]	@ (80069bc <pvPortMalloc+0x164>)
 800696c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <pvPortMalloc+0x158>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	431a      	orrs	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006982:	4b0f      	ldr	r3, [pc, #60]	@ (80069c0 <pvPortMalloc+0x168>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	4a0d      	ldr	r2, [pc, #52]	@ (80069c0 <pvPortMalloc+0x168>)
 800698a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800698c:	f7fe fe0e 	bl	80055ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <pvPortMalloc+0x14a>
 800699a:	f7ff fefd 	bl	8006798 <ulSetInterruptMask>
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <pvPortMalloc+0x146>
	return pvReturn;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20002f34 	.word	0x20002f34
 80069b0:	20002f48 	.word	0x20002f48
 80069b4:	20002f38 	.word	0x20002f38
 80069b8:	20002f2c 	.word	0x20002f2c
 80069bc:	20002f3c 	.word	0x20002f3c
 80069c0:	20002f40 	.word	0x20002f40

080069c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d03f      	beq.n	8006a56 <vPortFree+0x92>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d6:	2308      	movs	r3, #8
 80069d8:	425b      	negs	r3, r3
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a60 <vPortFree+0x9c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <vPortFree+0x36>
 80069f2:	f7ff fed1 	bl	8006798 <ulSetInterruptMask>
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <vPortFree+0x46>
 8006a02:	f7ff fec9 	bl	8006798 <ulSetInterruptMask>
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <vPortFree+0x42>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <vPortFree+0x9c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01e      	beq.n	8006a56 <vPortFree+0x92>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11a      	bne.n	8006a56 <vPortFree+0x92>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4b0e      	ldr	r3, [pc, #56]	@ (8006a60 <vPortFree+0x9c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	401a      	ands	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a30:	f7fe fdae 	bl	8005590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <vPortFree+0xa0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	4a09      	ldr	r2, [pc, #36]	@ (8006a64 <vPortFree+0xa0>)
 8006a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a42:	68b8      	ldr	r0, [r7, #8]
 8006a44:	f000 f874 	bl	8006b30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a48:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <vPortFree+0xa4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	4a06      	ldr	r2, [pc, #24]	@ (8006a68 <vPortFree+0xa4>)
 8006a50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a52:	f7fe fdab 	bl	80055ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20002f48 	.word	0x20002f48
 8006a64:	20002f38 	.word	0x20002f38
 8006a68:	20002f44 	.word	0x20002f44

08006a6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a78:	4b27      	ldr	r3, [pc, #156]	@ (8006b18 <prvHeapInit+0xac>)
 8006a7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3307      	adds	r3, #7
 8006a8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006b18 <prvHeapInit+0xac>)
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b1c <prvHeapInit+0xb0>)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8006b1c <prvHeapInit+0xb0>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ab8:	2208      	movs	r2, #8
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a15      	ldr	r2, [pc, #84]	@ (8006b20 <prvHeapInit+0xb4>)
 8006acc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ace:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <prvHeapInit+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ad6:	4b12      	ldr	r3, [pc, #72]	@ (8006b20 <prvHeapInit+0xb4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	1ad2      	subs	r2, r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aec:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <prvHeapInit+0xb4>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a0a      	ldr	r2, [pc, #40]	@ (8006b24 <prvHeapInit+0xb8>)
 8006afa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a09      	ldr	r2, [pc, #36]	@ (8006b28 <prvHeapInit+0xbc>)
 8006b02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b04:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <prvHeapInit+0xc0>)
 8006b06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b0a:	601a      	str	r2, [r3, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20000f2c 	.word	0x20000f2c
 8006b1c:	20002f2c 	.word	0x20002f2c
 8006b20:	20002f34 	.word	0x20002f34
 8006b24:	20002f3c 	.word	0x20002f3c
 8006b28:	20002f38 	.word	0x20002f38
 8006b2c:	20002f48 	.word	0x20002f48

08006b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b38:	4b28      	ldr	r3, [pc, #160]	@ (8006bdc <prvInsertBlockIntoFreeList+0xac>)
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e002      	b.n	8006b44 <prvInsertBlockIntoFreeList+0x14>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d8f7      	bhi.n	8006b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4413      	add	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d108      	bne.n	8006b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	441a      	add	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d118      	bne.n	8006bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b15      	ldr	r3, [pc, #84]	@ (8006be0 <prvInsertBlockIntoFreeList+0xb0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d00d      	beq.n	8006bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e008      	b.n	8006bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bae:	4b0c      	ldr	r3, [pc, #48]	@ (8006be0 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e003      	b.n	8006bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d002      	beq.n	8006bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	20002f2c 	.word	0x20002f2c
 8006be0:	20002f34 	.word	0x20002f34

08006be4 <memset>:
 8006be4:	4402      	add	r2, r0
 8006be6:	4603      	mov	r3, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006c2c <__libc_init_array+0x38>)
 8006bf8:	2600      	movs	r6, #0
 8006bfa:	4c0d      	ldr	r4, [pc, #52]	@ (8006c30 <__libc_init_array+0x3c>)
 8006bfc:	1b64      	subs	r4, r4, r5
 8006bfe:	10a4      	asrs	r4, r4, #2
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	@ (8006c34 <__libc_init_array+0x40>)
 8006c06:	2600      	movs	r6, #0
 8006c08:	4c0b      	ldr	r4, [pc, #44]	@ (8006c38 <__libc_init_array+0x44>)
 8006c0a:	f000 f825 	bl	8006c58 <_init>
 8006c0e:	1b64      	subs	r4, r4, r5
 8006c10:	10a4      	asrs	r4, r4, #2
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	4798      	blx	r3
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	3601      	adds	r6, #1
 8006c28:	4798      	blx	r3
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08006d5c 	.word	0x08006d5c
 8006c30:	08006d5c 	.word	0x08006d5c
 8006c34:	08006d5c 	.word	0x08006d5c
 8006c38:	08006d60 	.word	0x08006d60

08006c3c <memcpy>:
 8006c3c:	440a      	add	r2, r1
 8006c3e:	1e43      	subs	r3, r0, #1
 8006c40:	4291      	cmp	r1, r2
 8006c42:	d100      	bne.n	8006c46 <memcpy+0xa>
 8006c44:	4770      	bx	lr
 8006c46:	b510      	push	{r4, lr}
 8006c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c4c:	4291      	cmp	r1, r2
 8006c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c52:	d1f9      	bne.n	8006c48 <memcpy+0xc>
 8006c54:	bd10      	pop	{r4, pc}
	...

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
