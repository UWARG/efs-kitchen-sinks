
cpp_can_initial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006424  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006624  08006624  00007624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b0  080066b0  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  080066b0  080066b0  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066b0  080066b0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b0  080066b0  000076b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066b4  080066b4  000076b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080066b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b00  20000060  08006718  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08006718  00008b60  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017576  00000000  00000000  00008096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aad  00000000  00000000  0001f60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000230c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fce  00000000  00000000  000245b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef63  00000000  00000000  00025586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa23  00000000  00000000  000544e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ef97  00000000  00000000  0006ef0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018dea3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005904  00000000  00000000  0018dee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001937ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800660c 	.word	0x0800660c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800660c 	.word	0x0800660c

08000240 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <SysTick_Handler+0x1c>)
 8000246:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000248:	f000 fee8 	bl	800101c <xTaskGetSchedulerState>
 800024c:	4603      	mov	r3, r0
 800024e:	2b01      	cmp	r3, #1
 8000250:	d001      	beq.n	8000256 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000252:	f001 f8e3 	bl	800141c <xPortSysTickHandler>
  }
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	e000e010 	.word	0xe000e010

08000260 <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f023 0301 	bic.w	r3, r3, #1
 8000270:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f003 0301 	and.w	r3, r3, #1
 8000278:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800027e:	f3ef 8305 	mrs	r3, IPSR
 8000282:	60bb      	str	r3, [r7, #8]
  return(result);
 8000284:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800028a:	f06f 0305 	mvn.w	r3, #5
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	e02c      	b.n	80002ec <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d103      	bne.n	80002a0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8000298:	f06f 0303 	mvn.w	r3, #3
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	e025      	b.n	80002ec <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d011      	beq.n	80002ca <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80002a6:	6839      	ldr	r1, [r7, #0]
 80002a8:	6938      	ldr	r0, [r7, #16]
 80002aa:	f000 f915 	bl	80004d8 <xQueueTakeMutexRecursive>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d01b      	beq.n	80002ec <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80002ba:	f06f 0301 	mvn.w	r3, #1
 80002be:	617b      	str	r3, [r7, #20]
 80002c0:	e014      	b.n	80002ec <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80002c2:	f06f 0302 	mvn.w	r3, #2
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	e010      	b.n	80002ec <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80002ca:	6839      	ldr	r1, [r7, #0]
 80002cc:	6938      	ldr	r0, [r7, #16]
 80002ce:	f000 f9ff 	bl	80006d0 <xQueueSemaphoreTake>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d009      	beq.n	80002ec <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d003      	beq.n	80002e6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80002de:	f06f 0301 	mvn.w	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e002      	b.n	80002ec <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80002e6:	f06f 0302 	mvn.w	r3, #2
 80002ea:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80002ec:	697b      	ldr	r3, [r7, #20]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b086      	sub	sp, #24
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f023 0301 	bic.w	r3, r3, #1
 8000304:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000312:	f3ef 8305 	mrs	r3, IPSR
 8000316:	60bb      	str	r3, [r7, #8]
  return(result);
 8000318:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800031a:	2b00      	cmp	r3, #0
 800031c:	d003      	beq.n	8000326 <osMutexRelease+0x30>
    stat = osErrorISR;
 800031e:	f06f 0305 	mvn.w	r3, #5
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	e01f      	b.n	8000366 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d103      	bne.n	8000334 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800032c:	f06f 0303 	mvn.w	r3, #3
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	e018      	b.n	8000366 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d009      	beq.n	800034e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800033a:	6938      	ldr	r0, [r7, #16]
 800033c:	f000 f89f 	bl	800047e <xQueueGiveMutexRecursive>
 8000340:	4603      	mov	r3, r0
 8000342:	2b01      	cmp	r3, #1
 8000344:	d00f      	beq.n	8000366 <osMutexRelease+0x70>
        stat = osErrorResource;
 8000346:	f06f 0302 	mvn.w	r3, #2
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	e00b      	b.n	8000366 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800034e:	2300      	movs	r3, #0
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	6938      	ldr	r0, [r7, #16]
 8000356:	f000 f8ee 	bl	8000536 <xQueueGenericSend>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	d002      	beq.n	8000366 <osMutexRelease+0x70>
        stat = osErrorResource;
 8000360:	f06f 0302 	mvn.w	r3, #2
 8000364:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8000366:	697b      	ldr	r3, [r7, #20]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	689a      	ldr	r2, [r3, #8]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ce:	d103      	bne.n	80003d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e00c      	b.n	80003f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3308      	adds	r3, #8
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	e002      	b.n	80003e6 <vListInsert+0x2e>
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d2f6      	bcs.n	80003e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	685a      	ldr	r2, [r3, #4]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800042a:	b480      	push	{r7}
 800042c:	b085      	sub	sp, #20
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	6892      	ldr	r2, [r2, #8]
 8000440:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	6852      	ldr	r2, [r2, #4]
 800044a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	429a      	cmp	r2, r3
 8000454:	d103      	bne.n	800045e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	689a      	ldr	r2, [r3, #8]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	681b      	ldr	r3, [r3, #0]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800047e:	b590      	push	{r4, r7, lr}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d103      	bne.n	8000498 <xQueueGiveMutexRecursive+0x1a>
 8000490:	f001 f80a 	bl	80014a8 <ulSetInterruptMask>
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <xQueueGiveMutexRecursive+0x16>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	689c      	ldr	r4, [r3, #8]
 800049c:	f000 fdae 	bl	8000ffc <xTaskGetCurrentTaskHandle>
 80004a0:	4603      	mov	r3, r0
 80004a2:	429c      	cmp	r4, r3
 80004a4:	d111      	bne.n	80004ca <xQueueGiveMutexRecursive+0x4c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d105      	bne.n	80004c4 <xQueueGiveMutexRecursive+0x46>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80004b8:	2300      	movs	r3, #0
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	68b8      	ldr	r0, [r7, #8]
 80004c0:	f000 f839 	bl	8000536 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e001      	b.n	80004ce <xQueueGiveMutexRecursive+0x50>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80004ce:	68fb      	ldr	r3, [r7, #12]
	}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd90      	pop	{r4, r7, pc}

080004d8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d103      	bne.n	80004f4 <xQueueTakeMutexRecursive+0x1c>
 80004ec:	f000 ffdc 	bl	80014a8 <ulSetInterruptMask>
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <xQueueTakeMutexRecursive+0x18>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	689c      	ldr	r4, [r3, #8]
 80004f8:	f000 fd80 	bl	8000ffc <xTaskGetCurrentTaskHandle>
 80004fc:	4603      	mov	r3, r0
 80004fe:	429c      	cmp	r4, r3
 8000500:	d107      	bne.n	8000512 <xQueueTakeMutexRecursive+0x3a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800050c:	2301      	movs	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00c      	b.n	800052c <xQueueTakeMutexRecursive+0x54>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8000512:	6839      	ldr	r1, [r7, #0]
 8000514:	68b8      	ldr	r0, [r7, #8]
 8000516:	f000 f8db 	bl	80006d0 <xQueueSemaphoreTake>
 800051a:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d004      	beq.n	800052c <xQueueTakeMutexRecursive+0x54>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800052c:	68fb      	ldr	r3, [r7, #12]
	}
 800052e:	4618      	mov	r0, r3
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bd90      	pop	{r4, r7, pc}

08000536 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b08a      	sub	sp, #40	@ 0x28
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d103      	bne.n	800055a <xQueueGenericSend+0x24>
 8000552:	f000 ffa9 	bl	80014a8 <ulSetInterruptMask>
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <xQueueGenericSend+0x32>
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <xQueueGenericSend+0x36>
 8000568:	2301      	movs	r3, #1
 800056a:	e000      	b.n	800056e <xQueueGenericSend+0x38>
 800056c:	2300      	movs	r3, #0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d103      	bne.n	800057a <xQueueGenericSend+0x44>
 8000572:	f000 ff99 	bl	80014a8 <ulSetInterruptMask>
 8000576:	bf00      	nop
 8000578:	e7fd      	b.n	8000576 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d103      	bne.n	8000588 <xQueueGenericSend+0x52>
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000584:	2b01      	cmp	r3, #1
 8000586:	d101      	bne.n	800058c <xQueueGenericSend+0x56>
 8000588:	2301      	movs	r3, #1
 800058a:	e000      	b.n	800058e <xQueueGenericSend+0x58>
 800058c:	2300      	movs	r3, #0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d103      	bne.n	800059a <xQueueGenericSend+0x64>
 8000592:	f000 ff89 	bl	80014a8 <ulSetInterruptMask>
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <xQueueGenericSend+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800059a:	f000 fd3f 	bl	800101c <xTaskGetSchedulerState>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <xQueueGenericSend+0x74>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d101      	bne.n	80005ae <xQueueGenericSend+0x78>
 80005aa:	2301      	movs	r3, #1
 80005ac:	e000      	b.n	80005b0 <xQueueGenericSend+0x7a>
 80005ae:	2300      	movs	r3, #0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <xQueueGenericSend+0x86>
 80005b4:	f000 ff78 	bl	80014a8 <ulSetInterruptMask>
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <xQueueGenericSend+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80005bc:	f000 ff02 	bl	80013c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005c4:	6a3b      	ldr	r3, [r7, #32]
 80005c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d302      	bcc.n	80005d2 <xQueueGenericSend+0x9c>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d11d      	bne.n	800060e <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	6a38      	ldr	r0, [r7, #32]
 80005d8:	f000 f973 	bl	80008c2 <prvCopyDataToQueue>
 80005dc:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00a      	beq.n	80005fc <xQueueGenericSend+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80005e6:	6a3b      	ldr	r3, [r7, #32]
 80005e8:	3324      	adds	r3, #36	@ 0x24
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fc14 	bl	8000e18 <xTaskRemoveFromEventList>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d007      	beq.n	8000606 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80005f6:	f000 fed3 	bl	80013a0 <vPortYield>
 80005fa:	e004      	b.n	8000606 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000602:	f000 fecd 	bl	80013a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000606:	f000 feef 	bl	80013e8 <vPortExitCritical>
				return pdPASS;
 800060a:	2301      	movs	r3, #1
 800060c:	e05c      	b.n	80006c8 <xQueueGenericSend+0x192>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d103      	bne.n	800061c <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000614:	f000 fee8 	bl	80013e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000618:	2300      	movs	r3, #0
 800061a:	e055      	b.n	80006c8 <xQueueGenericSend+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 800061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800061e:	2b00      	cmp	r3, #0
 8000620:	d106      	bne.n	8000630 <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fc52 	bl	8000ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800062c:	2301      	movs	r3, #1
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000630:	f000 feda 	bl	80013e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000634:	f000 fa30 	bl	8000a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000638:	f000 fec4 	bl	80013c4 <vPortEnterCritical>
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000642:	b25b      	sxtb	r3, r3
 8000644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000648:	d103      	bne.n	8000652 <xQueueGenericSend+0x11c>
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000658:	b25b      	sxtb	r3, r3
 800065a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065e:	d103      	bne.n	8000668 <xQueueGenericSend+0x132>
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000668:	f000 febe 	bl	80013e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800066c:	1d3a      	adds	r2, r7, #4
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fc41 	bl	8000efc <xTaskCheckForTimeOut>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d11d      	bne.n	80006bc <xQueueGenericSend+0x186>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000680:	6a38      	ldr	r0, [r7, #32]
 8000682:	f000 f9f0 	bl	8000a66 <prvIsQueueFull>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <xQueueGenericSend+0x17a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800068c:	6a3b      	ldr	r3, [r7, #32]
 800068e:	3310      	adds	r3, #16
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fba1 	bl	8000ddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800069a:	6a38      	ldr	r0, [r7, #32]
 800069c:	f000 f97b 	bl	8000996 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80006a0:	f000 fa08 	bl	8000ab4 <xTaskResumeAll>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d188      	bne.n	80005bc <xQueueGenericSend+0x86>
				{
					portYIELD_WITHIN_API();
 80006aa:	f000 fe79 	bl	80013a0 <vPortYield>
 80006ae:	e785      	b.n	80005bc <xQueueGenericSend+0x86>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80006b0:	6a38      	ldr	r0, [r7, #32]
 80006b2:	f000 f970 	bl	8000996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80006b6:	f000 f9fd 	bl	8000ab4 <xTaskResumeAll>
 80006ba:	e77f      	b.n	80005bc <xQueueGenericSend+0x86>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80006bc:	6a38      	ldr	r0, [r7, #32]
 80006be:	f000 f96a 	bl	8000996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80006c2:	f000 f9f7 	bl	8000ab4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80006c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <xQueueSemaphoreTake+0x24>
 80006ec:	f000 fedc 	bl	80014a8 <ulSetInterruptMask>
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d003      	beq.n	8000704 <xQueueSemaphoreTake+0x34>
 80006fc:	f000 fed4 	bl	80014a8 <ulSetInterruptMask>
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <xQueueSemaphoreTake+0x30>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000704:	f000 fc8a 	bl	800101c <xTaskGetSchedulerState>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d102      	bne.n	8000714 <xQueueSemaphoreTake+0x44>
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <xQueueSemaphoreTake+0x48>
 8000714:	2301      	movs	r3, #1
 8000716:	e000      	b.n	800071a <xQueueSemaphoreTake+0x4a>
 8000718:	2300      	movs	r3, #0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d103      	bne.n	8000726 <xQueueSemaphoreTake+0x56>
 800071e:	f000 fec3 	bl	80014a8 <ulSetInterruptMask>
 8000722:	bf00      	nop
 8000724:	e7fd      	b.n	8000722 <xQueueSemaphoreTake+0x52>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000726:	f000 fe4d 	bl	80013c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800072e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01e      	beq.n	8000774 <xQueueSemaphoreTake+0xa4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d104      	bne.n	8000750 <xQueueSemaphoreTake+0x80>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000746:	f000 fdc3 	bl	80012d0 <pvTaskIncrementMutexHeldCount>
 800074a:	4602      	mov	r2, r0
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d009      	beq.n	800076c <xQueueSemaphoreTake+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fb5b 	bl	8000e18 <xTaskRemoveFromEventList>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <xQueueSemaphoreTake+0x9c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000768:	f000 fe1a 	bl	80013a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800076c:	f000 fe3c 	bl	80013e8 <vPortExitCritical>
				return pdPASS;
 8000770:	2301      	movs	r3, #1
 8000772:	e08a      	b.n	800088a <xQueueSemaphoreTake+0x1ba>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10a      	bne.n	8000790 <xQueueSemaphoreTake+0xc0>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <xQueueSemaphoreTake+0xb8>
 8000780:	f000 fe92 	bl	80014a8 <ulSetInterruptMask>
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <xQueueSemaphoreTake+0xb4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8000788:	f000 fe2e 	bl	80013e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800078c:	2300      	movs	r3, #0
 800078e:	e07c      	b.n	800088a <xQueueSemaphoreTake+0x1ba>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000792:	2b00      	cmp	r3, #0
 8000794:	d106      	bne.n	80007a4 <xQueueSemaphoreTake+0xd4>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fb98 	bl	8000ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80007a4:	f000 fe20 	bl	80013e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80007a8:	f000 f976 	bl	8000a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80007ac:	f000 fe0a 	bl	80013c4 <vPortEnterCritical>
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007bc:	d103      	bne.n	80007c6 <xQueueSemaphoreTake+0xf6>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d2:	d103      	bne.n	80007dc <xQueueSemaphoreTake+0x10c>
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80007dc:	f000 fe04 	bl	80013e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007e0:	463a      	mov	r2, r7
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fb87 	bl	8000efc <xTaskCheckForTimeOut>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d12c      	bne.n	800084e <xQueueSemaphoreTake+0x17e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007f4:	69f8      	ldr	r0, [r7, #28]
 80007f6:	f000 f920 	bl	8000a3a <prvIsQueueEmpty>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d020      	beq.n	8000842 <xQueueSemaphoreTake+0x172>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d109      	bne.n	800081c <xQueueSemaphoreTake+0x14c>
					{
						taskENTER_CRITICAL();
 8000808:	f000 fddc 	bl	80013c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fc21 	bl	8001058 <xTaskPriorityInherit>
 8000816:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8000818:	f000 fde6 	bl	80013e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	3324      	adds	r3, #36	@ 0x24
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fad9 	bl	8000ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800082a:	69f8      	ldr	r0, [r7, #28]
 800082c:	f000 f8b3 	bl	8000996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000830:	f000 f940 	bl	8000ab4 <xTaskResumeAll>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	f47f af75 	bne.w	8000726 <xQueueSemaphoreTake+0x56>
				{
					portYIELD_WITHIN_API();
 800083c:	f000 fdb0 	bl	80013a0 <vPortYield>
 8000840:	e771      	b.n	8000726 <xQueueSemaphoreTake+0x56>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8000842:	69f8      	ldr	r0, [r7, #28]
 8000844:	f000 f8a7 	bl	8000996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000848:	f000 f934 	bl	8000ab4 <xTaskResumeAll>
 800084c:	e76b      	b.n	8000726 <xQueueSemaphoreTake+0x56>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800084e:	69f8      	ldr	r0, [r7, #28]
 8000850:	f000 f8a1 	bl	8000996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000854:	f000 f92e 	bl	8000ab4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000858:	69f8      	ldr	r0, [r7, #28]
 800085a:	f000 f8ee 	bl	8000a3a <prvIsQueueEmpty>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	f43f af60 	beq.w	8000726 <xQueueSemaphoreTake+0x56>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00d      	beq.n	8000888 <xQueueSemaphoreTake+0x1b8>
					{
						taskENTER_CRITICAL();
 800086c:	f000 fdaa 	bl	80013c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000870:	69f8      	ldr	r0, [r7, #28]
 8000872:	f000 f80e 	bl	8000892 <prvGetDisinheritPriorityAfterTimeout>
 8000876:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	6979      	ldr	r1, [r7, #20]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fcb2 	bl	80011e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8000884:	f000 fdb0 	bl	80013e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800088a:	4618      	mov	r0, r3
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8000892:	b480      	push	{r7}
 8000894:	b085      	sub	sp, #20
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d006      	beq.n	80008b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	e001      	b.n	80008b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80008b4:	68fb      	ldr	r3, [r7, #12]
	}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10d      	bne.n	80008fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14d      	bne.n	8000984 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fc1b 	bl	8001128 <xTaskPriorityDisinherit>
 80008f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	e043      	b.n	8000984 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d119      	bne.n	8000936 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6858      	ldr	r0, [r3, #4]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	461a      	mov	r2, r3
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	f005 fe25 	bl	800655c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	441a      	add	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	429a      	cmp	r2, r3
 800092a:	d32b      	bcc.n	8000984 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	e026      	b.n	8000984 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	68d8      	ldr	r0, [r3, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	461a      	mov	r2, r3
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	f005 fe0b 	bl	800655c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	425b      	negs	r3, r3
 8000950:	441a      	add	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d207      	bcs.n	8000972 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	425b      	negs	r3, r3
 800096c:	441a      	add	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d105      	bne.n	8000984 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	3b01      	subs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800098c:	697b      	ldr	r3, [r7, #20]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800099e:	f000 fd11 	bl	80013c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80009aa:	e011      	b.n	80009d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d012      	beq.n	80009da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3324      	adds	r3, #36	@ 0x24
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fa2d 	bl	8000e18 <xTaskRemoveFromEventList>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80009c4:	f000 faee 	bl	8000fa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80009d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dce9      	bgt.n	80009ac <prvUnlockQueue+0x16>
 80009d8:	e000      	b.n	80009dc <prvUnlockQueue+0x46>
					break;
 80009da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	22ff      	movs	r2, #255	@ 0xff
 80009e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80009e4:	f000 fd00 	bl	80013e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80009e8:	f000 fcec 	bl	80013c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80009f4:	e011      	b.n	8000a1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d012      	beq.n	8000a24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3310      	adds	r3, #16
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fa08 	bl	8000e18 <xTaskRemoveFromEventList>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000a0e:	f000 fac9 	bl	8000fa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	dce9      	bgt.n	80009f6 <prvUnlockQueue+0x60>
 8000a22:	e000      	b.n	8000a26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000a24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ff      	movs	r2, #255	@ 0xff
 8000a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8000a2e:	f000 fcdb 	bl	80013e8 <vPortExitCritical>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000a42:	f000 fcbf 	bl	80013c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e001      	b.n	8000a58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000a58:	f000 fcc6 	bl	80013e8 <vPortExitCritical>

	return xReturn;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000a6e:	f000 fca9 	bl	80013c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d102      	bne.n	8000a84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e001      	b.n	8000a88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000a88:	f000 fcae 	bl	80013e8 <vPortExitCritical>

	return xReturn;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <vTaskSuspendAll+0x18>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <vTaskSuspendAll+0x18>)
 8000aa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000530 	.word	0x20000530

08000ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb0 <xTaskResumeAll+0xfc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d103      	bne.n	8000ad2 <xTaskResumeAll+0x1e>
 8000aca:	f000 fced 	bl	80014a8 <ulSetInterruptMask>
 8000ace:	bf00      	nop
 8000ad0:	e7fd      	b.n	8000ace <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000ad2:	f000 fc77 	bl	80013c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000ad6:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <xTaskResumeAll+0xfc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4a34      	ldr	r2, [pc, #208]	@ (8000bb0 <xTaskResumeAll+0xfc>)
 8000ade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ae0:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <xTaskResumeAll+0xfc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d15c      	bne.n	8000ba2 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ae8:	4b32      	ldr	r3, [pc, #200]	@ (8000bb4 <xTaskResumeAll+0x100>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d058      	beq.n	8000ba2 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000af0:	e02f      	b.n	8000b52 <xTaskResumeAll+0x9e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <xTaskResumeAll+0x104>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3318      	adds	r3, #24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc93 	bl	800042a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3304      	adds	r3, #4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc8e 	bl	800042a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <xTaskResumeAll+0x108>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d903      	bls.n	8000b22 <xTaskResumeAll+0x6e>
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1e:	4a27      	ldr	r2, [pc, #156]	@ (8000bbc <xTaskResumeAll+0x108>)
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4a24      	ldr	r2, [pc, #144]	@ (8000bc0 <xTaskResumeAll+0x10c>)
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3304      	adds	r3, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4610      	mov	r0, r2
 8000b3a:	f7ff fc19 	bl	8000370 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <xTaskResumeAll+0x110>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d302      	bcc.n	8000b52 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <xTaskResumeAll+0x114>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <xTaskResumeAll+0x104>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1cb      	bne.n	8000af2 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000b60:	f000 fa2c 	bl	8000fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <xTaskResumeAll+0x118>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d010      	beq.n	8000b92 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000b70:	f000 f82e 	bl	8000bd0 <xTaskIncrementTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <xTaskResumeAll+0x114>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f1      	bne.n	8000b70 <xTaskResumeAll+0xbc>

						xPendedTicks = 0;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <xTaskResumeAll+0x118>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <xTaskResumeAll+0x114>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <xTaskResumeAll+0xee>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000b9e:	f000 fbff 	bl	80013a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000ba2:	f000 fc21 	bl	80013e8 <vPortExitCritical>

	return xAlreadyYielded;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000530 	.word	0x20000530
 8000bb4:	20000510 	.word	0x20000510
 8000bb8:	200004e8 	.word	0x200004e8
 8000bbc:	20000518 	.word	0x20000518
 8000bc0:	20000080 	.word	0x20000080
 8000bc4:	2000007c 	.word	0x2000007c
 8000bc8:	20000524 	.word	0x20000524
 8000bcc:	20000520 	.word	0x20000520

08000bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bda:	4b4b      	ldr	r3, [pc, #300]	@ (8000d08 <xTaskIncrementTick+0x138>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8088 	bne.w	8000cf4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000be4:	4b49      	ldr	r3, [pc, #292]	@ (8000d0c <xTaskIncrementTick+0x13c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000bec:	4a47      	ldr	r2, [pc, #284]	@ (8000d0c <xTaskIncrementTick+0x13c>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d119      	bne.n	8000c2c <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 8000bf8:	4b45      	ldr	r3, [pc, #276]	@ (8000d10 <xTaskIncrementTick+0x140>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <xTaskIncrementTick+0x3a>
 8000c02:	f000 fc51 	bl	80014a8 <ulSetInterruptMask>
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <xTaskIncrementTick+0x36>
 8000c0a:	4b41      	ldr	r3, [pc, #260]	@ (8000d10 <xTaskIncrementTick+0x140>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4b40      	ldr	r3, [pc, #256]	@ (8000d14 <xTaskIncrementTick+0x144>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <xTaskIncrementTick+0x140>)
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4a3e      	ldr	r2, [pc, #248]	@ (8000d14 <xTaskIncrementTick+0x144>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d18 <xTaskIncrementTick+0x148>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a3c      	ldr	r2, [pc, #240]	@ (8000d18 <xTaskIncrementTick+0x148>)
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	f000 f9c8 	bl	8000fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d1c <xTaskIncrementTick+0x14c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d349      	bcc.n	8000cca <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c36:	4b36      	ldr	r3, [pc, #216]	@ (8000d10 <xTaskIncrementTick+0x140>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <xTaskIncrementTick+0x14c>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	601a      	str	r2, [r3, #0]
					break;
 8000c48:	e03f      	b.n	8000cca <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c4a:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <xTaskIncrementTick+0x140>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d203      	bcs.n	8000c6a <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000c62:	4a2e      	ldr	r2, [pc, #184]	@ (8000d1c <xTaskIncrementTick+0x14c>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000c68:	e02f      	b.n	8000cca <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fbdb 	bl	800042a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d004      	beq.n	8000c86 <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3318      	adds	r3, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fbd2 	bl	800042a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <xTaskIncrementTick+0x150>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d903      	bls.n	8000c9a <xTaskIncrementTick+0xca>
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c96:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <xTaskIncrementTick+0x150>)
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d24 <xTaskIncrementTick+0x154>)
 8000ca8:	441a      	add	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	3304      	adds	r3, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	f7ff fb5d 	bl	8000370 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <xTaskIncrementTick+0x158>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d3b8      	bcc.n	8000c36 <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cc8:	e7b5      	b.n	8000c36 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <xTaskIncrementTick+0x158>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <xTaskIncrementTick+0x154>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d901      	bls.n	8000ce6 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <xTaskIncrementTick+0x15c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e004      	b.n	8000cfe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <xTaskIncrementTick+0x160>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <xTaskIncrementTick+0x160>)
 8000cfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000cfe:	697b      	ldr	r3, [r7, #20]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000530 	.word	0x20000530
 8000d0c:	20000514 	.word	0x20000514
 8000d10:	200004e0 	.word	0x200004e0
 8000d14:	200004e4 	.word	0x200004e4
 8000d18:	20000528 	.word	0x20000528
 8000d1c:	2000052c 	.word	0x2000052c
 8000d20:	20000518 	.word	0x20000518
 8000d24:	20000080 	.word	0x20000080
 8000d28:	2000007c 	.word	0x2000007c
 8000d2c:	20000524 	.word	0x20000524
 8000d30:	20000520 	.word	0x20000520

08000d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d3a:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <vTaskSwitchContext+0x94>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000d42:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <vTaskSwitchContext+0x98>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000d48:	e03a      	b.n	8000dc0 <vTaskSwitchContext+0x8c>
		xYieldPending = pdFALSE;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <vTaskSwitchContext+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <vTaskSwitchContext+0x9c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e009      	b.n	8000d6c <vTaskSwitchContext+0x38>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <vTaskSwitchContext+0x32>
 8000d5e:	f000 fba3 	bl	80014a8 <ulSetInterruptMask>
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <vTaskSwitchContext+0x2e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4919      	ldr	r1, [pc, #100]	@ (8000dd4 <vTaskSwitchContext+0xa0>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0eb      	beq.n	8000d58 <vTaskSwitchContext+0x24>
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <vTaskSwitchContext+0xa0>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3308      	adds	r3, #8
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d104      	bne.n	8000db0 <vTaskSwitchContext+0x7c>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	4a08      	ldr	r2, [pc, #32]	@ (8000dd8 <vTaskSwitchContext+0xa4>)
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <vTaskSwitchContext+0x9c>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000530 	.word	0x20000530
 8000dcc:	20000524 	.word	0x20000524
 8000dd0:	20000518 	.word	0x20000518
 8000dd4:	20000080 	.word	0x20000080
 8000dd8:	2000007c 	.word	0x2000007c

08000ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d103      	bne.n	8000df4 <vTaskPlaceOnEventList+0x18>
 8000dec:	f000 fb5c 	bl	80014a8 <ulSetInterruptMask>
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <vTaskPlaceOnEventList+0x38>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fadb 	bl	80003b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000e02:	2101      	movs	r1, #1
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f000 fa77 	bl	80012f8 <prvAddCurrentTaskToDelayedList>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000007c 	.word	0x2000007c

08000e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <xTaskRemoveFromEventList+0x1e>
 8000e2e:	f000 fb3b 	bl	80014a8 <ulSetInterruptMask>
 8000e32:	bf00      	nop
 8000e34:	e7fd      	b.n	8000e32 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3318      	adds	r3, #24
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff faf5 	bl	800042a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <xTaskRemoveFromEventList+0xa0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d11d      	bne.n	8000e84 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff faec 	bl	800042a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <xTaskRemoveFromEventList+0xa4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d903      	bls.n	8000e66 <xTaskRemoveFromEventList+0x4e>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e62:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <xTaskRemoveFromEventList+0xa4>)
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <xTaskRemoveFromEventList+0xa8>)
 8000e74:	441a      	add	r2, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f7ff fa77 	bl	8000370 <vListInsertEnd>
 8000e82:	e005      	b.n	8000e90 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	3318      	adds	r3, #24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <xTaskRemoveFromEventList+0xac>)
 8000e8c:	f7ff fa70 	bl	8000370 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <xTaskRemoveFromEventList+0xb0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d905      	bls.n	8000eaa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <xTaskRemoveFromEventList+0xb4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e001      	b.n	8000eae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000530 	.word	0x20000530
 8000ebc:	20000518 	.word	0x20000518
 8000ec0:	20000080 	.word	0x20000080
 8000ec4:	200004e8 	.word	0x200004e8
 8000ec8:	2000007c 	.word	0x2000007c
 8000ecc:	20000524 	.word	0x20000524

08000ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <vTaskInternalSetTimeOutState+0x24>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <vTaskInternalSetTimeOutState+0x28>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	20000528 	.word	0x20000528
 8000ef8:	20000514 	.word	0x20000514

08000efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d103      	bne.n	8000f14 <xTaskCheckForTimeOut+0x18>
 8000f0c:	f000 facc 	bl	80014a8 <ulSetInterruptMask>
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <xTaskCheckForTimeOut+0x26>
 8000f1a:	f000 fac5 	bl	80014a8 <ulSetInterruptMask>
 8000f1e:	bf00      	nop
 8000f20:	e7fd      	b.n	8000f1e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
 8000f22:	f000 fa4f 	bl	80013c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <xTaskCheckForTimeOut+0xa0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3e:	d102      	bne.n	8000f46 <xTaskCheckForTimeOut+0x4a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e023      	b.n	8000f8e <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <xTaskCheckForTimeOut+0xa4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d007      	beq.n	8000f62 <xTaskCheckForTimeOut+0x66>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d302      	bcc.n	8000f62 <xTaskCheckForTimeOut+0x66>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e015      	b.n	8000f8e <xTaskCheckForTimeOut+0x92>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d20b      	bcs.n	8000f84 <xTaskCheckForTimeOut+0x88>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad2      	subs	r2, r2, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ffa9 	bl	8000ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e004      	b.n	8000f8e <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			*pxTicksToWait = 0;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8000f8e:	f000 fa2b 	bl	80013e8 <vPortExitCritical>

	return xReturn;
 8000f92:	697b      	ldr	r3, [r7, #20]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000514 	.word	0x20000514
 8000fa0:	20000528 	.word	0x20000528

08000fa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <vTaskMissedYield+0x14>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000524 	.word	0x20000524

08000fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <prvResetNextTaskUnblockTime+0x38>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8000fce:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000fd4:	e008      	b.n	8000fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <prvResetNextTaskUnblockTime+0x38>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	200004e0 	.word	0x200004e0
 8000ff8:	2000052c 	.word	0x2000052c

08000ffc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <xTaskGetCurrentTaskHandle+0x1c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001008:	687b      	ldr	r3, [r7, #4]
	}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2000007c 	.word	0x2000007c

0800101c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <xTaskGetSchedulerState+0x34>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e008      	b.n	8001042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <xTaskGetSchedulerState+0x38>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001038:	2302      	movs	r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	e001      	b.n	8001042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001042:	687b      	ldr	r3, [r7, #4]
	}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	2000051c 	.word	0x2000051c
 8001054:	20000530 	.word	0x20000530

08001058 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d051      	beq.n	8001112 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <xTaskPriorityInherit+0xc4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001078:	429a      	cmp	r2, r3
 800107a:	d241      	bcs.n	8001100 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db06      	blt.n	8001092 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <xTaskPriorityInherit+0xc4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	6959      	ldr	r1, [r3, #20]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001120 <xTaskPriorityInherit+0xc8>)
 80010a4:	4413      	add	r3, r2
 80010a6:	4299      	cmp	r1, r3
 80010a8:	d122      	bne.n	80010f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3304      	adds	r3, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9bb 	bl	800042a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <xTaskPriorityInherit+0xc4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <xTaskPriorityInherit+0xcc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d903      	bls.n	80010d2 <xTaskPriorityInherit+0x7a>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <xTaskPriorityInherit+0xcc>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <xTaskPriorityInherit+0xc8>)
 80010e0:	441a      	add	r2, r3
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3304      	adds	r3, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f7ff f941 	bl	8000370 <vListInsertEnd>
 80010ee:	e004      	b.n	80010fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <xTaskPriorityInherit+0xc4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e008      	b.n	8001112 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <xTaskPriorityInherit+0xc4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110a:	429a      	cmp	r2, r3
 800110c:	d201      	bcs.n	8001112 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001112:	68fb      	ldr	r3, [r7, #12]
	}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000007c 	.word	0x2000007c
 8001120:	20000080 	.word	0x20000080
 8001124:	20000518 	.word	0x20000518

08001128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d048      	beq.n	80011d0 <xTaskPriorityDisinherit+0xa8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <xTaskPriorityDisinherit+0xb4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	d003      	beq.n	8001150 <xTaskPriorityDisinherit+0x28>
 8001148:	f000 f9ae 	bl	80014a8 <ulSetInterruptMask>
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <xTaskPriorityDisinherit+0x38>
 8001158:	f000 f9a6 	bl	80014a8 <ulSetInterruptMask>
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <xTaskPriorityDisinherit+0x34>
			( pxTCB->uxMutexesHeld )--;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	429a      	cmp	r2, r3
 8001174:	d02c      	beq.n	80011d0 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	2b00      	cmp	r3, #0
 800117c:	d128      	bne.n	80011d0 <xTaskPriorityDisinherit+0xa8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3304      	adds	r3, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f951 	bl	800042a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001194:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <xTaskPriorityDisinherit+0xb8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d903      	bls.n	80011b0 <xTaskPriorityDisinherit+0x88>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ac:	4a0c      	ldr	r2, [pc, #48]	@ (80011e0 <xTaskPriorityDisinherit+0xb8>)
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <xTaskPriorityDisinherit+0xbc>)
 80011be:	441a      	add	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	3304      	adds	r3, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f7ff f8d2 	bl	8000370 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80011d0:	68fb      	ldr	r3, [r7, #12]
	}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000007c 	.word	0x2000007c
 80011e0:	20000518 	.word	0x20000518
 80011e4:	20000080 	.word	0x20000080

080011e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05c      	beq.n	80012ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001204:	2b00      	cmp	r3, #0
 8001206:	d103      	bne.n	8001210 <vTaskPriorityDisinheritAfterTimeout+0x28>
 8001208:	f000 f94e 	bl	80014a8 <ulSetInterruptMask>
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d902      	bls.n	8001220 <vTaskPriorityDisinheritAfterTimeout+0x38>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e002      	b.n	8001226 <vTaskPriorityDisinheritAfterTimeout+0x3e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	d044      	beq.n	80012ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d13f      	bne.n	80012ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d103      	bne.n	800124c <vTaskPriorityDisinheritAfterTimeout+0x64>
 8001244:	f000 f930 	bl	80014a8 <ulSetInterruptMask>
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db04      	blt.n	800126a <vTaskPriorityDisinheritAfterTimeout+0x82>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6959      	ldr	r1, [r3, #20]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800127a:	4413      	add	r3, r2
 800127c:	4299      	cmp	r1, r3
 800127e:	d11c      	bne.n	80012ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	3304      	adds	r3, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8d0 	bl	800042a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d903      	bls.n	800129e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129a:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80012ac:	441a      	add	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	3304      	adds	r3, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff f85b 	bl	8000370 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000007c 	.word	0x2000007c
 80012c8:	20000080 	.word	0x20000080
 80012cc:	20000518 	.word	0x20000518

080012d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012e2:	3201      	adds	r2, #1
 80012e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80012e6:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
	}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	2000007c 	.word	0x2000007c

080012f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <prvAddCurrentTaskToDelayedList+0x90>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <prvAddCurrentTaskToDelayedList+0x94>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3304      	adds	r3, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f88b 	bl	800042a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d10a      	bne.n	8001332 <prvAddCurrentTaskToDelayedList+0x3a>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <prvAddCurrentTaskToDelayedList+0x94>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3304      	adds	r3, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4819      	ldr	r0, [pc, #100]	@ (8001390 <prvAddCurrentTaskToDelayedList+0x98>)
 800132c:	f7ff f820 	bl	8000370 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001330:	e026      	b.n	8001380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <prvAddCurrentTaskToDelayedList+0x94>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	d209      	bcs.n	800135e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <prvAddCurrentTaskToDelayedList+0x94>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3304      	adds	r3, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4610      	mov	r0, r2
 8001358:	f7ff f82e 	bl	80003b8 <vListInsert>
}
 800135c:	e010      	b.n	8001380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <prvAddCurrentTaskToDelayedList+0x94>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3304      	adds	r3, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f7ff f824 	bl	80003b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d202      	bcs.n	8001380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800137a:	4a08      	ldr	r2, [pc, #32]	@ (800139c <prvAddCurrentTaskToDelayedList+0xa4>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000514 	.word	0x20000514
 800138c:	2000007c 	.word	0x2000007c
 8001390:	200004fc 	.word	0x200004fc
 8001394:	200004e4 	.word	0x200004e4
 8001398:	200004e0 	.word	0x200004e0
 800139c:	2000052c 	.word	0x2000052c

080013a0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <vPortYield+0x20>)
 80013a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80013ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80013b0:	f3bf 8f6f 	isb	sy
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed04 	.word	0xe000ed04

080013c4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80013c8:	f000 f86e 	bl	80014a8 <ulSetInterruptMask>
	ulCriticalNesting++;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <vPortEnterCritical+0x20>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <vPortEnterCritical+0x20>)
 80013d4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80013d6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80013da:	f3bf 8f6f 	isb	sy
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <vPortExitCritical+0x30>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <vPortExitCritical+0x14>
 80013f4:	f000 f858 	bl	80014a8 <ulSetInterruptMask>
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <vPortExitCritical+0x30>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <vPortExitCritical+0x30>)
 8001404:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <vPortExitCritical+0x30>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <vPortExitCritical+0x2c>
	{
		portENABLE_INTERRUPTS();
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f857 	bl	80014c2 <vClearInterruptMask>
	}
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000

0800141c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001422:	f000 f841 	bl	80014a8 <ulSetInterruptMask>
 8001426:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001428:	f7ff fbd2 	bl	8000bd0 <xTaskIncrementTick>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <xPortSysTickHandler+0x2c>)
 8001434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001438:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f841 	bl	80014c2 <vClearInterruptMask>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	e000ed04 	.word	0xe000ed04

0800144c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b02      	subs	r3, #2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d102      	bne.n	800146e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8001468:	f000 f80a 	bl	8001480 <vRestoreContextOfFirstTask>
		}
		break;
 800146c:	e003      	b.n	8001476 <vPortSVCHandler_C+0x2a>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800146e:	f000 f81b 	bl	80014a8 <ulSetInterruptMask>
 8001472:	bf00      	nop
 8001474:	e7fd      	b.n	8001472 <vPortSVCHandler_C+0x26>
		}
	}
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <pxCurrentTCBConst2>)
 8001482:	6811      	ldr	r1, [r2, #0]
 8001484:	6808      	ldr	r0, [r1, #0]
 8001486:	c806      	ldmia	r0!, {r1, r2}
 8001488:	f381 880b 	msr	PSPLIM, r1
 800148c:	2102      	movs	r1, #2
 800148e:	f381 8814 	msr	CONTROL, r1
 8001492:	3020      	adds	r0, #32
 8001494:	f380 8809 	msr	PSP, r0
 8001498:	f3bf 8f6f 	isb	sy
 800149c:	4710      	bx	r2
 800149e:	bf00      	nop

080014a0 <pxCurrentTCBConst2>:
 80014a0:	2000007c 	.word	0x2000007c
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop

080014a8 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80014a8:	f3ef 8011 	mrs	r0, BASEPRI
 80014ac:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 80014b0:	f381 8811 	msr	BASEPRI, r1
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	f3bf 8f6f 	isb	sy
 80014bc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014be:	bf00      	nop
 80014c0:	4618      	mov	r0, r3

080014c2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80014c2:	f380 8811 	msr	BASEPRI, r0
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	f3bf 8f6f 	isb	sy
 80014ce:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80014d0:	bf00      	nop
	...

080014e0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80014e0:	f3ef 8009 	mrs	r0, PSP
 80014e4:	f3ef 820b 	mrs	r2, PSPLIM
 80014e8:	4673      	mov	r3, lr
 80014ea:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <pxCurrentTCBConst>)
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	6008      	str	r0, [r1, #0]
 80014f4:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 80014f8:	f380 8811 	msr	BASEPRI, r0
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	f3bf 8f6f 	isb	sy
 8001504:	f7ff fc16 	bl	8000d34 <vTaskSwitchContext>
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	f380 8811 	msr	BASEPRI, r0
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <pxCurrentTCBConst>)
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	6808      	ldr	r0, [r1, #0]
 8001516:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800151a:	f382 880b 	msr	PSPLIM, r2
 800151e:	f380 8809 	msr	PSP, r0
 8001522:	4718      	bx	r3
 8001524:	f3af 8000 	nop.w
 8001528:	f3af 8000 	nop.w
 800152c:	f3af 8000 	nop.w

08001530 <pxCurrentTCBConst>:
 8001530:	2000007c 	.word	0x2000007c
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
	...

08001540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8001540:	f01e 0f04 	tst.w	lr, #4
 8001544:	bf0c      	ite	eq
 8001546:	f3ef 8008 	mrseq	r0, MSP
 800154a:	f3ef 8009 	mrsne	r0, PSP
 800154e:	4904      	ldr	r1, [pc, #16]	@ (8001560 <svchandler_address_const>)
 8001550:	4708      	bx	r1
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	f3af 8000 	nop.w
 800155c:	f3af 8000 	nop.w

08001560 <svchandler_address_const>:
 8001560:	0800144d 	.word	0x0800144d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop

08001568 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 ffdb 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 32;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f103 0220 	add.w	r2, r3, #32
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	6819      	ldr	r1, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3304      	adds	r3, #4
 8001598:	2202      	movs	r2, #2
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 ffcd 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 2;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1c9a      	adds	r2, r3, #2
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3305      	adds	r3, #5
 80015b2:	2203      	movs	r2, #3
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 ffc0 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 3;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1cda      	adds	r2, r3, #3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3306      	adds	r3, #6
 80015cc:	2203      	movs	r2, #3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 ffb3 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 3;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1cda      	adds	r2, r3, #3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3308      	adds	r3, #8
 80015e6:	2210      	movs	r2, #16
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 ffa6 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 16;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f103 0210 	add.w	r2, r3, #16
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	601a      	str	r2, [r3, #0]





}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af02      	add	r7, sp, #8
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	2220      	movs	r2, #32
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fe03 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 32;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f103 0220 	add.w	r2, r3, #32
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3304      	adds	r3, #4
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	2202      	movs	r2, #2
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fdf3 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 2;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	1c9a      	adds	r2, r3, #2
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3305      	adds	r3, #5
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2203      	movs	r2, #3
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fde4 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 3;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1cda      	adds	r2, r3, #3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3306      	adds	r3, #6
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	2203      	movs	r2, #3
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 fdd5 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 3;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1cda      	adds	r2, r3, #3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3308      	adds	r3, #8
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2210      	movs	r2, #16
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fdc6 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 16;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f103 0210 	add.w	r2, r3, #16
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]





    return false; /* success */
 80016a8:	2300      	movs	r3, #0

}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 80016c0:	2207      	movs	r2, #7
 80016c2:	2100      	movs	r1, #0
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f004 ff1b 	bl	8006500 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	2301      	movs	r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6838      	ldr	r0, [r7, #0]
 80016d4:	f7ff ff48 	bl	8001568 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3307      	adds	r3, #7
 80016dc:	08db      	lsrs	r3, r3, #3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 80016f4:	f107 0108 	add.w	r1, r7, #8
 80016f8:	2301      	movs	r3, #1
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff80 	bl	8001602 <_uavcan_protocol_NodeStatus_decode>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8001708:	2301      	movs	r3, #1
 800170a:	e00c      	b.n	8001726 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3307      	adds	r3, #7
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	8a9b      	ldrh	r3, [r3, #20]
 8001718:	461a      	mov	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4293      	cmp	r3, r2
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_uavcan_protocol_dynamic_node_id_Allocation_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
static inline bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->node_id);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2207      	movs	r2, #7
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fef8 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 7;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1dda      	adds	r2, r3, #7
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 1, &msg->first_part_of_unique_id);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	2201      	movs	r2, #1
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 feeb 	bl	800253a <canardEncodeScalar>

    *bit_ofs += 1;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	601a      	str	r2, [r3, #0]





    if (!tao) {
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x66>


        canardEncodeScalar(buffer, *bit_ofs, 5, &msg->unique_id.len);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3302      	adds	r3, #2
 8001782:	2205      	movs	r2, #5
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fed8 	bl	800253a <canardEncodeScalar>
        *bit_ofs += 5;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	1d5a      	adds	r2, r3, #5
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t unique_id_len = msg->unique_id.len > 16 ? 16 : msg->unique_id.len;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	789b      	ldrb	r3, [r3, #2]
 8001798:	2b10      	cmp	r3, #16
 800179a:	bf28      	it	cs
 800179c:	2310      	movcs	r3, #16
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < unique_id_len; i++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e012      	b.n	80017ce <_uavcan_protocol_dynamic_node_id_Allocation_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id.data[i]);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	3303      	adds	r3, #3
 80017b4:	2208      	movs	r2, #8
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 febf 	bl	800253a <canardEncodeScalar>

        *bit_ofs += 8;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f103 0208 	add.w	r2, r3, #8
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < unique_id_len; i++) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3e8      	bcc.n	80017a8 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x7a>





}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	2207      	movs	r2, #7
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fd14 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 7;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	1dda      	adds	r2, r3, #7
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2201      	movs	r2, #1
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fd05 	bl	8002228 <canardDecodeScalar>

    *bit_ofs += 1;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	601a      	str	r2, [r3, #0]





    if (!tao) {
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f083 0301 	eor.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00f      	beq.n	8001854 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	6819      	ldr	r1, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3302      	adds	r3, #2
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	2205      	movs	r2, #5
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fcf0 	bl	8002228 <canardDecodeScalar>
        *bit_ofs += 5;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	1d5a      	adds	r2, r3, #5
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e00a      	b.n	800186a <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8a9b      	ldrh	r3, [r3, #20]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	2b10      	cmp	r3, #16
 8001870:	d901      	bls.n	8001876 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 8001872:	2301      	movs	r3, #1
 8001874:	e01e      	b.n	80018b4 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e014      	b.n	80018a6 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4413      	add	r3, r2
 8001886:	3303      	adds	r3, #3
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	2208      	movs	r2, #8
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fcca 	bl	8002228 <canardDecodeScalar>

        *bit_ofs += 8;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f103 0208 	add.w	r2, r3, #8
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	789b      	ldrb	r3, [r3, #2]
 80018aa:	461a      	mov	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d3e4      	bcc.n	800187c <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 80018b2:	2300      	movs	r3, #0

}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <uavcan_protocol_dynamic_node_id_Allocation_encode>:

uint32_t uavcan_protocol_dynamic_node_id_Allocation_encode(struct uavcan_protocol_dynamic_node_id_Allocation* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE);
 80018ca:	2212      	movs	r2, #18
 80018cc:	2100      	movs	r1, #0
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f004 fe16 	bl	8006500 <memset>
    _uavcan_protocol_dynamic_node_id_Allocation_encode(buffer, &bit_ofs, msg, 
 80018d4:	f107 010c 	add.w	r1, r7, #12
 80018d8:	2301      	movs	r3, #1
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f7ff ff26 	bl	800172e <_uavcan_protocol_dynamic_node_id_Allocation_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3307      	adds	r3, #7
 80018e6:	08db      	lsrs	r3, r3, #3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 80018fe:	f107 0108 	add.w	r1, r7, #8
 8001902:	2301      	movs	r3, #1
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff6a 	bl	80017e0 <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8001912:	2301      	movs	r3, #1
 8001914:	e00c      	b.n	8001930 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3307      	adds	r3, #7
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	8a9b      	ldrh	r3, [r3, #20]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4293      	cmp	r3, r2
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZL25StaticOnTransferReceptionP14CanardInstanceP16CanardRxTransfer>:

#include "can.hpp"

static void StaticOnTransferReception(CanardInstance* ins, CanardRxTransfer* transfer) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    CAN* self = static_cast<CAN*>(ins->user_reference);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	60fb      	str	r3, [r7, #12]
    self->CanardOnTransferReception(ins, transfer);
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f8f3 	bl	8001b38 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZL26StaticShouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:

static bool StaticShouldAcceptTransfer(const CanardInstance* ins, uint64_t* out_sig, uint16_t id, CanardTransferType type, uint8_t src) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af02      	add	r7, sp, #8
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	4611      	mov	r1, r2
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	80fb      	strh	r3, [r7, #6]
 800196c:	4613      	mov	r3, r2
 800196e:	717b      	strb	r3, [r7, #5]

	return static_cast<CAN*>(ins->user_reference)->CanardShouldAcceptTransfer(ins, out_sig, id, type, src);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	7e3b      	ldrb	r3, [r7, #24]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	797b      	ldrb	r3, [r7, #5]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4613      	mov	r3, r2
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	f000 f898 	bl	8001ab8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <_ZN4ICANC1Ev>:
#pragma once

class ICAN {

protected:
	ICAN() = default;
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <_ZN4ICANC1Ev+0x1c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	08006644 	.word	0x08006644

080019b4 <_ZN4ICAND1Ev>:

public:
	virtual ~ICAN() = default;
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <_ZN4ICAND1Ev+0x1c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	08006644 	.word	0x08006644

080019d4 <_ZN4ICAND0Ev>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe9 	bl	80019b4 <_ZN4ICAND1Ev>
 80019e2:	2104      	movs	r1, #4
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f004 fd73 	bl	80064d0 <_ZdlPvj>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZN3CANC1EP19FDCAN_HandleTypeDef>:

CAN::CAN(FDCAN_HandleTypeDef *hfdcan) : hfdcan(hfdcan) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ffc7 	bl	8001994 <_ZN4ICANC1Ev>
 8001a06:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x6c>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	f8c3 2c0c 	str.w	r2, [r3, #3084]	@ 0xc0c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
	static uint8_t canardMemoryPool[1024];

	canardInit(&canard,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 6041 	add.w	r0, r3, #3088	@ 0xc10
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x70>)
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x74>)
 8001a34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x78>)
 8001a3a:	f000 fae0 	bl	8001ffe <canardInit>
			&StaticOnTransferReception,
			&StaticShouldAcceptTransfer,
			this
	);

	nodeStatus = {0};
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]

	canard.node_id = NODE_ID;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
}
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	08006634 	.word	0x08006634
 8001a64:	0800195b 	.word	0x0800195b
 8001a68:	08001939 	.word	0x08001939
 8001a6c:	20000538 	.word	0x20000538

08001a70 <_ZN3CAND1Ev>:

CAN::~CAN() {}
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4a05      	ldr	r2, [pc, #20]	@ (8001a90 <_ZN3CAND1Ev+0x20>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff97 	bl	80019b4 <_ZN4ICAND1Ev>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	08006634 	.word	0x08006634

08001a94 <_ZN3CAND0Ev>:
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_ZN3CAND1Ev>
 8001aa2:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f004 fd12 	bl	80064d0 <_ZdlPvj>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>:
	const CanardInstance *ins,
	uint64_t *out_data_type_signature,
	uint16_t data_type_id,
	CanardTransferType transfer_type,
	uint8_t source_node_id)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	807b      	strh	r3, [r7, #2]
	if (transfer_type == CanardTransferTypeRequest) {
 8001ac6:	7e3b      	ldrb	r3, [r7, #24]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d124      	bne.n	8001b16 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
		// check if we want to handle a specific service request
		switch (data_type_id) {
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d004      	beq.n	8001adc <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x24>
 8001ad2:	f240 1255 	movw	r2, #341	@ 0x155
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01b      	beq.n	8001b12 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5a>
 8001ada:	e01c      	b.n	8001b16 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
			case UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID:
			/* case UAVCAN_PROTOCOL_GETNODEINFO_ID: */ {
				if (transfer_type == CanardTransferTypeResponse || transfer_type == CanardTransferTypeRequest) {
 8001adc:	7e3b      	ldrb	r3, [r7, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x30>
 8001ae2:	7e3b      	ldrb	r3, [r7, #24]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x40>
					*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	a30f      	add	r3, pc, #60	@ (adr r3, 8001b28 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x70>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e00f      	b.n	8001b18 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else if (transfer_type == CanardTransferTypeBroadcast) {
 8001af8:	7e3b      	ldrb	r3, [r7, #24]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x56>
					*out_data_type_signature = UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_SIGNATURE;
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	a30b      	add	r3, pc, #44	@ (adr r3, 8001b30 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x78>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e004      	b.n	8001b18 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else {
					return false;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e002      	b.n	8001b18 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
			}
			case UAVCAN_PROTOCOL_NODESTATUS_ID: {
				return true;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
			}
		}
	}
	return false;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	f3af 8000 	nop.w
 8001b28:	21c46a9e 	.word	0x21c46a9e
 8001b2c:	ee468a81 	.word	0xee468a81
 8001b30:	20a11d40 	.word	0x20a11d40
 8001b34:	0b2a8126 	.word	0x0b2a8126

08001b38 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>:

void CAN::CanardOnTransferReception(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
    if (transfer->transfer_type == CanardTransferTypeRequest) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7e1b      	ldrb	r3, [r3, #24]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11b      	bne.n	8001b84 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4c>
        // check if we want to handle a specific service request
        switch (transfer->data_type_id) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	8adb      	ldrh	r3, [r3, #22]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d004      	beq.n	8001b5e <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x26>
 8001b54:	f240 1255 	movw	r2, #341	@ 0x155
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x40>
				handleNodeStatus(transfer);
				break;
			}
        }
    }
}
 8001b5c:	e012      	b.n	8001b84 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4c>
				if (transfer->transfer_type == CanardTransferTypeResponse) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7e1b      	ldrb	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4a>
				else if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e1b      	ldrb	r3, [r3, #24]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d109      	bne.n	8001b82 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4a>
					handleNodeAllocation(transfer);
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f859 	bl	8001c28 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>
				break;
 8001b76:	e004      	b.n	8001b82 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4a>
				handleNodeStatus(transfer);
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f806 	bl	8001b8c <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>
				break;
 8001b80:	e000      	b.n	8001b84 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4c>
				break;
 8001b82:	bf00      	nop
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>:


void CAN::handleNodeStatus(CanardRxTransfer *transfer) {
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	uint32_t tick = HAL_GetTick();
 8001b96:	f001 fdf9 	bl	800378c <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24

	canNode node {0};
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]

	node.lastSeenTick = tick;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	4615      	mov	r5, r2
 8001bb6:	e9c7 4502 	strd	r4, r5, [r7, #8]

	bool success = uavcan_protocol_NodeStatus_decode(transfer, &node.status);
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f7ff fd8f 	bl	80016e6 <uavcan_protocol_NodeStatus_decode>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (!success) return;
 8001bce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bd2:	f083 0301 	eor.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11c      	bne.n	8001c16 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8a>

	// Node ID out of bounds or is anonymous
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7edb      	ldrb	r3, [r3, #27]
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db19      	blt.n	8001c1a <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8e>
	if (transfer->source_node_id == 0) return;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	7edb      	ldrb	r3, [r3, #27]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d017      	beq.n	8001c1e <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x92>

	canNodes[transfer->source_node_id] = node;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7edb      	ldrb	r3, [r3, #27]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	440b      	add	r3, r1
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3308      	adds	r3, #8
 8001c02:	461d      	mov	r5, r3
 8001c04:	f107 0408 	add.w	r4, r7, #8
 8001c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c14:	e004      	b.n	8001c20 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (!success) return;
 8001c16:	bf00      	nop
 8001c18:	e002      	b.n	8001c20 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id == 0) return;
 8001c1e:	bf00      	nop
}
 8001c20:	3728      	adds	r7, #40	@ 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c28 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>:

void CAN::handleNodeAllocation(CanardRxTransfer *transfer){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	@ 0x50
 8001c2c:	af06      	add	r7, sp, #24
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]

	uint8_t first_half_unique_id[8];

 	if (transfer->source_node_id != 0) // the source node is not 0, it is not anonymous
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	7edb      	ldrb	r3, [r3, #27]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d142      	bne.n	8001cc0 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x98>
	{
		return;
	}

    struct uavcan_protocol_dynamic_node_id_Allocation msg = {};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	f8c3 200f 	str.w	r2, [r3, #15]
	uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	6838      	ldr	r0, [r7, #0]
 8001c54:	f7ff fe4c 	bl	80018f0 <uavcan_protocol_dynamic_node_id_Allocation_decode>

	if (msg.node_id != 0) // the node id is not 0, it is not anonymous
 8001c58:	7f3b      	ldrb	r3, [r7, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d132      	bne.n	8001cc4 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9c>
	{
		return;
	}

	memcpy(first_half_unique_id, msg.unique_id.data, 8);
 8001c5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c62:	f107 021f 	add.w	r2, r7, #31
 8001c66:	6810      	ldr	r0, [r2, #0]
 8001c68:	6851      	ldr	r1, [r2, #4]
 8001c6a:	c303      	stmia	r3!, {r0, r1}

	// Generate the node id and allocate it
	msg.node_id = allocateNode();
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f833 	bl	8001cd8 <_ZN3CAN12allocateNodeEv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	773b      	strb	r3, [r7, #28]

	if (msg.node_id == -1){
		return;
	}

	msg = {};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	f8c3 200f 	str.w	r2, [r3, #15]

	// Send message back
	uint8_t decode_buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
	uavcan_protocol_dynamic_node_id_Allocation_encode(&msg, decode_buffer);
 8001c8a:	f107 0208 	add.w	r2, r7, #8
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe11 	bl	80018bc <uavcan_protocol_dynamic_node_id_Allocation_encode>



	broadcast(
 8001c9a:	2312      	movs	r3, #18
 8001c9c:	9304      	str	r3, [sp, #16]
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	2318      	movs	r3, #24
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2301      	movs	r3, #1
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	a307      	add	r3, pc, #28	@ (adr r3, 8001cd0 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xa8>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f979 	bl	8001fb0 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
 8001cbe:	e002      	b.n	8001cc6 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 8001cc0:	bf00      	nop
 8001cc2:	e000      	b.n	8001cc6 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 8001cc4:	bf00      	nop
		CANARD_TRANSFER_PRIORITY_LOW,
		decode_buffer,
		sizeof(decode_buffer)
	);

}
 8001cc6:	3738      	adds	r7, #56	@ 0x38
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	20a11d40 	.word	0x20a11d40
 8001cd4:	0b2a8126 	.word	0x0b2a8126

08001cd8 <_ZN3CAN12allocateNodeEv>:

int8_t CAN::allocateNode() {
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	// check if the node id is already allocated
	int currId = nextAvailableID;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8001ce6:	60fb      	str	r3, [r7, #12]

	if (currId > CANARD_MAX_NODE_ID) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cec:	dd02      	ble.n	8001cf4 <_ZN3CAN12allocateNodeEv+0x1c>
		return -1; // no more node ids available
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e009      	b.n	8001d08 <_ZN3CAN12allocateNodeEv+0x30>
	}

	nextAvailableID++;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08

	return currId;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	b25b      	sxtb	r3, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_ZN3CAN9sendCANTxEv>:
/*
Function to convert all canard CAN frames and send them through HAL

Consider removing for loop
*/
void CAN::sendCANTx() {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b090      	sub	sp, #64	@ 0x40
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	bool success = true;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for (const CanardCANFrame *frame; frame != nullptr; frame = canardPeekTxQueue(&canard)) {
 8001d22:	e041      	b.n	8001da8 <_ZN3CAN9sendCANTxEv+0x94>
		if (HAL_FDCAN_GetTxFifoFreeLevel(hfdcan) > 0) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 f9b2 	bl	8004094 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bf14      	ite	ne
 8001d36:	2301      	movne	r3, #1
 8001d38:	2300      	moveq	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d02c      	beq.n	8001d9a <_ZN3CAN9sendCANTxEv+0x86>
			FDCAN_TxHeaderTypeDef txHeader;

			txHeader.Identifier = frame->id;
 8001d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
			txHeader.IdType = FDCAN_EXTENDED_ID;
 8001d46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d4a:	613b      	str	r3, [r7, #16]
			txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
			txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001d50:	2308      	movs	r3, #8
 8001d52:	61bb      	str	r3, [r7, #24]
			txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
			txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
			txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24

			const uint8_t *txData = frame->data;
 8001d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d62:	3304      	adds	r3, #4
 8001d64:	637b      	str	r3, [r7, #52]	@ 0x34

			bool success = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, txData) == HAL_OK;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8001d6c:	f107 010c 	add.w	r1, r7, #12
 8001d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 f842 	bl	8003dfc <HAL_FDCAN_AddMessageToTxFifoQ>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

			if (success) {
 8001d86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <_ZN3CAN9sendCANTxEv+0x86>
				canardPopTxQueue(&canard);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fa32 	bl	80021fe <canardPopTxQueue>
	for (const CanardCANFrame *frame; frame != nullptr; frame = canardPeekTxQueue(&canard)) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fa19 	bl	80021d8 <canardPeekTxQueue>
 8001da6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ba      	bne.n	8001d24 <_ZN3CAN9sendCANTxEv+0x10>
			}
		}
	}
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3740      	adds	r7, #64	@ 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN3CAN12routineTasksEv>:

bool CAN::routineTasks() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	sendCANTx();
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffa7 	bl	8001d14 <_ZN3CAN9sendCANTxEv>

	uint32_t tick = HAL_GetTick();
 8001dc6:	f001 fce1 	bl	800378c <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]

	if (tick > last1HzTick + UAVCAN_PROTOCOL_NODESTATUS_MAX_BROADCASTING_PERIOD_MS/2) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 8001dd2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d906      	bls.n	8001dea <_ZN3CAN12routineTasksEv+0x32>
		last1HzTick = tick;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
		process1HzTasks();
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f873 	bl	8001ed0 <_ZN3CAN15process1HzTasksEv>
	}
}
 8001dea:	bf00      	nop
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0000      	movs	r0, r0
	...

08001df8 <_ZN3CAN14sendNodeStatusEv>:

void CAN::sendNodeStatus() {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0e8      	sub	sp, #416	@ 0x1a0
 8001dfc:	af06      	add	r7, sp, #24
 8001dfe:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e02:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e06:	6018      	str	r0, [r3, #0]
	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    nodeStatus.uptime_sec = HAL_GetTick()/1000LL;
 8001e08:	f001 fcc0 	bl	800378c <HAL_GetTick>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec8 <_ZN3CAN14sendNodeStatusEv+0xd0>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	099a      	lsrs	r2, r3, #6
 8001e16:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8c3 2c3c 	str.w	r2, [r3, #3132]	@ 0xc3c
    nodeStatus.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8001e24:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2c40 	strb.w	r2, [r3, #3136]	@ 0xc40
    nodeStatus.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 8001e34:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e38:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2c41 	strb.w	r2, [r3, #3137]	@ 0xc41
    nodeStatus.sub_mode = 0;
 8001e44:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e48:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2c42 	strb.w	r2, [r3, #3138]	@ 0xc42
    // put whatever you like in here for display in GUI
    nodeStatus.vendor_specific_status_code = 1234;
 8001e54:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e58:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8001e62:	f8a3 2c44 	strh.w	r2, [r3, #3140]	@ 0xc44

    uint32_t len = uavcan_protocol_NodeStatus_encode(&nodeStatus, buffer);
 8001e66:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001e6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc19 	bl	80016b2 <uavcan_protocol_NodeStatus_encode>
 8001e80:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;


    broadcast(CanardTransferTypeBroadcast,
 8001e84:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8001e8e:	f5a2 70c2 	sub.w	r0, r2, #388	@ 0x184
 8001e92:	9304      	str	r3, [sp, #16]
 8001e94:	f107 0308 	add.w	r3, r7, #8
 8001e98:	9303      	str	r3, [sp, #12]
 8001e9a:	2318      	movs	r3, #24
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <_ZN3CAN14sendNodeStatusEv+0xd4>)
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	f240 1355 	movw	r3, #341	@ 0x155
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	a305      	add	r3, pc, #20	@ (adr r3, 8001ec0 <_ZN3CAN14sendNodeStatusEv+0xc8>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	2102      	movs	r1, #2
 8001eb0:	6800      	ldr	r0, [r0, #0]
 8001eb2:	f000 f87d 	bl	8001fb0 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			&transfer_id,
			CANARD_TRANSFER_PRIORITY_LOW,
			buffer,
			len
	);
}
 8001eb6:	bf00      	nop
 8001eb8:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	c1a7c6f1 	.word	0xc1a7c6f1
 8001ec4:	0f0868d0 	.word	0x0f0868d0
 8001ec8:	10624dd3 	.word	0x10624dd3
 8001ecc:	20000938 	.word	0x20000938

08001ed0 <_ZN3CAN15process1HzTasksEv>:

void CAN::process1HzTasks() {
 8001ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ed4:	b08b      	sub	sp, #44	@ 0x2c
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]

	uint32_t timestamp_msec = HAL_GetTick();
 8001eda:	f001 fc57 	bl	800378c <HAL_GetTick>
 8001ede:	6238      	str	r0, [r7, #32]

	// Check if nodes invalid
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee4:	e02e      	b.n	8001f44 <_ZN3CAN15process1HzTasksEv+0x74>
		// Make copy of status in case it changes
		canNode node = canNodes[i];
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	f107 0608 	add.w	r6, r7, #8
 8001efa:	469c      	mov	ip, r3
 8001efc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001f00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f02:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001f06:	e886 0003 	stmia.w	r6, {r0, r1}

		if (timestamp_msec-node.lastSeenTick > UAVCAN_PROTOCOL_NODESTATUS_OFFLINE_TIMEOUT_MS) {
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4698      	mov	r8, r3
 8001f10:	4691      	mov	r9, r2
 8001f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f16:	ebb8 0402 	subs.w	r4, r8, r2
 8001f1a:	eb69 0503 	sbc.w	r5, r9, r3
 8001f1e:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8001f22:	429c      	cmp	r4, r3
 8001f24:	f175 0300 	sbcs.w	r3, r5, #0
 8001f28:	d309      	bcc.n	8001f3e <_ZN3CAN15process1HzTasksEv+0x6e>
			canNodes[i].status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE;
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	3315      	adds	r3, #21
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	701a      	strb	r2, [r3, #0]
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f48:	ddcd      	ble.n	8001ee6 <_ZN3CAN15process1HzTasksEv+0x16>
		}
	}

	// Transmit NodeStatus
	sendNodeStatus();
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ff54 	bl	8001df8 <_ZN3CAN14sendNodeStatusEv>
}
 8001f50:	bf00      	nop
 8001f52:	372c      	adds	r7, #44	@ 0x2c
 8001f54:	46bd      	mov	sp, r7
 8001f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001f5c <_ZN3CAN12broadcastObjEP16CanardTxTransfer>:


/*
Wrapper function with mutex
*/
int16_t CAN::broadcastObj(CanardTxTransfer* transfer) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	osStatus_t status = osMutexAcquire(canBroadcastMutex, CAN_BROADCAST_MUTEX_TIMEOUT);
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <_ZN3CAN12broadcastObjEP16CanardTxTransfer+0x50>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f976 	bl	8000260 <osMutexAcquire>
 8001f74:	60f8      	str	r0, [r7, #12]

	if (status != osOK){
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <_ZN3CAN12broadcastObjEP16CanardTxTransfer+0x26>
		return -1; // handle failure
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e00f      	b.n	8001fa2 <_ZN3CAN12broadcastObjEP16CanardTxTransfer+0x46>
	}

	int16_t res = canardBroadcastObj(&canard, transfer);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f878 	bl	8002080 <canardBroadcastObj>
 8001f90:	4603      	mov	r3, r0
 8001f92:	817b      	strh	r3, [r7, #10]
	osMutexRelease(canBroadcastMutex);
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <_ZN3CAN12broadcastObjEP16CanardTxTransfer+0x50>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe f9ac 	bl	80002f6 <osMutexRelease>

	return res;
 8001f9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000534 	.word	0x20000534

08001fb0 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>:
	#endif
	#if CANARD_ENABLE_TAO_OPTION
		, bool tao; ///< True if tail array optimization is enabled
	#endif
)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	e9c7 2300 	strd	r2, r3, [r7]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	72fb      	strb	r3, [r7, #11]
			iface_mask = iface_mask, ///< Bitmask of interfaces to send the transfer on
		#endif
		#if CANARD_ENABLE_TAO_OPTION
			tao = tao, ///< True if tail array optimization is enabled
		#endif
	};
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	743b      	strb	r3, [r7, #16]
 8001fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fd0:	843b      	strh	r3, [r7, #32]
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001fda:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fe6:	863b      	strh	r3, [r7, #48]	@ 0x30

	return broadcastObj(&transfer_object);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff ffb4 	bl	8001f5c <_ZN3CAN12broadcastObjEP16CanardTxTransfer>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3738      	adds	r7, #56	@ 0x38
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <canardInit>:
                 void* mem_arena,
                 size_t mem_arena_size,
                 CanardOnTransferReception on_reception,
                 CanardShouldAcceptTransfer should_accept,
                 void* user_reference)
 {
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	603b      	str	r3, [r7, #0]
      * If your application fails here, make sure it's not built in 64-bit mode.
      * Refer to the design documentation for more info.
      */
     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

     memset(out_ins, 0, sizeof(*out_ins));
 800200c:	222c      	movs	r2, #44	@ 0x2c
 800200e:	2100      	movs	r1, #0
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f004 fa75 	bl	8006500 <memset>

     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
     out_ins->on_reception = on_reception;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]
     out_ins->should_accept = should_accept;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a3a      	ldr	r2, [r7, #32]
 8002026:	605a      	str	r2, [r3, #4]
     out_ins->rx_states = NULL;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
     out_ins->tx_queue = NULL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	625a      	str	r2, [r3, #36]	@ 0x24
     out_ins->user_reference = user_reference;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
 #if CANARD_ENABLE_TAO_OPTION
     out_ins->tao_disabled = false;
 #endif
     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	617b      	str	r3, [r7, #20]
     if (pool_capacity > 0xFFFFU)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002046:	d302      	bcc.n	800204e <canardInit+0x50>
     {
         pool_capacity = 0xFFFFU;
 8002048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800204c:	617b      	str	r3, [r7, #20]
     }

     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	330c      	adds	r3, #12
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	b292      	uxth	r2, r2
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 ff70 	bl	8002f3e <initPoolAllocator>
 }
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 }
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <canardBroadcastObj>:

     return canardBroadcastObj(ins, &transfer_object);
 }

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <canardBroadcastObj+0x20>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	8c1b      	ldrh	r3, [r3, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800209a:	f06f 0301 	mvn.w	r3, #1
 800209e:	e070      	b.n	8002182 <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
 80020a4:	2b1f      	cmp	r3, #31
 80020a6:	d902      	bls.n	80020ae <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80020a8:	f06f 0301 	mvn.w	r3, #1
 80020ac:	e069      	b.n	8002182 <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 80020b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020b6:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffd4 	bl	8002066 <canardGetLocalNodeID>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d138      	bne.n	8002136 <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	8c1b      	ldrh	r3, [r3, #32]
 80020c8:	2b07      	cmp	r3, #7
 80020ca:	d902      	bls.n	80020d2 <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 80020cc:	f06f 0303 	mvn.w	r3, #3
 80020d0:	e057      	b.n	8002182 <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	8a1a      	ldrh	r2, [r3, #16]
 80020d6:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <canardBroadcastObj+0x10c>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29a      	uxth	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	8a1b      	ldrh	r3, [r3, #16]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d002      	beq.n	80020ec <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 80020e6:	f06f 0301 	mvn.w	r3, #1
 80020ea:	e04a      	b.n	8002182 <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	69d9      	ldr	r1, [r3, #28]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	8c1b      	ldrh	r3, [r3, #32]
 80020f4:	461a      	mov	r2, r3
 80020f6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80020fa:	f000 ff03 	bl	8002f04 <crcAdd>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8002106:	4013      	ands	r3, r2
 8002108:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7e1b      	ldrb	r3, [r3, #24]
 800210e:	061a      	lsls	r2, r3, #24
 8002110:	8a3b      	ldrh	r3, [r7, #16]
 8002112:	025b      	lsls	r3, r3, #9
 8002114:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	8a19      	ldrh	r1, [r3, #16]
 800211a:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <canardBroadcastObj+0x10c>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	400b      	ands	r3, r1
 8002120:	b29b      	uxth	r3, r3
 8002122:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8002124:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff9c 	bl	8002066 <canardGetLocalNodeID>
 800212e:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8002130:	4323      	orrs	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e012      	b.n	800215c <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7e1b      	ldrb	r3, [r3, #24]
 800213a:	061a      	lsls	r2, r3, #24
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	8a1b      	ldrh	r3, [r3, #16]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	ea42 0403 	orr.w	r4, r2, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ff8d 	bl	8002066 <canardGetLocalNodeID>
 800214c:	4603      	mov	r3, r0
 800214e:	4323      	orrs	r3, r4
 8002150:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f000 f81c 	bl	8002190 <calculateCRC>
 8002158:	4603      	mov	r3, r0
 800215a:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 800215c:	8a7a      	ldrh	r2, [r7, #18]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6979      	ldr	r1, [r7, #20]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fadb 	bl	800271e <enqueueTxFrames>
 8002168:	4603      	mov	r3, r0
 800216a:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 800216c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002170:	2b00      	cmp	r3, #0
 8002172:	dd04      	ble.n	800217e <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fa5b 	bl	8002634 <incrementTransferID>
     }

     return result;
 800217e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 8002182:	4618      	mov	r0, r3
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	bf00      	nop
 800218c:	0800664c 	.word	0x0800664c

08002190 <calculateCRC>:
     return (canard_buffer_idx_t)rx;
 #endif
 }

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 8002198:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800219c:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8c1b      	ldrh	r3, [r3, #32]
 80021a2:	2b07      	cmp	r3, #7
 80021a4:	d913      	bls.n	80021ce <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021ac:	89f9      	ldrh	r1, [r7, #14]
 80021ae:	4608      	mov	r0, r1
 80021b0:	f000 fe79 	bl	8002ea6 <crcAddSignature>
 80021b4:	4603      	mov	r3, r0
 80021b6:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	8c1b      	ldrh	r3, [r3, #32]
 80021c0:	461a      	mov	r2, r3
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fe9d 	bl	8002f04 <crcAdd>
 80021ca:	4603      	mov	r3, r0
 80021cc:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 }
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <canardPeekTxQueue+0x14>
     {
         return NULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e002      	b.n	80021f2 <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	3304      	adds	r3, #4
 }
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	330c      	adds	r3, #12
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 feef 	bl	8002ffe <freeBlock>
 }
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <canardDecodeScalar>:
 int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                            uint32_t bit_offset,
                            uint8_t bit_length,
                            bool value_is_signed,
                            void* out_value)
 {
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	b08d      	sub	sp, #52	@ 0x34
 800222e:	af00      	add	r7, sp, #0
 8002230:	61f8      	str	r0, [r7, #28]
 8002232:	61b9      	str	r1, [r7, #24]
 8002234:	4611      	mov	r1, r2
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	75fb      	strb	r3, [r7, #23]
 800223c:	4613      	mov	r3, r2
 800223e:	75bb      	strb	r3, [r7, #22]
     if (transfer == NULL || out_value == NULL)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <canardDecodeScalar+0x24>
 8002246:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <canardDecodeScalar+0x2a>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800224c:	f06f 0301 	mvn.w	r3, #1
 8002250:	e16e      	b.n	8002530 <canardDecodeScalar+0x308>
     }

     if (bit_length < 1 || bit_length > 64)
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <canardDecodeScalar+0x36>
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b40      	cmp	r3, #64	@ 0x40
 800225c:	d902      	bls.n	8002264 <canardDecodeScalar+0x3c>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800225e:	f06f 0301 	mvn.w	r3, #1
 8002262:	e165      	b.n	8002530 <canardDecodeScalar+0x308>
     }

     if (bit_length == 1 && value_is_signed)
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <canardDecodeScalar+0x4e>
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <canardDecodeScalar+0x4e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8002270:	f06f 0301 	mvn.w	r3, #1
 8002274:	e15c      	b.n	8002530 <canardDecodeScalar+0x308>
         uint64_t u64;
         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));   // This is important
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	2208      	movs	r2, #8
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f004 f93e 	bl	8006500 <memset>

     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8002284:	f107 0320 	add.w	r3, r7, #32
 8002288:	7dfa      	ldrb	r2, [r7, #23]
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	69f8      	ldr	r0, [r7, #28]
 800228e:	f000 fca5 	bl	8002bdc <descatterTransferPayload>
 8002292:	4603      	mov	r3, r0
 8002294:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if (result <= 0)
 8002296:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800229a:	2b00      	cmp	r3, #0
 800229c:	dc02      	bgt.n	80022a4 <canardDecodeScalar+0x7c>
     {
         return result;
 800229e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80022a2:	e145      	b.n	8002530 <canardDecodeScalar+0x308>
      * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
      * Extra most significant bits will be filled with zeroes, which is fine.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d018      	beq.n	80022e2 <canardDecodeScalar+0xba>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3320      	adds	r3, #32
 80022b8:	f107 0210 	add.w	r2, r7, #16
 80022bc:	4413      	add	r3, r2
 80022be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80022c2:	461a      	mov	r2, r3
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	425b      	negs	r3, r3
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	411a      	asrs	r2, r3
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	08db      	lsrs	r3, r3, #3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	3320      	adds	r3, #32
 80022d8:	f107 0110 	add.w	r1, r7, #16
 80022dc:	440b      	add	r3, r1
 80022de:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
      */
     uint8_t std_byte_length = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d103      	bne.n	80022f6 <canardDecodeScalar+0xce>
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80022f4:	e01e      	b.n	8002334 <canardDecodeScalar+0x10c>
     else if (bit_length <= 8)   { std_byte_length = 1; }
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d803      	bhi.n	8002304 <canardDecodeScalar+0xdc>
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002302:	e017      	b.n	8002334 <canardDecodeScalar+0x10c>
     else if (bit_length <= 16)  { std_byte_length = 2; }
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d803      	bhi.n	8002312 <canardDecodeScalar+0xea>
 800230a:	2302      	movs	r3, #2
 800230c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002310:	e010      	b.n	8002334 <canardDecodeScalar+0x10c>
     else if (bit_length <= 32)  { std_byte_length = 4; }
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b20      	cmp	r3, #32
 8002316:	d803      	bhi.n	8002320 <canardDecodeScalar+0xf8>
 8002318:	2304      	movs	r3, #4
 800231a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800231e:	e009      	b.n	8002334 <canardDecodeScalar+0x10c>
     else if (bit_length <= 64)  { std_byte_length = 8; }
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b40      	cmp	r3, #64	@ 0x40
 8002324:	d803      	bhi.n	800232e <canardDecodeScalar+0x106>
 8002326:	2308      	movs	r3, #8
 8002328:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800232c:	e002      	b.n	8002334 <canardDecodeScalar+0x10c>
     else
     {
         CANARD_ASSERT(false);
         return -CANARD_ERROR_INTERNAL;
 800232e:	f06f 0308 	mvn.w	r3, #8
 8002332:	e0fd      	b.n	8002530 <canardDecodeScalar+0x308>
     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

     /*
      * Flipping the byte order if needed.
      */
     if (isBigEndian())
 8002334:	f000 fd47 	bl	8002dc6 <isBigEndian>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <canardDecodeScalar+0x126>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 800233e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002342:	f107 0320 	add.w	r3, r7, #32
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fd4d 	bl	8002de8 <swapByteOrder>

     /*
      * Extending the sign bit if needed. I miss templates.
      * Note that we operate on unsigned values in order to avoid undefined behaviors.
      */
     if (value_is_signed && (std_byte_length * 8 != bit_length))
 800234e:	7dbb      	ldrb	r3, [r7, #22]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 809b 	beq.w	800248c <canardDecodeScalar+0x264>
 8002356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800235a:	00da      	lsls	r2, r3, #3
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	429a      	cmp	r2, r3
 8002360:	f000 8094 	beq.w	800248c <canardDecodeScalar+0x264>
     {
         if (bit_length <= 8)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d819      	bhi.n	800239e <canardDecodeScalar+0x176>
         {
             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 800236a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800236e:	461a      	mov	r2, r3
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	3b01      	subs	r3, #1
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8085 	beq.w	800248c <canardDecodeScalar+0x264>
             {
                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8002382:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	425b      	negs	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f887 3020 	strb.w	r3, [r7, #32]
 800239c:	e076      	b.n	800248c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 16)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d815      	bhi.n	80023d0 <canardDecodeScalar+0x1a8>
         {
             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80023a4:	8c3b      	ldrh	r3, [r7, #32]
 80023a6:	461a      	mov	r2, r3
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d069      	beq.n	800248c <canardDecodeScalar+0x264>
             {
                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80023b8:	8c3a      	ldrh	r2, [r7, #32]
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	425b      	negs	r3, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	843b      	strh	r3, [r7, #32]
 80023ce:	e05d      	b.n	800248c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 32)
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d811      	bhi.n	80023fa <canardDecodeScalar+0x1d2>
         {
             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80023d6:	6a3a      	ldr	r2, [r7, #32]
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	3b01      	subs	r3, #1
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d051      	beq.n	800248c <canardDecodeScalar+0x264>
             {
                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	425b      	negs	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	e048      	b.n	800248c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length < 64)   // Strictly less, this is not a typo
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80023fe:	d842      	bhi.n	8002486 <canardDecodeScalar+0x25e>
         {
             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8002400:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002404:	7df9      	ldrb	r1, [r7, #23]
 8002406:	1e48      	subs	r0, r1, #1
 8002408:	f1c0 0620 	rsb	r6, r0, #32
 800240c:	f1a0 0120 	sub.w	r1, r0, #32
 8002410:	fa22 f400 	lsr.w	r4, r2, r0
 8002414:	fa03 f606 	lsl.w	r6, r3, r6
 8002418:	4334      	orrs	r4, r6
 800241a:	fa23 f101 	lsr.w	r1, r3, r1
 800241e:	430c      	orrs	r4, r1
 8002420:	fa23 f500 	lsr.w	r5, r3, r0
 8002424:	f004 0301 	and.w	r3, r4, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002432:	460b      	mov	r3, r1
 8002434:	4313      	orrs	r3, r2
 8002436:	d029      	beq.n	800248c <canardDecodeScalar+0x264>
             {
                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8002438:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800243c:	7df9      	ldrb	r1, [r7, #23]
 800243e:	f04f 0201 	mov.w	r2, #1
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f1a1 0620 	sub.w	r6, r1, #32
 800244a:	f1c1 0020 	rsb	r0, r1, #32
 800244e:	fa03 f901 	lsl.w	r9, r3, r1
 8002452:	fa02 f606 	lsl.w	r6, r2, r6
 8002456:	ea49 0906 	orr.w	r9, r9, r6
 800245a:	fa22 f000 	lsr.w	r0, r2, r0
 800245e:	ea49 0900 	orr.w	r9, r9, r0
 8002462:	fa02 f801 	lsl.w	r8, r2, r1
 8002466:	2300      	movs	r3, #0
 8002468:	f1d8 0a00 	rsbs	sl, r8, #0
 800246c:	eb63 0b09 	sbc.w	fp, r3, r9
 8002470:	ea44 030a 	orr.w	r3, r4, sl
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	ea45 030b 	orr.w	r3, r5, fp
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002480:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002484:	e002      	b.n	800248c <canardDecodeScalar+0x264>
             }
         }
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8002486:	f06f 0308 	mvn.w	r3, #8
 800248a:	e051      	b.n	8002530 <canardDecodeScalar+0x308>
     }

     /*
      * Copying the result out.
      */
     if (value_is_signed)
 800248c:	7dbb      	ldrb	r3, [r7, #22]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d022      	beq.n	80024d8 <canardDecodeScalar+0x2b0>
     {
         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d804      	bhi.n	80024a2 <canardDecodeScalar+0x27a>
 8002498:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800249c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e044      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d804      	bhi.n	80024b2 <canardDecodeScalar+0x28a>
 80024a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80024ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e03c      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d803      	bhi.n	80024c0 <canardDecodeScalar+0x298>
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e035      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b40      	cmp	r3, #64	@ 0x40
 80024c4:	d805      	bhi.n	80024d2 <canardDecodeScalar+0x2aa>
 80024c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80024cc:	e9c1 2300 	strd	r2, r3, [r1]
 80024d0:	e02c      	b.n	800252c <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 80024d2:	f06f 0308 	mvn.w	r3, #8
 80024d6:	e02b      	b.n	8002530 <canardDecodeScalar+0x308>
         }
     }
     else
     {
         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d104      	bne.n	80024e8 <canardDecodeScalar+0x2c0>
 80024de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e021      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d804      	bhi.n	80024f8 <canardDecodeScalar+0x2d0>
 80024ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e019      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d803      	bhi.n	8002506 <canardDecodeScalar+0x2de>
 80024fe:	8c3a      	ldrh	r2, [r7, #32]
 8002500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e012      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b20      	cmp	r3, #32
 800250a:	d803      	bhi.n	8002514 <canardDecodeScalar+0x2ec>
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e00b      	b.n	800252c <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b40      	cmp	r3, #64	@ 0x40
 8002518:	d805      	bhi.n	8002526 <canardDecodeScalar+0x2fe>
 800251a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800251e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002520:	e9c1 2300 	strd	r2, r3, [r1]
 8002524:	e002      	b.n	800252c <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8002526:	f06f 0308 	mvn.w	r3, #8
 800252a:	e001      	b.n	8002530 <canardDecodeScalar+0x308>
         }
     }

     CANARD_ASSERT(result <= bit_length);
     CANARD_ASSERT(result > 0);
     return result;
 800252c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 }
 8002530:	4618      	mov	r0, r3
 8002532:	3734      	adds	r7, #52	@ 0x34
 8002534:	46bd      	mov	sp, r7
 8002536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800253a <canardEncodeScalar>:

 void canardEncodeScalar(void* destination,
                         uint32_t bit_offset,
                         uint8_t bit_length,
                         const void* value)
 {
 800253a:	b580      	push	{r7, lr}
 800253c:	b08a      	sub	sp, #40	@ 0x28
 800253e:	af02      	add	r7, sp, #8
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4613      	mov	r3, r2
 8002548:	71fb      	strb	r3, [r7, #7]
      * Maybe not the best solution, but it simplifies the API.
      */
     CANARD_ASSERT(destination != NULL);
     CANARD_ASSERT(value != NULL);

     if (bit_length > 64)
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d901      	bls.n	8002554 <canardEncodeScalar+0x1a>
     {
         CANARD_ASSERT(false);
         bit_length = 64;
 8002550:	2340      	movs	r3, #64	@ 0x40
 8002552:	71fb      	strb	r3, [r7, #7]
     }

     if (bit_length < 1)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <canardEncodeScalar+0x24>
     {
         CANARD_ASSERT(false);
         bit_length = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	71fb      	strb	r3, [r7, #7]
         uint32_t u32;
         uint64_t u64;
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	2208      	movs	r2, #8
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f003 ffca 	bl	8006500 <memset>

     uint8_t std_byte_length = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]

     // Extra most significant bits can be safely ignored here.
     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <canardEncodeScalar+0x48>
 8002576:	2301      	movs	r3, #1
 8002578:	77fb      	strb	r3, [r7, #31]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	743b      	strb	r3, [r7, #16]
 8002580:	e024      	b.n	80025cc <canardEncodeScalar+0x92>
     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d805      	bhi.n	8002594 <canardEncodeScalar+0x5a>
 8002588:	2301      	movs	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	743b      	strb	r3, [r7, #16]
 8002592:	e01b      	b.n	80025cc <canardEncodeScalar+0x92>
     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d805      	bhi.n	80025a6 <canardEncodeScalar+0x6c>
 800259a:	2302      	movs	r3, #2
 800259c:	77fb      	strb	r3, [r7, #31]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	823b      	strh	r3, [r7, #16]
 80025a4:	e012      	b.n	80025cc <canardEncodeScalar+0x92>
     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d805      	bhi.n	80025b8 <canardEncodeScalar+0x7e>
 80025ac:	2304      	movs	r3, #4
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e009      	b.n	80025cc <canardEncodeScalar+0x92>
     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2b40      	cmp	r3, #64	@ 0x40
 80025bc:	d806      	bhi.n	80025cc <canardEncodeScalar+0x92>
 80025be:	2308      	movs	r3, #8
 80025c0:	77fb      	strb	r3, [r7, #31]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
             storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
         }
     }
 #endif

     if (isBigEndian())
 80025cc:	f000 fbfb 	bl	8002dc6 <isBigEndian>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <canardEncodeScalar+0xaa>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 80025d6:	7ffa      	ldrb	r2, [r7, #31]
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fc02 	bl	8002de8 <swapByteOrder>
      * Extra least significant bits will be filled with zeroes, which is fine.
      * Extra most significant bits will be discarded here.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d014      	beq.n	800261a <canardEncodeScalar+0xe0>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	08db      	lsrs	r3, r3, #3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3320      	adds	r3, #32
 80025f8:	443b      	add	r3, r7
 80025fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80025fe:	461a      	mov	r2, r3
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	425b      	negs	r3, r3
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	409a      	lsls	r2, r3
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	3320      	adds	r3, #32
 8002614:	443b      	add	r3, r7
 8002616:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Now, the storage contains properly serialized scalar. Copying it out.
      */
     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800261a:	79fa      	ldrb	r2, [r7, #7]
 800261c:	f107 0010 	add.w	r0, r7, #16
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2100      	movs	r1, #0
 8002628:	f000 fa61 	bl	8002aee <copyBitArray>
 }
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <incrementTransferID>:
     }
     return d;
 }

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	b2da      	uxtb	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b1f      	cmp	r3, #31
 800264e:	d902      	bls.n	8002656 <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
     }
 }
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d801      	bhi.n	8002676 <dlcToDataLength+0x14>
         return dlc;
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	e01e      	b.n	80026b4 <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d101      	bne.n	8002680 <dlcToDataLength+0x1e>
         return 12;
 800267c:	230c      	movs	r3, #12
 800267e:	e019      	b.n	80026b4 <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b0a      	cmp	r3, #10
 8002684:	d101      	bne.n	800268a <dlcToDataLength+0x28>
         return 16;
 8002686:	2310      	movs	r3, #16
 8002688:	e014      	b.n	80026b4 <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b0b      	cmp	r3, #11
 800268e:	d101      	bne.n	8002694 <dlcToDataLength+0x32>
         return 20;
 8002690:	2314      	movs	r3, #20
 8002692:	e00f      	b.n	80026b4 <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d101      	bne.n	800269e <dlcToDataLength+0x3c>
         return 24;
 800269a:	2318      	movs	r3, #24
 800269c:	e00a      	b.n	80026b4 <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b0d      	cmp	r3, #13
 80026a2:	d101      	bne.n	80026a8 <dlcToDataLength+0x46>
         return 32;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e005      	b.n	80026b4 <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b0e      	cmp	r3, #14
 80026ac:	d101      	bne.n	80026b2 <dlcToDataLength+0x50>
         return 48;
 80026ae:	2330      	movs	r3, #48	@ 0x30
 80026b0:	e000      	b.n	80026b4 <dlcToDataLength+0x52>
     }
     return 64;
 80026b2:	2340      	movs	r3, #64	@ 0x40
 }
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d801      	bhi.n	80026d4 <dataLengthToDlc+0x14>
         return data_length;
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	e01e      	b.n	8002712 <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d801      	bhi.n	80026de <dataLengthToDlc+0x1e>
         return 9;
 80026da:	2309      	movs	r3, #9
 80026dc:	e019      	b.n	8002712 <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d801      	bhi.n	80026e8 <dataLengthToDlc+0x28>
         return 10;
 80026e4:	230a      	movs	r3, #10
 80026e6:	e014      	b.n	8002712 <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	2b14      	cmp	r3, #20
 80026ec:	d801      	bhi.n	80026f2 <dataLengthToDlc+0x32>
         return 11;
 80026ee:	230b      	movs	r3, #11
 80026f0:	e00f      	b.n	8002712 <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2b18      	cmp	r3, #24
 80026f6:	d801      	bhi.n	80026fc <dataLengthToDlc+0x3c>
         return 12;
 80026f8:	230c      	movs	r3, #12
 80026fa:	e00a      	b.n	8002712 <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d801      	bhi.n	8002706 <dataLengthToDlc+0x46>
         return 13;
 8002702:	230d      	movs	r3, #13
 8002704:	e005      	b.n	8002712 <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b30      	cmp	r3, #48	@ 0x30
 800270a:	d801      	bhi.n	8002710 <dataLengthToDlc+0x50>
         return 14;
 800270c:	230e      	movs	r3, #14
 800270e:	e000      	b.n	8002712 <dataLengthToDlc+0x52>
     }
     return 15;
 8002710:	230f      	movs	r3, #15
 }
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 800271e:	b580      	push	{r7, lr}
 8002720:	b08c      	sub	sp, #48	@ 0x30
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8002736:	f06f 0301 	mvn.w	r3, #1
 800273a:	e11c      	b.n	8002976 <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	8c1b      	ldrh	r3, [r3, #32]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <enqueueTxFrames+0x34>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800274c:	f06f 0301 	mvn.w	r3, #1
 8002750:	e111      	b.n	8002976 <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8002756:	2308      	movs	r3, #8
 8002758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	8c1a      	ldrh	r2, [r3, #32]
 8002760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002764:	b29b      	uxth	r3, r3
 8002766:	429a      	cmp	r2, r3
 8002768:	d24b      	bcs.n	8002802 <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	330c      	adds	r3, #12
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f94a 	bl	8002a08 <createTxItem>
 8002774:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800277c:	f06f 0302 	mvn.w	r3, #2
 8002780:	e0f9      	b.n	8002976 <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f103 0008 	add.w	r0, r3, #8
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	69d9      	ldr	r1, [r3, #28]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	8c1b      	ldrh	r3, [r3, #32]
 8002790:	461a      	mov	r2, r3
 8002792:	f003 fee3 	bl	800655c <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	8c1b      	ldrh	r3, [r3, #32]
 800279a:	3301      	adds	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff8e 	bl	80026c0 <dataLengthToDlc>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff5b 	bl	8002662 <dlcToDataLength>
 80027ac:	4603      	mov	r3, r0
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	8c1b      	ldrh	r3, [r3, #32]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	8c12      	ldrh	r2, [r2, #32]
 80027d4:	4611      	mov	r1, r2
 80027d6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	440b      	add	r3, r1
 80027e0:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f8c5 	bl	800297e <pushTxQueue>
         result++;
 80027f4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002800:	e0b7      	b.n	8002972 <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	8c1b      	ldrh	r3, [r3, #32]
 8002816:	3302      	adds	r3, #2
 8002818:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800281e:	3b01      	subs	r3, #1
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8002824:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002826:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800282a:	3b01      	subs	r3, #1
 800282c:	441a      	add	r2, r3
 800282e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002832:	fb92 f3f3 	sdiv	r3, r2, r3
 8002836:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8a9a      	ldrh	r2, [r3, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8adb      	ldrh	r3, [r3, #22]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 8002844:	8bfa      	ldrh	r2, [r7, #30]
 8002846:	8c3b      	ldrh	r3, [r7, #32]
 8002848:	429a      	cmp	r2, r3
 800284a:	d202      	bcs.n	8002852 <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800284c:	f06f 0302 	mvn.w	r3, #2
 8002850:	e091      	b.n	8002976 <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 8002856:	e086      	b.n	8002966 <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	330c      	adds	r3, #12
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f8d3 	bl	8002a08 <createTxItem>
 8002862:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 800286a:	f06f 0302 	mvn.w	r3, #2
 800286e:	e082      	b.n	8002976 <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 8002874:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	b29b      	uxth	r3, r3
 8002888:	b2da      	uxtb	r2, r3
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	725a      	strb	r2, [r3, #9]
                 i = 2;
 800288e:	2302      	movs	r3, #2
 8002890:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002892:	e012      	b.n	80028ba <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8002898:	e00f      	b.n	80028ba <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80028a0:	441a      	add	r2, r3
 80028a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028a4:	7811      	ldrb	r1, [r2, #0]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	460a      	mov	r2, r1
 80028ac:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80028ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028b0:	3301      	adds	r3, #1
 80028b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80028b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80028b6:	3301      	adds	r3, #1
 80028b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80028ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028c0:	3b01      	subs	r3, #1
 80028c2:	429a      	cmp	r2, r3
 80028c4:	da04      	bge.n	80028d0 <enqueueTxFrames+0x1b2>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	8c1b      	ldrh	r3, [r3, #32]
 80028ca:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3e4      	bcc.n	800289a <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	8c1b      	ldrh	r3, [r3, #32]
 80028d4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d002      	beq.n	80028e0 <enqueueTxFrames+0x1c2>
 80028da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80028de:	e000      	b.n	80028e2 <enqueueTxFrames+0x1c4>
 80028e0:	2340      	movs	r3, #64	@ 0x40
 80028e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 80028e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028e8:	3301      	adds	r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fee7 	bl	80026c0 <dataLengthToDlc>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff feb4 	bl	8002662 <dlcToDataLength>
 80028fa:	4603      	mov	r3, r0
 80028fc:	3b01      	subs	r3, #1
 80028fe:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8002900:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002904:	015b      	lsls	r3, r3, #5
 8002906:	b2da      	uxtb	r2, r3
 8002908:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800290c:	4313      	orrs	r3, r2
 800290e:	b2d9      	uxtb	r1, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	b2da      	uxtb	r2, r3
 800291c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800291e:	430a      	orrs	r2, r1
 8002920:	b2d1      	uxtb	r1, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	460a      	mov	r2, r1
 8002928:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 8002934:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f81b 	bl	800297e <pushTxQueue>

             result++;
 8002948:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800294c:	b29b      	uxth	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 8002954:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	8c1b      	ldrh	r3, [r3, #32]
 800296a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800296c:	429a      	cmp	r2, r3
 800296e:	f47f af73 	bne.w	8002858 <enqueueTxFrames+0x13a>
         }
     }

     return result;
 8002972:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 8002976:	4618      	mov	r0, r3
 8002978:	3730      	adds	r7, #48	@ 0x30
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 8002996:	e034      	b.n	8002a02 <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 80029a4:	e02a      	b.n	80029fc <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 f840 	bl	8002a36 <isPriorityHigher>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d106      	bne.n	80029d4 <pushTxQueue+0x56>
             {
                 item->next = queue;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 80029d2:	e016      	b.n	8002a02 <pushTxQueue+0x84>
                 previous->next = item;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]
             return;
 80029e0:	e00f      	b.n	8002a02 <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <pushTxQueue+0x74>
             {
                 queue->next = item;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	601a      	str	r2, [r3, #0]
                 return;
 80029f0:	e007      	b.n	8002a02 <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d1      	bne.n	80029a6 <pushTxQueue+0x28>
             }
         }
     }
 }
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 facb 	bl	8002fac <allocateBlock>
 8002a16:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <createTxItem+0x1a>
     {
         return NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e005      	b.n	8002a2e <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 8002a22:	2214      	movs	r2, #20
 8002a24:	2100      	movs	r1, #0
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f003 fd6a 	bl	8006500 <memset>
     return item;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 }
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 8002a36:	b480      	push	{r7}
 8002a38:	b089      	sub	sp, #36	@ 0x24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002a46:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002a4e:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	0fdb      	lsrs	r3, r3, #31
 8002a54:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0fdb      	lsrs	r3, r3, #31
 8002a5a:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 8002a5c:	7dfa      	ldrb	r2, [r7, #23]
 8002a5e:	7dbb      	ldrb	r3, [r7, #22]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d01d      	beq.n	8002aa0 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <isPriorityHigher+0x3a>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	e000      	b.n	8002a72 <isPriorityHigher+0x3c>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8002a74:	7dbb      	ldrb	r3, [r7, #22]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <isPriorityHigher+0x4a>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	e000      	b.n	8002a82 <isPriorityHigher+0x4c>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d007      	beq.n	8002a9c <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	bf34      	ite	cc
 8002a94:	2301      	movcc	r3, #1
 8002a96:	2300      	movcs	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e022      	b.n	8002ae2 <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 8002a9c:	7dbb      	ldrb	r3, [r7, #22]
 8002a9e:	e020      	b.n	8002ae2 <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d105      	bne.n	8002ad4 <isPriorityHigher+0x9e>
 8002ac8:	7d7a      	ldrb	r2, [r7, #21]
 8002aca:	7d3b      	ldrb	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 8002ad0:	7d3b      	ldrb	r3, [r7, #20]
 8002ad2:	e006      	b.n	8002ae2 <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	bf34      	ite	cc
 8002adc:	2301      	movcc	r3, #1
 8002ade:	2300      	movcs	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 }
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	@ 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <copyBitArray>:
 /**
  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
  */
 void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                         uint8_t* dst, uint32_t dst_offset)
 {
 8002aee:	b480      	push	{r7}
 8002af0:	b089      	sub	sp, #36	@ 0x24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
     CANARD_ASSERT(src_len > 0U);

     // Normalizing inputs
     src += src_offset / 8U;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
     dst += dst_offset / 8U;
 8002b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	603b      	str	r3, [r7, #0]

     src_offset %= 8U;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60bb      	str	r3, [r7, #8]
     dst_offset %= 8U;
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

     const size_t last_bit = src_offset + src_len;
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	61fb      	str	r3, [r7, #28]
     while (last_bit - src_offset)
 8002b28:	e04d      	b.n	8002bc6 <copyBitArray+0xd8>
     {
         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	76fb      	strb	r3, [r7, #27]
         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	76bb      	strb	r3, [r7, #26]

         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8002b3e:	7eba      	ldrb	r2, [r7, #26]
 8002b40:	7efb      	ldrb	r3, [r7, #27]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	bf38      	it	cc
 8002b46:	4613      	movcc	r3, r2
 8002b48:	767b      	strb	r3, [r7, #25]
         const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8002b4a:	7e7b      	ldrb	r3, [r7, #25]
 8002b4c:	f1c3 0208 	rsb	r2, r3, #8
 8002b50:	69f9      	ldr	r1, [r7, #28]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1acb      	subs	r3, r1, r3
 8002b56:	4293      	cmp	r3, r2
 8002b58:	bf28      	it	cs
 8002b5a:	4613      	movcs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
 #else
         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8002b5e:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	7ebb      	ldrb	r3, [r7, #26]
 8002b6e:	fa42 f303 	asr.w	r3, r2, r3
 8002b72:	74fb      	strb	r3, [r7, #19]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	08db      	lsrs	r3, r3, #3
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	7efb      	ldrb	r3, [r7, #27]
 8002b82:	409a      	lsls	r2, r3
 8002b84:	7ebb      	ldrb	r3, [r7, #26]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	74bb      	strb	r3, [r7, #18]

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	08db      	lsrs	r3, r3, #3
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b2d9      	uxtb	r1, r3
 8002ba0:	7cba      	ldrb	r2, [r7, #18]
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
         dst[dst_offset / 8U] =
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	4403      	add	r3, r0
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	b2d2      	uxtb	r2, r2
         dst[dst_offset / 8U] =
 8002bb4:	701a      	strb	r2, [r3, #0]
 #endif

         src_offset += copy_bits;
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60bb      	str	r3, [r7, #8]
         dst_offset += copy_bits;
 8002bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
     while (last_bit - src_offset)
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d1ad      	bne.n	8002b2a <copyBitArray+0x3c>
     }
 }
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3724      	adds	r7, #36	@ 0x24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <descatterTransferPayload>:

 CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                  uint32_t bit_offset,
                                                  uint8_t bit_length,
                                                  void* output)
 {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b090      	sub	sp, #64	@ 0x40
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
     CANARD_ASSERT(transfer != 0);

     if (bit_offset >= transfer->payload_len * 8)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8a9b      	ldrh	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d301      	bcc.n	8002bfe <descatterTransferPayload+0x22>
     {
         return 0;       // Out of range, reading zero bits
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e0df      	b.n	8002dbe <descatterTransferPayload+0x1e2>
     }

     if (bit_offset + bit_length > transfer->payload_len * 8)
 8002bfe:	79fa      	ldrb	r2, [r7, #7]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4413      	add	r3, r2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	8a92      	ldrh	r2, [r2, #20]
 8002c08:	00d2      	lsls	r2, r2, #3
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d908      	bls.n	8002c20 <descatterTransferPayload+0x44>
     {
         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8a9b      	ldrh	r3, [r3, #20]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	71fb      	strb	r3, [r7, #7]
     }

     CANARD_ASSERT(bit_length > 0);

     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <descatterTransferPayload+0x56>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80b9 	beq.w	8002da4 <descatterTransferPayload+0x1c8>
         /*
          * This part is hideously complicated and probably should be redesigned.
          * The objective here is to copy the requested number of bits from scattered storage into the temporary
          * local storage. We go through great pains to ensure that all corner cases are handled correctly.
          */
         uint32_t input_bit_offset = bit_offset;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
         uint8_t output_bit_offset = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t remaining_bit_length = bit_length;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

         // Reading head
         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8002c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c44:	2b27      	cmp	r3, #39	@ 0x27
 8002c46:	d82d      	bhi.n	8002ca4 <descatterTransferPayload+0xc8>
         {
             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8002c48:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d305      	bcc.n	8002c62 <descatterTransferPayload+0x86>
 8002c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	e001      	b.n	8002c66 <descatterTransferPayload+0x8a>
 8002c62:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6898      	ldr	r0, [r3, #8]
 8002c6e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c7a:	f7ff ff38 	bl	8002aee <copyBitArray>

             input_bit_offset += amount;
 8002c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c84:	4413      	add	r3, r2
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8002c88:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c90:	4413      	add	r3, r2
 8002c92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8002c96:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         }

         // Reading middle
         uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8a9b      	ldrh	r3, [r3, #20]
 8002ca8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002cac:	3b05      	subs	r3, #5
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8002cb2:	2328      	movs	r3, #40	@ 0x28
 8002cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
         const CanardBufferBlock* block = transfer->payload_middle;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24

         while ((block != NULL) && (remaining_bit_length > 0))
 8002cbc:	e044      	b.n	8002d48 <descatterTransferPayload+0x16c>
         {
             CANARD_ASSERT(remaining_bits > 0);
             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8002cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc0:	2be0      	cmp	r3, #224	@ 0xe0
 8002cc2:	bf28      	it	cs
 8002cc4:	23e0      	movcs	r3, #224	@ 0xe0
 8002cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
                                                                          remaining_bits);

             // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
             if (block_end_bit_offset > input_bit_offset)
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d92e      	bls.n	8002d32 <descatterTransferPayload+0x156>
             {
                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8002cd4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002cd8:	69f9      	ldr	r1, [r7, #28]
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	1acb      	subs	r3, r1, r3
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d306      	bcc.n	8002cf0 <descatterTransferPayload+0x114>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e001      	b.n	8002cf4 <descatterTransferPayload+0x118>
 8002cf0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002cf4:	76fb      	strb	r3, [r7, #27]

                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8002cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]

                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	1d18      	adds	r0, r3, #4
 8002d02:	7efa      	ldrb	r2, [r7, #27]
 8002d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	f7ff feee 	bl	8002aee <copyBitArray>

                 input_bit_offset += amount;
 8002d12:	7efb      	ldrb	r3, [r7, #27]
 8002d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d16:	4413      	add	r3, r2
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8002d1a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002d1e:	7efb      	ldrb	r3, [r7, #27]
 8002d20:	4413      	add	r3, r2
 8002d22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8002d26:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d2a:	7efb      	ldrb	r3, [r7, #27]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
             }

             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
             remaining_bits -= block_end_bit_offset - block_bit_offset;
 8002d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
             block_bit_offset = block_end_bit_offset;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
             block = block->next;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
         while ((block != NULL) && (remaining_bit_length > 0))
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <descatterTransferPayload+0x17a>
 8002d4e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1b3      	bne.n	8002cbe <descatterTransferPayload+0xe2>
         }

         CANARD_ASSERT(remaining_bit_length <= remaining_bits);

         // Reading tail
         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02c      	beq.n	8002db8 <descatterTransferPayload+0x1dc>
 8002d5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d028      	beq.n	8002db8 <descatterTransferPayload+0x1dc>
         {
             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
             const uint32_t offset = input_bit_offset - block_bit_offset;
 8002d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	613b      	str	r3, [r7, #16]

             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6918      	ldr	r0, [r3, #16]
 8002d72:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6939      	ldr	r1, [r7, #16]
 8002d80:	f7ff feb5 	bl	8002aee <copyBitArray>
                          output_bit_offset);

             input_bit_offset += remaining_bit_length;
 8002d84:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d8a:	4413      	add	r3, r2
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8002d8e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002d92:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002d96:	4413      	add	r3, r2
 8002d98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
     {
 8002da2:	e009      	b.n	8002db8 <descatterTransferPayload+0x1dc>
         CANARD_ASSERT(output_bit_offset <= 64);
         CANARD_ASSERT(remaining_bit_length == 0);
     }
     else                                                                    // Single frame
     {
         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6898      	ldr	r0, [r3, #8]
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	f7ff fe9c 	bl	8002aee <copyBitArray>
 8002db6:	e000      	b.n	8002dba <descatterTransferPayload+0x1de>
     {
 8002db8:	bf00      	nop
     }

     return bit_length;
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	b21b      	sxth	r3, r3
 }
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3738      	adds	r7, #56	@ 0x38
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <isBigEndian>:

 CANARD_INTERNAL bool isBigEndian(void)
 {
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 #else
         uint16_t a;
         uint8_t b[2];
 #endif
     } u;
     u.a = 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	80bb      	strh	r3, [r7, #4]
     return u.b[1] == 1;                             // Some don't...
 8002dd0:	797b      	ldrb	r3, [r7, #5]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 #endif
 }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <swapByteOrder>:

 CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
 {
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(data != NULL);

     uint8_t* const bytes = (uint8_t*) data;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

     size_t fwd = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
     size_t rev = size - 1;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]

     while (fwd < rev)
 8002e00:	e017      	b.n	8002e32 <swapByteOrder+0x4a>
     {
         const uint8_t x = bytes[fwd];
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	72fb      	strb	r3, [r7, #11]
         bytes[fwd] = bytes[rev];
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	441a      	add	r2, r3
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	440b      	add	r3, r1
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	701a      	strb	r2, [r3, #0]
         bytes[rev] = x;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	7afa      	ldrb	r2, [r7, #11]
 8002e24:	701a      	strb	r2, [r3, #0]
         fwd++;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
         rev--;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
     while (fwd < rev)
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3e3      	bcc.n	8002e02 <swapByteOrder+0x1a>
     }
 }
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	460a      	mov	r2, r1
 8002e52:	80fb      	strh	r3, [r7, #6]
 8002e54:	4613      	mov	r3, r2
 8002e56:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8002e58:	797b      	ldrb	r3, [r7, #5]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	4053      	eors	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e012      	b.n	8002e92 <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 8002e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da08      	bge.n	8002e86 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	80fb      	strh	r3, [r7, #6]
 8002e84:	e002      	b.n	8002e8c <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b07      	cmp	r3, #7
 8002e96:	d9e9      	bls.n	8002e6c <crcAddByte+0x24>
         }
     }
     return crc_val;
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 }
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 8002ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea8:	b087      	sub	sp, #28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4601      	mov	r1, r0
 8002eae:	e9c7 2300 	strd	r2, r3, [r7]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	82fb      	strh	r3, [r7, #22]
 8002eba:	e01b      	b.n	8002ef4 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002ebc:	8af9      	ldrh	r1, [r7, #22]
 8002ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec2:	f1c1 0620 	rsb	r6, r1, #32
 8002ec6:	f1a1 0020 	sub.w	r0, r1, #32
 8002eca:	fa22 f401 	lsr.w	r4, r2, r1
 8002ece:	fa03 f606 	lsl.w	r6, r3, r6
 8002ed2:	4334      	orrs	r4, r6
 8002ed4:	fa23 f000 	lsr.w	r0, r3, r0
 8002ed8:	4304      	orrs	r4, r0
 8002eda:	fa23 f501 	lsr.w	r5, r3, r1
 8002ede:	b2e2      	uxtb	r2, r4
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ffaf 	bl	8002e48 <crcAddByte>
 8002eea:	4603      	mov	r3, r0
 8002eec:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002eee:	8afb      	ldrh	r3, [r7, #22]
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	82fb      	strh	r3, [r7, #22]
 8002ef4:	8afb      	ldrh	r3, [r7, #22]
 8002ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ef8:	d9e0      	bls.n	8002ebc <crcAddSignature+0x16>
     }
     return crc_val;
 8002efa:	89fb      	ldrh	r3, [r7, #14]
 }
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f04 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8002f12:	e00a      	b.n	8002f2a <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	60ba      	str	r2, [r7, #8]
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff91 	bl	8002e48 <crcAddByte>
 8002f26:	4603      	mov	r3, r0
 8002f28:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ef      	bne.n	8002f14 <crcAdd+0x10>
     }
     return crc_val;
 8002f34:	89fb      	ldrh	r3, [r7, #14]
 }
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <initPoolAllocator>:
  *  Pool Allocator functions
  */
 CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                        void* buf,
                                        uint16_t buf_len)
 {
 8002f3e:	b480      	push	{r7}
 8002f40:	b089      	sub	sp, #36	@ 0x24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80fb      	strh	r3, [r7, #6]
     size_t current_index = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
     CanardPoolAllocatorBlock *abuf = buf;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	617b      	str	r3, [r7, #20]
     allocator->arena = buf;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	611a      	str	r2, [r3, #16]
     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	61bb      	str	r3, [r7, #24]
     while (current_index < buf_len)
 8002f60:	e00b      	b.n	8002f7a <initPoolAllocator+0x3c>
     {
         *current_block = &abuf[current_index];
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	441a      	add	r2, r3
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	601a      	str	r2, [r3, #0]
         current_block = &((*current_block)->next);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61bb      	str	r3, [r7, #24]
         current_index++;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	3301      	adds	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
     while (current_index < buf_len)
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3ef      	bcc.n	8002f62 <initPoolAllocator+0x24>
     }
     *current_block = NULL;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

     allocator->statistics.capacity_blocks = buf_len;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	811a      	strh	r2, [r3, #8]
     allocator->statistics.current_usage_blocks = 0;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	815a      	strh	r2, [r3, #10]
     allocator->statistics.peak_usage_blocks = 0;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	819a      	strh	r2, [r3, #12]
     // user should initialize semaphore after the canardInit
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 }
 8002fa0:	bf00      	nop
 8002fa2:	3724      	adds	r7, #36	@ 0x24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <allocateBlock>:

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e018      	b.n	8002ff2 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	895b      	ldrh	r3, [r3, #10]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	899a      	ldrh	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	895b      	ldrh	r3, [r3, #10]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d203      	bcs.n	8002ff0 <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	895a      	ldrh	r2, [r3, #10]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 }
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	895b      	ldrh	r3, [r3, #10]
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <_Z12FDCAN_Configv>:
FDCAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

FDCAN_FilterTypeDef sFilterConfig;

void FDCAN_Config(void) {
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0


    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 800303a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800303e:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 8003048:	2202      	movs	r2, #2
 800304a:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 800304e:	2201      	movs	r2, #1
 8003050:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = NODE_ID;
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 8003054:	2201      	movs	r2, #1
 8003056:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x0; // receive messages from all ids
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 800305e:	4908      	ldr	r1, [pc, #32]	@ (8003080 <_Z12FDCAN_Configv+0x4c>)
 8003060:	4808      	ldr	r0, [pc, #32]	@ (8003084 <_Z12FDCAN_Configv+0x50>)
 8003062:	f000 fe49 	bl	8003cf8 <HAL_FDCAN_ConfigFilter>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <_Z12FDCAN_Configv+0x46>
        Error_Handler();
 8003076:	f000 f975 	bl	8003364 <Error_Handler>
    }
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200009f4 	.word	0x200009f4
 8003084:	2000093c 	.word	0x2000093c

08003088 <_Z14FDCAN_Activatev>:

void FDCAN_Activate(void) {
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800308c:	2200      	movs	r2, #0
 800308e:	2101      	movs	r1, #1
 8003090:	4807      	ldr	r0, [pc, #28]	@ (80030b0 <_Z14FDCAN_Activatev+0x28>)
 8003092:	f001 f811 	bl	80040b8 <HAL_FDCAN_ActivateNotification>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <_Z14FDCAN_Activatev+0x22>
        Error_Handler();
 80030a6:	f000 f95d 	bl	8003364 <Error_Handler>
    }
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000093c 	.word	0x2000093c

080030b4 <HAL_FDCAN_RxFifo0Callback>:
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
        Error_Handler();
    }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]

//    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_FDCAN_RxFifo0Callback+0x38>)
 80030c0:	4a0b      	ldr	r2, [pc, #44]	@ (80030f0 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80030c2:	2140      	movs	r1, #64	@ 0x40
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fedd 	bl	8003e84 <HAL_FDCAN_GetRxMessage>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_FDCAN_RxFifo0Callback+0x2a>
            // Process received data (e.g., print it)
        	Error_Handler();
 80030da:	f000 f943 	bl	8003364 <Error_Handler>
        }

        FDCAN_Activate(); // test with and without this re-activation
 80030de:	f7ff ffd3 	bl	8003088 <_Z14FDCAN_Activatev>
//    }
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200009ec 	.word	0x200009ec
 80030f0:	200009c4 	.word	0x200009c4
 80030f4:	00000000 	.word	0x00000000

080030f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f5ad 6d47 	sub.w	sp, sp, #3184	@ 0xc70
 80030fe:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003100:	f000 faee 	bl	80036e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN can(&hfdcan1);
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	492f      	ldr	r1, [pc, #188]	@ (80031c8 <main+0xd0>)
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fc72 	bl	80019f4 <_ZN3CANC1EP19FDCAN_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003110:	f000 f862 	bl	80031d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003114:	f000 f90e 	bl	8003334 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8003118:	f000 f8be 	bl	8003298 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN_Activate();
 800311c:	f7ff ffb4 	bl	8003088 <_Z14FDCAN_Activatev>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8003120:	4829      	ldr	r0, [pc, #164]	@ (80031c8 <main+0xd0>)
 8003122:	f000 fe43 	bl	8003dac <HAL_FDCAN_Start>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <main+0x42>
	  Error_Handler();
 8003136:	f000 f915 	bl	8003364 <Error_Handler>
  }

  TxHeader.Identifier = NODE_ID;
 800313a:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <main+0xd4>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8003140:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <main+0xd4>)
 8003142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003146:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003148:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <main+0xd4>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800314e:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <main+0xd4>)
 8003150:	2208      	movs	r2, #8
 8003152:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <main+0xd4>)
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800315a:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <main+0xd4>)
 800315c:	2200      	movs	r2, #0
 800315e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <main+0xd4>)
 8003162:	2200      	movs	r2, #0
 8003164:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003166:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <main+0xd4>)
 8003168:	2200      	movs	r2, #0
 800316a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800316c:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <main+0xd4>)
 800316e:	2200      	movs	r2, #0
 8003170:	621a      	str	r2, [r3, #32]
//
//	  FDCAN_Transmit();
//
//	  HAL_Delay(10);

	  uint8_t heartbeat_payload[7] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
 8003172:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8003176:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 800317a:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <main+0xd8>)
 800317c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003180:	6018      	str	r0, [r3, #0]
 8003182:	3304      	adds	r3, #4
 8003184:	8019      	strh	r1, [r3, #0]
 8003186:	3302      	adds	r3, #2
 8003188:	0c0a      	lsrs	r2, r1, #16
 800318a:	701a      	strb	r2, [r3, #0]

	  can.broadcast(
 800318c:	f107 0008 	add.w	r0, r7, #8
 8003190:	2307      	movs	r3, #7
 8003192:	9304      	str	r3, [sp, #16]
 8003194:	463b      	mov	r3, r7
 8003196:	9303      	str	r3, [sp, #12]
 8003198:	2308      	movs	r3, #8
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <main+0xdc>)
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	f240 1355 	movw	r3, #341	@ 0x155
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	a306      	add	r3, pc, #24	@ (adr r3, 80031c0 <main+0xc8>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	2102      	movs	r1, #2
 80031ae:	f7fe feff 	bl	8001fb0 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			  UAVCAN_PROTOCOL_NODESTATUS_ID,
			  &transfer_id,
			  CANARD_TRANSFER_PRIORITY_HIGH,
			  heartbeat_payload,
			  sizeof(heartbeat_payload));
	  can.routineTasks();
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fdfe 	bl	8001db8 <_ZN3CAN12routineTasksEv>
//	      for (int i = 0; i < 8; i++) {
//	          printf("%02X ", RxData[i]);
//	      }
//	      printf("\n");
//	  }
  }
 80031bc:	bf00      	nop
 80031be:	e7d8      	b.n	8003172 <main+0x7a>
 80031c0:	c1a7c6f1 	.word	0xc1a7c6f1
 80031c4:	0f0868d0 	.word	0x0f0868d0
 80031c8:	2000093c 	.word	0x2000093c
 80031cc:	200009a0 	.word	0x200009a0
 80031d0:	08006624 	.word	0x08006624
 80031d4:	20000a0c 	.word	0x20000a0c

080031d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b098      	sub	sp, #96	@ 0x60
 80031dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031de:	f107 0318 	add.w	r3, r7, #24
 80031e2:	2248      	movs	r2, #72	@ 0x48
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 f98a 	bl	8006500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80031fa:	2000      	movs	r0, #0
 80031fc:	f001 fc30 	bl	8004a60 <HAL_PWREx_ControlVoltageScaling>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8003210:	f000 f8a8 	bl	8003364 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003214:	2302      	movs	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800321e:	2340      	movs	r3, #64	@ 0x40
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003222:	2302      	movs	r3, #2
 8003224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003226:	2302      	movs	r3, #2
 8003228:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800322a:	2304      	movs	r3, #4
 800322c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800322e:	2337      	movs	r3, #55	@ 0x37
 8003230:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003232:	2307      	movs	r3, #7
 8003234:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003236:	2302      	movs	r3, #2
 8003238:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800323a:	2302      	movs	r3, #2
 800323c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800323e:	f107 0318 	add.w	r3, r7, #24
 8003242:	4618      	mov	r0, r3
 8003244:	f001 fc9c 	bl	8004b80 <HAL_RCC_OscConfig>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8003258:	f000 f884 	bl	8003364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325c:	230f      	movs	r3, #15
 800325e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003260:	2303      	movs	r3, #3
 8003262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2105      	movs	r1, #5
 8003274:	4618      	mov	r0, r3
 8003276:	f002 f959 	bl	800552c <HAL_RCC_ClockConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800328a:	f000 f86b 	bl	8003364 <Error_Handler>
  }
}
 800328e:	bf00      	nop
 8003290:	3760      	adds	r7, #96	@ 0x60
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800329c:	4b23      	ldr	r3, [pc, #140]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 800329e:	4a24      	ldr	r2, [pc, #144]	@ (8003330 <_ZL14MX_FDCAN1_Initv+0x98>)
 80032a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80032a2:	4b22      	ldr	r3, [pc, #136]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80032a8:	4b20      	ldr	r3, [pc, #128]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 80032ae:	4b1f      	ldr	r3, [pc, #124]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032b0:	2203      	movs	r2, #3
 80032b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80032ba:	4b1c      	ldr	r3, [pc, #112]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032bc:	2200      	movs	r2, #0
 80032be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80032c6:	4b19      	ldr	r3, [pc, #100]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032c8:	2204      	movs	r2, #4
 80032ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80032cc:	4b17      	ldr	r3, [pc, #92]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80032d2:	4b16      	ldr	r3, [pc, #88]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80032d8:	4b14      	ldr	r3, [pc, #80]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032da:	2201      	movs	r2, #1
 80032dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80032de:	4b13      	ldr	r3, [pc, #76]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032e0:	2204      	movs	r2, #4
 80032e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80032e4:	4b11      	ldr	r3, [pc, #68]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80032f0:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 80032fe:	2201      	movs	r2, #1
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 8003304:	2200      	movs	r2, #0
 8003306:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003308:	4808      	ldr	r0, [pc, #32]	@ (800332c <_ZL14MX_FDCAN1_Initv+0x94>)
 800330a:	f000 fba3 	bl	8003a54 <HAL_FDCAN_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800331e:	f000 f821 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_Config();
 8003322:	f7ff fe87 	bl	8003034 <_Z12FDCAN_Configv>

  /* USER CODE END FDCAN1_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000093c 	.word	0x2000093c
 8003330:	4000a400 	.word	0x4000a400

08003334 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333a:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <_ZL12MX_GPIO_Initv+0x2c>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333e:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <_ZL12MX_GPIO_Initv+0x2c>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <_ZL12MX_GPIO_Initv+0x2c>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000

08003364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003368:	b672      	cpsid	i
}
 800336a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <Error_Handler+0x8>

08003370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <HAL_MspInit+0x44>)
 8003378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337a:	4a0e      	ldr	r2, [pc, #56]	@ (80033b4 <HAL_MspInit+0x44>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6613      	str	r3, [r2, #96]	@ 0x60
 8003382:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <HAL_MspInit+0x44>)
 8003384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_MspInit+0x44>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <HAL_MspInit+0x44>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003398:	6593      	str	r3, [r2, #88]	@ 0x58
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_MspInit+0x44>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033a6:	f001 fbb7 	bl	8004b18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0ae      	sub	sp, #184	@ 0xb8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033d0:	f107 0310 	add.w	r3, r7, #16
 80033d4:	2294      	movs	r2, #148	@ 0x94
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 f891 	bl	8006500 <memset>
  if(hfdcan->Instance==FDCAN1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a26      	ldr	r2, [pc, #152]	@ (800347c <HAL_FDCAN_MspInit+0xc4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d145      	bne.n	8003474 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80033e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80033ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fb53 	bl	8005aa4 <HAL_RCCEx_PeriphCLKConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003404:	f7ff ffae 	bl	8003364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8003408:	4b1d      	ldr	r3, [pc, #116]	@ (8003480 <HAL_FDCAN_MspInit+0xc8>)
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <HAL_FDCAN_MspInit+0xc8>)
 800340e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003412:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003414:	4b1a      	ldr	r3, [pc, #104]	@ (8003480 <HAL_FDCAN_MspInit+0xc8>)
 8003416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <HAL_FDCAN_MspInit+0xc8>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003424:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_FDCAN_MspInit+0xc8>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342c:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <HAL_FDCAN_MspInit+0xc8>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003438:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800343c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003452:	2309      	movs	r3, #9
 8003454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003458:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800345c:	4619      	mov	r1, r3
 800345e:	4809      	ldr	r0, [pc, #36]	@ (8003484 <HAL_FDCAN_MspInit+0xcc>)
 8003460:	f001 f970 	bl	8004744 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	2027      	movs	r0, #39	@ 0x27
 800346a:	f000 fa76 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800346e:	2027      	movs	r0, #39	@ 0x27
 8003470:	f000 fa8d 	bl	800398e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8003474:	bf00      	nop
 8003476:	37b8      	adds	r7, #184	@ 0xb8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	4000a400 	.word	0x4000a400
 8003480:	40021000 	.word	0x40021000
 8003484:	42020000 	.word	0x42020000

08003488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <NMI_Handler+0x4>

08003490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <HardFault_Handler+0x4>

08003498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <MemManage_Handler+0x4>

080034a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <BusFault_Handler+0x4>

080034a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <UsageFault_Handler+0x4>

080034b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f000 f8f6 	bl	80036b4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}

080034cc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80034d0:	4802      	ldr	r0, [pc, #8]	@ (80034dc <FDCAN1_IT0_IRQHandler+0x10>)
 80034d2:	f000 fed7 	bl	8004284 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000093c 	.word	0x2000093c

080034e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <SystemInit+0x20>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	4a05      	ldr	r2, [pc, #20]	@ (8003500 <SystemInit+0x20>)
 80034ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800350a:	4b4f      	ldr	r3, [pc, #316]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d107      	bne.n	8003526 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003516:	4b4c      	ldr	r3, [pc, #304]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e005      	b.n	8003532 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003526:	4b48      	ldr	r3, [pc, #288]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003532:	4a46      	ldr	r2, [pc, #280]	@ (800364c <SystemCoreClockUpdate+0x148>)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800353c:	4b42      	ldr	r3, [pc, #264]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d866      	bhi.n	8003616 <SystemCoreClockUpdate+0x112>
 8003548:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <SystemCoreClockUpdate+0x4c>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003585 	.word	0x08003585
 8003554:	08003617 	.word	0x08003617
 8003558:	08003617 	.word	0x08003617
 800355c:	08003617 	.word	0x08003617
 8003560:	0800358d 	.word	0x0800358d
 8003564:	08003617 	.word	0x08003617
 8003568:	08003617 	.word	0x08003617
 800356c:	08003617 	.word	0x08003617
 8003570:	08003595 	.word	0x08003595
 8003574:	08003617 	.word	0x08003617
 8003578:	08003617 	.word	0x08003617
 800357c:	08003617 	.word	0x08003617
 8003580:	0800359d 	.word	0x0800359d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003584:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	6013      	str	r3, [r2, #0]
      break;
 800358a:	e048      	b.n	800361e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800358c:	4b30      	ldr	r3, [pc, #192]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 800358e:	4a31      	ldr	r2, [pc, #196]	@ (8003654 <SystemCoreClockUpdate+0x150>)
 8003590:	601a      	str	r2, [r3, #0]
      break;
 8003592:	e044      	b.n	800361e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003594:	4b2e      	ldr	r3, [pc, #184]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 8003596:	4a30      	ldr	r2, [pc, #192]	@ (8003658 <SystemCoreClockUpdate+0x154>)
 8003598:	601a      	str	r2, [r3, #0]
      break;
 800359a:	e040      	b.n	800361e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800359c:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80035a6:	4b28      	ldr	r3, [pc, #160]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	3301      	adds	r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d003      	beq.n	80035c2 <SystemCoreClockUpdate+0xbe>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d006      	beq.n	80035ce <SystemCoreClockUpdate+0xca>
 80035c0:	e00b      	b.n	80035da <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80035c2:	4a24      	ldr	r2, [pc, #144]	@ (8003654 <SystemCoreClockUpdate+0x150>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	613b      	str	r3, [r7, #16]
          break;
 80035cc:	e00b      	b.n	80035e6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80035ce:	4a22      	ldr	r2, [pc, #136]	@ (8003658 <SystemCoreClockUpdate+0x154>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	613b      	str	r3, [r7, #16]
          break;
 80035d8:	e005      	b.n	80035e6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	613b      	str	r3, [r7, #16]
          break;
 80035e4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80035e6:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0e5b      	lsrs	r3, r3, #25
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	4a0f      	ldr	r2, [pc, #60]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 8003612:	6013      	str	r3, [r2, #0]
      break;
 8003614:	e003      	b.n	800361e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003616:	4a0e      	ldr	r2, [pc, #56]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	6013      	str	r3, [r2, #0]
      break;
 800361c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800361e:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <SystemCoreClockUpdate+0x144>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	4a0c      	ldr	r2, [pc, #48]	@ (800365c <SystemCoreClockUpdate+0x158>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800362e:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	4a05      	ldr	r2, [pc, #20]	@ (8003650 <SystemCoreClockUpdate+0x14c>)
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40021000 	.word	0x40021000
 800364c:	08006660 	.word	0x08006660
 8003650:	20000004 	.word	0x20000004
 8003654:	00f42400 	.word	0x00f42400
 8003658:	007a1200 	.word	0x007a1200
 800365c:	08006650 	.word	0x08006650

08003660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003664:	f7ff ff3c 	bl	80034e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003668:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800366a:	e003      	b.n	8003674 <LoopCopyDataInit>

0800366c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800366e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003670:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003672:	3104      	adds	r1, #4

08003674 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003674:	480a      	ldr	r0, [pc, #40]	@ (80036a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003676:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003678:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800367a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800367c:	d3f6      	bcc.n	800366c <CopyDataInit>
	ldr	r2, =_sbss
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003680:	e002      	b.n	8003688 <LoopFillZerobss>

08003682 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003682:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003684:	f842 3b04 	str.w	r3, [r2], #4

08003688 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <LoopForever+0x16>)
	cmp	r2, r3
 800368a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800368c:	d3f9      	bcc.n	8003682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800368e:	f002 ff3f 	bl	8006510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003692:	f7ff fd31 	bl	80030f8 <main>

08003696 <LoopForever>:

LoopForever:
    b LoopForever
 8003696:	e7fe      	b.n	8003696 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003698:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800369c:	080066b8 	.word	0x080066b8
	ldr	r0, =_sdata
 80036a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80036a4:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 80036a8:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 80036ac:	20000b60 	.word	0x20000b60

080036b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC1_2_IRQHandler>
	...

080036b4 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80036be:	79fa      	ldrb	r2, [r7, #7]
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4a04      	ldr	r2, [pc, #16]	@ (80036dc <BSP_PB_IRQHandler+0x28>)
 80036ca:	4413      	add	r3, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f979 	bl	80039c4 <HAL_EXTI_IRQHandler>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000a10 	.word	0x20000a10

080036e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80036ea:	2004      	movs	r0, #4
 80036ec:	f000 f92a 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80036f0:	f7ff ff08 	bl	8003504 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036f4:	2000      	movs	r0, #0
 80036f6:	f000 f80d 	bl	8003714 <HAL_InitTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	71fb      	strb	r3, [r7, #7]
 8003704:	e001      	b.n	800370a <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003706:	f7ff fe33 	bl	8003370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800370a:	79fb      	ldrb	r3, [r7, #7]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003720:	4b17      	ldr	r3, [pc, #92]	@ (8003780 <HAL_InitTick+0x6c>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d023      	beq.n	8003770 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003728:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <HAL_InitTick+0x70>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <HAL_InitTick+0x6c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003736:	fbb3 f3f1 	udiv	r3, r3, r1
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f933 	bl	80039aa <HAL_SYSTICK_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b07      	cmp	r3, #7
 800374e:	d809      	bhi.n	8003764 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003750:	2200      	movs	r2, #0
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	f000 f8ff 	bl	800395a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800375c:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <HAL_InitTick+0x74>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e007      	b.n	8003774 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e004      	b.n	8003774 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e001      	b.n	8003774 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000000c 	.word	0x2000000c
 8003784:	20000004 	.word	0x20000004
 8003788:	20000008 	.word	0x20000008

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	@ (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000a1c 	.word	0x20000a1c

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	@ (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	@ (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0152      	lsls	r2, r2, #5
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	@ (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0152      	lsls	r2, r2, #5
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	@ 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	bf28      	it	cs
 80038b6:	2303      	movcs	r3, #3
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3303      	adds	r3, #3
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b04      	subs	r3, #4
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	@ (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	2107      	movs	r1, #7
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff40 	bl	80037ec <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff90 	bl	8003898 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff33 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa4 	bl	8003900 <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	4b17      	ldr	r3, [pc, #92]	@ (8003a4c <HAL_EXTI_IRQHandler+0x88>)
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <HAL_EXTI_IRQHandler+0x8c>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4798      	blx	r3
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	4002f40c 	.word	0x4002f40c
 8003a50:	4002f410 	.word	0x4002f410

08003a54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e142      	b.n	8003cec <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fc9c 	bl	80033b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0210 	bic.w	r2, r2, #16
 8003a8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a90:	f7ff fe7c 	bl	800378c <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a96:	e012      	b.n	8003abe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a98:	f7ff fe78 	bl	800378c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b0a      	cmp	r3, #10
 8003aa4:	d90b      	bls.n	8003abe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e116      	b.n	8003cec <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d0e5      	beq.n	8003a98 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003adc:	f7ff fe56 	bl	800378c <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ae2:	e012      	b.n	8003b0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ae4:	f7ff fe52 	bl	800378c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d90b      	bls.n	8003b0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0f0      	b.n	8003cec <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0e5      	beq.n	8003ae4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0202 	orr.w	r2, r2, #2
 8003b26:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b28:	4a72      	ldr	r2, [pc, #456]	@ (8003cf4 <HAL_FDCAN_Init+0x2a0>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7c1b      	ldrb	r3, [r3, #16]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d108      	bne.n	8003b4a <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	e007      	b.n	8003b5a <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b58:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7c5b      	ldrb	r3, [r3, #17]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d108      	bne.n	8003b74 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b70:	619a      	str	r2, [r3, #24]
 8003b72:	e007      	b.n	8003b84 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b82:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7c9b      	ldrb	r3, [r3, #18]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d108      	bne.n	8003b9e <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b9a:	619a      	str	r2, [r3, #24]
 8003b9c:	e007      	b.n	8003bae <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bac:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003bd2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0210 	bic.w	r2, r2, #16
 8003be2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0204 	orr.w	r2, r2, #4
 8003bfa:	619a      	str	r2, [r3, #24]
 8003bfc:	e02c      	b.n	8003c58 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d01c      	beq.n	8003c48 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c1c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0210 	orr.w	r2, r2, #16
 8003c2c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d110      	bne.n	8003c58 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	e007      	b.n	8003c58 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0220 	orr.w	r2, r2, #32
 8003c56:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c68:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c70:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c80:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c82:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8c:	d115      	bne.n	8003cba <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c9c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ca6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003cb6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cb8:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fc65 	bl	80045a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	4000a500 	.word	0x4000a500

08003cf8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d08:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d002      	beq.n	8003d16 <HAL_FDCAN_ConfigFilter+0x1e>
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d13d      	bne.n	8003d92 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d119      	bne.n	8003d52 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d2a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003d32:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e01d      	b.n	8003d8e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	075a      	lsls	r2, r3, #29
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	079a      	lsls	r2, r3, #30
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3304      	adds	r3, #4
 8003d86:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e006      	b.n	8003da0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d110      	bne.n	8003de2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e006      	b.n	8003df0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d12c      	bne.n	8003e6e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e023      	b.n	8003e7c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fbfe 	bl	800464c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003e60:	2201      	movs	r2, #1
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e006      	b.n	8003e7c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	f043 0208 	orr.w	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b08b      	sub	sp, #44	@ 0x2c
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e9c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003e9e:	7efb      	ldrb	r3, [r7, #27]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	f040 80e8 	bne.w	8004076 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d137      	bne.n	8003f1c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0db      	b.n	8004084 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed4:	0e1b      	lsrs	r3, r3, #24
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10a      	bne.n	8003ef4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee6:	0a5b      	lsrs	r3, r3, #9
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1a:	e036      	b.n	8003f8a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0a3      	b.n	8004084 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f44:	0e1b      	lsrs	r3, r3, #24
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10a      	bne.n	8003f64 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003f60:	2301      	movs	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	0c9b      	lsrs	r3, r3, #18
 8003fa4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e005      	b.n	8003fba <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0e1b      	lsrs	r3, r3, #24
 800400e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	0fda      	lsrs	r2, r3, #31
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	3304      	adds	r3, #4
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	e00a      	b.n	8004046 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	441a      	add	r2, r3
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	440b      	add	r3, r1
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	3301      	adds	r3, #1
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4a11      	ldr	r2, [pc, #68]	@ (8004090 <HAL_FDCAN_GetRxMessage+0x20c>)
 800404c:	5cd3      	ldrb	r3, [r2, r3]
 800404e:	461a      	mov	r2, r3
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	4293      	cmp	r3, r2
 8004054:	d3ec      	bcc.n	8004030 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b40      	cmp	r3, #64	@ 0x40
 800405a:	d105      	bne.n	8004068 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004066:	e004      	b.n	8004072 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e006      	b.n	8004084 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	372c      	adds	r7, #44	@ 0x2c
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	080066a0 	.word	0x080066a0

08004094 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d003      	beq.n	80040da <HAL_FDCAN_ActivateNotification+0x22>
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f040 80c8 	bne.w	800426a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d03b      	beq.n	800416e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d031      	beq.n	800416e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d027      	beq.n	800416e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01d      	beq.n	800416e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d013      	beq.n	800416e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00c      	beq.n	800417e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d13b      	bne.n	800420a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d131      	bne.n	800420a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d127      	bne.n	800420a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11d      	bne.n	800420a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0202 	orr.w	r2, r2, #2
 8004218:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	430a      	orrs	r2, r1
 8004234:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	430a      	orrs	r2, r1
 8004252:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	430a      	orrs	r2, r1
 8004264:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e006      	b.n	8004278 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08c      	sub	sp, #48	@ 0x30
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004292:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042a0:	4013      	ands	r3, r2
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042b8:	4013      	ands	r3, r2
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d0:	4013      	ands	r3, r2
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042da:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80042de:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	4013      	ands	r3, r2
 80042ea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80042f6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	4013      	ands	r3, r2
 8004302:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2240      	movs	r2, #64	@ 0x40
 800432e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f916 	bl	8004562 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d019      	beq.n	8004374 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004352:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800436a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800436c:	6939      	ldr	r1, [r7, #16]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8d8 	bl	8004524 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004380:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f8a2 	bl	80044ce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004396:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fe fe8a 	bl	80030b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80043ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f897 	bl	80044e4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f890 	bl	80044fa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d018      	beq.n	8004416 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d013      	beq.n	8004416 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f87c 	bl	800450e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00c      	beq.n	800443a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004432:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f880 	bl	800453a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00c      	beq.n	800445e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004456:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f878 	bl	800454e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00f      	beq.n	8004488 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800447a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004480:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004496:	69f9      	ldr	r1, [r7, #28]
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f876 	bl	800458a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f858 	bl	8004576 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80044c6:	bf00      	nop
 80044c8:	3730      	adds	r7, #48	@ 0x30
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80045aa:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ba:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	061a      	lsls	r2, r3, #24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e005      	b.n	800462e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3304      	adds	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3f3      	bcc.n	8004622 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	4000ac00 	.word	0x4000ac00

0800464c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800466a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004672:	4313      	orrs	r3, r2
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e00a      	b.n	800468e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004680:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004686:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800468c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004698:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800469e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80046a4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	3304      	adds	r3, #4
 80046cc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3304      	adds	r3, #4
 80046d8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e020      	b.n	8004722 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	3303      	adds	r3, #3
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3302      	adds	r3, #2
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	440b      	add	r3, r1
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80046f8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	440b      	add	r3, r1
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004706:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	440a      	add	r2, r1
 800470e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004710:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	3304      	adds	r3, #4
 800471a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	3304      	adds	r3, #4
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4a06      	ldr	r2, [pc, #24]	@ (8004740 <FDCAN_CopyMessageToRAM+0xf4>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
 800472a:	461a      	mov	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4293      	cmp	r3, r2
 8004730:	d3d6      	bcc.n	80046e0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	3724      	adds	r7, #36	@ 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	080066a0 	.word	0x080066a0

08004744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004752:	e158      	b.n	8004a06 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 814a 	beq.w	8004a00 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d005      	beq.n	8004784 <HAL_GPIO_Init+0x40>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d130      	bne.n	80047e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047ba:	2201      	movs	r2, #1
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 0201 	and.w	r2, r3, #1
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d017      	beq.n	8004822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2203      	movs	r2, #3
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d123      	bne.n	8004876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	08da      	lsrs	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3208      	adds	r2, #8
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0203 	and.w	r2, r3, #3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80a4 	beq.w	8004a00 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80048b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	3318      	adds	r3, #24
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	220f      	movs	r2, #15
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a52      	ldr	r2, [pc, #328]	@ (8004a28 <HAL_GPIO_Init+0x2e4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d025      	beq.n	8004930 <HAL_GPIO_Init+0x1ec>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a51      	ldr	r2, [pc, #324]	@ (8004a2c <HAL_GPIO_Init+0x2e8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d01f      	beq.n	800492c <HAL_GPIO_Init+0x1e8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a50      	ldr	r2, [pc, #320]	@ (8004a30 <HAL_GPIO_Init+0x2ec>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d019      	beq.n	8004928 <HAL_GPIO_Init+0x1e4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004a34 <HAL_GPIO_Init+0x2f0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <HAL_GPIO_Init+0x1e0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004a38 <HAL_GPIO_Init+0x2f4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00d      	beq.n	8004920 <HAL_GPIO_Init+0x1dc>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a4d      	ldr	r2, [pc, #308]	@ (8004a3c <HAL_GPIO_Init+0x2f8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <HAL_GPIO_Init+0x1d8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a40 <HAL_GPIO_Init+0x2fc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_GPIO_Init+0x1d4>
 8004914:	2306      	movs	r3, #6
 8004916:	e00c      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004918:	2307      	movs	r3, #7
 800491a:	e00a      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 800491c:	2305      	movs	r3, #5
 800491e:	e008      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004920:	2304      	movs	r3, #4
 8004922:	e006      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004924:	2303      	movs	r3, #3
 8004926:	e004      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004928:	2302      	movs	r3, #2
 800492a:	e002      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004930:	2300      	movs	r3, #0
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	f002 0203 	and.w	r2, r2, #3
 8004938:	00d2      	lsls	r2, r2, #3
 800493a:	4093      	lsls	r3, r2
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004942:	4938      	ldr	r1, [pc, #224]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	3318      	adds	r3, #24
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004950:	4b34      	ldr	r3, [pc, #208]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	43db      	mvns	r3, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004974:	4a2b      	ldr	r2, [pc, #172]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800497a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800499e:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80049d2:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 80049d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	43db      	mvns	r3, r3
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004a24 <HAL_GPIO_Init+0x2e0>)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	3301      	adds	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f47f ae9f 	bne.w	8004754 <HAL_GPIO_Init+0x10>
  }
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	4002f400 	.word	0x4002f400
 8004a28:	42020000 	.word	0x42020000
 8004a2c:	42020400 	.word	0x42020400
 8004a30:	42020800 	.word	0x42020800
 8004a34:	42020c00 	.word	0x42020c00
 8004a38:	42021000 	.word	0x42021000
 8004a3c:	42021400 	.word	0x42021400
 8004a40:	42021800 	.word	0x42021800

08004a44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40007000 	.word	0x40007000

08004a60 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004a68:	4b27      	ldr	r3, [pc, #156]	@ (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a70:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004a72:	f000 f861 	bl	8004b38 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7c:	d101      	bne.n	8004a82 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e03e      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004a82:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a8e:	d101      	bne.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e035      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d101      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e02f      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004aa0:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004aa8:	4917      	ldr	r1, [pc, #92]	@ (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004ab0:	4b16      	ldr	r3, [pc, #88]	@ (8004b0c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	09db      	lsrs	r3, r3, #7
 8004abe:	2232      	movs	r2, #50	@ 0x32
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	08db      	lsrs	r3, r3, #3
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad0:	e002      	b.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae4:	d102      	bne.n	8004aec <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f2      	bne.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af8:	d101      	bne.n	8004afe <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e000      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	20000004 	.word	0x20000004
 8004b10:	0a7c5ac5 	.word	0x0a7c5ac5
 8004b14:	cccccccd 	.word	0xcccccccd

08004b18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a04      	ldr	r2, [pc, #16]	@ (8004b34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b26:	6093      	str	r3, [r2, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40007000 	.word	0x40007000

08004b38 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b7c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	e00a      	b.n	8004b6c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	e001      	b.n	8004b6c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40007000 	.word	0x40007000

08004b80 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f000 bcc2 	b.w	8005518 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b94:	4b99      	ldr	r3, [pc, #612]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9e:	4b97      	ldr	r3, [pc, #604]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80e9 	beq.w	8004d88 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <HAL_RCC_OscConfig+0x4a>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	f040 8083 	bne.w	8004cca <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d17f      	bne.n	8004cca <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bca:	4b8c      	ldr	r3, [pc, #560]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <HAL_RCC_OscConfig+0x64>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f000 bc9a 	b.w	8005518 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be8:	4b84      	ldr	r3, [pc, #528]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_RCC_OscConfig+0x7e>
 8004bf4:	4b81      	ldr	r3, [pc, #516]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_OscConfig+0x8a>
 8004bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d224      	bcs.n	8004c58 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fe74 	bl	8005900 <RCC_SetFlashLatencyFromMSIRange>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f000 bc7a 	b.w	8005518 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c24:	4b75      	ldr	r3, [pc, #468]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a74      	ldr	r2, [pc, #464]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b72      	ldr	r3, [pc, #456]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	496f      	ldr	r1, [pc, #444]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c42:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	496a      	ldr	r1, [pc, #424]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
 8004c56:	e026      	b.n	8004ca6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c58:	4b68      	ldr	r3, [pc, #416]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a67      	ldr	r2, [pc, #412]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c5e:	f043 0308 	orr.w	r3, r3, #8
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b65      	ldr	r3, [pc, #404]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	4962      	ldr	r1, [pc, #392]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c76:	4b61      	ldr	r3, [pc, #388]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	495d      	ldr	r1, [pc, #372]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fe33 	bl	8005900 <RCC_SetFlashLatencyFromMSIRange>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f000 bc39 	b.w	8005518 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ca6:	f000 fe17 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4a54      	ldr	r2, [pc, #336]	@ (8004e00 <HAL_RCC_OscConfig+0x280>)
 8004cae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cb0:	4b54      	ldr	r3, [pc, #336]	@ (8004e04 <HAL_RCC_OscConfig+0x284>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe fd2d 	bl	8003714 <HAL_InitTick>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d060      	beq.n	8004d86 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	f000 bc27 	b.w	8005518 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d039      	beq.n	8004d46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a49      	ldr	r2, [pc, #292]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cde:	f7fe fd55 	bl	800378c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ce4:	e00f      	b.n	8004d06 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce6:	f7fe fd51 	bl	800378c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d908      	bls.n	8004d06 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cf4:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	f000 bc09 	b.w	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d06:	4b3d      	ldr	r3, [pc, #244]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0e9      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d12:	4b3a      	ldr	r3, [pc, #232]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a39      	ldr	r2, [pc, #228]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d18:	f043 0308 	orr.w	r3, r3, #8
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b37      	ldr	r3, [pc, #220]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	4934      	ldr	r1, [pc, #208]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d30:	4b32      	ldr	r3, [pc, #200]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	492f      	ldr	r1, [pc, #188]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	e020      	b.n	8004d88 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d46:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d52:	f7fe fd1b 	bl	800378c <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d58:	e00e      	b.n	8004d78 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d5a:	f7fe fd17 	bl	800378c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d907      	bls.n	8004d78 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d68:	4b24      	ldr	r3, [pc, #144]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e3cf      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d78:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ea      	bne.n	8004d5a <HAL_RCC_OscConfig+0x1da>
 8004d84:	e000      	b.n	8004d88 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d07e      	beq.n	8004e92 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x226>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d10e      	bne.n	8004dbe <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d10b      	bne.n	8004dbe <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d06e      	beq.n	8004e90 <HAL_RCC_OscConfig+0x310>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d16a      	bne.n	8004e90 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e3ac      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x256>
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e024      	b.n	8004e20 <HAL_RCC_OscConfig+0x2a0>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dde:	d113      	bne.n	8004e08 <HAL_RCC_OscConfig+0x288>
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a05      	ldr	r2, [pc, #20]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004de6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b03      	ldr	r3, [pc, #12]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a02      	ldr	r2, [pc, #8]	@ (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e012      	b.n	8004e20 <HAL_RCC_OscConfig+0x2a0>
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	20000004 	.word	0x20000004
 8004e04:	20000008 	.word	0x20000008
 8004e08:	4b8b      	ldr	r3, [pc, #556]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a8a      	ldr	r2, [pc, #552]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b88      	ldr	r3, [pc, #544]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a87      	ldr	r2, [pc, #540]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d019      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fe fcb0 	bl	800378c <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2e:	e00e      	b.n	8004e4e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fe fcac 	bl	800378c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	@ 0x64
 8004e3c:	d907      	bls.n	8004e4e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3e:	4b7e      	ldr	r3, [pc, #504]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e364      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ea      	beq.n	8004e30 <HAL_RCC_OscConfig+0x2b0>
 8004e5a:	e01a      	b.n	8004e92 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe fc96 	bl	800378c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e62:	e00e      	b.n	8004e82 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fe fc92 	bl	800378c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d907      	bls.n	8004e82 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e72:	4b71      	ldr	r3, [pc, #452]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e34a      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e82:	4b6d      	ldr	r3, [pc, #436]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ea      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2e4>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d06c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x330>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d119      	bne.n	8004ede <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d116      	bne.n	8004ede <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb0:	4b61      	ldr	r3, [pc, #388]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x348>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e327      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	4958      	ldr	r1, [pc, #352]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004edc:	e04c      	b.n	8004f78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d029      	beq.n	8004f3a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee6:	4b54      	ldr	r3, [pc, #336]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a53      	ldr	r2, [pc, #332]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7fe fc4b 	bl	800378c <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef8:	e00e      	b.n	8004f18 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efa:	f7fe fc47 	bl	800378c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d907      	bls.n	8004f18 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f08:	4b4b      	ldr	r3, [pc, #300]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e2ff      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f18:	4b47      	ldr	r3, [pc, #284]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ea      	beq.n	8004efa <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	4b44      	ldr	r3, [pc, #272]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	4941      	ldr	r1, [pc, #260]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	e01e      	b.n	8004f78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fe fc21 	bl	800378c <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f4c:	e00e      	b.n	8004f6c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4e:	f7fe fc1d 	bl	800378c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d907      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f5c:	4b36      	ldr	r3, [pc, #216]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e2d5      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f6c:	4b32      	ldr	r3, [pc, #200]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ea      	bne.n	8004f4e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d062      	beq.n	800504a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d038      	beq.n	8004ffe <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d108      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004f94:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9a:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004f9c:	f023 0310 	bic.w	r3, r3, #16
 8004fa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fa4:	e007      	b.n	8004fb6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004fa6:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fac:	4a22      	ldr	r2, [pc, #136]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	f043 0310 	orr.w	r3, r3, #16
 8004fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb6:	4b20      	ldr	r3, [pc, #128]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fe fbe1 	bl	800378c <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fcc:	e00f      	b.n	8004fee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fce:	f7fe fbdd 	bl	800378c <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b07      	cmp	r3, #7
 8004fda:	d908      	bls.n	8004fee <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fdc:	4b16      	ldr	r3, [pc, #88]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e294      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fee:	4b12      	ldr	r3, [pc, #72]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0e8      	beq.n	8004fce <HAL_RCC_OscConfig+0x44e>
 8004ffc:	e025      	b.n	800504a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8005000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005004:	4a0c      	ldr	r2, [pc, #48]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fe fbbd 	bl	800378c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005014:	e012      	b.n	800503c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005016:	f7fe fbb9 	bl	800378c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b07      	cmp	r3, #7
 8005022:	d90b      	bls.n	800503c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005024:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <HAL_RCC_OscConfig+0x4b8>)
 8005026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e270      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800503c:	4ba8      	ldr	r3, [pc, #672]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800503e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 812d 	beq.w	80052b2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005058:	2300      	movs	r3, #0
 800505a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800505c:	4ba0      	ldr	r3, [pc, #640]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10d      	bne.n	8005084 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005068:	4b9d      	ldr	r3, [pc, #628]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506c:	4a9c      	ldr	r2, [pc, #624]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6593      	str	r3, [r2, #88]	@ 0x58
 8005074:	4b9a      	ldr	r3, [pc, #616]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005080:	2301      	movs	r3, #1
 8005082:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005084:	4b97      	ldr	r3, [pc, #604]	@ (80052e4 <HAL_RCC_OscConfig+0x764>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11e      	bne.n	80050ce <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005090:	4b94      	ldr	r3, [pc, #592]	@ (80052e4 <HAL_RCC_OscConfig+0x764>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a93      	ldr	r2, [pc, #588]	@ (80052e4 <HAL_RCC_OscConfig+0x764>)
 8005096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509c:	f7fe fb76 	bl	800378c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a2:	e00e      	b.n	80050c2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a4:	f7fe fb72 	bl	800378c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d907      	bls.n	80050c2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b2:	4b8c      	ldr	r3, [pc, #560]	@ (80052e4 <HAL_RCC_OscConfig+0x764>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e22a      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c2:	4b88      	ldr	r3, [pc, #544]	@ (80052e4 <HAL_RCC_OscConfig+0x764>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0ea      	beq.n	80050a4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01f      	beq.n	800511a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050e6:	4b7e      	ldr	r3, [pc, #504]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ec:	4a7c      	ldr	r2, [pc, #496]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80050ee:	f043 0304 	orr.w	r3, r3, #4
 80050f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050f6:	4b7a      	ldr	r3, [pc, #488]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fc:	4a78      	ldr	r2, [pc, #480]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005106:	e018      	b.n	800513a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005108:	4b75      	ldr	r3, [pc, #468]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510e:	4a74      	ldr	r2, [pc, #464]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005118:	e00f      	b.n	800513a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800511a:	4b71      	ldr	r3, [pc, #452]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	4a6f      	ldr	r2, [pc, #444]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800512a:	4b6d      	ldr	r3, [pc, #436]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	4a6b      	ldr	r2, [pc, #428]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005132:	f023 0304 	bic.w	r3, r3, #4
 8005136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d068      	beq.n	8005214 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fe fb23 	bl	800378c <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005148:	e011      	b.n	800516e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fe fb1f 	bl	800378c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d908      	bls.n	800516e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515c:	4b60      	ldr	r3, [pc, #384]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1d4      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516e:	4b5c      	ldr	r3, [pc, #368]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0e6      	beq.n	800514a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d022      	beq.n	80051ce <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005188:	4b55      	ldr	r3, [pc, #340]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	4a54      	ldr	r2, [pc, #336]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005198:	e011      	b.n	80051be <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fe faf7 	bl	800378c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d908      	bls.n	80051be <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80051ac:	4b4c      	ldr	r3, [pc, #304]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e1ac      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80051be:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0e6      	beq.n	800519a <HAL_RCC_OscConfig+0x61a>
 80051cc:	e068      	b.n	80052a0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051ce:	4b44      	ldr	r3, [pc, #272]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d4:	4a42      	ldr	r2, [pc, #264]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80051d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051de:	e011      	b.n	8005204 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fe fad4 	bl	800378c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d908      	bls.n	8005204 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051f2:	4b3b      	ldr	r3, [pc, #236]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e189      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005204:	4b36      	ldr	r3, [pc, #216]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e6      	bne.n	80051e0 <HAL_RCC_OscConfig+0x660>
 8005212:	e045      	b.n	80052a0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fe faba 	bl	800378c <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800521a:	e011      	b.n	8005240 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521c:	f7fe fab6 	bl	800378c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522a:	4293      	cmp	r3, r2
 800522c:	d908      	bls.n	8005240 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800522e:	4b2c      	ldr	r3, [pc, #176]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e16b      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005240:	4b27      	ldr	r3, [pc, #156]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e6      	bne.n	800521c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d021      	beq.n	80052a0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800525c:	4b20      	ldr	r3, [pc, #128]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005262:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800526c:	e011      	b.n	8005292 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fe fa8d 	bl	800378c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d908      	bls.n	8005292 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005280:	4b17      	ldr	r3, [pc, #92]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005286:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e142      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005292:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052a0:	7ffb      	ldrb	r3, [r7, #31]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a6:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052aa:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80052ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d04f      	beq.n	800535e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d028      	beq.n	8005318 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052c6:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80052c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052cc:	4a04      	ldr	r2, [pc, #16]	@ (80052e0 <HAL_RCC_OscConfig+0x760>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fe fa59 	bl	800378c <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052dc:	e014      	b.n	8005308 <HAL_RCC_OscConfig+0x788>
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052e8:	f7fe fa50 	bl	800378c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d908      	bls.n	8005308 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 80052f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e107      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005308:	4b85      	ldr	r3, [pc, #532]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 800530a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0e8      	beq.n	80052e8 <HAL_RCC_OscConfig+0x768>
 8005316:	e022      	b.n	800535e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005318:	4b81      	ldr	r3, [pc, #516]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 800531a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800531e:	4a80      	ldr	r2, [pc, #512]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fe fa30 	bl	800378c <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800532e:	e00f      	b.n	8005350 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005330:	f7fe fa2c 	bl	800378c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d908      	bls.n	8005350 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800533e:	4b78      	ldr	r3, [pc, #480]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005340:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0e3      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005350:	4b73      	ldr	r3, [pc, #460]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005352:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e8      	bne.n	8005330 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80d7 	beq.w	8005516 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005368:	4b6d      	ldr	r3, [pc, #436]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b0c      	cmp	r3, #12
 8005372:	f000 8091 	beq.w	8005498 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	2b02      	cmp	r3, #2
 800537c:	d166      	bne.n	800544c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b68      	ldr	r3, [pc, #416]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a67      	ldr	r2, [pc, #412]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005384:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fe f9ff 	bl	800378c <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005390:	e00e      	b.n	80053b0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005392:	f7fe f9fb 	bl	800378c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d907      	bls.n	80053b0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a0:	4b5f      	ldr	r3, [pc, #380]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e0b3      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ea      	bne.n	8005392 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053bc:	4b58      	ldr	r3, [pc, #352]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	4b58      	ldr	r3, [pc, #352]	@ (8005524 <HAL_RCC_OscConfig+0x9a4>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053cc:	3a01      	subs	r2, #1
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	4311      	orrs	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053d6:	0212      	lsls	r2, r2, #8
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80053de:	0852      	lsrs	r2, r2, #1
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0552      	lsls	r2, r2, #21
 80053e4:	4311      	orrs	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80053ea:	0852      	lsrs	r2, r2, #1
 80053ec:	3a01      	subs	r2, #1
 80053ee:	0652      	lsls	r2, r2, #25
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053f6:	06d2      	lsls	r2, r2, #27
 80053f8:	430a      	orrs	r2, r1
 80053fa:	4949      	ldr	r1, [pc, #292]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005400:	4b47      	ldr	r3, [pc, #284]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a46      	ldr	r2, [pc, #280]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800540c:	4b44      	ldr	r3, [pc, #272]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a43      	ldr	r2, [pc, #268]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fe f9b8 	bl	800378c <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800541e:	e00e      	b.n	800543e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fe f9b4 	bl	800378c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d907      	bls.n	800543e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542e:	4b3c      	ldr	r3, [pc, #240]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e06c      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	4b38      	ldr	r3, [pc, #224]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0ea      	beq.n	8005420 <HAL_RCC_OscConfig+0x8a0>
 800544a:	e064      	b.n	8005516 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b34      	ldr	r3, [pc, #208]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a33      	ldr	r2, [pc, #204]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fe f998 	bl	800378c <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545e:	e00e      	b.n	800547e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fe f994 	bl	800378c <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d907      	bls.n	800547e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546e:	4b2c      	ldr	r3, [pc, #176]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e04c      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547e:	4b28      	ldr	r3, [pc, #160]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ea      	bne.n	8005460 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800548a:	4b25      	ldr	r3, [pc, #148]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	4924      	ldr	r1, [pc, #144]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 8005490:	4b25      	ldr	r3, [pc, #148]	@ (8005528 <HAL_RCC_OscConfig+0x9a8>)
 8005492:	4013      	ands	r3, r2
 8005494:	60cb      	str	r3, [r1, #12]
 8005496:	e03e      	b.n	8005516 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e039      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80054a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005520 <HAL_RCC_OscConfig+0x9a0>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0203 	and.w	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d12c      	bne.n	8005512 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c2:	3b01      	subs	r3, #1
 80054c4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d123      	bne.n	8005512 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d11b      	bne.n	8005512 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d113      	bne.n	8005512 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	3b01      	subs	r3, #1
 80054f8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d109      	bne.n	8005512 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	3b01      	subs	r3, #1
 800550c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d001      	beq.n	8005516 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	019f800c 	.word	0x019f800c
 8005528:	feeefffc 	.word	0xfeeefffc

0800552c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e11c      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b90      	ldr	r3, [pc, #576]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b8d      	ldr	r3, [pc, #564]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 020f 	bic.w	r2, r3, #15
 800555a:	498b      	ldr	r1, [pc, #556]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b89      	ldr	r3, [pc, #548]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e104      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	4b81      	ldr	r3, [pc, #516]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005590:	4b7e      	ldr	r3, [pc, #504]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	497b      	ldr	r1, [pc, #492]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8085 	beq.w	80056ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d11f      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b8:	4b74      	ldr	r3, [pc, #464]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0da      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055c8:	f000 f9fe 	bl	80059c8 <RCC_GetSysClockFreqFromPLLSource>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4a6f      	ldr	r2, [pc, #444]	@ (8005790 <HAL_RCC_ClockConfig+0x264>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d947      	bls.n	8005666 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055d6:	4b6d      	ldr	r3, [pc, #436]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d141      	bne.n	8005666 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055e2:	4b6a      	ldr	r3, [pc, #424]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ea:	4a68      	ldr	r2, [pc, #416]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80055ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e036      	b.n	8005666 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005600:	4b62      	ldr	r3, [pc, #392]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d115      	bne.n	8005638 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0b6      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005618:	4b5c      	ldr	r3, [pc, #368]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0aa      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005628:	4b58      	ldr	r3, [pc, #352]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0a2      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005638:	f000 f8b0 	bl	800579c <HAL_RCC_GetSysClockFreq>
 800563c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4a53      	ldr	r2, [pc, #332]	@ (8005790 <HAL_RCC_ClockConfig+0x264>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d90f      	bls.n	8005666 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005646:	4b51      	ldr	r3, [pc, #324]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005652:	4b4e      	ldr	r3, [pc, #312]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800565a:	4a4c      	ldr	r2, [pc, #304]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 800565c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005660:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005662:	2380      	movs	r3, #128	@ 0x80
 8005664:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005666:	4b49      	ldr	r3, [pc, #292]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f023 0203 	bic.w	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4946      	ldr	r1, [pc, #280]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005674:	4313      	orrs	r3, r2
 8005676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005678:	f7fe f888 	bl	800378c <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	e013      	b.n	80056a8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005680:	f7fe f884 	bl	800378c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d90a      	bls.n	80056a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 020c 	and.w	r2, r3, #12
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e06a      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a8:	4b38      	ldr	r3, [pc, #224]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 020c 	and.w	r2, r3, #12
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d1e2      	bne.n	8005680 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b80      	cmp	r3, #128	@ 0x80
 80056be:	d105      	bne.n	80056cc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056c0:	4b32      	ldr	r3, [pc, #200]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4a31      	ldr	r2, [pc, #196]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80056c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ca:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	4b2b      	ldr	r3, [pc, #172]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d208      	bcs.n	80056fa <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b28      	ldr	r3, [pc, #160]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	4925      	ldr	r1, [pc, #148]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056fa:	4b23      	ldr	r3, [pc, #140]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d210      	bcs.n	800572a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005708:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 020f 	bic.w	r2, r3, #15
 8005710:	491d      	ldr	r1, [pc, #116]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005718:	4b1b      	ldr	r3, [pc, #108]	@ (8005788 <HAL_RCC_ClockConfig+0x25c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d001      	beq.n	800572a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e029      	b.n	800577e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005736:	4b15      	ldr	r3, [pc, #84]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4912      	ldr	r1, [pc, #72]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005744:	4313      	orrs	r3, r2
 8005746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d009      	beq.n	8005768 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005754:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	490a      	ldr	r1, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x260>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005768:	f000 f8b6 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 800576c:	4603      	mov	r3, r0
 800576e:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <HAL_RCC_ClockConfig+0x268>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_RCC_ClockConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd ffcc 	bl	8003714 <HAL_InitTick>
 800577c:	4603      	mov	r3, r0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40022000 	.word	0x40022000
 800578c:	40021000 	.word	0x40021000
 8005790:	04c4b400 	.word	0x04c4b400
 8005794:	20000004 	.word	0x20000004
 8005798:	20000008 	.word	0x20000008

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	@ 0x24
 80057a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	2300      	movs	r3, #0
 80057a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057aa:	4b47      	ldr	r3, [pc, #284]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057b4:	4b44      	ldr	r3, [pc, #272]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x34>
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d121      	bne.n	800580e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d11e      	bne.n	800580e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057d0:	4b3d      	ldr	r3, [pc, #244]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d107      	bne.n	80057ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057dc:	4b3a      	ldr	r3, [pc, #232]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e005      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057ec:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80057f8:	4a34      	ldr	r2, [pc, #208]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x130>)
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005800:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10d      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d102      	bne.n	800581a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005814:	4b2e      	ldr	r3, [pc, #184]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e004      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d101      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005820:	4b2c      	ldr	r3, [pc, #176]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005822:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d146      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800582a:	4b27      	ldr	r3, [pc, #156]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005834:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	3301      	adds	r3, #1
 8005840:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d003      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0xb4>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b03      	cmp	r3, #3
 800584c:	d00d      	beq.n	800586a <HAL_RCC_GetSysClockFreq+0xce>
 800584e:	e019      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005850:	4a1f      	ldr	r2, [pc, #124]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	4a1b      	ldr	r2, [pc, #108]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800585a:	68d2      	ldr	r2, [r2, #12]
 800585c:	0a12      	lsrs	r2, r2, #8
 800585e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	617b      	str	r3, [r7, #20]
        break;
 8005868:	e019      	b.n	800589e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800586a:	4a1a      	ldr	r2, [pc, #104]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005874:	68d2      	ldr	r2, [r2, #12]
 8005876:	0a12      	lsrs	r2, r2, #8
 8005878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
        break;
 8005882:	e00c      	b.n	800589e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	4a0e      	ldr	r2, [pc, #56]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800588e:	68d2      	ldr	r2, [r2, #12]
 8005890:	0a12      	lsrs	r2, r2, #8
 8005892:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	617b      	str	r3, [r7, #20]
        break;
 800589c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800589e:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	0e5b      	lsrs	r3, r3, #25
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	3301      	adds	r3, #1
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058b8:	69bb      	ldr	r3, [r7, #24]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3724      	adds	r7, #36	@ 0x24
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
 80058cc:	08006660 	.word	0x08006660
 80058d0:	00f42400 	.word	0x00f42400
 80058d4:	007a1200 	.word	0x007a1200

080058d8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80058dc:	f7ff ff5e 	bl	800579c <HAL_RCC_GetSysClockFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCC_GetHCLKFreq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	4903      	ldr	r1, [pc, #12]	@ (80058fc <HAL_RCC_GetHCLKFreq+0x24>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	08006650 	.word	0x08006650

08005900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800590c:	4b2c      	ldr	r3, [pc, #176]	@ (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800590e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005918:	f7ff f894 	bl	8004a44 <HAL_PWREx_GetVoltageRange>
 800591c:	6138      	str	r0, [r7, #16]
 800591e:	e014      	b.n	800594a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005920:	4b27      	ldr	r3, [pc, #156]	@ (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005924:	4a26      	ldr	r2, [pc, #152]	@ (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800592a:	6593      	str	r3, [r2, #88]	@ 0x58
 800592c:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005938:	f7ff f884 	bl	8004a44 <HAL_PWREx_GetVoltageRange>
 800593c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800593e:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005956:	d10b      	bne.n	8005970 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b80      	cmp	r3, #128	@ 0x80
 800595c:	d919      	bls.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2ba0      	cmp	r3, #160	@ 0xa0
 8005962:	d902      	bls.n	800596a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005964:	2302      	movs	r3, #2
 8005966:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005968:	e013      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800596e:	e010      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b80      	cmp	r3, #128	@ 0x80
 8005974:	d902      	bls.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005976:	2303      	movs	r3, #3
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e00a      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b80      	cmp	r3, #128	@ 0x80
 8005980:	d102      	bne.n	8005988 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005982:	2302      	movs	r3, #2
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e004      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b70      	cmp	r3, #112	@ 0x70
 800598c:	d101      	bne.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 020f 	bic.w	r2, r3, #15
 800599a:	490a      	ldr	r1, [pc, #40]	@ (80059c4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80059a2:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40022000 	.word	0x40022000

080059c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059ce:	4b31      	ldr	r3, [pc, #196]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	3301      	adds	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d015      	beq.n	8005a18 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d839      	bhi.n	8005a66 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d01c      	beq.n	8005a32 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d133      	bne.n	8005a66 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059fe:	4a26      	ldr	r2, [pc, #152]	@ (8005a98 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	4a23      	ldr	r2, [pc, #140]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a08:	68d2      	ldr	r2, [r2, #12]
 8005a0a:	0a12      	lsrs	r2, r2, #8
 8005a0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	613b      	str	r3, [r7, #16]
      break;
 8005a16:	e029      	b.n	8005a6c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a18:	4a20      	ldr	r2, [pc, #128]	@ (8005a9c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	4a1c      	ldr	r2, [pc, #112]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a22:	68d2      	ldr	r2, [r2, #12]
 8005a24:	0a12      	lsrs	r2, r2, #8
 8005a26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	613b      	str	r3, [r7, #16]
      break;
 8005a30:	e01c      	b.n	8005a6c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a32:	4b18      	ldr	r3, [pc, #96]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d107      	bne.n	8005a4e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e005      	b.n	8005a5a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a4e:	4b11      	ldr	r3, [pc, #68]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005a5a:	4a11      	ldr	r2, [pc, #68]	@ (8005aa0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	613b      	str	r3, [r7, #16]
        break;
 8005a64:	e002      	b.n	8005a6c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
      break;
 8005a6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	@ (8005a94 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	0e5b      	lsrs	r3, r3, #25
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	3301      	adds	r3, #1
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005a86:	683b      	ldr	r3, [r7, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40021000 	.word	0x40021000
 8005a98:	00f42400 	.word	0x00f42400
 8005a9c:	007a1200 	.word	0x007a1200
 8005aa0:	08006660 	.word	0x08006660

08005aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d040      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ac4:	2b80      	cmp	r3, #128	@ 0x80
 8005ac6:	d02a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ac8:	2b80      	cmp	r3, #128	@ 0x80
 8005aca:	d825      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005acc:	2b60      	cmp	r3, #96	@ 0x60
 8005ace:	d026      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ad0:	2b60      	cmp	r3, #96	@ 0x60
 8005ad2:	d821      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ad4:	2b40      	cmp	r3, #64	@ 0x40
 8005ad6:	d006      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d81d      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005ae4:	e018      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ae6:	4b8f      	ldr	r3, [pc, #572]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	4a8e      	ldr	r2, [pc, #568]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005af2:	e015      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fb56 	bl	80061ac <RCCEx_PLLSAI1_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b04:	e00c      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3320      	adds	r3, #32
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fc33 	bl	8006378 <RCCEx_PLLSAI2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b16:	e003      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	77fb      	strb	r3, [r7, #31]
        break;
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b26:	4b7f      	ldr	r3, [pc, #508]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b2c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b34:	497b      	ldr	r1, [pc, #492]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005b3c:	e001      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d047      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b56:	d030      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b5c:	d82a      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b62:	d02a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b68:	d824      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b74:	d81e      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7e:	d010      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b80:	e018      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b82:	4b68      	ldr	r3, [pc, #416]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a67      	ldr	r2, [pc, #412]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b8c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005b8e:	e015      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fb08 	bl	80061ac <RCCEx_PLLSAI1_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ba0:	e00c      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3320      	adds	r3, #32
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fbe5 	bl	8006378 <RCCEx_PLLSAI2_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bb2:	e003      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77fb      	strb	r3, [r7, #31]
        break;
 8005bb8:	e000      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bbc:	7ffb      	ldrb	r3, [r7, #31]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bc2:	4b58      	ldr	r3, [pc, #352]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd0:	4954      	ldr	r1, [pc, #336]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005bd8:	e001      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
 8005bdc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80ab 	beq.w	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bec:	2300      	movs	r3, #0
 8005bee:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10d      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfc:	4b49      	ldr	r3, [pc, #292]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c00:	4a48      	ldr	r2, [pc, #288]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c08:	4b46      	ldr	r3, [pc, #280]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c18:	4b43      	ldr	r3, [pc, #268]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a42      	ldr	r2, [pc, #264]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c24:	f7fd fdb2 	bl	800378c <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c2a:	e00f      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2c:	f7fd fdae 	bl	800378c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d908      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005c4a:	e006      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4c:	4b36      	ldr	r3, [pc, #216]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0e9      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005c58:	e000      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005c5a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d164      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c62:	4b30      	ldr	r3, [pc, #192]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01f      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d019      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c80:	4b28      	ldr	r3, [pc, #160]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c92:	4a24      	ldr	r2, [pc, #144]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9c:	4b21      	ldr	r3, [pc, #132]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	4a20      	ldr	r2, [pc, #128]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cac:	4a1d      	ldr	r2, [pc, #116]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01f      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fd fd65 	bl	800378c <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc4:	e012      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fd fd61 	bl	800378c <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d909      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd8:	4b12      	ldr	r3, [pc, #72]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005cea:	e007      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cec:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0e5      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005cfc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10c      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d04:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d14:	4903      	ldr	r1, [pc, #12]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d1c:	e008      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	77bb      	strb	r3, [r7, #30]
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	7ffb      	ldrb	r3, [r7, #31]
 8005d2e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d36:	4b9c      	ldr	r3, [pc, #624]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3a:	4a9b      	ldr	r2, [pc, #620]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d4e:	4b96      	ldr	r3, [pc, #600]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	f023 0203 	bic.w	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5c:	4992      	ldr	r1, [pc, #584]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d70:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f023 020c 	bic.w	r2, r3, #12
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	498a      	ldr	r1, [pc, #552]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d92:	4b85      	ldr	r3, [pc, #532]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	4981      	ldr	r1, [pc, #516]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005db4:	4b7c      	ldr	r3, [pc, #496]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	4979      	ldr	r1, [pc, #484]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dd6:	4b74      	ldr	r3, [pc, #464]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de4:	4970      	ldr	r1, [pc, #448]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005df8:	4b6b      	ldr	r3, [pc, #428]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e06:	4968      	ldr	r1, [pc, #416]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e1a:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e28:	495f      	ldr	r1, [pc, #380]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4a:	4957      	ldr	r1, [pc, #348]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005e5e:	4b52      	ldr	r3, [pc, #328]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6c:	494e      	ldr	r1, [pc, #312]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d031      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e88:	d00e      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e8e:	d814      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d015      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e98:	d10f      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e9a:	4b43      	ldr	r3, [pc, #268]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	4a42      	ldr	r2, [pc, #264]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ea0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ea4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005ea6:	e00c      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f97c 	bl	80061ac <RCCEx_PLLSAI1_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	77fb      	strb	r3, [r7, #31]
        break;
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ec8:	4b37      	ldr	r3, [pc, #220]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ece:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ed6:	4934      	ldr	r1, [pc, #208]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005ede:	e001      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
 8005ee2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efe:	492a      	ldr	r1, [pc, #168]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f12:	4b25      	ldr	r3, [pc, #148]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f20:	4921      	ldr	r1, [pc, #132]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f34:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f42:	4919      	ldr	r1, [pc, #100]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f56:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f5c:	f023 0203 	bic.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f64:	4910      	ldr	r1, [pc, #64]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02b      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f78:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f86:	4908      	ldr	r1, [pc, #32]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f96:	d109      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f98:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a02      	ldr	r2, [pc, #8]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fa2:	60d3      	str	r3, [r2, #12]
 8005fa4:	e014      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f8f5 	bl	80061ac <RCCEx_PLLSAI1_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005fc6:	7ffb      	ldrb	r3, [r7, #31]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005fcc:	7ffb      	ldrb	r3, [r7, #31]
 8005fce:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d04a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fe4:	d108      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005fe6:	4b70      	ldr	r3, [pc, #448]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fec:	4a6e      	ldr	r2, [pc, #440]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ff2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005ff6:	e012      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006006:	4968      	ldr	r1, [pc, #416]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800600e:	4b66      	ldr	r3, [pc, #408]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006014:	4a64      	ldr	r2, [pc, #400]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800601a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006026:	d10d      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f8bc 	bl	80061ac <RCCEx_PLLSAI1_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006038:	7ffb      	ldrb	r3, [r7, #31]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d019      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800603e:	7ffb      	ldrb	r3, [r7, #31]
 8006040:	77bb      	strb	r3, [r7, #30]
 8006042:	e016      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800604c:	d106      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800604e:	4b56      	ldr	r3, [pc, #344]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	4a55      	ldr	r2, [pc, #340]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006058:	60d3      	str	r3, [r2, #12]
 800605a:	e00a      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006064:	d105      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006066:	4b50      	ldr	r3, [pc, #320]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	4a4f      	ldr	r2, [pc, #316]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800606c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006070:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d028      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800607e:	4b4a      	ldr	r3, [pc, #296]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006084:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800608c:	4946      	ldr	r1, [pc, #280]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800609c:	d106      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609e:	4b42      	ldr	r3, [pc, #264]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	4a41      	ldr	r2, [pc, #260]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060a8:	60d3      	str	r3, [r2, #12]
 80060aa:	e011      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060b4:	d10c      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3304      	adds	r3, #4
 80060ba:	2101      	movs	r1, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f875 	bl	80061ac <RCCEx_PLLSAI1_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80060c6:	7ffb      	ldrb	r3, [r7, #31]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80060cc:	7ffb      	ldrb	r3, [r7, #31]
 80060ce:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01e      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060dc:	4b32      	ldr	r3, [pc, #200]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ec:	492e      	ldr	r1, [pc, #184]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060fe:	d10c      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	2102      	movs	r1, #2
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f850 	bl	80061ac <RCCEx_PLLSAI1_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006110:	7ffb      	ldrb	r3, [r7, #31]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8006116:	7ffb      	ldrb	r3, [r7, #31]
 8006118:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006126:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800612c:	f023 0204 	bic.w	r2, r3, #4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006136:	491c      	ldr	r1, [pc, #112]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800614a:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800614c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006150:	f023 0218 	bic.w	r2, r3, #24
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615a:	4913      	ldr	r1, [pc, #76]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800616e:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006170:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006174:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800617e:	490a      	ldr	r1, [pc, #40]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800618c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006190:	d105      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	4a04      	ldr	r2, [pc, #16]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800619c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800619e:	7fbb      	ldrb	r3, [r7, #30]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40021000 	.word	0x40021000

080061ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d018      	beq.n	80061f4 <RCCEx_PLLSAI1_Config+0x48>
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d81f      	bhi.n	8006206 <RCCEx_PLLSAI1_Config+0x5a>
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d002      	beq.n	80061d0 <RCCEx_PLLSAI1_Config+0x24>
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d009      	beq.n	80061e2 <RCCEx_PLLSAI1_Config+0x36>
 80061ce:	e01a      	b.n	8006206 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061d0:	4b65      	ldr	r3, [pc, #404]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d117      	bne.n	800620c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e0:	e014      	b.n	800620c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061e2:	4b61      	ldr	r3, [pc, #388]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d110      	bne.n	8006210 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f2:	e00d      	b.n	8006210 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80061f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006204:	e006      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	73fb      	strb	r3, [r7, #15]
      break;
 800620a:	e004      	b.n	8006216 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800620c:	bf00      	nop
 800620e:	e002      	b.n	8006216 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006210:	bf00      	nop
 8006212:	e000      	b.n	8006216 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006214:	bf00      	nop
  }

  if (status == HAL_OK)
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 809f 	bne.w	800635c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800621e:	4b52      	ldr	r3, [pc, #328]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a51      	ldr	r2, [pc, #324]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622a:	f7fd faaf 	bl	800378c <HAL_GetTick>
 800622e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006230:	e00f      	b.n	8006252 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006232:	f7fd faab 	bl	800378c <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d908      	bls.n	8006252 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006240:	4b49      	ldr	r3, [pc, #292]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006250:	e006      	b.n	8006260 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006252:	4b45      	ldr	r3, [pc, #276]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e9      	bne.n	8006232 <RCCEx_PLLSAI1_Config+0x86>
 800625e:	e000      	b.n	8006262 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006260:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d179      	bne.n	800635c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800626e:	4b3e      	ldr	r3, [pc, #248]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	4b3e      	ldr	r3, [pc, #248]	@ (800636c <RCCEx_PLLSAI1_Config+0x1c0>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	0211      	lsls	r1, r2, #8
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68d2      	ldr	r2, [r2, #12]
 8006280:	06d2      	lsls	r2, r2, #27
 8006282:	4311      	orrs	r1, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6852      	ldr	r2, [r2, #4]
 8006288:	3a01      	subs	r2, #1
 800628a:	0112      	lsls	r2, r2, #4
 800628c:	4311      	orrs	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	4934      	ldr	r1, [pc, #208]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
 800629a:	e033      	b.n	8006304 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d118      	bne.n	80062d4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062a2:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	4b32      	ldr	r3, [pc, #200]	@ (8006370 <RCCEx_PLLSAI1_Config+0x1c4>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6892      	ldr	r2, [r2, #8]
 80062ae:	0211      	lsls	r1, r2, #8
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6912      	ldr	r2, [r2, #16]
 80062b4:	0852      	lsrs	r2, r2, #1
 80062b6:	3a01      	subs	r2, #1
 80062b8:	0552      	lsls	r2, r2, #21
 80062ba:	4311      	orrs	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6852      	ldr	r2, [r2, #4]
 80062c0:	3a01      	subs	r2, #1
 80062c2:	0112      	lsls	r2, r2, #4
 80062c4:	4311      	orrs	r1, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	4926      	ldr	r1, [pc, #152]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	610b      	str	r3, [r1, #16]
 80062d2:	e017      	b.n	8006304 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062d4:	4b24      	ldr	r3, [pc, #144]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	4b26      	ldr	r3, [pc, #152]	@ (8006374 <RCCEx_PLLSAI1_Config+0x1c8>)
 80062da:	4013      	ands	r3, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6892      	ldr	r2, [r2, #8]
 80062e0:	0211      	lsls	r1, r2, #8
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6952      	ldr	r2, [r2, #20]
 80062e6:	0852      	lsrs	r2, r2, #1
 80062e8:	3a01      	subs	r2, #1
 80062ea:	0652      	lsls	r2, r2, #25
 80062ec:	4311      	orrs	r1, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6852      	ldr	r2, [r2, #4]
 80062f2:	3a01      	subs	r2, #1
 80062f4:	0112      	lsls	r2, r2, #4
 80062f6:	4311      	orrs	r1, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	491a      	ldr	r1, [pc, #104]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006304:	4b18      	ldr	r3, [pc, #96]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 800630a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800630e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006310:	f7fd fa3c 	bl	800378c <HAL_GetTick>
 8006314:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006316:	e00f      	b.n	8006338 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006318:	f7fd fa38 	bl	800378c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d908      	bls.n	8006338 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006326:	4b10      	ldr	r3, [pc, #64]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006336:	e006      	b.n	8006346 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006338:	4b0b      	ldr	r3, [pc, #44]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0e9      	beq.n	8006318 <RCCEx_PLLSAI1_Config+0x16c>
 8006344:	e000      	b.n	8006348 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006346:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800634e:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	4904      	ldr	r1, [pc, #16]	@ (8006368 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40021000 	.word	0x40021000
 800636c:	07ff800c 	.word	0x07ff800c
 8006370:	ff9f800c 	.word	0xff9f800c
 8006374:	f9ff800c 	.word	0xf9ff800c

08006378 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d018      	beq.n	80063c0 <RCCEx_PLLSAI2_Config+0x48>
 800638e:	2b03      	cmp	r3, #3
 8006390:	d81f      	bhi.n	80063d2 <RCCEx_PLLSAI2_Config+0x5a>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d002      	beq.n	800639c <RCCEx_PLLSAI2_Config+0x24>
 8006396:	2b02      	cmp	r3, #2
 8006398:	d009      	beq.n	80063ae <RCCEx_PLLSAI2_Config+0x36>
 800639a:	e01a      	b.n	80063d2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800639c:	4b4a      	ldr	r3, [pc, #296]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d117      	bne.n	80063d8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ac:	e014      	b.n	80063d8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063ae:	4b46      	ldr	r3, [pc, #280]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d110      	bne.n	80063dc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063be:	e00d      	b.n	80063dc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80063c0:	4b41      	ldr	r3, [pc, #260]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d0:	e006      	b.n	80063e0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
      break;
 80063d6:	e004      	b.n	80063e2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80063d8:	bf00      	nop
 80063da:	e002      	b.n	80063e2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80063dc:	bf00      	nop
 80063de:	e000      	b.n	80063e2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80063e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d169      	bne.n	80064bc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80063e8:	4b37      	ldr	r3, [pc, #220]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a36      	ldr	r2, [pc, #216]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 80063ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f4:	f7fd f9ca 	bl	800378c <HAL_GetTick>
 80063f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063fa:	e00f      	b.n	800641c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063fc:	f7fd f9c6 	bl	800378c <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d908      	bls.n	800641c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800640a:	4b2f      	ldr	r3, [pc, #188]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800641a:	e006      	b.n	800642a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800641c:	4b2a      	ldr	r3, [pc, #168]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e9      	bne.n	80063fc <RCCEx_PLLSAI2_Config+0x84>
 8006428:	e000      	b.n	800642c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800642a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d144      	bne.n	80064bc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d115      	bne.n	8006464 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006438:	4b23      	ldr	r3, [pc, #140]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	4b23      	ldr	r3, [pc, #140]	@ (80064cc <RCCEx_PLLSAI2_Config+0x154>)
 800643e:	4013      	ands	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6892      	ldr	r2, [r2, #8]
 8006444:	0211      	lsls	r1, r2, #8
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	06d2      	lsls	r2, r2, #27
 800644c:	4311      	orrs	r1, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6852      	ldr	r2, [r2, #4]
 8006452:	3a01      	subs	r2, #1
 8006454:	0112      	lsls	r2, r2, #4
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	491a      	ldr	r1, [pc, #104]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 8006460:	4313      	orrs	r3, r2
 8006462:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006464:	4b18      	ldr	r3, [pc, #96]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 800646a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800646e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fd f98c 	bl	800378c <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006476:	e00f      	b.n	8006498 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006478:	f7fd f988 	bl	800378c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d908      	bls.n	8006498 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006486:	4b10      	ldr	r3, [pc, #64]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006496:	e006      	b.n	80064a6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006498:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0e9      	beq.n	8006478 <RCCEx_PLLSAI2_Config+0x100>
 80064a4:	e000      	b.n	80064a8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80064a6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80064ae:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	4904      	ldr	r1, [pc, #16]	@ (80064c8 <RCCEx_PLLSAI2_Config+0x150>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000
 80064cc:	07ff800c 	.word	0x07ff800c

080064d0 <_ZdlPvj>:
 80064d0:	f000 b800 	b.w	80064d4 <_ZdlPv>

080064d4 <_ZdlPv>:
 80064d4:	f000 b800 	b.w	80064d8 <free>

080064d8 <free>:
 80064d8:	4b02      	ldr	r3, [pc, #8]	@ (80064e4 <free+0xc>)
 80064da:	4601      	mov	r1, r0
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	f000 b84b 	b.w	8006578 <_free_r>
 80064e2:	bf00      	nop
 80064e4:	20000010 	.word	0x20000010

080064e8 <__malloc_lock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	@ (80064f0 <__malloc_lock+0x8>)
 80064ea:	f000 b835 	b.w	8006558 <__retarget_lock_acquire_recursive>
 80064ee:	bf00      	nop
 80064f0:	20000b5c 	.word	0x20000b5c

080064f4 <__malloc_unlock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	@ (80064fc <__malloc_unlock+0x8>)
 80064f6:	f000 b830 	b.w	800655a <__retarget_lock_release_recursive>
 80064fa:	bf00      	nop
 80064fc:	20000b5c 	.word	0x20000b5c

08006500 <memset>:
 8006500:	4402      	add	r2, r0
 8006502:	4603      	mov	r3, r0
 8006504:	4293      	cmp	r3, r2
 8006506:	d100      	bne.n	800650a <memset+0xa>
 8006508:	4770      	bx	lr
 800650a:	f803 1b01 	strb.w	r1, [r3], #1
 800650e:	e7f9      	b.n	8006504 <memset+0x4>

08006510 <__libc_init_array>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	4d0d      	ldr	r5, [pc, #52]	@ (8006548 <__libc_init_array+0x38>)
 8006514:	2600      	movs	r6, #0
 8006516:	4c0d      	ldr	r4, [pc, #52]	@ (800654c <__libc_init_array+0x3c>)
 8006518:	1b64      	subs	r4, r4, r5
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	42a6      	cmp	r6, r4
 800651e:	d109      	bne.n	8006534 <__libc_init_array+0x24>
 8006520:	4d0b      	ldr	r5, [pc, #44]	@ (8006550 <__libc_init_array+0x40>)
 8006522:	2600      	movs	r6, #0
 8006524:	4c0b      	ldr	r4, [pc, #44]	@ (8006554 <__libc_init_array+0x44>)
 8006526:	f000 f871 	bl	800660c <_init>
 800652a:	1b64      	subs	r4, r4, r5
 800652c:	10a4      	asrs	r4, r4, #2
 800652e:	42a6      	cmp	r6, r4
 8006530:	d105      	bne.n	800653e <__libc_init_array+0x2e>
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	f855 3b04 	ldr.w	r3, [r5], #4
 8006538:	3601      	adds	r6, #1
 800653a:	4798      	blx	r3
 800653c:	e7ee      	b.n	800651c <__libc_init_array+0xc>
 800653e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006542:	3601      	adds	r6, #1
 8006544:	4798      	blx	r3
 8006546:	e7f2      	b.n	800652e <__libc_init_array+0x1e>
 8006548:	080066b0 	.word	0x080066b0
 800654c:	080066b0 	.word	0x080066b0
 8006550:	080066b0 	.word	0x080066b0
 8006554:	080066b4 	.word	0x080066b4

08006558 <__retarget_lock_acquire_recursive>:
 8006558:	4770      	bx	lr

0800655a <__retarget_lock_release_recursive>:
 800655a:	4770      	bx	lr

0800655c <memcpy>:
 800655c:	440a      	add	r2, r1
 800655e:	1e43      	subs	r3, r0, #1
 8006560:	4291      	cmp	r1, r2
 8006562:	d100      	bne.n	8006566 <memcpy+0xa>
 8006564:	4770      	bx	lr
 8006566:	b510      	push	{r4, lr}
 8006568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656c:	4291      	cmp	r1, r2
 800656e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006572:	d1f9      	bne.n	8006568 <memcpy+0xc>
 8006574:	bd10      	pop	{r4, pc}
	...

08006578 <_free_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4605      	mov	r5, r0
 800657c:	2900      	cmp	r1, #0
 800657e:	d041      	beq.n	8006604 <_free_r+0x8c>
 8006580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006584:	1f0c      	subs	r4, r1, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfb8      	it	lt
 800658a:	18e4      	addlt	r4, r4, r3
 800658c:	f7ff ffac 	bl	80064e8 <__malloc_lock>
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <_free_r+0x90>)
 8006592:	6813      	ldr	r3, [r2, #0]
 8006594:	b933      	cbnz	r3, 80065a4 <_free_r+0x2c>
 8006596:	6063      	str	r3, [r4, #4]
 8006598:	6014      	str	r4, [r2, #0]
 800659a:	4628      	mov	r0, r5
 800659c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a0:	f7ff bfa8 	b.w	80064f4 <__malloc_unlock>
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d908      	bls.n	80065ba <_free_r+0x42>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	1821      	adds	r1, r4, r0
 80065ac:	428b      	cmp	r3, r1
 80065ae:	bf01      	itttt	eq
 80065b0:	6819      	ldreq	r1, [r3, #0]
 80065b2:	685b      	ldreq	r3, [r3, #4]
 80065b4:	1809      	addeq	r1, r1, r0
 80065b6:	6021      	streq	r1, [r4, #0]
 80065b8:	e7ed      	b.n	8006596 <_free_r+0x1e>
 80065ba:	461a      	mov	r2, r3
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b10b      	cbz	r3, 80065c4 <_free_r+0x4c>
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	d9fa      	bls.n	80065ba <_free_r+0x42>
 80065c4:	6811      	ldr	r1, [r2, #0]
 80065c6:	1850      	adds	r0, r2, r1
 80065c8:	42a0      	cmp	r0, r4
 80065ca:	d10b      	bne.n	80065e4 <_free_r+0x6c>
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	4401      	add	r1, r0
 80065d0:	1850      	adds	r0, r2, r1
 80065d2:	6011      	str	r1, [r2, #0]
 80065d4:	4283      	cmp	r3, r0
 80065d6:	d1e0      	bne.n	800659a <_free_r+0x22>
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4408      	add	r0, r1
 80065de:	6053      	str	r3, [r2, #4]
 80065e0:	6010      	str	r0, [r2, #0]
 80065e2:	e7da      	b.n	800659a <_free_r+0x22>
 80065e4:	d902      	bls.n	80065ec <_free_r+0x74>
 80065e6:	230c      	movs	r3, #12
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	e7d6      	b.n	800659a <_free_r+0x22>
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	1821      	adds	r1, r4, r0
 80065f0:	428b      	cmp	r3, r1
 80065f2:	bf02      	ittt	eq
 80065f4:	6819      	ldreq	r1, [r3, #0]
 80065f6:	685b      	ldreq	r3, [r3, #4]
 80065f8:	1809      	addeq	r1, r1, r0
 80065fa:	6063      	str	r3, [r4, #4]
 80065fc:	bf08      	it	eq
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	6054      	str	r4, [r2, #4]
 8006602:	e7ca      	b.n	800659a <_free_r+0x22>
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	20000a20 	.word	0x20000a20

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
