
cpp_can_initial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005808  08005808  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005808  08005808  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005808  08005808  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005808  08005808  00006808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005810  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  2000005c  0800586c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  0800586c  00007b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015da0  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003645  00000000  00000000  0001ce32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00020478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  000217e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000069e2  00000000  00000000  0002269d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001841e  00000000  00000000  0002907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e9d7  00000000  00000000  0004149d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fe74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  0015feb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00165178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08005764 	.word	0x08005764

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08005764 	.word	0x08005764

08000240 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
 800024c:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	6819      	ldr	r1, [r3, #0]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2220      	movs	r2, #32
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f000 ffbf 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 32;
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f103 0220 	add.w	r2, r3, #32
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3304      	adds	r3, #4
 8000270:	2202      	movs	r2, #2
 8000272:	68f8      	ldr	r0, [r7, #12]
 8000274:	f000 ffb1 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 2;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1c9a      	adds	r2, r3, #2
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	6819      	ldr	r1, [r3, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3305      	adds	r3, #5
 800028a:	2203      	movs	r2, #3
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f000 ffa4 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 3;
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	1cda      	adds	r2, r3, #3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	6819      	ldr	r1, [r3, #0]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3306      	adds	r3, #6
 80002a4:	2203      	movs	r2, #3
 80002a6:	68f8      	ldr	r0, [r7, #12]
 80002a8:	f000 ff97 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 3;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	1cda      	adds	r2, r3, #3
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	6819      	ldr	r1, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3308      	adds	r3, #8
 80002be:	2210      	movs	r2, #16
 80002c0:	68f8      	ldr	r0, [r7, #12]
 80002c2:	f000 ff8a 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 16;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f103 0210 	add.w	r2, r3, #16
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]





}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80002da:	b580      	push	{r7, lr}
 80002dc:	b086      	sub	sp, #24
 80002de:	af02      	add	r7, sp, #8
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	6819      	ldr	r1, [r3, #0]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2300      	movs	r3, #0
 80002f2:	2220      	movs	r2, #32
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f000 fde7 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 32;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f103 0220 	add.w	r2, r3, #32
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3304      	adds	r3, #4
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2300      	movs	r3, #0
 8000312:	2202      	movs	r2, #2
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 fdd7 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 2;
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	1c9a      	adds	r2, r3, #2
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	6819      	ldr	r1, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3305      	adds	r3, #5
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2300      	movs	r3, #0
 8000330:	2203      	movs	r2, #3
 8000332:	68f8      	ldr	r0, [r7, #12]
 8000334:	f000 fdc8 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 3;
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	1cda      	adds	r2, r3, #3
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	6819      	ldr	r1, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3306      	adds	r3, #6
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	2203      	movs	r2, #3
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f000 fdb9 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 3;
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1cda      	adds	r2, r3, #3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6819      	ldr	r1, [r3, #0]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3308      	adds	r3, #8
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	2210      	movs	r2, #16
 800036e:	68f8      	ldr	r0, [r7, #12]
 8000370:	f000 fdaa 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 16;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f103 0210 	add.w	r2, r3, #16
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8000380:	2300      	movs	r3, #0

}
 8000382:	4618      	mov	r0, r3
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800038a:	b580      	push	{r7, lr}
 800038c:	b084      	sub	sp, #16
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8000398:	2207      	movs	r2, #7
 800039a:	2100      	movs	r1, #0
 800039c:	6838      	ldr	r0, [r7, #0]
 800039e:	f005 f95b 	bl	8005658 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 80003a2:	f107 010c 	add.w	r1, r7, #12
 80003a6:	2301      	movs	r3, #1
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	6838      	ldr	r0, [r7, #0]
 80003ac:	f7ff ff48 	bl	8000240 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	3307      	adds	r3, #7
 80003b4:	08db      	lsrs	r3, r3, #3
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 80003be:	b580      	push	{r7, lr}
 80003c0:	b084      	sub	sp, #16
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 80003cc:	f107 0108 	add.w	r1, r7, #8
 80003d0:	2301      	movs	r3, #1
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff80 	bl	80002da <_uavcan_protocol_NodeStatus_decode>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80003e0:	2301      	movs	r3, #1
 80003e2:	e00c      	b.n	80003fe <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3307      	adds	r3, #7
 80003e8:	08db      	lsrs	r3, r3, #3
 80003ea:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	8a9b      	ldrh	r3, [r3, #20]
 80003f0:	461a      	mov	r2, r3
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	4293      	cmp	r3, r2
 80003f6:	bf14      	ite	ne
 80003f8:	2301      	movne	r3, #1
 80003fa:	2300      	moveq	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_uavcan_protocol_dynamic_node_id_Allocation_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
static inline bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->node_id);
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2207      	movs	r2, #7
 800041c:	68f8      	ldr	r0, [r7, #12]
 800041e:	f000 fedc 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 7;
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	1dda      	adds	r2, r3, #7
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 1, &msg->first_part_of_unique_id);
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	6819      	ldr	r1, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	2201      	movs	r2, #1
 8000436:	68f8      	ldr	r0, [r7, #12]
 8000438:	f000 fecf 	bl	80011da <canardEncodeScalar>

    *bit_ofs += 1;
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1c5a      	adds	r2, r3, #1
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	601a      	str	r2, [r3, #0]





    if (!tao) {
 8000446:	78fb      	ldrb	r3, [r7, #3]
 8000448:	f083 0301 	eor.w	r3, r3, #1
 800044c:	b2db      	uxtb	r3, r3
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00c      	beq.n	800046c <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x66>


        canardEncodeScalar(buffer, *bit_ofs, 5, &msg->unique_id.len);
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	6819      	ldr	r1, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3302      	adds	r3, #2
 800045a:	2205      	movs	r2, #5
 800045c:	68f8      	ldr	r0, [r7, #12]
 800045e:	f000 febc 	bl	80011da <canardEncodeScalar>
        *bit_ofs += 5;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	1d5a      	adds	r2, r3, #5
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t unique_id_len = msg->unique_id.len > 16 ? 16 : msg->unique_id.len;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	2b10      	cmp	r3, #16
 8000472:	bf28      	it	cs
 8000474:	2310      	movcs	r3, #16
 8000476:	b2db      	uxtb	r3, r3
 8000478:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < unique_id_len; i++) {
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e012      	b.n	80004a6 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id.data[i]);
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	6819      	ldr	r1, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	4413      	add	r3, r2
 800048a:	3303      	adds	r3, #3
 800048c:	2208      	movs	r2, #8
 800048e:	68f8      	ldr	r0, [r7, #12]
 8000490:	f000 fea3 	bl	80011da <canardEncodeScalar>

        *bit_ofs += 8;
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f103 0208 	add.w	r2, r3, #8
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < unique_id_len; i++) {
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	3301      	adds	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d3e8      	bcc.n	8000480 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x7a>





}
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af02      	add	r7, sp, #8
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
 80004c4:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2300      	movs	r3, #0
 80004d0:	2207      	movs	r2, #7
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f000 fcf8 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 7;
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	1dda      	adds	r2, r3, #7
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	6819      	ldr	r1, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	2201      	movs	r2, #1
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	f000 fce9 	bl	8000ec8 <canardDecodeScalar>

    *bit_ofs += 1;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]





    if (!tao) {
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	f083 0301 	eor.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00f      	beq.n	800052c <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2205      	movs	r2, #5
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f000 fcd4 	bl	8000ec8 <canardDecodeScalar>
        *bit_ofs += 5;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	1d5a      	adds	r2, r3, #5
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e00a      	b.n	8000542 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	8a9b      	ldrh	r3, [r3, #20]
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	461a      	mov	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b2da      	uxtb	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	2b10      	cmp	r3, #16
 8000548:	d901      	bls.n	800054e <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 800054a:	2301      	movs	r3, #1
 800054c:	e01e      	b.n	800058c <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e014      	b.n	800057e <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	4413      	add	r3, r2
 800055e:	3303      	adds	r3, #3
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	2208      	movs	r2, #8
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f000 fcae 	bl	8000ec8 <canardDecodeScalar>

        *bit_ofs += 8;
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f103 0208 	add.w	r2, r3, #8
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	789b      	ldrb	r3, [r3, #2]
 8000582:	461a      	mov	r2, r3
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	4293      	cmp	r3, r2
 8000588:	d3e4      	bcc.n	8000554 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 800058a:	2300      	movs	r3, #0

}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <uavcan_protocol_dynamic_node_id_Allocation_encode>:

uint32_t uavcan_protocol_dynamic_node_id_Allocation_encode(struct uavcan_protocol_dynamic_node_id_Allocation* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE);
 80005a2:	2212      	movs	r2, #18
 80005a4:	2100      	movs	r1, #0
 80005a6:	6838      	ldr	r0, [r7, #0]
 80005a8:	f005 f856 	bl	8005658 <memset>
    _uavcan_protocol_dynamic_node_id_Allocation_encode(buffer, &bit_ofs, msg, 
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	2301      	movs	r3, #1
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	6838      	ldr	r0, [r7, #0]
 80005b6:	f7ff ff26 	bl	8000406 <_uavcan_protocol_dynamic_node_id_Allocation_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3307      	adds	r3, #7
 80005be:	08db      	lsrs	r3, r3, #3
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 80005d6:	f107 0108 	add.w	r1, r7, #8
 80005da:	2301      	movs	r3, #1
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff6a 	bl	80004b8 <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80005ea:	2301      	movs	r3, #1
 80005ec:	e00c      	b.n	8000608 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3307      	adds	r3, #7
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	8a9b      	ldrh	r3, [r3, #20]
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4293      	cmp	r3, r2
 8000600:	bf14      	ite	ne
 8000602:	2301      	movne	r3, #1
 8000604:	2300      	moveq	r3, #0
 8000606:	b2db      	uxtb	r3, r3
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL25StaticOnTransferReceptionP14CanardInstanceP16CanardRxTransfer>:

#include "can.hpp"

static void StaticOnTransferReception(CanardInstance* ins, CanardRxTransfer* transfer) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
    CAN* self = static_cast<CAN*>(ins->user_reference);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800061e:	60fb      	str	r3, [r7, #12]
    self->CanardOnTransferReception(ins, transfer);
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f000 f8f3 	bl	8000810 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_ZL26StaticShouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:

static bool StaticShouldAcceptTransfer(const CanardInstance* ins, uint64_t* out_sig, uint16_t id, CanardTransferType type, uint8_t src) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af02      	add	r7, sp, #8
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	4611      	mov	r1, r2
 800063e:	461a      	mov	r2, r3
 8000640:	460b      	mov	r3, r1
 8000642:	80fb      	strh	r3, [r7, #6]
 8000644:	4613      	mov	r3, r2
 8000646:	717b      	strb	r3, [r7, #5]

	return static_cast<CAN*>(ins->user_reference)->CanardShouldAcceptTransfer(ins, out_sig, id, type, src);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	7e3b      	ldrb	r3, [r7, #24]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4613      	mov	r3, r2
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	68f9      	ldr	r1, [r7, #12]
 800065c:	f000 f898 	bl	8000790 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>
 8000660:	4603      	mov	r3, r0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <_ZN4ICANC1Ev>:
#pragma once

class ICAN {

protected:
	ICAN() = default;
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <_ZN4ICANC1Ev+0x1c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	0800579c 	.word	0x0800579c

0800068c <_ZN4ICAND1Ev>:

public:
	virtual ~ICAN() = default;
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <_ZN4ICAND1Ev+0x1c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	0800579c 	.word	0x0800579c

080006ac <_ZN4ICAND0Ev>:
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ffe9 	bl	800068c <_ZN4ICAND1Ev>
 80006ba:	2104      	movs	r1, #4
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f004 ffb3 	bl	8005628 <_ZdlPvj>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_ZN3CANC1EP19FDCAN_HandleTypeDef>:

CAN::CAN(FDCAN_HandleTypeDef *hfdcan) : hfdcan(hfdcan) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffc7 	bl	800066c <_ZN4ICANC1Ev>
 80006de:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x6c>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2202      	movs	r2, #2
 80006e8:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	f8c3 2c0c 	str.w	r2, [r3, #3084]	@ 0xc0c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
	static uint8_t canardMemoryPool[1024];

	canardInit(&canard,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f503 6041 	add.w	r0, r3, #3088	@ 0xc10
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x70>)
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x74>)
 800070c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000710:	490c      	ldr	r1, [pc, #48]	@ (8000744 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x78>)
 8000712:	f000 fac5 	bl	8000ca0 <canardInit>
			&StaticOnTransferReception,
			&StaticShouldAcceptTransfer,
			this
	);

	nodeStatus = {0};
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]

	canard.node_id = NODE_ID;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2201      	movs	r2, #1
 8000728:	f883 2c10 	strb.w	r2, [r3, #3088]	@ 0xc10
}
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	0800578c 	.word	0x0800578c
 800073c:	08000633 	.word	0x08000633
 8000740:	08000611 	.word	0x08000611
 8000744:	20000078 	.word	0x20000078

08000748 <_ZN3CAND1Ev>:

CAN::~CAN() {}
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <_ZN3CAND1Ev+0x20>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff97 	bl	800068c <_ZN4ICAND1Ev>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800578c 	.word	0x0800578c

0800076c <_ZN3CAND0Ev>:
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ffe7 	bl	8000748 <_ZN3CAND1Ev>
 800077a:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f004 ff52 	bl	8005628 <_ZdlPvj>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh>:
	const CanardInstance *ins,
	uint64_t *out_data_type_signature,
	uint16_t data_type_id,
	CanardTransferType transfer_type,
	uint8_t source_node_id)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	807b      	strh	r3, [r7, #2]
	if (transfer_type == CanardTransferTypeRequest) {
 800079e:	7e3b      	ldrb	r3, [r7, #24]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d124      	bne.n	80007ee <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
		// check if we want to handle a specific service request
		switch (data_type_id) {
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d004      	beq.n	80007b4 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x24>
 80007aa:	f240 1255 	movw	r2, #341	@ 0x155
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d01b      	beq.n	80007ea <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5a>
 80007b2:	e01c      	b.n	80007ee <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x5e>
			case UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID:
			/* case UAVCAN_PROTOCOL_GETNODEINFO_ID: */ {
				if (transfer_type == CanardTransferTypeResponse || transfer_type == CanardTransferTypeRequest) {
 80007b4:	7e3b      	ldrb	r3, [r7, #24]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x30>
 80007ba:	7e3b      	ldrb	r3, [r7, #24]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d107      	bne.n	80007d0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x40>
					*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	a30f      	add	r3, pc, #60	@ (adr r3, 8000800 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x70>)
 80007c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c8:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e00f      	b.n	80007f0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else if (transfer_type == CanardTransferTypeBroadcast) {
 80007d0:	7e3b      	ldrb	r3, [r7, #24]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d107      	bne.n	80007e6 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x56>
					*out_data_type_signature = UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_SIGNATURE;
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	a30b      	add	r3, pc, #44	@ (adr r3, 8000808 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x78>)
 80007da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007de:	e9c1 2300 	strd	r2, r3, [r1]
					return true;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e004      	b.n	80007f0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
				else {
					return false;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e002      	b.n	80007f0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
				}
			}
			case UAVCAN_PROTOCOL_NODESTATUS_ID: {
				return true;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e000      	b.n	80007f0 <_ZN3CAN26CanardShouldAcceptTransferEPK14CanardInstancePyt18CanardTransferTypeh+0x60>
			}
		}
	}
	return false;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	f3af 8000 	nop.w
 8000800:	21c46a9e 	.word	0x21c46a9e
 8000804:	ee468a81 	.word	0xee468a81
 8000808:	20a11d40 	.word	0x20a11d40
 800080c:	0b2a8126 	.word	0x0b2a8126

08000810 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer>:

void CAN::CanardOnTransferReception(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    if (transfer->transfer_type == CanardTransferTypeRequest) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7e1b      	ldrb	r3, [r3, #24]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d11b      	bne.n	800085c <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4c>
        // check if we want to handle a specific service request
        switch (transfer->data_type_id) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	8adb      	ldrh	r3, [r3, #22]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d004      	beq.n	8000836 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x26>
 800082c:	f240 1255 	movw	r2, #341	@ 0x155
 8000830:	4293      	cmp	r3, r2
 8000832:	d00d      	beq.n	8000850 <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x40>
				handleNodeStatus(transfer);
				break;
			}
        }
    }
}
 8000834:	e012      	b.n	800085c <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4c>
				if (transfer->transfer_type == CanardTransferTypeResponse) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7e1b      	ldrb	r3, [r3, #24]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00d      	beq.n	800085a <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4a>
				else if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7e1b      	ldrb	r3, [r3, #24]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d109      	bne.n	800085a <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4a>
					handleNodeAllocation(transfer);
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f000 f859 	bl	8000900 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>
				break;
 800084e:	e004      	b.n	800085a <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4a>
				handleNodeStatus(transfer);
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	68f8      	ldr	r0, [r7, #12]
 8000854:	f000 f806 	bl	8000864 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>
				break;
 8000858:	e000      	b.n	800085c <_ZN3CAN25CanardOnTransferReceptionEP14CanardInstanceP16CanardRxTransfer+0x4c>
				break;
 800085a:	bf00      	nop
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer>:


void CAN::handleNodeStatus(CanardRxTransfer *transfer) {
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
	uint32_t tick = HAL_GetTick();
 800086e:	f001 fde3 	bl	8002438 <HAL_GetTick>
 8000872:	6278      	str	r0, [r7, #36]	@ 0x24

	canNode node {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]

	node.lastSeenTick = tick;
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	2200      	movs	r2, #0
 800088a:	461c      	mov	r4, r3
 800088c:	4615      	mov	r5, r2
 800088e:	e9c7 4502 	strd	r4, r5, [r7, #8]

	bool success = uavcan_protocol_NodeStatus_decode(transfer, &node.status);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	3308      	adds	r3, #8
 8000898:	4619      	mov	r1, r3
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f7ff fd8f 	bl	80003be <uavcan_protocol_NodeStatus_decode>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (!success) return;
 80008a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d11c      	bne.n	80008ee <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8a>

	// Node ID out of bounds or is anonymous
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	7edb      	ldrb	r3, [r3, #27]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db19      	blt.n	80008f2 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x8e>
	if (transfer->source_node_id == 0) return;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	7edb      	ldrb	r3, [r3, #27]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d017      	beq.n	80008f6 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x92>

	canNodes[transfer->source_node_id] = node;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	7edb      	ldrb	r3, [r3, #27]
 80008ca:	4619      	mov	r1, r3
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	460b      	mov	r3, r1
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	440b      	add	r3, r1
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	4413      	add	r3, r2
 80008d8:	3308      	adds	r3, #8
 80008da:	461d      	mov	r5, r3
 80008dc:	f107 0408 	add.w	r4, r7, #8
 80008e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80008ec:	e004      	b.n	80008f8 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (!success) return;
 80008ee:	bf00      	nop
 80008f0:	e002      	b.n	80008f8 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id > CANARD_MAX_NODE_ID) return;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <_ZN3CAN16handleNodeStatusEP16CanardRxTransfer+0x94>
	if (transfer->source_node_id == 0) return;
 80008f6:	bf00      	nop
}
 80008f8:	3728      	adds	r7, #40	@ 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000900 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer>:

void CAN::handleNodeAllocation(CanardRxTransfer *transfer){
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af06      	add	r7, sp, #24
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]

	uint8_t first_half_unique_id[8];

 	if (transfer->source_node_id != 0) // the source node is not 0, it is not anonymous
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	7edb      	ldrb	r3, [r3, #27]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d142      	bne.n	8000998 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x98>
	{
		return;
	}

    struct uavcan_protocol_dynamic_node_id_Allocation msg = {};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	f8c3 200f 	str.w	r2, [r3, #15]
	uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f7ff fe4c 	bl	80005c8 <uavcan_protocol_dynamic_node_id_Allocation_decode>

	if (msg.node_id != 0) // the node id is not 0, it is not anonymous
 8000930:	7f3b      	ldrb	r3, [r7, #28]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d132      	bne.n	800099c <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9c>
	{
		return;
	}

	memcpy(first_half_unique_id, msg.unique_id.data, 8);
 8000936:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800093a:	f107 021f 	add.w	r2, r7, #31
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6851      	ldr	r1, [r2, #4]
 8000942:	c303      	stmia	r3!, {r0, r1}

	// Generate the node id and allocate it
	msg.node_id = allocateNode();
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f833 	bl	80009b0 <_ZN3CAN12allocateNodeEv>
 800094a:	4603      	mov	r3, r0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	773b      	strb	r3, [r7, #28]

	if (msg.node_id == -1){
		return;
	}

	msg = {};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	f8c3 200f 	str.w	r2, [r3, #15]

	// Send message back
	uint8_t decode_buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
	uavcan_protocol_dynamic_node_id_Allocation_encode(&msg, decode_buffer);
 8000962:	f107 0208 	add.w	r2, r7, #8
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe11 	bl	8000594 <uavcan_protocol_dynamic_node_id_Allocation_encode>



	broadcast(
 8000972:	2312      	movs	r3, #18
 8000974:	9304      	str	r3, [sp, #16]
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	9303      	str	r3, [sp, #12]
 800097c:	2318      	movs	r3, #24
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2300      	movs	r3, #0
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	2301      	movs	r3, #1
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	a307      	add	r3, pc, #28	@ (adr r3, 80009a8 <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0xa8>)
 800098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800098e:	2100      	movs	r1, #0
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f95e 	bl	8000c52 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
 8000996:	e002      	b.n	800099e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 8000998:	bf00      	nop
 800099a:	e000      	b.n	800099e <_ZN3CAN20handleNodeAllocationEP16CanardRxTransfer+0x9e>
		return;
 800099c:	bf00      	nop
		CANARD_TRANSFER_PRIORITY_LOW,
		decode_buffer,
		sizeof(decode_buffer)
	);

}
 800099e:	3738      	adds	r7, #56	@ 0x38
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	f3af 8000 	nop.w
 80009a8:	20a11d40 	.word	0x20a11d40
 80009ac:	0b2a8126 	.word	0x0b2a8126

080009b0 <_ZN3CAN12allocateNodeEv>:

int8_t CAN::allocateNode() {
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	// check if the node id is already allocated
	int currId = nextAvailableID;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 80009be:	60fb      	str	r3, [r7, #12]

	if (currId > CANARD_MAX_NODE_ID) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80009c4:	dd02      	ble.n	80009cc <_ZN3CAN12allocateNodeEv+0x1c>
		return -1; // no more node ids available
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ca:	e009      	b.n	80009e0 <_ZN3CAN12allocateNodeEv+0x30>
	}

	nextAvailableID++;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 3c08 	ldrb.w	r3, [r3, #3080]	@ 0xc08
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f883 2c08 	strb.w	r2, [r3, #3080]	@ 0xc08

	return currId;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	b25b      	sxtb	r3, r3
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_ZN3CAN9sendCANTxEv>:
/*
Function to convert all canard CAN frames and send them through HAL

Consider removing for loop
*/
void CAN::sendCANTx() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	while (1) {
		CanardCANFrame* frame = canardPeekTxQueue(&canard);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fa3c 	bl	8000e78 <canardPeekTxQueue>
 8000a00:	6378      	str	r0, [r7, #52]	@ 0x34
		if (frame == nullptr) break;
 8000a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d03b      	beq.n	8000a80 <_ZN3CAN9sendCANTxEv+0x94>
		if (HAL_FDCAN_GetTxFifoFreeLevel(hfdcan) > 0) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 f996 	bl	8002d40 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0e7      	beq.n	80009f4 <_ZN3CAN9sendCANTxEv+0x8>
			FDCAN_TxHeaderTypeDef txHeader;

			txHeader.Identifier = frame->id;
 8000a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60bb      	str	r3, [r7, #8]
			txHeader.IdType = FDCAN_EXTENDED_ID;
 8000a2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a2e:	60fb      	str	r3, [r7, #12]
			txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
			txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000a34:	2308      	movs	r3, #8
 8000a36:	617b      	str	r3, [r7, #20]
			txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
			txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
			txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]

			const uint8_t *txData = frame->data;
 8000a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a46:	3304      	adds	r3, #4
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30

			bool success = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, txData) == HAL_OK;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	@ 0xc0c
 8000a50:	f107 0108 	add.w	r1, r7, #8
 8000a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 f826 	bl	8002aa8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf0c      	ite	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	2300      	movne	r3, #0
 8000a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			if (success) {
 8000a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0c0      	beq.n	80009f4 <_ZN3CAN9sendCANTxEv+0x8>
				canardPopTxQueue(&canard);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fa10 	bl	8000e9e <canardPopTxQueue>
			}
		}
	}
 8000a7e:	e7b9      	b.n	80009f4 <_ZN3CAN9sendCANTxEv+0x8>
		if (frame == nullptr) break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	@ 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_ZN3CAN12routineTasksEv>:

bool CAN::routineTasks() {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
	sendCANTx();
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffaa 	bl	80009ec <_ZN3CAN9sendCANTxEv>

	uint32_t tick = HAL_GetTick();
 8000a98:	f001 fcce 	bl	8002438 <HAL_GetTick>
 8000a9c:	60f8      	str	r0, [r7, #12]

	if (tick > last1HzTick + UAVCAN_PROTOCOL_NODESTATUS_MAX_BROADCASTING_PERIOD_MS/2) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 8000aa4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d906      	bls.n	8000abc <_ZN3CAN12routineTasksEv+0x32>
		last1HzTick = tick;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	f8c3 2c48 	str.w	r2, [r3, #3144]	@ 0xc48
		process1HzTasks();
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f872 	bl	8000ba0 <_ZN3CAN15process1HzTasksEv>
	}

	return true;
 8000abc:	2301      	movs	r3, #1
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <_ZN3CAN14sendNodeStatusEv>:

void CAN::sendNodeStatus() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0e8      	sub	sp, #416	@ 0x1a0
 8000acc:	af06      	add	r7, sp, #24
 8000ace:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ad2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000ad6:	6018      	str	r0, [r3, #0]
	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    nodeStatus.uptime_sec = HAL_GetTick()/1000LL;
 8000ad8:	f001 fcae 	bl	8002438 <HAL_GetTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a2e      	ldr	r2, [pc, #184]	@ (8000b98 <_ZN3CAN14sendNodeStatusEv+0xd0>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	099a      	lsrs	r2, r3, #6
 8000ae6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000aea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f8c3 2c3c 	str.w	r2, [r3, #3132]	@ 0xc3c
    nodeStatus.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8000af4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000af8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2c40 	strb.w	r2, [r3, #3136]	@ 0xc40
    nodeStatus.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 8000b04:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b08:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2c41 	strb.w	r2, [r3, #3137]	@ 0xc41
    nodeStatus.sub_mode = 0;
 8000b14:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b18:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2c42 	strb.w	r2, [r3, #3138]	@ 0xc42
    // put whatever you like in here for display in GUI
    nodeStatus.vendor_specific_status_code = 1234;
 8000b24:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8000b32:	f8a3 2c44 	strh.w	r2, [r3, #3140]	@ 0xc44

    uint32_t len = uavcan_protocol_NodeStatus_encode(&nodeStatus, buffer);
 8000b36:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b3a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f603 433c 	addw	r3, r3, #3132	@ 0xc3c
 8000b44:	f107 0208 	add.w	r2, r7, #8
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fc1d 	bl	800038a <uavcan_protocol_NodeStatus_encode>
 8000b50:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;


    broadcast(CanardTransferTypeBroadcast,
 8000b54:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8000b5e:	f5a2 70c2 	sub.w	r0, r2, #388	@ 0x184
 8000b62:	9304      	str	r3, [sp, #16]
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	9303      	str	r3, [sp, #12]
 8000b6a:	2318      	movs	r3, #24
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <_ZN3CAN14sendNodeStatusEv+0xd4>)
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	f240 1355 	movw	r3, #341	@ 0x155
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	a305      	add	r3, pc, #20	@ (adr r3, 8000b90 <_ZN3CAN14sendNodeStatusEv+0xc8>)
 8000b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7e:	2102      	movs	r1, #2
 8000b80:	6800      	ldr	r0, [r0, #0]
 8000b82:	f000 f866 	bl	8000c52 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			&transfer_id,
			CANARD_TRANSFER_PRIORITY_LOW,
			buffer,
			len
	);
}
 8000b86:	bf00      	nop
 8000b88:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	c1a7c6f1 	.word	0xc1a7c6f1
 8000b94:	0f0868d0 	.word	0x0f0868d0
 8000b98:	10624dd3 	.word	0x10624dd3
 8000b9c:	20000478 	.word	0x20000478

08000ba0 <_ZN3CAN15process1HzTasksEv>:

void CAN::process1HzTasks() {
 8000ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ba4:	b08b      	sub	sp, #44	@ 0x2c
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]

	uint32_t timestamp_msec = HAL_GetTick();
 8000baa:	f001 fc45 	bl	8002438 <HAL_GetTick>
 8000bae:	6238      	str	r0, [r7, #32]

	// Check if nodes invalid
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb4:	e02e      	b.n	8000c14 <_ZN3CAN15process1HzTasksEv+0x74>
		// Make copy of status in case it changes
		canNode node = canNodes[i];
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	f107 0608 	add.w	r6, r7, #8
 8000bca:	469c      	mov	ip, r3
 8000bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bd0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bd2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000bd6:	e886 0003 	stmia.w	r6, {r0, r1}

		if (timestamp_msec-node.lastSeenTick > UAVCAN_PROTOCOL_NODESTATUS_OFFLINE_TIMEOUT_MS) {
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4698      	mov	r8, r3
 8000be0:	4691      	mov	r9, r2
 8000be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000be6:	ebb8 0402 	subs.w	r4, r8, r2
 8000bea:	eb69 0503 	sbc.w	r5, r9, r3
 8000bee:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	f175 0300 	sbcs.w	r3, r5, #0
 8000bf8:	d309      	bcc.n	8000c0e <_ZN3CAN15process1HzTasksEv+0x6e>
			canNodes[i].status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE;
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	3315      	adds	r3, #21
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	701a      	strb	r2, [r3, #0]
	for (int i = CANARD_MIN_NODE_ID; i <= CANARD_MAX_NODE_ID; i++) {
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c10:	3301      	adds	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c18:	ddcd      	ble.n	8000bb6 <_ZN3CAN15process1HzTasksEv+0x16>
		}
	}

	// Transmit NodeStatus
	sendNodeStatus();
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ff54 	bl	8000ac8 <_ZN3CAN14sendNodeStatusEv>
}
 8000c20:	bf00      	nop
 8000c22:	372c      	adds	r7, #44	@ 0x2c
 8000c24:	46bd      	mov	sp, r7
 8000c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c2a <_ZN3CAN12broadcastObjEP16CanardTxTransfer>:


/*
Wrapper function with mutex
*/
int16_t CAN::broadcastObj(CanardTxTransfer* transfer) {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]

//	if (status != osOK){
//		return -1; // handle failure
//	}

	int16_t res = canardBroadcastObj(&canard, transfer);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f503 6341 	add.w	r3, r3, #3088	@ 0xc10
 8000c3a:	6839      	ldr	r1, [r7, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f86f 	bl	8000d20 <canardBroadcastObj>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]
//	osMutexRelease(canBroadcastMutex);

	return res;
 8000c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>:
	#endif
	#if CANARD_ENABLE_TAO_OPTION
		, bool tao; ///< True if tail array optimization is enabled
	#endif
)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b08e      	sub	sp, #56	@ 0x38
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	e9c7 2300 	strd	r2, r3, [r7]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	72fb      	strb	r3, [r7, #11]
			iface_mask = iface_mask, ///< Bitmask of interfaces to send the transfer on
		#endif
		#if CANARD_ENABLE_TAO_OPTION
			tao = tao, ///< True if tail array optimization is enabled
		#endif
	};
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	743b      	strb	r3, [r7, #16]
 8000c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000c72:	843b      	strh	r3, [r7, #32]
 8000c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c78:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000c7c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000c88:	863b      	strh	r3, [r7, #48]	@ 0x30

	return broadcastObj(&transfer_object);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff ffca 	bl	8000c2a <_ZN3CAN12broadcastObjEP16CanardTxTransfer>
 8000c96:	4603      	mov	r3, r0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3738      	adds	r7, #56	@ 0x38
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <canardInit>:
                 void* mem_arena,
                 size_t mem_arena_size,
                 CanardOnTransferReception on_reception,
                 CanardShouldAcceptTransfer should_accept,
                 void* user_reference)
 {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
      * If your application fails here, make sure it's not built in 64-bit mode.
      * Refer to the design documentation for more info.
      */
     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

     memset(out_ins, 0, sizeof(*out_ins));
 8000cae:	222c      	movs	r2, #44	@ 0x2c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f004 fcd0 	bl	8005658 <memset>

     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
     out_ins->on_reception = on_reception;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	609a      	str	r2, [r3, #8]
     out_ins->should_accept = should_accept;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	605a      	str	r2, [r3, #4]
     out_ins->rx_states = NULL;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
     out_ins->tx_queue = NULL;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
     out_ins->user_reference = user_reference;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cda:	629a      	str	r2, [r3, #40]	@ 0x28
 #if CANARD_ENABLE_TAO_OPTION
     out_ins->tao_disabled = false;
 #endif
     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	617b      	str	r3, [r7, #20]
     if (pool_capacity > 0xFFFFU)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce8:	d302      	bcc.n	8000cf0 <canardInit+0x50>
     {
         pool_capacity = 0xFFFFU;
 8000cea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cee:	617b      	str	r3, [r7, #20]
     }

     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff6f 	bl	8001bde <initPoolAllocator>
 }
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 }
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <canardBroadcastObj>:

     return canardBroadcastObj(ins, &transfer_object);
 }

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d106      	bne.n	8000d40 <canardBroadcastObj+0x20>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	8c1b      	ldrh	r3, [r3, #32]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d3a:	f06f 0301 	mvn.w	r3, #1
 8000d3e:	e070      	b.n	8000e22 <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	7e1b      	ldrb	r3, [r3, #24]
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	d902      	bls.n	8000d4e <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d48:	f06f 0301 	mvn.w	r3, #1
 8000d4c:	e069      	b.n	8000e22 <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 8000d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d56:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ffd5 	bl	8000d08 <canardGetLocalNodeID>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d138      	bne.n	8000dd6 <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	8c1b      	ldrh	r3, [r3, #32]
 8000d68:	2b07      	cmp	r3, #7
 8000d6a:	d902      	bls.n	8000d72 <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000d6c:	f06f 0303 	mvn.w	r3, #3
 8000d70:	e057      	b.n	8000e22 <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	8a1a      	ldrh	r2, [r3, #16]
 8000d76:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <canardBroadcastObj+0x10c>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	8a1b      	ldrh	r3, [r3, #16]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d002      	beq.n	8000d8c <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d86:	f06f 0301 	mvn.w	r3, #1
 8000d8a:	e04a      	b.n	8000e22 <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	69d9      	ldr	r1, [r3, #28]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	8c1b      	ldrh	r3, [r3, #32]
 8000d94:	461a      	mov	r2, r3
 8000d96:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d9a:	f000 ff03 	bl	8001ba4 <crcAdd>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000da6:	4013      	ands	r3, r2
 8000da8:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	7e1b      	ldrb	r3, [r3, #24]
 8000dae:	061a      	lsls	r2, r3, #24
 8000db0:	8a3b      	ldrh	r3, [r7, #16]
 8000db2:	025b      	lsls	r3, r3, #9
 8000db4:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	8a19      	ldrh	r1, [r3, #16]
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <canardBroadcastObj+0x10c>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000dc4:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff9d 	bl	8000d08 <canardGetLocalNodeID>
 8000dce:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e012      	b.n	8000dfc <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	7e1b      	ldrb	r3, [r3, #24]
 8000dda:	061a      	lsls	r2, r3, #24
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	8a1b      	ldrh	r3, [r3, #16]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	ea42 0403 	orr.w	r4, r2, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff8e 	bl	8000d08 <canardGetLocalNodeID>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4323      	orrs	r3, r4
 8000df0:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 8000df2:	6838      	ldr	r0, [r7, #0]
 8000df4:	f000 f81c 	bl	8000e30 <calculateCRC>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000dfc:	8a7a      	ldrh	r2, [r7, #18]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6979      	ldr	r1, [r7, #20]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fadb 	bl	80013be <enqueueTxFrames>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 8000e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd04      	ble.n	8000e1e <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fa5b 	bl	80012d4 <incrementTransferID>
     }

     return result;
 8000e1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 8000e22:	4618      	mov	r0, r3
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	080057a4 	.word	0x080057a4

08000e30 <calculateCRC>:
     return (canard_buffer_idx_t)rx;
 #endif
 }

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 8000e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e3c:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8c1b      	ldrh	r3, [r3, #32]
 8000e42:	2b07      	cmp	r3, #7
 8000e44:	d913      	bls.n	8000e6e <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e4c:	89f9      	ldrh	r1, [r7, #14]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	f000 fe79 	bl	8001b46 <crcAddSignature>
 8000e54:	4603      	mov	r3, r0
 8000e56:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69d9      	ldr	r1, [r3, #28]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8c1b      	ldrh	r3, [r3, #32]
 8000e60:	461a      	mov	r2, r3
 8000e62:	89fb      	ldrh	r3, [r7, #14]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fe9d 	bl	8001ba4 <crcAdd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 8000e6e:	89fb      	ldrh	r3, [r7, #14]
 }
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <canardPeekTxQueue+0x14>
     {
         return NULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e002      	b.n	8000e92 <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	3304      	adds	r3, #4
 }
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	330c      	adds	r3, #12
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 feef 	bl	8001c9e <freeBlock>
 }
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <canardDecodeScalar>:
 int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                            uint32_t bit_offset,
                            uint8_t bit_length,
                            bool value_is_signed,
                            void* out_value)
 {
 8000ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ecc:	b08d      	sub	sp, #52	@ 0x34
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	61f8      	str	r0, [r7, #28]
 8000ed2:	61b9      	str	r1, [r7, #24]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	4613      	mov	r3, r2
 8000ede:	75bb      	strb	r3, [r7, #22]
     if (transfer == NULL || out_value == NULL)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <canardDecodeScalar+0x24>
 8000ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <canardDecodeScalar+0x2a>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000eec:	f06f 0301 	mvn.w	r3, #1
 8000ef0:	e16e      	b.n	80011d0 <canardDecodeScalar+0x308>
     }

     if (bit_length < 1 || bit_length > 64)
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <canardDecodeScalar+0x36>
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b40      	cmp	r3, #64	@ 0x40
 8000efc:	d902      	bls.n	8000f04 <canardDecodeScalar+0x3c>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000efe:	f06f 0301 	mvn.w	r3, #1
 8000f02:	e165      	b.n	80011d0 <canardDecodeScalar+0x308>
     }

     if (bit_length == 1 && value_is_signed)
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d105      	bne.n	8000f16 <canardDecodeScalar+0x4e>
 8000f0a:	7dbb      	ldrb	r3, [r7, #22]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <canardDecodeScalar+0x4e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8000f10:	f06f 0301 	mvn.w	r3, #1
 8000f14:	e15c      	b.n	80011d0 <canardDecodeScalar+0x308>
         uint64_t u64;
         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));   // This is important
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 fb9a 	bl	8005658 <memset>

     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	7dfa      	ldrb	r2, [r7, #23]
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 fca5 	bl	800187c <descatterTransferPayload>
 8000f32:	4603      	mov	r3, r0
 8000f34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if (result <= 0)
 8000f36:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dc02      	bgt.n	8000f44 <canardDecodeScalar+0x7c>
     {
         return result;
 8000f3e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f42:	e145      	b.n	80011d0 <canardDecodeScalar+0x308>
      * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
      * Extra most significant bits will be filled with zeroes, which is fine.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d018      	beq.n	8000f82 <canardDecodeScalar+0xba>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	08db      	lsrs	r3, r3, #3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3320      	adds	r3, #32
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f62:	461a      	mov	r2, r3
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	425b      	negs	r3, r3
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	411a      	asrs	r2, r3
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	3320      	adds	r3, #32
 8000f78:	f107 0110 	add.w	r1, r7, #16
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
      */
     uint8_t std_byte_length = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d103      	bne.n	8000f96 <canardDecodeScalar+0xce>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f94:	e01e      	b.n	8000fd4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 8)   { std_byte_length = 1; }
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d803      	bhi.n	8000fa4 <canardDecodeScalar+0xdc>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fa2:	e017      	b.n	8000fd4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 16)  { std_byte_length = 2; }
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b10      	cmp	r3, #16
 8000fa8:	d803      	bhi.n	8000fb2 <canardDecodeScalar+0xea>
 8000faa:	2302      	movs	r3, #2
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fb0:	e010      	b.n	8000fd4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 32)  { std_byte_length = 4; }
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d803      	bhi.n	8000fc0 <canardDecodeScalar+0xf8>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fbe:	e009      	b.n	8000fd4 <canardDecodeScalar+0x10c>
     else if (bit_length <= 64)  { std_byte_length = 8; }
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b40      	cmp	r3, #64	@ 0x40
 8000fc4:	d803      	bhi.n	8000fce <canardDecodeScalar+0x106>
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fcc:	e002      	b.n	8000fd4 <canardDecodeScalar+0x10c>
     else
     {
         CANARD_ASSERT(false);
         return -CANARD_ERROR_INTERNAL;
 8000fce:	f06f 0308 	mvn.w	r3, #8
 8000fd2:	e0fd      	b.n	80011d0 <canardDecodeScalar+0x308>
     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

     /*
      * Flipping the byte order if needed.
      */
     if (isBigEndian())
 8000fd4:	f000 fd47 	bl	8001a66 <isBigEndian>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <canardDecodeScalar+0x126>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 8000fde:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fd4d 	bl	8001a88 <swapByteOrder>

     /*
      * Extending the sign bit if needed. I miss templates.
      * Note that we operate on unsigned values in order to avoid undefined behaviors.
      */
     if (value_is_signed && (std_byte_length * 8 != bit_length))
 8000fee:	7dbb      	ldrb	r3, [r7, #22]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 809b 	beq.w	800112c <canardDecodeScalar+0x264>
 8000ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ffa:	00da      	lsls	r2, r3, #3
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	f000 8094 	beq.w	800112c <canardDecodeScalar+0x264>
     {
         if (bit_length <= 8)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d819      	bhi.n	800103e <canardDecodeScalar+0x176>
         {
             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 800100a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800100e:	461a      	mov	r2, r3
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	3b01      	subs	r3, #1
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8085 	beq.w	800112c <canardDecodeScalar+0x264>
             {
                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001022:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f887 3020 	strb.w	r3, [r7, #32]
 800103c:	e076      	b.n	800112c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 16)
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	2b10      	cmp	r3, #16
 8001042:	d815      	bhi.n	8001070 <canardDecodeScalar+0x1a8>
         {
             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8001044:	8c3b      	ldrh	r3, [r7, #32]
 8001046:	461a      	mov	r2, r3
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	3b01      	subs	r3, #1
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d069      	beq.n	800112c <canardDecodeScalar+0x264>
             {
                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001058:	8c3a      	ldrh	r2, [r7, #32]
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2101      	movs	r1, #1
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	425b      	negs	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	843b      	strh	r3, [r7, #32]
 800106e:	e05d      	b.n	800112c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 32)
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d811      	bhi.n	800109a <canardDecodeScalar+0x1d2>
         {
             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001076:	6a3a      	ldr	r2, [r7, #32]
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	3b01      	subs	r3, #1
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d051      	beq.n	800112c <canardDecodeScalar+0x264>
             {
                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	425b      	negs	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	e048      	b.n	800112c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length < 64)   // Strictly less, this is not a typo
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b3f      	cmp	r3, #63	@ 0x3f
 800109e:	d842      	bhi.n	8001126 <canardDecodeScalar+0x25e>
         {
             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80010a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010a4:	7df9      	ldrb	r1, [r7, #23]
 80010a6:	1e48      	subs	r0, r1, #1
 80010a8:	f1c0 0620 	rsb	r6, r0, #32
 80010ac:	f1a0 0120 	sub.w	r1, r0, #32
 80010b0:	fa22 f400 	lsr.w	r4, r2, r0
 80010b4:	fa03 f606 	lsl.w	r6, r3, r6
 80010b8:	4334      	orrs	r4, r6
 80010ba:	fa23 f101 	lsr.w	r1, r3, r1
 80010be:	430c      	orrs	r4, r1
 80010c0:	fa23 f500 	lsr.w	r5, r3, r0
 80010c4:	f004 0301 	and.w	r3, r4, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010d2:	460b      	mov	r3, r1
 80010d4:	4313      	orrs	r3, r2
 80010d6:	d029      	beq.n	800112c <canardDecodeScalar+0x264>
             {
                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80010d8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80010dc:	7df9      	ldrb	r1, [r7, #23]
 80010de:	f04f 0201 	mov.w	r2, #1
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	f1a1 0620 	sub.w	r6, r1, #32
 80010ea:	f1c1 0020 	rsb	r0, r1, #32
 80010ee:	fa03 f901 	lsl.w	r9, r3, r1
 80010f2:	fa02 f606 	lsl.w	r6, r2, r6
 80010f6:	ea49 0906 	orr.w	r9, r9, r6
 80010fa:	fa22 f000 	lsr.w	r0, r2, r0
 80010fe:	ea49 0900 	orr.w	r9, r9, r0
 8001102:	fa02 f801 	lsl.w	r8, r2, r1
 8001106:	2300      	movs	r3, #0
 8001108:	f1d8 0a00 	rsbs	sl, r8, #0
 800110c:	eb63 0b09 	sbc.w	fp, r3, r9
 8001110:	ea44 030a 	orr.w	r3, r4, sl
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	ea45 030b 	orr.w	r3, r5, fp
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001120:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001124:	e002      	b.n	800112c <canardDecodeScalar+0x264>
             }
         }
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001126:	f06f 0308 	mvn.w	r3, #8
 800112a:	e051      	b.n	80011d0 <canardDecodeScalar+0x308>
     }

     /*
      * Copying the result out.
      */
     if (value_is_signed)
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d022      	beq.n	8001178 <canardDecodeScalar+0x2b0>
     {
         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d804      	bhi.n	8001142 <canardDecodeScalar+0x27a>
 8001138:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800113c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e044      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	2b10      	cmp	r3, #16
 8001146:	d804      	bhi.n	8001152 <canardDecodeScalar+0x28a>
 8001148:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800114c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800114e:	801a      	strh	r2, [r3, #0]
 8001150:	e03c      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	2b20      	cmp	r3, #32
 8001156:	d803      	bhi.n	8001160 <canardDecodeScalar+0x298>
 8001158:	6a3a      	ldr	r2, [r7, #32]
 800115a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e035      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b40      	cmp	r3, #64	@ 0x40
 8001164:	d805      	bhi.n	8001172 <canardDecodeScalar+0x2aa>
 8001166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800116a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800116c:	e9c1 2300 	strd	r2, r3, [r1]
 8001170:	e02c      	b.n	80011cc <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001172:	f06f 0308 	mvn.w	r3, #8
 8001176:	e02b      	b.n	80011d0 <canardDecodeScalar+0x308>
         }
     }
     else
     {
         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d104      	bne.n	8001188 <canardDecodeScalar+0x2c0>
 800117e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e021      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b08      	cmp	r3, #8
 800118c:	d804      	bhi.n	8001198 <canardDecodeScalar+0x2d0>
 800118e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e019      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d803      	bhi.n	80011a6 <canardDecodeScalar+0x2de>
 800119e:	8c3a      	ldrh	r2, [r7, #32]
 80011a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011a2:	801a      	strh	r2, [r3, #0]
 80011a4:	e012      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d803      	bhi.n	80011b4 <canardDecodeScalar+0x2ec>
 80011ac:	6a3a      	ldr	r2, [r7, #32]
 80011ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e00b      	b.n	80011cc <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b40      	cmp	r3, #64	@ 0x40
 80011b8:	d805      	bhi.n	80011c6 <canardDecodeScalar+0x2fe>
 80011ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80011c0:	e9c1 2300 	strd	r2, r3, [r1]
 80011c4:	e002      	b.n	80011cc <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 80011c6:	f06f 0308 	mvn.w	r3, #8
 80011ca:	e001      	b.n	80011d0 <canardDecodeScalar+0x308>
         }
     }

     CANARD_ASSERT(result <= bit_length);
     CANARD_ASSERT(result > 0);
     return result;
 80011cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 }
 80011d0:	4618      	mov	r0, r3
 80011d2:	3734      	adds	r7, #52	@ 0x34
 80011d4:	46bd      	mov	sp, r7
 80011d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011da <canardEncodeScalar>:

 void canardEncodeScalar(void* destination,
                         uint32_t bit_offset,
                         uint8_t bit_length,
                         const void* value)
 {
 80011da:	b580      	push	{r7, lr}
 80011dc:	b08a      	sub	sp, #40	@ 0x28
 80011de:	af02      	add	r7, sp, #8
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
      * Maybe not the best solution, but it simplifies the API.
      */
     CANARD_ASSERT(destination != NULL);
     CANARD_ASSERT(value != NULL);

     if (bit_length > 64)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b40      	cmp	r3, #64	@ 0x40
 80011ee:	d901      	bls.n	80011f4 <canardEncodeScalar+0x1a>
     {
         CANARD_ASSERT(false);
         bit_length = 64;
 80011f0:	2340      	movs	r3, #64	@ 0x40
 80011f2:	71fb      	strb	r3, [r7, #7]
     }

     if (bit_length < 1)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <canardEncodeScalar+0x24>
     {
         CANARD_ASSERT(false);
         bit_length = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]
         uint32_t u32;
         uint64_t u64;
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2208      	movs	r2, #8
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fa26 	bl	8005658 <memset>

     uint8_t std_byte_length = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]

     // Extra most significant bits can be safely ignored here.
     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d105      	bne.n	8001222 <canardEncodeScalar+0x48>
 8001216:	2301      	movs	r3, #1
 8001218:	77fb      	strb	r3, [r7, #31]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	743b      	strb	r3, [r7, #16]
 8001220:	e024      	b.n	800126c <canardEncodeScalar+0x92>
     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b08      	cmp	r3, #8
 8001226:	d805      	bhi.n	8001234 <canardEncodeScalar+0x5a>
 8001228:	2301      	movs	r3, #1
 800122a:	77fb      	strb	r3, [r7, #31]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	743b      	strb	r3, [r7, #16]
 8001232:	e01b      	b.n	800126c <canardEncodeScalar+0x92>
     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b10      	cmp	r3, #16
 8001238:	d805      	bhi.n	8001246 <canardEncodeScalar+0x6c>
 800123a:	2302      	movs	r3, #2
 800123c:	77fb      	strb	r3, [r7, #31]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	823b      	strh	r3, [r7, #16]
 8001244:	e012      	b.n	800126c <canardEncodeScalar+0x92>
     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b20      	cmp	r3, #32
 800124a:	d805      	bhi.n	8001258 <canardEncodeScalar+0x7e>
 800124c:	2304      	movs	r3, #4
 800124e:	77fb      	strb	r3, [r7, #31]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e009      	b.n	800126c <canardEncodeScalar+0x92>
     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b40      	cmp	r3, #64	@ 0x40
 800125c:	d806      	bhi.n	800126c <canardEncodeScalar+0x92>
 800125e:	2308      	movs	r3, #8
 8001260:	77fb      	strb	r3, [r7, #31]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	e9c7 2304 	strd	r2, r3, [r7, #16]
             storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
         }
     }
 #endif

     if (isBigEndian())
 800126c:	f000 fbfb 	bl	8001a66 <isBigEndian>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <canardEncodeScalar+0xaa>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 8001276:	7ffa      	ldrb	r2, [r7, #31]
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fc02 	bl	8001a88 <swapByteOrder>
      * Extra least significant bits will be filled with zeroes, which is fine.
      * Extra most significant bits will be discarded here.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d014      	beq.n	80012ba <canardEncodeScalar+0xe0>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3320      	adds	r3, #32
 8001298:	443b      	add	r3, r7
 800129a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800129e:	461a      	mov	r2, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	425b      	negs	r3, r3
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	409a      	lsls	r2, r3
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	3320      	adds	r3, #32
 80012b4:	443b      	add	r3, r7
 80012b6:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Now, the storage contains properly serialized scalar. Copying it out.
      */
     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	f107 0010 	add.w	r0, r7, #16
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2100      	movs	r1, #0
 80012c8:	f000 fa61 	bl	800178e <copyBitArray>
 }
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <incrementTransferID>:
     }
     return d;
 }

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	d902      	bls.n	80012f6 <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
     }
 }
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2b08      	cmp	r3, #8
 8001310:	d801      	bhi.n	8001316 <dlcToDataLength+0x14>
         return dlc;
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	e01e      	b.n	8001354 <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b09      	cmp	r3, #9
 800131a:	d101      	bne.n	8001320 <dlcToDataLength+0x1e>
         return 12;
 800131c:	230c      	movs	r3, #12
 800131e:	e019      	b.n	8001354 <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d101      	bne.n	800132a <dlcToDataLength+0x28>
         return 16;
 8001326:	2310      	movs	r3, #16
 8001328:	e014      	b.n	8001354 <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b0b      	cmp	r3, #11
 800132e:	d101      	bne.n	8001334 <dlcToDataLength+0x32>
         return 20;
 8001330:	2314      	movs	r3, #20
 8001332:	e00f      	b.n	8001354 <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2b0c      	cmp	r3, #12
 8001338:	d101      	bne.n	800133e <dlcToDataLength+0x3c>
         return 24;
 800133a:	2318      	movs	r3, #24
 800133c:	e00a      	b.n	8001354 <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b0d      	cmp	r3, #13
 8001342:	d101      	bne.n	8001348 <dlcToDataLength+0x46>
         return 32;
 8001344:	2320      	movs	r3, #32
 8001346:	e005      	b.n	8001354 <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	2b0e      	cmp	r3, #14
 800134c:	d101      	bne.n	8001352 <dlcToDataLength+0x50>
         return 48;
 800134e:	2330      	movs	r3, #48	@ 0x30
 8001350:	e000      	b.n	8001354 <dlcToDataLength+0x52>
     }
     return 64;
 8001352:	2340      	movs	r3, #64	@ 0x40
 }
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d801      	bhi.n	8001374 <dataLengthToDlc+0x14>
         return data_length;
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	e01e      	b.n	80013b2 <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	d801      	bhi.n	800137e <dataLengthToDlc+0x1e>
         return 9;
 800137a:	2309      	movs	r3, #9
 800137c:	e019      	b.n	80013b2 <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b10      	cmp	r3, #16
 8001382:	d801      	bhi.n	8001388 <dataLengthToDlc+0x28>
         return 10;
 8001384:	230a      	movs	r3, #10
 8001386:	e014      	b.n	80013b2 <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	2b14      	cmp	r3, #20
 800138c:	d801      	bhi.n	8001392 <dataLengthToDlc+0x32>
         return 11;
 800138e:	230b      	movs	r3, #11
 8001390:	e00f      	b.n	80013b2 <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	2b18      	cmp	r3, #24
 8001396:	d801      	bhi.n	800139c <dataLengthToDlc+0x3c>
         return 12;
 8001398:	230c      	movs	r3, #12
 800139a:	e00a      	b.n	80013b2 <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d801      	bhi.n	80013a6 <dataLengthToDlc+0x46>
         return 13;
 80013a2:	230d      	movs	r3, #13
 80013a4:	e005      	b.n	80013b2 <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b30      	cmp	r3, #48	@ 0x30
 80013aa:	d801      	bhi.n	80013b0 <dataLengthToDlc+0x50>
         return 14;
 80013ac:	230e      	movs	r3, #14
 80013ae:	e000      	b.n	80013b2 <dataLengthToDlc+0x52>
     }
     return 15;
 80013b0:	230f      	movs	r3, #15
 }
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b08c      	sub	sp, #48	@ 0x30
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80013d6:	f06f 0301 	mvn.w	r3, #1
 80013da:	e11c      	b.n	8001616 <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	8c1b      	ldrh	r3, [r3, #32]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <enqueueTxFrames+0x34>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80013ec:	f06f 0301 	mvn.w	r3, #1
 80013f0:	e111      	b.n	8001616 <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80013f6:	2308      	movs	r3, #8
 80013f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	8c1a      	ldrh	r2, [r3, #32]
 8001400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001404:	b29b      	uxth	r3, r3
 8001406:	429a      	cmp	r2, r3
 8001408:	d24b      	bcs.n	80014a2 <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f94a 	bl	80016a8 <createTxItem>
 8001414:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800141c:	f06f 0302 	mvn.w	r3, #2
 8001420:	e0f9      	b.n	8001616 <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f103 0008 	add.w	r0, r3, #8
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	69d9      	ldr	r1, [r3, #28]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	8c1b      	ldrh	r3, [r3, #32]
 8001430:	461a      	mov	r2, r3
 8001432:	f004 f93f 	bl	80056b4 <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	8c1b      	ldrh	r3, [r3, #32]
 800143a:	3301      	adds	r3, #1
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff8e 	bl	8001360 <dataLengthToDlc>
 8001444:	4603      	mov	r3, r0
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff5b 	bl	8001302 <dlcToDataLength>
 800144c:	4603      	mov	r3, r0
 800144e:	3b01      	subs	r3, #1
 8001450:	b29a      	uxth	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	8c1b      	ldrh	r3, [r3, #32]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	b2db      	uxtb	r3, r3
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	8c12      	ldrh	r2, [r2, #32]
 8001474:	4611      	mov	r1, r2
 8001476:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800147a:	b2da      	uxtb	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	440b      	add	r3, r1
 8001480:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 800148c:	6979      	ldr	r1, [r7, #20]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f8c5 	bl	800161e <pushTxQueue>
         result++;
 8001494:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001498:	b29b      	uxth	r3, r3
 800149a:	3301      	adds	r3, #1
 800149c:	b29b      	uxth	r3, r3
 800149e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80014a0:	e0b7      	b.n	8001612 <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	8c1b      	ldrh	r3, [r3, #32]
 80014b6:	3302      	adds	r3, #2
 80014b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 80014ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014be:	3b01      	subs	r3, #1
 80014c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 80014c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ca:	3b01      	subs	r3, #1
 80014cc:	441a      	add	r2, r3
 80014ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014d6:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8a9a      	ldrh	r2, [r3, #20]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8adb      	ldrh	r3, [r3, #22]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 80014e4:	8bfa      	ldrh	r2, [r7, #30]
 80014e6:	8c3b      	ldrh	r3, [r7, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d202      	bcs.n	80014f2 <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 80014ec:	f06f 0302 	mvn.w	r3, #2
 80014f0:	e091      	b.n	8001616 <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 80014f6:	e086      	b.n	8001606 <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	330c      	adds	r3, #12
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f8d3 	bl	80016a8 <createTxItem>
 8001502:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 800150a:	f06f 0302 	mvn.w	r3, #2
 800150e:	e082      	b.n	8001616 <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 8001514:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b29b      	uxth	r3, r3
 8001528:	b2da      	uxtb	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	725a      	strb	r2, [r3, #9]
                 i = 2;
 800152e:	2302      	movs	r3, #2
 8001530:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001532:	e012      	b.n	800155a <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001538:	e00f      	b.n	800155a <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001540:	441a      	add	r2, r3
 8001542:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001544:	7811      	ldrb	r1, [r2, #0]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4413      	add	r3, r2
 800154a:	460a      	mov	r2, r1
 800154c:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 800154e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001550:	3301      	adds	r3, #1
 8001552:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001554:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001556:	3301      	adds	r3, #1
 8001558:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800155a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800155c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001560:	3b01      	subs	r3, #1
 8001562:	429a      	cmp	r2, r3
 8001564:	da04      	bge.n	8001570 <enqueueTxFrames+0x1b2>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	8c1b      	ldrh	r3, [r3, #32]
 800156a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800156c:	429a      	cmp	r2, r3
 800156e:	d3e4      	bcc.n	800153a <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	8c1b      	ldrh	r3, [r3, #32]
 8001574:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001576:	429a      	cmp	r2, r3
 8001578:	d002      	beq.n	8001580 <enqueueTxFrames+0x1c2>
 800157a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800157e:	e000      	b.n	8001582 <enqueueTxFrames+0x1c4>
 8001580:	2340      	movs	r3, #64	@ 0x40
 8001582:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001586:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001588:	3301      	adds	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fee7 	bl	8001360 <dataLengthToDlc>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff feb4 	bl	8001302 <dlcToDataLength>
 800159a:	4603      	mov	r3, r0
 800159c:	3b01      	subs	r3, #1
 800159e:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 80015a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80015a4:	015b      	lsls	r3, r3, #5
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015be:	430a      	orrs	r2, r1
 80015c0:	b2d1      	uxtb	r1, r2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4413      	add	r3, r2
 80015c6:	460a      	mov	r2, r1
 80015c8:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 80015d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 80015e0:	69b9      	ldr	r1, [r7, #24]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f81b 	bl	800161e <pushTxQueue>

             result++;
 80015e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 80015f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	8c1b      	ldrh	r3, [r3, #32]
 800160a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	f47f af73 	bne.w	80014f8 <enqueueTxFrames+0x13a>
         }
     }

     return result;
 8001612:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 8001616:	4618      	mov	r0, r3
 8001618:	3730      	adds	r7, #48	@ 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 8001636:	e034      	b.n	80016a2 <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 8001644:	e02a      	b.n	800169c <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4619      	mov	r1, r3
 8001650:	4610      	mov	r0, r2
 8001652:	f000 f840 	bl	80016d6 <isPriorityHigher>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d012      	beq.n	8001682 <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	429a      	cmp	r2, r3
 8001664:	d106      	bne.n	8001674 <pushTxQueue+0x56>
             {
                 item->next = queue;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 8001672:	e016      	b.n	80016a2 <pushTxQueue+0x84>
                 previous->next = item;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	601a      	str	r2, [r3, #0]
             return;
 8001680:	e00f      	b.n	80016a2 <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <pushTxQueue+0x74>
             {
                 queue->next = item;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	601a      	str	r2, [r3, #0]
                 return;
 8001690:	e007      	b.n	80016a2 <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1d1      	bne.n	8001646 <pushTxQueue+0x28>
             }
         }
     }
 }
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 facb 	bl	8001c4c <allocateBlock>
 80016b6:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <createTxItem+0x1a>
     {
         return NULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	e005      	b.n	80016ce <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 80016c2:	2214      	movs	r2, #20
 80016c4:	2100      	movs	r1, #0
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f003 ffc6 	bl	8005658 <memset>
     return item;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 }
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 80016d6:	b480      	push	{r7}
 80016d8:	b089      	sub	sp, #36	@ 0x24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80016e6:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80016ee:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	0fdb      	lsrs	r3, r3, #31
 80016f4:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0fdb      	lsrs	r3, r3, #31
 80016fa:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 80016fc:	7dfa      	ldrb	r2, [r7, #23]
 80016fe:	7dbb      	ldrb	r3, [r7, #22]
 8001700:	429a      	cmp	r2, r3
 8001702:	d01d      	beq.n	8001740 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <isPriorityHigher+0x3a>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	e000      	b.n	8001712 <isPriorityHigher+0x3c>
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001714:	7dbb      	ldrb	r3, [r7, #22]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <isPriorityHigher+0x4a>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	0c9b      	lsrs	r3, r3, #18
 800171e:	e000      	b.n	8001722 <isPriorityHigher+0x4c>
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d007      	beq.n	800173c <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	bf34      	ite	cc
 8001734:	2301      	movcc	r3, #1
 8001736:	2300      	movcs	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e022      	b.n	8001782 <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 800173c:	7dbb      	ldrb	r3, [r7, #22]
 800173e:	e020      	b.n	8001782 <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	429a      	cmp	r2, r3
 8001766:	d105      	bne.n	8001774 <isPriorityHigher+0x9e>
 8001768:	7d7a      	ldrb	r2, [r7, #21]
 800176a:	7d3b      	ldrb	r3, [r7, #20]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 8001770:	7d3b      	ldrb	r3, [r7, #20]
 8001772:	e006      	b.n	8001782 <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	429a      	cmp	r2, r3
 800177a:	bf34      	ite	cc
 800177c:	2301      	movcc	r3, #1
 800177e:	2300      	movcs	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 }
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <copyBitArray>:
 /**
  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
  */
 void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                         uint8_t* dst, uint32_t dst_offset)
 {
 800178e:	b480      	push	{r7}
 8001790:	b089      	sub	sp, #36	@ 0x24
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	603b      	str	r3, [r7, #0]
     CANARD_ASSERT(src_len > 0U);

     // Normalizing inputs
     src += src_offset / 8U;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
     dst += dst_offset / 8U;
 80017a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	603b      	str	r3, [r7, #0]

     src_offset %= 8U;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60bb      	str	r3, [r7, #8]
     dst_offset %= 8U;
 80017b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28

     const size_t last_bit = src_offset + src_len;
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	61fb      	str	r3, [r7, #28]
     while (last_bit - src_offset)
 80017c8:	e04d      	b.n	8001866 <copyBitArray+0xd8>
     {
         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	76fb      	strb	r3, [r7, #27]
         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	76bb      	strb	r3, [r7, #26]

         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80017de:	7eba      	ldrb	r2, [r7, #26]
 80017e0:	7efb      	ldrb	r3, [r7, #27]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	bf38      	it	cc
 80017e6:	4613      	movcc	r3, r2
 80017e8:	767b      	strb	r3, [r7, #25]
         const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 80017ea:	7e7b      	ldrb	r3, [r7, #25]
 80017ec:	f1c3 0208 	rsb	r2, r3, #8
 80017f0:	69f9      	ldr	r1, [r7, #28]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1acb      	subs	r3, r1, r3
 80017f6:	4293      	cmp	r3, r2
 80017f8:	bf28      	it	cs
 80017fa:	4613      	movcs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
 #else
         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80017fe:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	7ebb      	ldrb	r3, [r7, #26]
 800180e:	fa42 f303 	asr.w	r3, r2, r3
 8001812:	74fb      	strb	r3, [r7, #19]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	7efb      	ldrb	r3, [r7, #27]
 8001822:	409a      	lsls	r2, r3
 8001824:	7ebb      	ldrb	r3, [r7, #26]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	74bb      	strb	r3, [r7, #18]

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 800182c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	7cfb      	ldrb	r3, [r7, #19]
 8001838:	43db      	mvns	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4013      	ands	r3, r2
 800183e:	b2d9      	uxtb	r1, r3
 8001840:	7cba      	ldrb	r2, [r7, #18]
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	4013      	ands	r3, r2
 8001846:	b2da      	uxtb	r2, r3
         dst[dst_offset / 8U] =
 8001848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	4403      	add	r3, r0
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001850:	430a      	orrs	r2, r1
 8001852:	b2d2      	uxtb	r2, r2
         dst[dst_offset / 8U] =
 8001854:	701a      	strb	r2, [r3, #0]
 #endif

         src_offset += copy_bits;
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4413      	add	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
         dst_offset += copy_bits;
 800185e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4413      	add	r3, r2
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
     while (last_bit - src_offset)
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	d1ad      	bne.n	80017ca <copyBitArray+0x3c>
     }
 }
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3724      	adds	r7, #36	@ 0x24
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <descatterTransferPayload>:

 CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                  uint32_t bit_offset,
                                                  uint8_t bit_length,
                                                  void* output)
 {
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	@ 0x40
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	71fb      	strb	r3, [r7, #7]
     CANARD_ASSERT(transfer != 0);

     if (bit_offset >= transfer->payload_len * 8)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8a9b      	ldrh	r3, [r3, #20]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4293      	cmp	r3, r2
 8001898:	d301      	bcc.n	800189e <descatterTransferPayload+0x22>
     {
         return 0;       // Out of range, reading zero bits
 800189a:	2300      	movs	r3, #0
 800189c:	e0df      	b.n	8001a5e <descatterTransferPayload+0x1e2>
     }

     if (bit_offset + bit_length > transfer->payload_len * 8)
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	8a92      	ldrh	r2, [r2, #20]
 80018a8:	00d2      	lsls	r2, r2, #3
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d908      	bls.n	80018c0 <descatterTransferPayload+0x44>
     {
         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8a9b      	ldrh	r3, [r3, #20]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	71fb      	strb	r3, [r7, #7]
     }

     CANARD_ASSERT(bit_length > 0);

     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <descatterTransferPayload+0x56>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80b9 	beq.w	8001a44 <descatterTransferPayload+0x1c8>
         /*
          * This part is hideously complicated and probably should be redesigned.
          * The objective here is to copy the requested number of bits from scattered storage into the temporary
          * local storage. We go through great pains to ensure that all corner cases are handled correctly.
          */
         uint32_t input_bit_offset = bit_offset;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34
         uint8_t output_bit_offset = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t remaining_bit_length = bit_length;
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

         // Reading head
         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80018e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e4:	2b27      	cmp	r3, #39	@ 0x27
 80018e6:	d82d      	bhi.n	8001944 <descatterTransferPayload+0xc8>
         {
             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80018e8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80018ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ee:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d305      	bcc.n	8001902 <descatterTransferPayload+0x86>
 80018f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	e001      	b.n	8001906 <descatterTransferPayload+0x8a>
 8001902:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6898      	ldr	r0, [r3, #8]
 800190e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800191a:	f7ff ff38 	bl	800178e <copyBitArray>

             input_bit_offset += amount;
 800191e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001924:	4413      	add	r3, r2
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001928:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800192c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001930:	4413      	add	r3, r2
 8001932:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001936:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800193a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         }

         // Reading middle
         uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8a9b      	ldrh	r3, [r3, #20]
 8001948:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800194c:	3b05      	subs	r3, #5
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8001952:	2328      	movs	r3, #40	@ 0x28
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
         const CanardBufferBlock* block = transfer->payload_middle;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24

         while ((block != NULL) && (remaining_bit_length > 0))
 800195c:	e044      	b.n	80019e8 <descatterTransferPayload+0x16c>
         {
             CANARD_ASSERT(remaining_bits > 0);
             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 800195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001960:	2be0      	cmp	r3, #224	@ 0xe0
 8001962:	bf28      	it	cs
 8001964:	23e0      	movcs	r3, #224	@ 0xe0
 8001966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001968:	4413      	add	r3, r2
 800196a:	61fb      	str	r3, [r7, #28]
                                                                          remaining_bits);

             // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
             if (block_end_bit_offset > input_bit_offset)
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001970:	429a      	cmp	r2, r3
 8001972:	d92e      	bls.n	80019d2 <descatterTransferPayload+0x156>
             {
                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8001974:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001978:	69f9      	ldr	r1, [r7, #28]
 800197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197c:	1acb      	subs	r3, r1, r3
 800197e:	429a      	cmp	r2, r3
 8001980:	d306      	bcc.n	8001990 <descatterTransferPayload+0x114>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001988:	b2db      	uxtb	r3, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e001      	b.n	8001994 <descatterTransferPayload+0x118>
 8001990:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001994:	76fb      	strb	r3, [r7, #27]

                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8001996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]

                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	1d18      	adds	r0, r3, #4
 80019a2:	7efa      	ldrb	r2, [r7, #27]
 80019a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6979      	ldr	r1, [r7, #20]
 80019ae:	f7ff feee 	bl	800178e <copyBitArray>

                 input_bit_offset += amount;
 80019b2:	7efb      	ldrb	r3, [r7, #27]
 80019b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019b6:	4413      	add	r3, r2
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80019ba:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80019be:	7efb      	ldrb	r3, [r7, #27]
 80019c0:	4413      	add	r3, r2
 80019c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80019c6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80019ca:	7efb      	ldrb	r3, [r7, #27]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
             }

             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
             remaining_bits -= block_end_bit_offset - block_bit_offset;
 80019d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019da:	4413      	add	r3, r2
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
             block_bit_offset = block_end_bit_offset;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
             block = block->next;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
         while ((block != NULL) && (remaining_bit_length > 0))
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <descatterTransferPayload+0x17a>
 80019ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1b3      	bne.n	800195e <descatterTransferPayload+0xe2>
         }

         CANARD_ASSERT(remaining_bit_length <= remaining_bits);

         // Reading tail
         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d02c      	beq.n	8001a58 <descatterTransferPayload+0x1dc>
 80019fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d028      	beq.n	8001a58 <descatterTransferPayload+0x1dc>
         {
             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
             const uint32_t offset = input_bit_offset - block_bit_offset;
 8001a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	613b      	str	r3, [r7, #16]

             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6918      	ldr	r0, [r3, #16]
 8001a12:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001a16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	f7ff feb5 	bl	800178e <copyBitArray>
                          output_bit_offset);

             input_bit_offset += remaining_bit_length;
 8001a24:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a2a:	4413      	add	r3, r2
 8001a2c:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8001a2e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001a32:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001a36:	4413      	add	r3, r2
 8001a38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
     {
 8001a42:	e009      	b.n	8001a58 <descatterTransferPayload+0x1dc>
         CANARD_ASSERT(output_bit_offset <= 64);
         CANARD_ASSERT(remaining_bit_length == 0);
     }
     else                                                                    // Single frame
     {
         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6898      	ldr	r0, [r3, #8]
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	f7ff fe9c 	bl	800178e <copyBitArray>
 8001a56:	e000      	b.n	8001a5a <descatterTransferPayload+0x1de>
     {
 8001a58:	bf00      	nop
     }

     return bit_length;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	b21b      	sxth	r3, r3
 }
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3738      	adds	r7, #56	@ 0x38
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <isBigEndian>:

 CANARD_INTERNAL bool isBigEndian(void)
 {
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 #else
         uint16_t a;
         uint8_t b[2];
 #endif
     } u;
     u.a = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	80bb      	strh	r3, [r7, #4]
     return u.b[1] == 1;                             // Some don't...
 8001a70:	797b      	ldrb	r3, [r7, #5]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 #endif
 }
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <swapByteOrder>:

 CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
 {
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(data != NULL);

     uint8_t* const bytes = (uint8_t*) data;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

     size_t fwd = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
     size_t rev = size - 1;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]

     while (fwd < rev)
 8001aa0:	e017      	b.n	8001ad2 <swapByteOrder+0x4a>
     {
         const uint8_t x = bytes[fwd];
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	72fb      	strb	r3, [r7, #11]
         bytes[fwd] = bytes[rev];
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	701a      	strb	r2, [r3, #0]
         bytes[rev] = x;
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	7afa      	ldrb	r2, [r7, #11]
 8001ac4:	701a      	strb	r2, [r3, #0]
         fwd++;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
         rev--;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
     while (fwd < rev)
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3e3      	bcc.n	8001aa2 <swapByteOrder+0x1a>
     }
 }
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	4613      	mov	r3, r2
 8001af6:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	4053      	eors	r3, r2
 8001b04:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e012      	b.n	8001b32 <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 8001b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da08      	bge.n	8001b26 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001b1e:	f083 0301 	eor.w	r3, r3, #1
 8001b22:	80fb      	strh	r3, [r7, #6]
 8001b24:	e002      	b.n	8001b2c <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	d9e9      	bls.n	8001b0c <crcAddByte+0x24>
         }
     }
     return crc_val;
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 }
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 8001b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	e9c7 2300 	strd	r2, r3, [r7]
 8001b52:	460b      	mov	r3, r1
 8001b54:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001b56:	2300      	movs	r3, #0
 8001b58:	82fb      	strh	r3, [r7, #22]
 8001b5a:	e01b      	b.n	8001b94 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8001b5c:	8af9      	ldrh	r1, [r7, #22]
 8001b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b62:	f1c1 0620 	rsb	r6, r1, #32
 8001b66:	f1a1 0020 	sub.w	r0, r1, #32
 8001b6a:	fa22 f401 	lsr.w	r4, r2, r1
 8001b6e:	fa03 f606 	lsl.w	r6, r3, r6
 8001b72:	4334      	orrs	r4, r6
 8001b74:	fa23 f000 	lsr.w	r0, r3, r0
 8001b78:	4304      	orrs	r4, r0
 8001b7a:	fa23 f501 	lsr.w	r5, r3, r1
 8001b7e:	b2e2      	uxtb	r2, r4
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ffaf 	bl	8001ae8 <crcAddByte>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001b8e:	8afb      	ldrh	r3, [r7, #22]
 8001b90:	3308      	adds	r3, #8
 8001b92:	82fb      	strh	r3, [r7, #22]
 8001b94:	8afb      	ldrh	r3, [r7, #22]
 8001b96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b98:	d9e0      	bls.n	8001b5c <crcAddSignature+0x16>
     }
     return crc_val;
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 }
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba4 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8001bb2:	e00a      	b.n	8001bca <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff91 	bl	8001ae8 <crcAddByte>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <crcAdd+0x10>
     }
     return crc_val;
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 }
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <initPoolAllocator>:
  *  Pool Allocator functions
  */
 CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                        void* buf,
                                        uint16_t buf_len)
 {
 8001bde:	b480      	push	{r7}
 8001be0:	b089      	sub	sp, #36	@ 0x24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80fb      	strh	r3, [r7, #6]
     size_t current_index = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
     CanardPoolAllocatorBlock *abuf = buf;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	617b      	str	r3, [r7, #20]
     allocator->arena = buf;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	611a      	str	r2, [r3, #16]
     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	61bb      	str	r3, [r7, #24]
     while (current_index < buf_len)
 8001c00:	e00b      	b.n	8001c1a <initPoolAllocator+0x3c>
     {
         *current_block = &abuf[current_index];
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	441a      	add	r2, r3
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	601a      	str	r2, [r3, #0]
         current_block = &((*current_block)->next);
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61bb      	str	r3, [r7, #24]
         current_index++;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	3301      	adds	r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
     while (current_index < buf_len)
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3ef      	bcc.n	8001c02 <initPoolAllocator+0x24>
     }
     *current_block = NULL;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

     allocator->statistics.capacity_blocks = buf_len;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	811a      	strh	r2, [r3, #8]
     allocator->statistics.current_usage_blocks = 0;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	815a      	strh	r2, [r3, #10]
     allocator->statistics.peak_usage_blocks = 0;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	819a      	strh	r2, [r3, #12]
     // user should initialize semaphore after the canardInit
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 }
 8001c40:	bf00      	nop
 8001c42:	3724      	adds	r7, #36	@ 0x24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <allocateBlock>:

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e018      	b.n	8001c92 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	895b      	ldrh	r3, [r3, #10]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	899a      	ldrh	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	895b      	ldrh	r3, [r3, #10]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d203      	bcs.n	8001c90 <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	895a      	ldrh	r2, [r3, #10]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 }
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	895b      	ldrh	r3, [r3, #10]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_Z12FDCAN_Configv>:
FDCAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

FDCAN_FilterTypeDef sFilterConfig;

void FDCAN_Config(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0


    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cde:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = NODE_ID;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x0; // receive messages from all ids
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <_Z12FDCAN_Configv+0x4c>)
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <_Z12FDCAN_Configv+0x50>)
 8001d02:	f000 fe4f 	bl	80029a4 <HAL_FDCAN_ConfigFilter>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <_Z12FDCAN_Configv+0x46>
        Error_Handler();
 8001d16:	f000 f975 	bl	8002004 <Error_Handler>
    }
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000534 	.word	0x20000534
 8001d24:	2000047c 	.word	0x2000047c

08001d28 <_Z14FDCAN_Activatev>:

void FDCAN_Activate(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <_Z14FDCAN_Activatev+0x28>)
 8001d32:	f001 f817 	bl	8002d64 <HAL_FDCAN_ActivateNotification>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_Z14FDCAN_Activatev+0x22>
        Error_Handler();
 8001d46:	f000 f95d 	bl	8002004 <Error_Handler>
    }
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000047c 	.word	0x2000047c

08001d54 <HAL_FDCAN_RxFifo0Callback>:
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
        Error_Handler();
    }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

//    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_FDCAN_RxFifo0Callback+0x38>)
 8001d60:	4a0b      	ldr	r2, [pc, #44]	@ (8001d90 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8001d62:	2140      	movs	r1, #64	@ 0x40
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fee3 	bl	8002b30 <HAL_FDCAN_GetRxMessage>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_FDCAN_RxFifo0Callback+0x2a>
            // Process received data (e.g., print it)
        	Error_Handler();
 8001d7a:	f000 f943 	bl	8002004 <Error_Handler>
        }

        FDCAN_Activate(); // test with and without this re-activation
 8001d7e:	f7ff ffd3 	bl	8001d28 <_Z14FDCAN_Activatev>
//    }
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000052c 	.word	0x2000052c
 8001d90:	20000504 	.word	0x20000504
 8001d94:	00000000 	.word	0x00000000

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	f5ad 6d47 	sub.w	sp, sp, #3184	@ 0xc70
 8001d9e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da0:	f000 faf4 	bl	800238c <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN can(&hfdcan1);
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	492f      	ldr	r1, [pc, #188]	@ (8001e68 <main+0xd0>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fc8e 	bl	80006cc <_ZN3CANC1EP19FDCAN_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db0:	f000 f862 	bl	8001e78 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db4:	f000 f90e 	bl	8001fd4 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8001db8:	f000 f8be 	bl	8001f38 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN_Activate();
 8001dbc:	f7ff ffb4 	bl	8001d28 <_Z14FDCAN_Activatev>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001dc0:	4829      	ldr	r0, [pc, #164]	@ (8001e68 <main+0xd0>)
 8001dc2:	f000 fe49 	bl	8002a58 <HAL_FDCAN_Start>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <main+0x42>
	  Error_Handler();
 8001dd6:	f000 f915 	bl	8002004 <Error_Handler>
  }

  TxHeader.Identifier = NODE_ID;
 8001dda:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <main+0xd4>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <main+0xd4>)
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001de6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <main+0xd4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001dee:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <main+0xd4>)
 8001df0:	2208      	movs	r2, #8
 8001df2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <main+0xd4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <main+0xd4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <main+0xd4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <main+0xd4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <main+0xd4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
//
//	  FDCAN_Transmit();
//
//	  HAL_Delay(10);

	  uint8_t heartbeat_payload[7] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
 8001e12:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001e16:	f6a3 4358 	subw	r3, r3, #3160	@ 0xc58
 8001e1a:	4a15      	ldr	r2, [pc, #84]	@ (8001e70 <main+0xd8>)
 8001e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e20:	6018      	str	r0, [r3, #0]
 8001e22:	3304      	adds	r3, #4
 8001e24:	8019      	strh	r1, [r3, #0]
 8001e26:	3302      	adds	r3, #2
 8001e28:	0c0a      	lsrs	r2, r1, #16
 8001e2a:	701a      	strb	r2, [r3, #0]

	  can.broadcast(
 8001e2c:	f107 0008 	add.w	r0, r7, #8
 8001e30:	2307      	movs	r3, #7
 8001e32:	9304      	str	r3, [sp, #16]
 8001e34:	463b      	mov	r3, r7
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	2308      	movs	r3, #8
 8001e3a:	9302      	str	r3, [sp, #8]
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <main+0xdc>)
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	f240 1355 	movw	r3, #341	@ 0x155
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	a306      	add	r3, pc, #24	@ (adr r3, 8001e60 <main+0xc8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	f7fe ff00 	bl	8000c52 <_ZN3CAN9broadcastE18CanardTransferTypeytPhhPKht>
			  UAVCAN_PROTOCOL_NODESTATUS_ID,
			  &transfer_id,
			  CANARD_TRANSFER_PRIORITY_HIGH,
			  heartbeat_payload,
			  sizeof(heartbeat_payload));
	  can.routineTasks();
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fe17 	bl	8000a8a <_ZN3CAN12routineTasksEv>
//	      for (int i = 0; i < 8; i++) {
//	          printf("%02X ", RxData[i]);
//	      }
//	      printf("\n");
//	  }
  }
 8001e5c:	bf00      	nop
 8001e5e:	e7d8      	b.n	8001e12 <main+0x7a>
 8001e60:	c1a7c6f1 	.word	0xc1a7c6f1
 8001e64:	0f0868d0 	.word	0x0f0868d0
 8001e68:	2000047c 	.word	0x2000047c
 8001e6c:	200004e0 	.word	0x200004e0
 8001e70:	0800577c 	.word	0x0800577c
 8001e74:	2000054c 	.word	0x2000054c

08001e78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b098      	sub	sp, #96	@ 0x60
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0318 	add.w	r3, r7, #24
 8001e82:	2248      	movs	r2, #72	@ 0x48
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fbe6 	bl	8005658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f001 fc44 	bl	8003728 <HAL_PWREx_ControlVoltageScaling>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf14      	ite	ne
 8001ea6:	2301      	movne	r3, #1
 8001ea8:	2300      	moveq	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001eb0:	f000 f8a8 	bl	8002004 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ebe:	2340      	movs	r3, #64	@ 0x40
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001ece:	2337      	movs	r3, #55	@ 0x37
 8001ed0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ede:	f107 0318 	add.w	r3, r7, #24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fcb0 	bl	8003848 <HAL_RCC_OscConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8001ef8:	f000 f884 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efc:	230f      	movs	r3, #15
 8001efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f00:	2303      	movs	r3, #3
 8001f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2105      	movs	r1, #5
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 f96d 	bl	80041f4 <HAL_RCC_ClockConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001f2a:	f000 f86b 	bl	8002004 <Error_Handler>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3760      	adds	r7, #96	@ 0x60
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f3e:	4a24      	ldr	r2, [pc, #144]	@ (8001fd0 <_ZL14MX_FDCAN1_Initv+0x98>)
 8001f40:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001f42:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f68:	2204      	movs	r2, #4
 8001f6a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8001f72:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f80:	2204      	movs	r2, #4
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001fa8:	4808      	ldr	r0, [pc, #32]	@ (8001fcc <_ZL14MX_FDCAN1_Initv+0x94>)
 8001faa:	f000 fba9 	bl	8002700 <HAL_FDCAN_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001fbe:	f000 f821 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_Config();
 8001fc2:	f7ff fe87 	bl	8001cd4 <_Z12FDCAN_Configv>

  /* USER CODE END FDCAN1_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000047c 	.word	0x2000047c
 8001fd0:	4000a400 	.word	0x4000a400

08001fd4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <_ZL12MX_GPIO_Initv+0x2c>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <_ZL12MX_GPIO_Initv+0x2c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <_ZL12MX_GPIO_Initv+0x2c>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <Error_Handler+0x8>

08002010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_MspInit+0x50>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_MspInit+0x50>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6613      	str	r3, [r2, #96]	@ 0x60
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_MspInit+0x50>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <HAL_MspInit+0x50>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <HAL_MspInit+0x50>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_MspInit+0x50>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2107      	movs	r1, #7
 800204a:	f06f 0001 	mvn.w	r0, #1
 800204e:	f000 fada 	bl	8002606 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002052:	f001 fbc5 	bl	80037e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0ae      	sub	sp, #184	@ 0xb8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2294      	movs	r2, #148	@ 0x94
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fae7 	bl	8005658 <memset>
  if(hfdcan->Instance==FDCAN1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a26      	ldr	r2, [pc, #152]	@ (8002128 <HAL_FDCAN_MspInit+0xc4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d145      	bne.n	8002120 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002098:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800209a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800209e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fb61 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80020b0:	f7ff ffa8 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_FDCAN_MspInit+0xc8>)
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_FDCAN_MspInit+0xc8>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020be:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_FDCAN_MspInit+0xc8>)
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_FDCAN_MspInit+0xc8>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d0:	4a16      	ldr	r2, [pc, #88]	@ (800212c <HAL_FDCAN_MspInit+0xc8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <HAL_FDCAN_MspInit+0xc8>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020fe:	2309      	movs	r3, #9
 8002100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002108:	4619      	mov	r1, r3
 800210a:	4809      	ldr	r0, [pc, #36]	@ (8002130 <HAL_FDCAN_MspInit+0xcc>)
 800210c:	f001 f97e 	bl	800340c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2105      	movs	r1, #5
 8002114:	2027      	movs	r0, #39	@ 0x27
 8002116:	f000 fa76 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800211a:	2027      	movs	r0, #39	@ 0x27
 800211c:	f000 fa8d 	bl	800263a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002120:	bf00      	nop
 8002122:	37b8      	adds	r7, #184	@ 0xb8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	4000a400 	.word	0x4000a400
 800212c:	40021000 	.word	0x40021000
 8002130:	42020000 	.word	0x42020000

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <NMI_Handler+0x4>

0800213c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <MemManage_Handler+0x4>

0800214c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <UsageFault_Handler+0x4>

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800216e:	2000      	movs	r0, #0
 8002170:	f000 f8f6 	bl	8002360 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <FDCAN1_IT0_IRQHandler+0x10>)
 800217e:	f000 fed7 	bl	8002f30 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000047c 	.word	0x2000047c

0800218c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80021b6:	4b4f      	ldr	r3, [pc, #316]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80021c2:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e005      	b.n	80021de <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80021d2:	4b48      	ldr	r3, [pc, #288]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80021de:	4a46      	ldr	r2, [pc, #280]	@ (80022f8 <SystemCoreClockUpdate+0x148>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e8:	4b42      	ldr	r3, [pc, #264]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d866      	bhi.n	80022c2 <SystemCoreClockUpdate+0x112>
 80021f4:	a201      	add	r2, pc, #4	@ (adr r2, 80021fc <SystemCoreClockUpdate+0x4c>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	08002231 	.word	0x08002231
 8002200:	080022c3 	.word	0x080022c3
 8002204:	080022c3 	.word	0x080022c3
 8002208:	080022c3 	.word	0x080022c3
 800220c:	08002239 	.word	0x08002239
 8002210:	080022c3 	.word	0x080022c3
 8002214:	080022c3 	.word	0x080022c3
 8002218:	080022c3 	.word	0x080022c3
 800221c:	08002241 	.word	0x08002241
 8002220:	080022c3 	.word	0x080022c3
 8002224:	080022c3 	.word	0x080022c3
 8002228:	080022c3 	.word	0x080022c3
 800222c:	08002249 	.word	0x08002249
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002230:	4a32      	ldr	r2, [pc, #200]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	6013      	str	r3, [r2, #0]
      break;
 8002236:	e048      	b.n	80022ca <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002238:	4b30      	ldr	r3, [pc, #192]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 800223a:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <SystemCoreClockUpdate+0x150>)
 800223c:	601a      	str	r2, [r3, #0]
      break;
 800223e:	e044      	b.n	80022ca <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002240:	4b2e      	ldr	r3, [pc, #184]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 8002242:	4a30      	ldr	r2, [pc, #192]	@ (8002304 <SystemCoreClockUpdate+0x154>)
 8002244:	601a      	str	r2, [r3, #0]
      break;
 8002246:	e040      	b.n	80022ca <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002248:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	3301      	adds	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d003      	beq.n	800226e <SystemCoreClockUpdate+0xbe>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d006      	beq.n	800227a <SystemCoreClockUpdate+0xca>
 800226c:	e00b      	b.n	8002286 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800226e:	4a24      	ldr	r2, [pc, #144]	@ (8002300 <SystemCoreClockUpdate+0x150>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	613b      	str	r3, [r7, #16]
          break;
 8002278:	e00b      	b.n	8002292 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800227a:	4a22      	ldr	r2, [pc, #136]	@ (8002304 <SystemCoreClockUpdate+0x154>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	613b      	str	r3, [r7, #16]
          break;
 8002284:	e005      	b.n	8002292 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	613b      	str	r3, [r7, #16]
          break;
 8002290:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80022a4:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0e5b      	lsrs	r3, r3, #25
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	4a0f      	ldr	r2, [pc, #60]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 80022be:	6013      	str	r3, [r2, #0]
      break;
 80022c0:	e003      	b.n	80022ca <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80022c2:	4a0e      	ldr	r2, [pc, #56]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	6013      	str	r3, [r2, #0]
      break;
 80022c8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <SystemCoreClockUpdate+0x144>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <SystemCoreClockUpdate+0x158>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <SystemCoreClockUpdate+0x14c>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080057b8 	.word	0x080057b8
 80022fc:	20000000 	.word	0x20000000
 8002300:	00f42400 	.word	0x00f42400
 8002304:	007a1200 	.word	0x007a1200
 8002308:	080057a8 	.word	0x080057a8

0800230c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002310:	f7ff ff3c 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002316:	e003      	b.n	8002320 <LoopCopyDataInit>

08002318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800231a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800231c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800231e:	3104      	adds	r1, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002320:	480a      	ldr	r0, [pc, #40]	@ (800234c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002328:	d3f6      	bcc.n	8002318 <CopyDataInit>
	ldr	r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopForever+0x12>)
	b	LoopFillZerobss
 800232c:	e002      	b.n	8002334 <LoopFillZerobss>

0800232e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800232e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002330:	f842 3b04 	str.w	r3, [r2], #4

08002334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <LoopForever+0x16>)
	cmp	r2, r3
 8002336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002338:	d3f9      	bcc.n	800232e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800233a:	f003 f995 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800233e:	f7ff fd2b 	bl	8001d98 <main>

08002342 <LoopForever>:

LoopForever:
    b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002344:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002348:	08005810 	.word	0x08005810
	ldr	r0, =_sdata
 800234c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002350:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8002354:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8002358:	20000b2c 	.word	0x20000b2c

0800235c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC1_2_IRQHandler>
	...

08002360 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <BSP_PB_IRQHandler+0x28>)
 8002376:	4413      	add	r3, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f979 	bl	8002670 <HAL_EXTI_IRQHandler>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000550 	.word	0x20000550

0800238c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002396:	2004      	movs	r0, #4
 8002398:	f000 f92a 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800239c:	f7ff ff08 	bl	80021b0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a0:	2007      	movs	r0, #7
 80023a2:	f000 f80d 	bl	80023c0 <HAL_InitTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	e001      	b.n	80023b6 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b2:	f7ff fe2d 	bl	8002010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <HAL_InitTick+0x6c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_InitTick+0x70>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <HAL_InitTick+0x6c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f933 	bl	8002656 <HAL_SYSTICK_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d809      	bhi.n	8002410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002404:	f000 f8ff 	bl	8002606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_InitTick+0x74>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e007      	b.n	8002420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e004      	b.n	8002420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e001      	b.n	8002420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000008 	.word	0x20000008
 8002430:	20000000 	.word	0x20000000
 8002434:	20000004 	.word	0x20000004

08002438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return uwTick;
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <HAL_GetTick+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	2000055c 	.word	0x2000055c

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	@ (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	@ (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0152      	lsls	r2, r2, #5
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	@ (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0152      	lsls	r2, r2, #5
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b03      	cmp	r3, #3
 8002560:	bf28      	it	cs
 8002562:	2303      	movcs	r3, #3
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3303      	adds	r3, #3
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b04      	subs	r3, #4
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	@ 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	2107      	movs	r1, #7
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025d0:	f7ff ff8e 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff29 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff40 	bl	8002498 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff33 	bl	80024b4 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa4 	bl	80025ac <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2201      	movs	r2, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_EXTI_IRQHandler+0x88>)
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_EXTI_IRQHandler+0x8c>)
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4798      	blx	r3
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	4002f40c 	.word	0x4002f40c
 80026fc:	4002f410 	.word	0x4002f410

08002700 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e142      	b.n	8002998 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fc9c 	bl	8002064 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0210 	bic.w	r2, r2, #16
 800273a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800273c:	f7ff fe7c 	bl	8002438 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002742:	e012      	b.n	800276a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002744:	f7ff fe78 	bl	8002438 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b0a      	cmp	r3, #10
 8002750:	d90b      	bls.n	800276a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2203      	movs	r2, #3
 8002762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e116      	b.n	8002998 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d0e5      	beq.n	8002744 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002788:	f7ff fe56 	bl	8002438 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800278e:	e012      	b.n	80027b6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002790:	f7ff fe52 	bl	8002438 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d90b      	bls.n	80027b6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2203      	movs	r2, #3
 80027ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0f0      	b.n	8002998 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0e5      	beq.n	8002790 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0202 	orr.w	r2, r2, #2
 80027d2:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80027d4:	4a72      	ldr	r2, [pc, #456]	@ (80029a0 <HAL_FDCAN_Init+0x2a0>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7c1b      	ldrb	r3, [r3, #16]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d108      	bne.n	80027f6 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f2:	619a      	str	r2, [r3, #24]
 80027f4:	e007      	b.n	8002806 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002804:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7c5b      	ldrb	r3, [r3, #17]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	e007      	b.n	8002830 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800282e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7c9b      	ldrb	r3, [r3, #18]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002846:	619a      	str	r2, [r3, #24]
 8002848:	e007      	b.n	800285a <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002858:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800287e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0210 	bic.w	r2, r2, #16
 800288e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0204 	orr.w	r2, r2, #4
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	e02c      	b.n	8002904 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d028      	beq.n	8002904 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d01c      	beq.n	80028f4 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0210 	orr.w	r2, r2, #16
 80028d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d110      	bne.n	8002904 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	619a      	str	r2, [r3, #24]
 80028f2:	e007      	b.n	8002904 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	3b01      	subs	r3, #1
 800290a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	3b01      	subs	r3, #1
 8002912:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002914:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800291c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	3b01      	subs	r3, #1
 8002926:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800292c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800292e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002938:	d115      	bne.n	8002966 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	3b01      	subs	r3, #1
 8002946:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002948:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	3b01      	subs	r3, #1
 8002950:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002952:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002962:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002964:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fc73 	bl	8003268 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	4000a500 	.word	0x4000a500

080029a4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029b4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d002      	beq.n	80029c2 <HAL_FDCAN_ConfigFilter+0x1e>
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d13d      	bne.n	8002a3e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80029d6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80029de:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e01d      	b.n	8002a3a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	075a      	lsls	r2, r3, #29
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	079a      	lsls	r2, r3, #30
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3304      	adds	r3, #4
 8002a32:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e006      	b.n	8002a4c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	f043 0202 	orr.w	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d110      	bne.n	8002a8e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e006      	b.n	8002a9c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d12c      	bne.n	8002b1a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e023      	b.n	8002b28 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fc0c 	bl	8003314 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e006      	b.n	8002b28 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1e:	f043 0208 	orr.w	r2, r3, #8
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b08b      	sub	sp, #44	@ 0x2c
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b48:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002b4a:	7efb      	ldrb	r3, [r7, #27]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f040 80e8 	bne.w	8002d22 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b40      	cmp	r3, #64	@ 0x40
 8002b56:	d137      	bne.n	8002bc8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0db      	b.n	8002d30 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b88:	d10a      	bne.n	8002ba0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9a:	d101      	bne.n	8002ba0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc6:	e036      	b.n	8002c36 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0a3      	b.n	8002d30 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf8:	d10a      	bne.n	8002c10 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c0a:	d101      	bne.n	8002c10 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e005      	b.n	8002c66 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	3304      	adds	r3, #4
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e1b      	lsrs	r3, r3, #24
 8002cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0fda      	lsrs	r2, r3, #31
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	3304      	adds	r3, #4
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	e00a      	b.n	8002cf2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	441a      	add	r2, r3
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	440b      	add	r3, r1
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <HAL_FDCAN_GetRxMessage+0x20c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d3ec      	bcc.n	8002cdc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d105      	bne.n	8002d14 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002d12:	e004      	b.n	8002d1e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e006      	b.n	8002d30 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f043 0208 	orr.w	r2, r3, #8
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	372c      	adds	r7, #44	@ 0x2c
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	080057f8 	.word	0x080057f8

08002d40 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d76:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d003      	beq.n	8002d86 <HAL_FDCAN_ActivateNotification+0x22>
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f040 80c8 	bne.w	8002f16 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03b      	beq.n	8002e1a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d031      	beq.n	8002e1a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d027      	beq.n	8002e1a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01d      	beq.n	8002e1a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d013      	beq.n	8002e1a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00c      	beq.n	8002e2a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d13b      	bne.n	8002eb6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d131      	bne.n	8002eb6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d127      	bne.n	8002eb6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d11d      	bne.n	8002eb6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d113      	bne.n	8002eb6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0202 	orr.w	r2, r2, #2
 8002ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e006      	b.n	8002f24 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	@ 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f64:	4013      	ands	r3, r2
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f86:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002f8a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	4013      	ands	r3, r2
 8002f96:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f9e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002fa2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fbe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00c      	beq.n	8002fe6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2240      	movs	r2, #64	@ 0x40
 8002fde:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f922 	bl	800322a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01a      	beq.n	8003028 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003006:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800301e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003020:	6939      	ldr	r1, [r7, #16]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8e2 	bl	80031ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8ac 	bl	8003196 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800304a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800304c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fe80 	bl	8001d54 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003060:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003062:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8a1 	bl	80031ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	0a5b      	lsrs	r3, r3, #9
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	0a5b      	lsrs	r3, r3, #9
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800308a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f898 	bl	80031c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	09db      	lsrs	r3, r3, #7
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d019      	beq.n	80030d2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	09db      	lsrs	r3, r3, #7
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d013      	beq.n	80030d2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030b2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2280      	movs	r2, #128	@ 0x80
 80030c8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f882 	bl	80031d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	0b5b      	lsrs	r3, r3, #13
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	0b5b      	lsrs	r3, r3, #13
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f884 	bl	8003202 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	0bdb      	lsrs	r3, r3, #15
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	0bdb      	lsrs	r3, r3, #15
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800311a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f87a 	bl	8003216 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	0b9b      	lsrs	r3, r3, #14
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	0b9b      	lsrs	r3, r3, #14
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003148:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800315e:	69f9      	ldr	r1, [r7, #28]
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f876 	bl	8003252 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f858 	bl	800323e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800318e:	bf00      	nop
 8003190:	3730      	adds	r7, #48	@ 0x30
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003270:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003272:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003282:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328a:	041a      	lsls	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	061a      	lsls	r2, r3, #24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e005      	b.n	80032f6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3304      	adds	r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d3f3      	bcc.n	80032ea <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	4000ac00 	.word	0x4000ac00

08003314 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	@ 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003332:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800333a:	4313      	orrs	r3, r2
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e00a      	b.n	8003356 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003348:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800334e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003354:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003360:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003366:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800336c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	3304      	adds	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	3304      	adds	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e020      	b.n	80033ea <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3303      	adds	r3, #3
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3302      	adds	r3, #2
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	440b      	add	r3, r1
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80033c0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	440b      	add	r3, r1
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80033ce:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	440a      	add	r2, r1
 80033d6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80033d8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3304      	adds	r3, #4
 80033e2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3304      	adds	r3, #4
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4a06      	ldr	r2, [pc, #24]	@ (8003408 <FDCAN_CopyMessageToRAM+0xf4>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	461a      	mov	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d3d6      	bcc.n	80033a8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	3724      	adds	r7, #36	@ 0x24
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	080057f8 	.word	0x080057f8

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800341a:	e158      	b.n	80036ce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 814a 	beq.w	80036c8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d005      	beq.n	800344c <HAL_GPIO_Init+0x40>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d130      	bne.n	80034ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003482:	2201      	movs	r2, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0201 	and.w	r2, r3, #1
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d017      	beq.n	80034ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d123      	bne.n	800353e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	6939      	ldr	r1, [r7, #16]
 800353a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0203 	and.w	r2, r3, #3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a4 	beq.w	80036c8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003580:	4a5a      	ldr	r2, [pc, #360]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3318      	adds	r3, #24
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a52      	ldr	r2, [pc, #328]	@ (80036f0 <HAL_GPIO_Init+0x2e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d025      	beq.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a51      	ldr	r2, [pc, #324]	@ (80036f4 <HAL_GPIO_Init+0x2e8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01f      	beq.n	80035f4 <HAL_GPIO_Init+0x1e8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a50      	ldr	r2, [pc, #320]	@ (80036f8 <HAL_GPIO_Init+0x2ec>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d019      	beq.n	80035f0 <HAL_GPIO_Init+0x1e4>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4f      	ldr	r2, [pc, #316]	@ (80036fc <HAL_GPIO_Init+0x2f0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_GPIO_Init+0x1e0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a4e      	ldr	r2, [pc, #312]	@ (8003700 <HAL_GPIO_Init+0x2f4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00d      	beq.n	80035e8 <HAL_GPIO_Init+0x1dc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a4d      	ldr	r2, [pc, #308]	@ (8003704 <HAL_GPIO_Init+0x2f8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <HAL_GPIO_Init+0x1d8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003708 <HAL_GPIO_Init+0x2fc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_GPIO_Init+0x1d4>
 80035dc:	2306      	movs	r3, #6
 80035de:	e00c      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035e0:	2307      	movs	r3, #7
 80035e2:	e00a      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035e4:	2305      	movs	r3, #5
 80035e6:	e008      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e006      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035ec:	2303      	movs	r3, #3
 80035ee:	e004      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e002      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035f8:	2300      	movs	r3, #0
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	f002 0203 	and.w	r2, r2, #3
 8003600:	00d2      	lsls	r2, r2, #3
 8003602:	4093      	lsls	r3, r2
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800360a:	4938      	ldr	r1, [pc, #224]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3318      	adds	r3, #24
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003618:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003642:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003666:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800366c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003692:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800369a:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 800369c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <HAL_GPIO_Init+0x2e0>)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3301      	adds	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f ae9f 	bne.w	800341c <HAL_GPIO_Init+0x10>
  }
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	4002f400 	.word	0x4002f400
 80036f0:	42020000 	.word	0x42020000
 80036f4:	42020400 	.word	0x42020400
 80036f8:	42020800 	.word	0x42020800
 80036fc:	42020c00 	.word	0x42020c00
 8003700:	42021000 	.word	0x42021000
 8003704:	42021400 	.word	0x42021400
 8003708:	42021800 	.word	0x42021800

0800370c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <HAL_PWREx_GetVoltageRange+0x18>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40007000 	.word	0x40007000

08003728 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003730:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003738:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800373a:	f000 f861 	bl	8003800 <HAL_PWREx_SMPS_GetEffectiveMode>
 800373e:	4603      	mov	r3, r0
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003744:	d101      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e03e      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800374a:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003756:	d101      	bne.n	800375c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e035      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d101      	bne.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e02f      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003768:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003770:	4917      	ldr	r1, [pc, #92]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003778:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	09db      	lsrs	r3, r3, #7
 8003786:	2232      	movs	r2, #50	@ 0x32
 8003788:	fb02 f303 	mul.w	r3, r2, r3
 800378c:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	3301      	adds	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003798:	e002      	b.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3b01      	subs	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ac:	d102      	bne.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f2      	bne.n	800379a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d101      	bne.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e000      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40007000 	.word	0x40007000
 80037d4:	20000000 	.word	0x20000000
 80037d8:	0a7c5ac5 	.word	0x0a7c5ac5
 80037dc:	cccccccd 	.word	0xcccccccd

080037e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ee:	6093      	str	r3, [r2, #8]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40007000 	.word	0x40007000

08003800 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e00a      	b.n	8003834 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e001      	b.n	8003834 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003834:	687b      	ldr	r3, [r7, #4]
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f000 bcc2 	b.w	80041e0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385c:	4b99      	ldr	r3, [pc, #612]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003866:	4b97      	ldr	r3, [pc, #604]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80e9 	beq.w	8003a50 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d006      	beq.n	8003892 <HAL_RCC_OscConfig+0x4a>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	f040 8083 	bne.w	8003992 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d17f      	bne.n	8003992 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003892:	4b8c      	ldr	r3, [pc, #560]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_RCC_OscConfig+0x64>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f000 bc9a 	b.w	80041e0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038b0:	4b84      	ldr	r3, [pc, #528]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_RCC_OscConfig+0x7e>
 80038bc:	4b81      	ldr	r3, [pc, #516]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038c4:	e005      	b.n	80038d2 <HAL_RCC_OscConfig+0x8a>
 80038c6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d224      	bcs.n	8003920 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fe74 	bl	80045c8 <RCC_SetFlashLatencyFromMSIRange>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f000 bc7a 	b.w	80041e0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	4b75      	ldr	r3, [pc, #468]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a74      	ldr	r2, [pc, #464]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b72      	ldr	r3, [pc, #456]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	496f      	ldr	r1, [pc, #444]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	496a      	ldr	r1, [pc, #424]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e026      	b.n	800396e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003920:	4b68      	ldr	r3, [pc, #416]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a67      	ldr	r2, [pc, #412]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b65      	ldr	r3, [pc, #404]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	4962      	ldr	r1, [pc, #392]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393e:	4b61      	ldr	r3, [pc, #388]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	495d      	ldr	r1, [pc, #372]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fe33 	bl	80045c8 <RCC_SetFlashLatencyFromMSIRange>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f000 bc39 	b.w	80041e0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800396e:	f000 fe17 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 8003972:	4603      	mov	r3, r0
 8003974:	4a54      	ldr	r2, [pc, #336]	@ (8003ac8 <HAL_RCC_OscConfig+0x280>)
 8003976:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003978:	4b54      	ldr	r3, [pc, #336]	@ (8003acc <HAL_RCC_OscConfig+0x284>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fd1f 	bl	80023c0 <HAL_InitTick>
 8003982:	4603      	mov	r3, r0
 8003984:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d060      	beq.n	8003a4e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	f000 bc27 	b.w	80041e0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d039      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800399a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a49      	ldr	r2, [pc, #292]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a6:	f7fe fd47 	bl	8002438 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ac:	e00f      	b.n	80039ce <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ae:	f7fe fd43 	bl	8002438 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d908      	bls.n	80039ce <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039bc:	4b41      	ldr	r3, [pc, #260]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	f000 bc09 	b.w	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ce:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0e9      	beq.n	80039ae <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039da:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a39      	ldr	r2, [pc, #228]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b37      	ldr	r3, [pc, #220]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	4934      	ldr	r1, [pc, #208]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f8:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	492f      	ldr	r1, [pc, #188]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
 8003a0c:	e020      	b.n	8003a50 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1a:	f7fe fd0d 	bl	8002438 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a20:	e00e      	b.n	8003a40 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a22:	f7fe fd09 	bl	8002438 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d907      	bls.n	8003a40 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a30:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e3cf      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ea      	bne.n	8003a22 <HAL_RCC_OscConfig+0x1da>
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d07e      	beq.n	8003b5a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x226>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	d10e      	bne.n	8003a86 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d10b      	bne.n	8003a86 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d06e      	beq.n	8003b58 <HAL_RCC_OscConfig+0x310>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d16a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e3ac      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x256>
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0b      	ldr	r2, [pc, #44]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e024      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2a0>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa6:	d113      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x288>
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003aae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b03      	ldr	r3, [pc, #12]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a02      	ldr	r2, [pc, #8]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e012      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2a0>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000004 	.word	0x20000004
 8003ad0:	4b8b      	ldr	r3, [pc, #556]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b88      	ldr	r3, [pc, #544]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a87      	ldr	r2, [pc, #540]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d019      	beq.n	8003b24 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fca2 	bl	8002438 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	e00e      	b.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fc9e 	bl	8002438 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	@ 0x64
 8003b04:	d907      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b06:	4b7e      	ldr	r3, [pc, #504]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e364      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b16:	4b7a      	ldr	r3, [pc, #488]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ea      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2b0>
 8003b22:	e01a      	b.n	8003b5a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fc88 	bl	8002438 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2a:	e00e      	b.n	8003b4a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fc84 	bl	8002438 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d907      	bls.n	8003b4a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3a:	4b71      	ldr	r3, [pc, #452]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e34a      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ea      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2e4>
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d06c      	beq.n	8003c40 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_OscConfig+0x330>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d116      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	4b61      	ldr	r3, [pc, #388]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_OscConfig+0x348>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e327      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b5b      	ldr	r3, [pc, #364]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	4958      	ldr	r1, [pc, #352]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba4:	e04c      	b.n	8003c40 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d029      	beq.n	8003c02 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bae:	4b54      	ldr	r3, [pc, #336]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a53      	ldr	r2, [pc, #332]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fe fc3d 	bl	8002438 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fc39 	bl	8002438 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e2ff      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b47      	ldr	r3, [pc, #284]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ea      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b44      	ldr	r3, [pc, #272]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	4941      	ldr	r1, [pc, #260]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
 8003c00:	e01e      	b.n	8003c40 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c02:	4b3f      	ldr	r3, [pc, #252]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a3e      	ldr	r2, [pc, #248]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fc13 	bl	8002438 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c14:	e00e      	b.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe fc0f 	bl	8002438 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d907      	bls.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c24:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e2d5      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c34:	4b32      	ldr	r3, [pc, #200]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ea      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d062      	beq.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d038      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003c5c:	4b28      	ldr	r3, [pc, #160]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c62:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f023 0310 	bic.w	r3, r3, #16
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c6c:	e007      	b.n	8003c7e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003c6e:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c74:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c76:	f043 0310 	orr.w	r3, r3, #16
 8003c7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c84:	4a1e      	ldr	r2, [pc, #120]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fbd3 	bl	8002438 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c94:	e00f      	b.n	8003cb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fe fbcf 	bl	8002438 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b07      	cmp	r3, #7
 8003ca2:	d908      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca4:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e294      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0e8      	beq.n	8003c96 <HAL_RCC_OscConfig+0x44e>
 8003cc4:	e025      	b.n	8003d12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fe fbaf 	bl	8002438 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cdc:	e012      	b.n	8003d04 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fe fbab 	bl	8002438 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	d90b      	bls.n	8003d04 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cec:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e270      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d04:	4ba8      	ldr	r3, [pc, #672]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 812d 	beq.w	8003f7a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d20:	2300      	movs	r3, #0
 8003d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d24:	4ba0      	ldr	r3, [pc, #640]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	4a9c      	ldr	r2, [pc, #624]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3c:	4b9a      	ldr	r3, [pc, #616]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4c:	4b97      	ldr	r3, [pc, #604]	@ (8003fac <HAL_RCC_OscConfig+0x764>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11e      	bne.n	8003d96 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d58:	4b94      	ldr	r3, [pc, #592]	@ (8003fac <HAL_RCC_OscConfig+0x764>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a93      	ldr	r2, [pc, #588]	@ (8003fac <HAL_RCC_OscConfig+0x764>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d64:	f7fe fb68 	bl	8002438 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6a:	e00e      	b.n	8003d8a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fe fb64 	bl	8002438 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d907      	bls.n	8003d8a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7a:	4b8c      	ldr	r3, [pc, #560]	@ (8003fac <HAL_RCC_OscConfig+0x764>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e22a      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8a:	4b88      	ldr	r3, [pc, #544]	@ (8003fac <HAL_RCC_OscConfig+0x764>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ea      	beq.n	8003d6c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01f      	beq.n	8003de2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dae:	4b7e      	ldr	r3, [pc, #504]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	4a78      	ldr	r2, [pc, #480]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dce:	e018      	b.n	8003e02 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dd0:	4b75      	ldr	r3, [pc, #468]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a74      	ldr	r2, [pc, #464]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de0:	e00f      	b.n	8003e02 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003de2:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	4a6f      	ldr	r2, [pc, #444]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003df2:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d068      	beq.n	8003edc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fe fb15 	bl	8002438 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e10:	e011      	b.n	8003e36 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe fb11 	bl	8002438 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d908      	bls.n	8003e36 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e24:	4b60      	ldr	r3, [pc, #384]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1d4      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e36:	4b5c      	ldr	r3, [pc, #368]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0e6      	beq.n	8003e12 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d022      	beq.n	8003e96 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e50:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	4a54      	ldr	r2, [pc, #336]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e60:	e011      	b.n	8003e86 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe fae9 	bl	8002438 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d908      	bls.n	8003e86 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e74:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1ac      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e86:	4b48      	ldr	r3, [pc, #288]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0e6      	beq.n	8003e62 <HAL_RCC_OscConfig+0x61a>
 8003e94:	e068      	b.n	8003f68 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e96:	4b44      	ldr	r3, [pc, #272]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	4a42      	ldr	r2, [pc, #264]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ea6:	e011      	b.n	8003ecc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fe fac6 	bl	8002438 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d908      	bls.n	8003ecc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003eba:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e189      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ecc:	4b36      	ldr	r3, [pc, #216]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x660>
 8003eda:	e045      	b.n	8003f68 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe faac 	bl	8002438 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee2:	e011      	b.n	8003f08 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe faa8 	bl	8002438 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d908      	bls.n	8003f08 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e16b      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f08:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e6      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f16:	4b24      	ldr	r3, [pc, #144]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d021      	beq.n	8003f68 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f34:	e011      	b.n	8003f5a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fe fa7f 	bl	8002438 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d908      	bls.n	8003f5a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f48:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e142      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f5a:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f72:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d04f      	beq.n	8004026 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d028      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f94:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <HAL_RCC_OscConfig+0x760>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fa4b 	bl	8002438 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x788>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb0:	f7fe fa42 	bl	8002438 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d908      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8003fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e107      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fd0:	4b85      	ldr	r3, [pc, #532]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8003fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0e8      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x768>
 8003fde:	e022      	b.n	8004026 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fe0:	4b81      	ldr	r3, [pc, #516]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8003fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe6:	4a80      	ldr	r2, [pc, #512]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fa22 	bl	8002438 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff6:	e00f      	b.n	8004018 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff8:	f7fe fa1e 	bl	8002438 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d908      	bls.n	8004018 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004006:	4b78      	ldr	r3, [pc, #480]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0e3      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004018:	4b73      	ldr	r3, [pc, #460]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 800401a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e8      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80d7 	beq.w	80041de <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004030:	4b6d      	ldr	r3, [pc, #436]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b0c      	cmp	r3, #12
 800403a:	f000 8091 	beq.w	8004160 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	2b02      	cmp	r3, #2
 8004044:	d166      	bne.n	8004114 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b68      	ldr	r3, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a67      	ldr	r2, [pc, #412]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 800404c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fe f9f1 	bl	8002438 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004058:	e00e      	b.n	8004078 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe f9ed 	bl	8002438 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d907      	bls.n	8004078 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	4b5f      	ldr	r3, [pc, #380]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0b3      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	4b5b      	ldr	r3, [pc, #364]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ea      	bne.n	800405a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004084:	4b58      	ldr	r3, [pc, #352]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	4b58      	ldr	r3, [pc, #352]	@ (80041ec <HAL_RCC_OscConfig+0x9a4>)
 800408a:	4013      	ands	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004094:	3a01      	subs	r2, #1
 8004096:	0112      	lsls	r2, r2, #4
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800409e:	0212      	lsls	r2, r2, #8
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040a6:	0852      	lsrs	r2, r2, #1
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0552      	lsls	r2, r2, #21
 80040ac:	4311      	orrs	r1, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0652      	lsls	r2, r2, #25
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040be:	06d2      	lsls	r2, r2, #27
 80040c0:	430a      	orrs	r2, r1
 80040c2:	4949      	ldr	r1, [pc, #292]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a46      	ldr	r2, [pc, #280]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d4:	4b44      	ldr	r3, [pc, #272]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a43      	ldr	r2, [pc, #268]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe f9aa 	bl	8002438 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	e00e      	b.n	8004106 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fe f9a6 	bl	8002438 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d907      	bls.n	8004106 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f6:	4b3c      	ldr	r3, [pc, #240]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e06c      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ea      	beq.n	80040e8 <HAL_RCC_OscConfig+0x8a0>
 8004112:	e064      	b.n	80041de <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b34      	ldr	r3, [pc, #208]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a33      	ldr	r2, [pc, #204]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 800411a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800411e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe f98a 	bl	8002438 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004126:	e00e      	b.n	8004146 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe f986 	bl	8002438 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d907      	bls.n	8004146 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004136:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e04c      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004146:	4b28      	ldr	r3, [pc, #160]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ea      	bne.n	8004128 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004152:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	4924      	ldr	r1, [pc, #144]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 8004158:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <HAL_RCC_OscConfig+0x9a8>)
 800415a:	4013      	ands	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
 800415e:	e03e      	b.n	80041de <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e039      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800416c:	4b1e      	ldr	r3, [pc, #120]	@ (80041e8 <HAL_RCC_OscConfig+0x9a0>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0203 	and.w	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	429a      	cmp	r2, r3
 800417e:	d12c      	bne.n	80041da <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418a:	3b01      	subs	r3, #1
 800418c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d123      	bne.n	80041da <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d11b      	bne.n	80041da <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d113      	bne.n	80041da <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	3b01      	subs	r3, #1
 80041c0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d109      	bne.n	80041da <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000
 80041ec:	019f800c 	.word	0x019f800c
 80041f0:	feeefffc 	.word	0xfeeefffc

080041f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e11c      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b90      	ldr	r3, [pc, #576]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b8d      	ldr	r3, [pc, #564]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 020f 	bic.w	r2, r3, #15
 8004222:	498b      	ldr	r1, [pc, #556]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b89      	ldr	r3, [pc, #548]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e104      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	4b81      	ldr	r3, [pc, #516]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004254:	429a      	cmp	r2, r3
 8004256:	d908      	bls.n	800426a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b7e      	ldr	r3, [pc, #504]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	497b      	ldr	r1, [pc, #492]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8085 	beq.w	8004382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d11f      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004280:	4b74      	ldr	r3, [pc, #464]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0da      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004290:	f000 f9fe 	bl	8004690 <RCC_GetSysClockFreqFromPLLSource>
 8004294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4a6f      	ldr	r2, [pc, #444]	@ (8004458 <HAL_RCC_ClockConfig+0x264>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d947      	bls.n	800432e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800429e:	4b6d      	ldr	r3, [pc, #436]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d141      	bne.n	800432e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042b2:	4a68      	ldr	r2, [pc, #416]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80042b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042ba:	2380      	movs	r3, #128	@ 0x80
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e036      	b.n	800432e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c8:	4b62      	ldr	r3, [pc, #392]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d115      	bne.n	8004300 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0b6      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0aa      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f0:	4b58      	ldr	r3, [pc, #352]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0a2      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004300:	f000 f8b0 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004304:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4a53      	ldr	r2, [pc, #332]	@ (8004458 <HAL_RCC_ClockConfig+0x264>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d90f      	bls.n	800432e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800430e:	4b51      	ldr	r3, [pc, #324]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800431a:	4b4e      	ldr	r3, [pc, #312]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004322:	4a4c      	ldr	r2, [pc, #304]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004328:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b49      	ldr	r3, [pc, #292]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4946      	ldr	r1, [pc, #280]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004340:	f7fe f87a 	bl	8002438 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e013      	b.n	8004370 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fe f876 	bl	8002438 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d90a      	bls.n	8004370 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b3e      	ldr	r3, [pc, #248]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e06a      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004370:	4b38      	ldr	r3, [pc, #224]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 020c 	and.w	r2, r3, #12
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	429a      	cmp	r2, r3
 8004380:	d1e2      	bne.n	8004348 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b80      	cmp	r3, #128	@ 0x80
 8004386:	d105      	bne.n	8004394 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004388:	4b32      	ldr	r3, [pc, #200]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a31      	ldr	r2, [pc, #196]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800438e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004392:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d208      	bcs.n	80043c2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b0:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4925      	ldr	r1, [pc, #148]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c2:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d210      	bcs.n	80043f2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 020f 	bic.w	r2, r3, #15
 80043d8:	491d      	ldr	r1, [pc, #116]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_ClockConfig+0x25c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e029      	b.n	8004446 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fe:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4912      	ldr	r1, [pc, #72]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441c:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	490a      	ldr	r1, [pc, #40]	@ (8004454 <HAL_RCC_ClockConfig+0x260>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004430:	f000 f8b6 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 8004434:	4603      	mov	r3, r0
 8004436:	4a09      	ldr	r2, [pc, #36]	@ (800445c <HAL_RCC_ClockConfig+0x268>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_ClockConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd ffbe 	bl	80023c0 <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40022000 	.word	0x40022000
 8004454:	40021000 	.word	0x40021000
 8004458:	04c4b400 	.word	0x04c4b400
 800445c:	20000000 	.word	0x20000000
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447c:	4b44      	ldr	r3, [pc, #272]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x34>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d11e      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004498:	4b3d      	ldr	r3, [pc, #244]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044b4:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80044c0:	4a34      	ldr	r2, [pc, #208]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x130>)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d102      	bne.n	80044e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x134>)
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e004      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044e8:	4b2c      	ldr	r3, [pc, #176]	@ (800459c <HAL_RCC_GetSysClockFreq+0x138>)
 80044ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d146      	bne.n	8004580 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044f2:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044fc:	4b24      	ldr	r3, [pc, #144]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	3301      	adds	r3, #1
 8004508:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d003      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0xb4>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d00d      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0xce>
 8004516:	e019      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004518:	4a1f      	ldr	r2, [pc, #124]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x134>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	4a1b      	ldr	r2, [pc, #108]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004522:	68d2      	ldr	r2, [r2, #12]
 8004524:	0a12      	lsrs	r2, r2, #8
 8004526:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	617b      	str	r3, [r7, #20]
        break;
 8004530:	e019      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004532:	4a1a      	ldr	r2, [pc, #104]	@ (800459c <HAL_RCC_GetSysClockFreq+0x138>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	4a15      	ldr	r2, [pc, #84]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	0a12      	lsrs	r2, r2, #8
 8004540:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]
        break;
 800454a:	e00c      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	4a0e      	ldr	r2, [pc, #56]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004556:	68d2      	ldr	r2, [r2, #12]
 8004558:	0a12      	lsrs	r2, r2, #8
 800455a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	617b      	str	r3, [r7, #20]
        break;
 8004564:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	0e5b      	lsrs	r3, r3, #25
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	3301      	adds	r3, #1
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004580:	69bb      	ldr	r3, [r7, #24]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	@ 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	080057b8 	.word	0x080057b8
 8004598:	00f42400 	.word	0x00f42400
 800459c:	007a1200 	.word	0x007a1200

080045a0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80045a4:	f7ff ff5e 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetHCLKFreq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	080057a8 	.word	0x080057a8

080045c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004688 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045e0:	f7ff f894 	bl	800370c <HAL_PWREx_GetVoltageRange>
 80045e4:	6138      	str	r0, [r7, #16]
 80045e6:	e014      	b.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ec:	4a26      	ldr	r2, [pc, #152]	@ (8004688 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045f4:	4b24      	ldr	r3, [pc, #144]	@ (8004688 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004600:	f7ff f884 	bl	800370c <HAL_PWREx_GetVoltageRange>
 8004604:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004606:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800460c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004610:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461e:	d10b      	bne.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b80      	cmp	r3, #128	@ 0x80
 8004624:	d919      	bls.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2ba0      	cmp	r3, #160	@ 0xa0
 800462a:	d902      	bls.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800462c:	2302      	movs	r3, #2
 800462e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004630:	e013      	b.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004632:	2301      	movs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004636:	e010      	b.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	d902      	bls.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800463e:	2303      	movs	r3, #3
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e00a      	b.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b80      	cmp	r3, #128	@ 0x80
 8004648:	d102      	bne.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800464a:	2302      	movs	r3, #2
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e004      	b.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b70      	cmp	r3, #112	@ 0x70
 8004654:	d101      	bne.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004656:	2301      	movs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800465a:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 020f 	bic.w	r2, r3, #15
 8004662:	490a      	ldr	r1, [pc, #40]	@ (800468c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800466a:	4b08      	ldr	r3, [pc, #32]	@ (800468c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	40022000 	.word	0x40022000

08004690 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004696:	4b31      	ldr	r3, [pc, #196]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a0:	4b2e      	ldr	r3, [pc, #184]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	3301      	adds	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d015      	beq.n	80046e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d839      	bhi.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d01c      	beq.n	80046fa <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d133      	bne.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c6:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	4a23      	ldr	r2, [pc, #140]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	0a12      	lsrs	r2, r2, #8
 80046d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	613b      	str	r3, [r7, #16]
      break;
 80046de:	e029      	b.n	8004734 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046e0:	4a20      	ldr	r2, [pc, #128]	@ (8004764 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046ea:	68d2      	ldr	r2, [r2, #12]
 80046ec:	0a12      	lsrs	r2, r2, #8
 80046ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	613b      	str	r3, [r7, #16]
      break;
 80046f8:	e01c      	b.n	8004734 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046fa:	4b18      	ldr	r3, [pc, #96]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d107      	bne.n	8004716 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e005      	b.n	8004722 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004716:	4b11      	ldr	r3, [pc, #68]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004722:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	613b      	str	r3, [r7, #16]
        break;
 800472c:	e002      	b.n	8004734 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
      break;
 8004732:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004734:	4b09      	ldr	r3, [pc, #36]	@ (800475c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	0e5b      	lsrs	r3, r3, #25
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	3301      	adds	r3, #1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800474e:	683b      	ldr	r3, [r7, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40021000 	.word	0x40021000
 8004760:	00f42400 	.word	0x00f42400
 8004764:	007a1200 	.word	0x007a1200
 8004768:	080057b8 	.word	0x080057b8

0800476c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004778:	2300      	movs	r3, #0
 800477a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004784:	2b00      	cmp	r3, #0
 8004786:	d040      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478c:	2b80      	cmp	r3, #128	@ 0x80
 800478e:	d02a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004790:	2b80      	cmp	r3, #128	@ 0x80
 8004792:	d825      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004794:	2b60      	cmp	r3, #96	@ 0x60
 8004796:	d026      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004798:	2b60      	cmp	r3, #96	@ 0x60
 800479a:	d821      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d006      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80047a0:	2b40      	cmp	r3, #64	@ 0x40
 80047a2:	d81d      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d010      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80047ac:	e018      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ae:	4b8f      	ldr	r3, [pc, #572]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4a8e      	ldr	r2, [pc, #568]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047ba:	e015      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb56 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047cc:	e00c      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3320      	adds	r3, #32
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fc33 	bl	8005040 <RCCEx_PLLSAI2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80047de:	e003      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
        break;
 80047e4:	e000      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80047e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e8:	7ffb      	ldrb	r3, [r7, #31]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ee:	4b7f      	ldr	r3, [pc, #508]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047f4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fc:	497b      	ldr	r1, [pc, #492]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004804:	e001      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	7ffb      	ldrb	r3, [r7, #31]
 8004808:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d047      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481e:	d030      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004824:	d82a      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800482a:	d02a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800482c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004830:	d824      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004836:	d008      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800483c:	d81e      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004846:	d010      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004848:	e018      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800484a:	4b68      	ldr	r3, [pc, #416]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4a67      	ldr	r2, [pc, #412]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004854:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004856:	e015      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fb08 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004868:	e00c      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3320      	adds	r3, #32
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fbe5 	bl	8005040 <RCCEx_PLLSAI2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800487a:	e003      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
        break;
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004884:	7ffb      	ldrb	r3, [r7, #31]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800488a:	4b58      	ldr	r3, [pc, #352]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800488c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4954      	ldr	r1, [pc, #336]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80048a0:	e001      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80ab 	beq.w	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b8:	4b4c      	ldr	r3, [pc, #304]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b49      	ldr	r3, [pc, #292]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	4a48      	ldr	r2, [pc, #288]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d0:	4b46      	ldr	r3, [pc, #280]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e0:	4b43      	ldr	r3, [pc, #268]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a42      	ldr	r2, [pc, #264]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80048e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ec:	f7fd fda4 	bl	8002438 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048f2:	e00f      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f4:	f7fd fda0 	bl	8002438 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d908      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004902:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004912:	e006      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004914:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0e9      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004922:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004924:	7ffb      	ldrb	r3, [r7, #31]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d164      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800492a:	4b30      	ldr	r3, [pc, #192]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004934:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01f      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	d019      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004948:	4b28      	ldr	r3, [pc, #160]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004952:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	4a24      	ldr	r2, [pc, #144]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	4a20      	ldr	r2, [pc, #128]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800496c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004974:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01f      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7fd fd57 	bl	8002438 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498c:	e012      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fd fd53 	bl	8002438 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d909      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a0:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80049b2:	e007      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b4:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0e5      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80049c4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	4903      	ldr	r1, [pc, #12]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049e4:	e008      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
 80049e8:	77bb      	strb	r3, [r7, #30]
 80049ea:	e005      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
 80049f6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	4a9b      	ldr	r2, [pc, #620]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a16:	4b96      	ldr	r3, [pc, #600]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a24:	4992      	ldr	r1, [pc, #584]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a38:	4b8d      	ldr	r3, [pc, #564]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3e:	f023 020c 	bic.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a46:	498a      	ldr	r1, [pc, #552]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5a:	4b85      	ldr	r3, [pc, #532]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a68:	4981      	ldr	r1, [pc, #516]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	4979      	ldr	r1, [pc, #484]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9e:	4b74      	ldr	r3, [pc, #464]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aac:	4970      	ldr	r1, [pc, #448]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ace:	4968      	ldr	r1, [pc, #416]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ae2:	4b63      	ldr	r3, [pc, #396]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	495f      	ldr	r1, [pc, #380]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b04:	4b5a      	ldr	r3, [pc, #360]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b12:	4957      	ldr	r1, [pc, #348]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004b26:	4b52      	ldr	r3, [pc, #328]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b34:	494e      	ldr	r1, [pc, #312]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d031      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b50:	d00e      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b56:	d814      	bhi.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b60:	d10f      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b62:	4b43      	ldr	r3, [pc, #268]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a42      	ldr	r2, [pc, #264]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b6c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004b6e:	e00c      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f97c 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77fb      	strb	r3, [r7, #31]
        break;
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b90:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b9e:	4934      	ldr	r1, [pc, #208]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ba6:	e001      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
 8004baa:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc6:	492a      	ldr	r1, [pc, #168]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bda:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	4921      	ldr	r1, [pc, #132]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	4919      	ldr	r1, [pc, #100]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c1e:	4b14      	ldr	r3, [pc, #80]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c24:	f023 0203 	bic.w	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2c:	4910      	ldr	r1, [pc, #64]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02b      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4e:	4908      	ldr	r1, [pc, #32]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c5e:	d109      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c60:	4b03      	ldr	r3, [pc, #12]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a02      	ldr	r2, [pc, #8]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6a:	60d3      	str	r3, [r2, #12]
 8004c6c:	e014      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2101      	movs	r1, #1
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f8f5 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
 8004c96:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d04a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cac:	d108      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004cae:	4b70      	ldr	r3, [pc, #448]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004cbe:	e012      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004cc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cce:	4968      	ldr	r1, [pc, #416]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004cd6:	4b66      	ldr	r3, [pc, #408]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cdc:	4a64      	ldr	r2, [pc, #400]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004cde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ce2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cee:	d10d      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f8bc 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d019      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	77bb      	strb	r3, [r7, #30]
 8004d0a:	e016      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d14:	d106      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d16:	4b56      	ldr	r3, [pc, #344]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a55      	ldr	r2, [pc, #340]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d20:	60d3      	str	r3, [r2, #12]
 8004d22:	e00a      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d2e:	4b50      	ldr	r3, [pc, #320]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4a4f      	ldr	r2, [pc, #316]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d38:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d028      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d46:	4b4a      	ldr	r3, [pc, #296]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d54:	4946      	ldr	r1, [pc, #280]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d66:	4b42      	ldr	r3, [pc, #264]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a41      	ldr	r2, [pc, #260]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004d6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d70:	60d3      	str	r3, [r2, #12]
 8004d72:	e011      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2101      	movs	r1, #1
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f875 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d8e:	7ffb      	ldrb	r3, [r7, #31]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
 8004d96:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01e      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004da4:	4b32      	ldr	r3, [pc, #200]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db4:	492e      	ldr	r1, [pc, #184]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc6:	d10c      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f850 	bl	8004e74 <RCCEx_PLLSAI1_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004dd8:	7ffb      	ldrb	r3, [r7, #31]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
 8004de0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004df4:	f023 0204 	bic.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dfe:	491c      	ldr	r1, [pc, #112]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e18:	f023 0218 	bic.w	r2, r3, #24
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e22:	4913      	ldr	r1, [pc, #76]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e36:	4b0e      	ldr	r3, [pc, #56]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e46:	490a      	ldr	r1, [pc, #40]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e58:	d105      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5a:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4a04      	ldr	r2, [pc, #16]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e64:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004e66:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000

08004e74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d018      	beq.n	8004ebc <RCCEx_PLLSAI1_Config+0x48>
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d81f      	bhi.n	8004ece <RCCEx_PLLSAI1_Config+0x5a>
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d002      	beq.n	8004e98 <RCCEx_PLLSAI1_Config+0x24>
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d009      	beq.n	8004eaa <RCCEx_PLLSAI1_Config+0x36>
 8004e96:	e01a      	b.n	8004ece <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e98:	4b65      	ldr	r3, [pc, #404]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d117      	bne.n	8004ed4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea8:	e014      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eaa:	4b61      	ldr	r3, [pc, #388]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d110      	bne.n	8004ed8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eba:	e00d      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e006      	b.n	8004edc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed2:	e004      	b.n	8004ede <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ed4:	bf00      	nop
 8004ed6:	e002      	b.n	8004ede <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ed8:	bf00      	nop
 8004eda:	e000      	b.n	8004ede <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004edc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 809f 	bne.w	8005024 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ee6:	4b52      	ldr	r3, [pc, #328]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a51      	ldr	r2, [pc, #324]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fd faa1 	bl	8002438 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ef8:	e00f      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004efa:	f7fd fa9d 	bl	8002438 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d908      	bls.n	8004f1a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f08:	4b49      	ldr	r3, [pc, #292]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f18:	e006      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f1a:	4b45      	ldr	r3, [pc, #276]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e9      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0x86>
 8004f26:	e000      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004f28:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d179      	bne.n	8005024 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d116      	bne.n	8004f64 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f36:	4b3e      	ldr	r3, [pc, #248]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005034 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	0211      	lsls	r1, r2, #8
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68d2      	ldr	r2, [r2, #12]
 8004f48:	06d2      	lsls	r2, r2, #27
 8004f4a:	4311      	orrs	r1, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6852      	ldr	r2, [r2, #4]
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0112      	lsls	r2, r2, #4
 8004f54:	4311      	orrs	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	4934      	ldr	r1, [pc, #208]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	610b      	str	r3, [r1, #16]
 8004f62:	e033      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d118      	bne.n	8004f9c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f6a:	4b31      	ldr	r3, [pc, #196]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	4b32      	ldr	r3, [pc, #200]	@ (8005038 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6892      	ldr	r2, [r2, #8]
 8004f76:	0211      	lsls	r1, r2, #8
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6912      	ldr	r2, [r2, #16]
 8004f7c:	0852      	lsrs	r2, r2, #1
 8004f7e:	3a01      	subs	r2, #1
 8004f80:	0552      	lsls	r2, r2, #21
 8004f82:	4311      	orrs	r1, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6852      	ldr	r2, [r2, #4]
 8004f88:	3a01      	subs	r2, #1
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	4311      	orrs	r1, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	4926      	ldr	r1, [pc, #152]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
 8004f9a:	e017      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f9c:	4b24      	ldr	r3, [pc, #144]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	4b26      	ldr	r3, [pc, #152]	@ (800503c <RCCEx_PLLSAI1_Config+0x1c8>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	0211      	lsls	r1, r2, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6952      	ldr	r2, [r2, #20]
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0652      	lsls	r2, r2, #25
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6852      	ldr	r2, [r2, #4]
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	4311      	orrs	r1, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	491a      	ldr	r1, [pc, #104]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fcc:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fa2e 	bl	8002438 <HAL_GetTick>
 8004fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fde:	e00f      	b.n	8005000 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fe0:	f7fd fa2a 	bl	8002438 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d908      	bls.n	8005000 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fee:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004ffe:	e006      	b.n	800500e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0e9      	beq.n	8004fe0 <RCCEx_PLLSAI1_Config+0x16c>
 800500c:	e000      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800500e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005016:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	4904      	ldr	r1, [pc, #16]	@ (8005030 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	07ff800c 	.word	0x07ff800c
 8005038:	ff9f800c 	.word	0xff9f800c
 800503c:	f9ff800c 	.word	0xf9ff800c

08005040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d018      	beq.n	8005088 <RCCEx_PLLSAI2_Config+0x48>
 8005056:	2b03      	cmp	r3, #3
 8005058:	d81f      	bhi.n	800509a <RCCEx_PLLSAI2_Config+0x5a>
 800505a:	2b01      	cmp	r3, #1
 800505c:	d002      	beq.n	8005064 <RCCEx_PLLSAI2_Config+0x24>
 800505e:	2b02      	cmp	r3, #2
 8005060:	d009      	beq.n	8005076 <RCCEx_PLLSAI2_Config+0x36>
 8005062:	e01a      	b.n	800509a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005064:	4b4a      	ldr	r3, [pc, #296]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d117      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005074:	e014      	b.n	80050a0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005076:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507e:	2b00      	cmp	r3, #0
 8005080:	d110      	bne.n	80050a4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005086:	e00d      	b.n	80050a4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005088:	4b41      	ldr	r3, [pc, #260]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005098:	e006      	b.n	80050a8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e004      	b.n	80050aa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050a0:	bf00      	nop
 80050a2:	e002      	b.n	80050aa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050a4:	bf00      	nop
 80050a6:	e000      	b.n	80050aa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80050a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d169      	bne.n	8005184 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050b0:	4b37      	ldr	r3, [pc, #220]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a36      	ldr	r2, [pc, #216]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 80050b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fd f9bc 	bl	8002438 <HAL_GetTick>
 80050c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c2:	e00f      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050c4:	f7fd f9b8 	bl	8002438 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d908      	bls.n	80050e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050e2:	e006      	b.n	80050f2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e9      	bne.n	80050c4 <RCCEx_PLLSAI2_Config+0x84>
 80050f0:	e000      	b.n	80050f4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80050f2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d144      	bne.n	8005184 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d115      	bne.n	800512c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005100:	4b23      	ldr	r3, [pc, #140]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005102:	695a      	ldr	r2, [r3, #20]
 8005104:	4b23      	ldr	r3, [pc, #140]	@ (8005194 <RCCEx_PLLSAI2_Config+0x154>)
 8005106:	4013      	ands	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6892      	ldr	r2, [r2, #8]
 800510c:	0211      	lsls	r1, r2, #8
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	06d2      	lsls	r2, r2, #27
 8005114:	4311      	orrs	r1, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6852      	ldr	r2, [r2, #4]
 800511a:	3a01      	subs	r2, #1
 800511c:	0112      	lsls	r2, r2, #4
 800511e:	4311      	orrs	r1, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	491a      	ldr	r1, [pc, #104]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005128:	4313      	orrs	r3, r2
 800512a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800512c:	4b18      	ldr	r3, [pc, #96]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a17      	ldr	r2, [pc, #92]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005136:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd f97e 	bl	8002438 <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800513e:	e00f      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005140:	f7fd f97a 	bl	8002438 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d908      	bls.n	8005160 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800514e:	4b10      	ldr	r3, [pc, #64]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800515e:	e006      	b.n	800516e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0e9      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x100>
 800516c:	e000      	b.n	8005170 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800516e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005176:	4b06      	ldr	r3, [pc, #24]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	4904      	ldr	r1, [pc, #16]	@ (8005190 <RCCEx_PLLSAI2_Config+0x150>)
 8005180:	4313      	orrs	r3, r2
 8005182:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	07ff800c 	.word	0x07ff800c

08005198 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800519c:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <SysTick_Handler+0x1c>)
 800519e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051a0:	f000 f97e 	bl	80054a0 <xTaskGetSchedulerState>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051aa:	f000 f997 	bl	80054dc <xPortSysTickHandler>
  }
}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	e000e010 	.word	0xe000e010

080051b8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6892      	ldr	r2, [r2, #8]
 8005216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	d103      	bne.n	8005234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	1e5a      	subs	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525e:	4b4b      	ldr	r3, [pc, #300]	@ (800538c <xTaskIncrementTick+0x138>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 8088 	bne.w	8005378 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005268:	4b49      	ldr	r3, [pc, #292]	@ (8005390 <xTaskIncrementTick+0x13c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005270:	4a47      	ldr	r2, [pc, #284]	@ (8005390 <xTaskIncrementTick+0x13c>)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d119      	bne.n	80052b0 <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 800527c:	4b45      	ldr	r3, [pc, #276]	@ (8005394 <xTaskIncrementTick+0x140>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <xTaskIncrementTick+0x3a>
 8005286:	f000 f96f 	bl	8005568 <ulSetInterruptMask>
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xTaskIncrementTick+0x36>
 800528e:	4b41      	ldr	r3, [pc, #260]	@ (8005394 <xTaskIncrementTick+0x140>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	4b40      	ldr	r3, [pc, #256]	@ (8005398 <xTaskIncrementTick+0x144>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3e      	ldr	r2, [pc, #248]	@ (8005394 <xTaskIncrementTick+0x140>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4a3e      	ldr	r2, [pc, #248]	@ (8005398 <xTaskIncrementTick+0x144>)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b3e      	ldr	r3, [pc, #248]	@ (800539c <xTaskIncrementTick+0x148>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	4a3c      	ldr	r2, [pc, #240]	@ (800539c <xTaskIncrementTick+0x148>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	f000 f8d8 	bl	8005460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <xTaskIncrementTick+0x14c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d349      	bcc.n	800534e <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ba:	4b36      	ldr	r3, [pc, #216]	@ (8005394 <xTaskIncrementTick+0x140>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <xTaskIncrementTick+0x14c>)
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ca:	601a      	str	r2, [r3, #0]
					break;
 80052cc:	e03f      	b.n	800534e <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <xTaskIncrementTick+0x140>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d203      	bcs.n	80052ee <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052e6:	4a2e      	ldr	r2, [pc, #184]	@ (80053a0 <xTaskIncrementTick+0x14c>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052ec:	e02f      	b.n	800534e <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ff84 	bl	8005200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3318      	adds	r3, #24
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff7b 	bl	8005200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <xTaskIncrementTick+0x150>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <xTaskIncrementTick+0xca>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <xTaskIncrementTick+0x150>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a1f      	ldr	r2, [pc, #124]	@ (80053a8 <xTaskIncrementTick+0x154>)
 800532c:	441a      	add	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7ff ff3f 	bl	80051b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <xTaskIncrementTick+0x158>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	429a      	cmp	r2, r3
 8005346:	d3b8      	bcc.n	80052ba <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534c:	e7b5      	b.n	80052ba <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800534e:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <xTaskIncrementTick+0x158>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005354:	4914      	ldr	r1, [pc, #80]	@ (80053a8 <xTaskIncrementTick+0x154>)
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d901      	bls.n	800536a <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800536a:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <xTaskIncrementTick+0x15c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e004      	b.n	8005382 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005378:	4b0e      	ldr	r3, [pc, #56]	@ (80053b4 <xTaskIncrementTick+0x160>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	4a0d      	ldr	r2, [pc, #52]	@ (80053b4 <xTaskIncrementTick+0x160>)
 8005380:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	200009e8 	.word	0x200009e8
 8005390:	200009cc 	.word	0x200009cc
 8005394:	200009c4 	.word	0x200009c4
 8005398:	200009c8 	.word	0x200009c8
 800539c:	200009e0 	.word	0x200009e0
 80053a0:	200009e4 	.word	0x200009e4
 80053a4:	200009d0 	.word	0x200009d0
 80053a8:	20000564 	.word	0x20000564
 80053ac:	20000560 	.word	0x20000560
 80053b0:	200009dc 	.word	0x200009dc
 80053b4:	200009d8 	.word	0x200009d8

080053b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053be:	4b23      	ldr	r3, [pc, #140]	@ (800544c <vTaskSwitchContext+0x94>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053c6:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <vTaskSwitchContext+0x98>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053cc:	e03a      	b.n	8005444 <vTaskSwitchContext+0x8c>
		xYieldPending = pdFALSE;
 80053ce:	4b20      	ldr	r3, [pc, #128]	@ (8005450 <vTaskSwitchContext+0x98>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005454 <vTaskSwitchContext+0x9c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	e009      	b.n	80053f0 <vTaskSwitchContext+0x38>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <vTaskSwitchContext+0x32>
 80053e2:	f000 f8c1 	bl	8005568 <ulSetInterruptMask>
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <vTaskSwitchContext+0x2e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	4919      	ldr	r1, [pc, #100]	@ (8005458 <vTaskSwitchContext+0xa0>)
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0eb      	beq.n	80053dc <vTaskSwitchContext+0x24>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <vTaskSwitchContext+0xa0>)
 8005410:	4413      	add	r3, r2
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	429a      	cmp	r2, r3
 8005428:	d104      	bne.n	8005434 <vTaskSwitchContext+0x7c>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	605a      	str	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	4a08      	ldr	r2, [pc, #32]	@ (800545c <vTaskSwitchContext+0xa4>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4a05      	ldr	r2, [pc, #20]	@ (8005454 <vTaskSwitchContext+0x9c>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6013      	str	r3, [r2, #0]
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	200009e8 	.word	0x200009e8
 8005450:	200009dc 	.word	0x200009dc
 8005454:	200009d0 	.word	0x200009d0
 8005458:	20000564 	.word	0x20000564
 800545c:	20000560 	.word	0x20000560

08005460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <prvResetNextTaskUnblockTime+0x38>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <prvResetNextTaskUnblockTime+0x3c>)
 8005472:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005476:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005478:	e008      	b.n	800548c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800547a:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <prvResetNextTaskUnblockTime+0x38>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a04      	ldr	r2, [pc, #16]	@ (800549c <prvResetNextTaskUnblockTime+0x3c>)
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	200009c4 	.word	0x200009c4
 800549c:	200009e4 	.word	0x200009e4

080054a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <xTaskGetSchedulerState+0x34>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d102      	bne.n	80054b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054ae:	2301      	movs	r3, #1
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	e008      	b.n	80054c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b4:	4b08      	ldr	r3, [pc, #32]	@ (80054d8 <xTaskGetSchedulerState+0x38>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054bc:	2302      	movs	r3, #2
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	e001      	b.n	80054c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054c6:	687b      	ldr	r3, [r7, #4]
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	200009d4 	.word	0x200009d4
 80054d8:	200009e8 	.word	0x200009e8

080054dc <xPortSysTickHandler>:
	}
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80054e2:	f000 f841 	bl	8005568 <ulSetInterruptMask>
 80054e6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054e8:	f7ff feb4 	bl	8005254 <xTaskIncrementTick>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054f2:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <xPortSysTickHandler+0x2c>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f841 	bl	8005582 <vClearInterruptMask>
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b02      	subs	r3, #2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8005522:	7afb      	ldrb	r3, [r7, #11]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d102      	bne.n	800552e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8005528:	f000 f80a 	bl	8005540 <vRestoreContextOfFirstTask>
		}
		break;
 800552c:	e003      	b.n	8005536 <vPortSVCHandler_C+0x2a>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800552e:	f000 f81b 	bl	8005568 <ulSetInterruptMask>
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <vPortSVCHandler_C+0x26>
		}
	}
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8005540:	4a07      	ldr	r2, [pc, #28]	@ (8005560 <pxCurrentTCBConst2>)
 8005542:	6811      	ldr	r1, [r2, #0]
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	c806      	ldmia	r0!, {r1, r2}
 8005548:	f381 880b 	msr	PSPLIM, r1
 800554c:	2102      	movs	r1, #2
 800554e:	f381 8814 	msr	CONTROL, r1
 8005552:	3020      	adds	r0, #32
 8005554:	f380 8809 	msr	PSP, r0
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	4710      	bx	r2
 800555e:	bf00      	nop

08005560 <pxCurrentTCBConst2>:
 8005560:	20000560 	.word	0x20000560
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8005568:	f3ef 8011 	mrs	r0, BASEPRI
 800556c:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 8005570:	f381 8811 	msr	BASEPRI, r1
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800557e:	bf00      	nop
 8005580:	4618      	mov	r0, r3

08005582 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8005582:	f380 8811 	msr	BASEPRI, r0
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8005590:	bf00      	nop
	...

080055a0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80055a0:	f3ef 8009 	mrs	r0, PSP
 80055a4:	f3ef 820b 	mrs	r2, PSPLIM
 80055a8:	4673      	mov	r3, lr
 80055aa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80055ae:	4a10      	ldr	r2, [pc, #64]	@ (80055f0 <pxCurrentTCBConst>)
 80055b0:	6811      	ldr	r1, [r2, #0]
 80055b2:	6008      	str	r0, [r1, #0]
 80055b4:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 80055b8:	f380 8811 	msr	BASEPRI, r0
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f7ff fef8 	bl	80053b8 <vTaskSwitchContext>
 80055c8:	f04f 0000 	mov.w	r0, #0
 80055cc:	f380 8811 	msr	BASEPRI, r0
 80055d0:	4a07      	ldr	r2, [pc, #28]	@ (80055f0 <pxCurrentTCBConst>)
 80055d2:	6811      	ldr	r1, [r2, #0]
 80055d4:	6808      	ldr	r0, [r1, #0]
 80055d6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80055da:	f382 880b 	msr	PSPLIM, r2
 80055de:	f380 8809 	msr	PSP, r0
 80055e2:	4718      	bx	r3
 80055e4:	f3af 8000 	nop.w
 80055e8:	f3af 8000 	nop.w
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	20000560 	.word	0x20000560
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
	...

08005600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8005600:	f01e 0f04 	tst.w	lr, #4
 8005604:	bf0c      	ite	eq
 8005606:	f3ef 8008 	mrseq	r0, MSP
 800560a:	f3ef 8009 	mrsne	r0, PSP
 800560e:	4904      	ldr	r1, [pc, #16]	@ (8005620 <svchandler_address_const>)
 8005610:	4708      	bx	r1
 8005612:	bf00      	nop
 8005614:	f3af 8000 	nop.w
 8005618:	f3af 8000 	nop.w
 800561c:	f3af 8000 	nop.w

08005620 <svchandler_address_const>:
 8005620:	0800550d 	.word	0x0800550d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <_ZdlPvj>:
 8005628:	f000 b800 	b.w	800562c <_ZdlPv>

0800562c <_ZdlPv>:
 800562c:	f000 b800 	b.w	8005630 <free>

08005630 <free>:
 8005630:	4b02      	ldr	r3, [pc, #8]	@ (800563c <free+0xc>)
 8005632:	4601      	mov	r1, r0
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	f000 b84b 	b.w	80056d0 <_free_r>
 800563a:	bf00      	nop
 800563c:	2000000c 	.word	0x2000000c

08005640 <__malloc_lock>:
 8005640:	4801      	ldr	r0, [pc, #4]	@ (8005648 <__malloc_lock+0x8>)
 8005642:	f000 b835 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8005646:	bf00      	nop
 8005648:	20000b28 	.word	0x20000b28

0800564c <__malloc_unlock>:
 800564c:	4801      	ldr	r0, [pc, #4]	@ (8005654 <__malloc_unlock+0x8>)
 800564e:	f000 b830 	b.w	80056b2 <__retarget_lock_release_recursive>
 8005652:	bf00      	nop
 8005654:	20000b28 	.word	0x20000b28

08005658 <memset>:
 8005658:	4402      	add	r2, r0
 800565a:	4603      	mov	r3, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	d100      	bne.n	8005662 <memset+0xa>
 8005660:	4770      	bx	lr
 8005662:	f803 1b01 	strb.w	r1, [r3], #1
 8005666:	e7f9      	b.n	800565c <memset+0x4>

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4d0d      	ldr	r5, [pc, #52]	@ (80056a0 <__libc_init_array+0x38>)
 800566c:	2600      	movs	r6, #0
 800566e:	4c0d      	ldr	r4, [pc, #52]	@ (80056a4 <__libc_init_array+0x3c>)
 8005670:	1b64      	subs	r4, r4, r5
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	42a6      	cmp	r6, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4d0b      	ldr	r5, [pc, #44]	@ (80056a8 <__libc_init_array+0x40>)
 800567a:	2600      	movs	r6, #0
 800567c:	4c0b      	ldr	r4, [pc, #44]	@ (80056ac <__libc_init_array+0x44>)
 800567e:	f000 f871 	bl	8005764 <_init>
 8005682:	1b64      	subs	r4, r4, r5
 8005684:	10a4      	asrs	r4, r4, #2
 8005686:	42a6      	cmp	r6, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005690:	3601      	adds	r6, #1
 8005692:	4798      	blx	r3
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f855 3b04 	ldr.w	r3, [r5], #4
 800569a:	3601      	adds	r6, #1
 800569c:	4798      	blx	r3
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	08005808 	.word	0x08005808
 80056a4:	08005808 	.word	0x08005808
 80056a8:	08005808 	.word	0x08005808
 80056ac:	0800580c 	.word	0x0800580c

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <memcpy>:
 80056b4:	440a      	add	r2, r1
 80056b6:	1e43      	subs	r3, r0, #1
 80056b8:	4291      	cmp	r1, r2
 80056ba:	d100      	bne.n	80056be <memcpy+0xa>
 80056bc:	4770      	bx	lr
 80056be:	b510      	push	{r4, lr}
 80056c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c4:	4291      	cmp	r1, r2
 80056c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ca:	d1f9      	bne.n	80056c0 <memcpy+0xc>
 80056cc:	bd10      	pop	{r4, pc}
	...

080056d0 <_free_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4605      	mov	r5, r0
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d041      	beq.n	800575c <_free_r+0x8c>
 80056d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056dc:	1f0c      	subs	r4, r1, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfb8      	it	lt
 80056e2:	18e4      	addlt	r4, r4, r3
 80056e4:	f7ff ffac 	bl	8005640 <__malloc_lock>
 80056e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005760 <_free_r+0x90>)
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	b933      	cbnz	r3, 80056fc <_free_r+0x2c>
 80056ee:	6063      	str	r3, [r4, #4]
 80056f0:	6014      	str	r4, [r2, #0]
 80056f2:	4628      	mov	r0, r5
 80056f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056f8:	f7ff bfa8 	b.w	800564c <__malloc_unlock>
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	d908      	bls.n	8005712 <_free_r+0x42>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	1821      	adds	r1, r4, r0
 8005704:	428b      	cmp	r3, r1
 8005706:	bf01      	itttt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	e7ed      	b.n	80056ee <_free_r+0x1e>
 8005712:	461a      	mov	r2, r3
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	b10b      	cbz	r3, 800571c <_free_r+0x4c>
 8005718:	42a3      	cmp	r3, r4
 800571a:	d9fa      	bls.n	8005712 <_free_r+0x42>
 800571c:	6811      	ldr	r1, [r2, #0]
 800571e:	1850      	adds	r0, r2, r1
 8005720:	42a0      	cmp	r0, r4
 8005722:	d10b      	bne.n	800573c <_free_r+0x6c>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	4401      	add	r1, r0
 8005728:	1850      	adds	r0, r2, r1
 800572a:	6011      	str	r1, [r2, #0]
 800572c:	4283      	cmp	r3, r0
 800572e:	d1e0      	bne.n	80056f2 <_free_r+0x22>
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4408      	add	r0, r1
 8005736:	6053      	str	r3, [r2, #4]
 8005738:	6010      	str	r0, [r2, #0]
 800573a:	e7da      	b.n	80056f2 <_free_r+0x22>
 800573c:	d902      	bls.n	8005744 <_free_r+0x74>
 800573e:	230c      	movs	r3, #12
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	e7d6      	b.n	80056f2 <_free_r+0x22>
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	1821      	adds	r1, r4, r0
 8005748:	428b      	cmp	r3, r1
 800574a:	bf02      	ittt	eq
 800574c:	6819      	ldreq	r1, [r3, #0]
 800574e:	685b      	ldreq	r3, [r3, #4]
 8005750:	1809      	addeq	r1, r1, r0
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	bf08      	it	eq
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	6054      	str	r4, [r2, #4]
 800575a:	e7ca      	b.n	80056f2 <_free_r+0x22>
 800575c:	bd38      	pop	{r3, r4, r5, pc}
 800575e:	bf00      	nop
 8005760:	200009ec 	.word	0x200009ec

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr
