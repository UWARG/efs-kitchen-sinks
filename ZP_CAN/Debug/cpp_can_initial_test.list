
cpp_can_initial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  080043f0  080043f0  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f0  080043f0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f0  080043f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  2000005c  08004454  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08004454  0000669c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f34a  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271a  00000000  00000000  000153dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00017af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009de  00000000  00000000  00018828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e3cc  00000000  00000000  00019206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012582  00000000  00000000  000475d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001143dc  00000000  00000000  00059b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016df30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000397c  00000000  00000000  0016df74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001718f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800434c 	.word	0x0800434c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	0800434c 	.word	0x0800434c

08000238 <_ZN4ICANC1Ev>:

class ICAN {

protected:
//	virtual uint8_t initNode();
	ICAN() = default;
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	4a04      	ldr	r2, [pc, #16]	@ (8000254 <_ZN4ICANC1Ev+0x1c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	08004384 	.word	0x08004384

08000258 <_ZN4ICAND1Ev>:

public:
	virtual ~ICAN() = default;
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <_ZN4ICAND1Ev+0x1c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	08004384 	.word	0x08004384

08000278 <_ZN4ICAND0Ev>:
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ffe9 	bl	8000258 <_ZN4ICAND1Ev>
 8000286:	2104      	movs	r1, #4
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f003 ffc1 	bl	8004210 <_ZdlPvj>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <_ZN3CANC1EP19FDCAN_HandleTypeDef>:
 */


#include "can.hpp"

CAN::CAN(FDCAN_HandleTypeDef *hfdcan) : hfdcan(hfdcan) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af02      	add	r7, sp, #8
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffc7 	bl	8000238 <_ZN4ICANC1Ev>
 80002aa:	4a0f      	ldr	r2, [pc, #60]	@ (80002e8 <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x50>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2202      	movs	r2, #2
 80002b4:	711a      	strb	r2, [r3, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
//	this->canInst.on_reception = &this->CanardOnTransferReception;
//	this->canInst.should_accept = &this->shouldAcceptTransfer;
	static uint8_t canardMemoryPool[1024];

	canardInit(&canInst,
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f103 000c 	add.w	r0, r3, #12
 80002c2:	2300      	movs	r3, #0
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2300      	movs	r3, #0
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2300      	movs	r3, #0
 80002cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002d0:	4906      	ldr	r1, [pc, #24]	@ (80002ec <_ZN3CANC1EP19FDCAN_HandleTypeDef+0x54>)
 80002d2:	f000 f8c6 	bl	8000462 <canardInit>
//			&CAN::CanardShouldAcceptTransfer,
			NULL, NULL,
			NULL
	);

	canInst.node_id = NODE_ID;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	731a      	strb	r2, [r3, #12]
}
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	08004374 	.word	0x08004374
 80002ec:	20000078 	.word	0x20000078

080002f0 <_ZN3CAND1Ev>:

CAN::CAN() {}

CAN::~CAN() {}
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	4a05      	ldr	r2, [pc, #20]	@ (8000310 <_ZN3CAND1Ev+0x20>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffa9 	bl	8000258 <_ZN4ICAND1Ev>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	08004374 	.word	0x08004374

08000314 <_ZN3CAND0Ev>:
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ffe7 	bl	80002f0 <_ZN3CAND1Ev>
 8000322:	2138      	movs	r1, #56	@ 0x38
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f003 ff73 	bl	8004210 <_ZdlPvj>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4618      	mov	r0, r3
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <_ZN3CAN9sendCANTxEv>:
/*
Function to convert all canard CAN frames and send them through HAL

Consider removing for loop
*/
void CAN::sendCANTx() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	@ 0x40
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	bool success = true;
 800033c:	2301      	movs	r3, #1
 800033e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for (const CanardCANFrame *frame; frame != nullptr; frame = canardPeekTxQueue(&canInst)) {
 8000342:	e03d      	b.n	80003c0 <_ZN3CAN9sendCANTxEv+0x8c>
		if (HAL_FDCAN_GetTxFifoFreeLevel(hfdcan) > 0) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fd43 	bl	8001dd4 <HAL_FDCAN_GetTxFifoFreeLevel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	bf14      	ite	ne
 8000354:	2301      	movne	r3, #1
 8000356:	2300      	moveq	r3, #0
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d02a      	beq.n	80003b4 <_ZN3CAN9sendCANTxEv+0x80>
			FDCAN_TxHeaderTypeDef txHeader;

			txHeader.Identifier = frame->id;
 800035e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	60fb      	str	r3, [r7, #12]
			txHeader.IdType = FDCAN_EXTENDED_ID;
 8000364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000368:	613b      	str	r3, [r7, #16]
			txHeader.TxFrameType = FDCAN_DATA_FRAME;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
			txHeader.DataLength = FDCAN_DLC_BYTES_8;
 800036e:	2308      	movs	r3, #8
 8000370:	61bb      	str	r3, [r7, #24]
			txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
			txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000376:	2300      	movs	r3, #0
 8000378:	623b      	str	r3, [r7, #32]
			txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800037a:	2300      	movs	r3, #0
 800037c:	627b      	str	r3, [r7, #36]	@ 0x24

			const uint8_t *txData = frame->data;
 800037e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000380:	3304      	adds	r3, #4
 8000382:	637b      	str	r3, [r7, #52]	@ 0x34

			bool success = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, txData) == HAL_OK;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	f107 010c 	add.w	r1, r7, #12
 800038c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fbd4 	bl	8001b3c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	bf0c      	ite	eq
 800039a:	2301      	moveq	r3, #1
 800039c:	2300      	movne	r3, #0
 800039e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

			if (success) {
 80003a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d004      	beq.n	80003b4 <_ZN3CAN9sendCANTxEv+0x80>
				canardPopTxQueue(&canInst);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	330c      	adds	r3, #12
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f957 	bl	8000662 <canardPopTxQueue>
	for (const CanardCANFrame *frame; frame != nullptr; frame = canardPeekTxQueue(&canInst)) {
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	330c      	adds	r3, #12
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f93f 	bl	800063c <canardPeekTxQueue>
 80003be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80003c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1be      	bne.n	8000344 <_ZN3CAN9sendCANTxEv+0x10>
			}
		}
	}
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3740      	adds	r7, #64	@ 0x40
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <_ZN3CAN12routineTasksEv>:

bool CAN::routineTasks() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	sendCANTx();
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f7ff ffab 	bl	8000334 <_ZN3CAN9sendCANTxEv>
}
 80003de:	bf00      	nop
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <_ZN3CAN19canardBroadcastObj1EP16CanardTxTransfer>:
/*
Wrapper function with mutex
*/
int16_t CAN::canardBroadcastObj1(
	CanardTxTransfer* transfer
) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]

	int16_t res = canardBroadcastObj(&canInst, transfer);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	330c      	adds	r3, #12
 80003f6:	6839      	ldr	r1, [r7, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f873 	bl	80004e4 <canardBroadcastObj>
 80003fe:	4603      	mov	r3, r0
 8000400:	81fb      	strh	r3, [r7, #14]


	return res;
 8000402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_ZN3CAN15canardBroadcastEytPhhPKvt>:
	uint8_t* inout_transfer_id,     ///< Pointer to a persistent variable containing the transfer ID
	uint8_t priority,               ///< Refer to definitions CANARD_TRANSFER_PRIORITY_*
	const void* payload,            ///< Transfer payload
	uint16_t payload_len
)
	{
 800040e:	b580      	push	{r7, lr}
 8000410:	b08e      	sub	sp, #56	@ 0x38
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	e9c7 2300 	strd	r2, r3, [r7]
		CanardTxTransfer transfer_object = {
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2228      	movs	r2, #40	@ 0x28
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f003 ff0c 	bl	8004240 <memset>
					.iface_mask = iface_mask,
			#endif
			#if CANARD_ENABLE_CANFD
					.canfd = canfd,
			#endif
		};
 8000428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800042c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000434:	843b      	strh	r3, [r7, #32]
 8000436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000438:	627b      	str	r3, [r7, #36]	@ 0x24
 800043a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800043e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000446:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800044a:	863b      	strh	r3, [r7, #48]	@ 0x30

		return canardBroadcastObj1(&transfer_object);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	68f8      	ldr	r0, [r7, #12]
 8000454:	f7ff ffc8 	bl	80003e8 <_ZN3CAN19canardBroadcastObj1EP16CanardTxTransfer>
 8000458:	4603      	mov	r3, r0
	}
 800045a:	4618      	mov	r0, r3
 800045c:	3738      	adds	r7, #56	@ 0x38
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <canardInit>:
                 void* mem_arena,
                 size_t mem_arena_size,
                 CanardOnTransferReception on_reception,
                 CanardShouldAcceptTransfer should_accept,
                 void* user_reference)
 {
 8000462:	b580      	push	{r7, lr}
 8000464:	b086      	sub	sp, #24
 8000466:	af00      	add	r7, sp, #0
 8000468:	60f8      	str	r0, [r7, #12]
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	607a      	str	r2, [r7, #4]
 800046e:	603b      	str	r3, [r7, #0]
      * If your application fails here, make sure it's not built in 64-bit mode.
      * Refer to the design documentation for more info.
      */
     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

     memset(out_ins, 0, sizeof(*out_ins));
 8000470:	222c      	movs	r2, #44	@ 0x2c
 8000472:	2100      	movs	r1, #0
 8000474:	68f8      	ldr	r0, [r7, #12]
 8000476:	f003 fee3 	bl	8004240 <memset>

     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
     out_ins->on_reception = on_reception;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	609a      	str	r2, [r3, #8]
     out_ins->should_accept = should_accept;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6a3a      	ldr	r2, [r7, #32]
 800048a:	605a      	str	r2, [r3, #4]
     out_ins->rx_states = NULL;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
     out_ins->tx_queue = NULL;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
     out_ins->user_reference = user_reference;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
 #if CANARD_ENABLE_TAO_OPTION
     out_ins->tao_disabled = false;
 #endif
     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	095b      	lsrs	r3, r3, #5
 80004a2:	617b      	str	r3, [r7, #20]
     if (pool_capacity > 0xFFFFU)
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80004aa:	d302      	bcc.n	80004b2 <canardInit+0x50>
     {
         pool_capacity = 0xFFFFU;
 80004ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
     }

     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	330c      	adds	r3, #12
 80004b6:	697a      	ldr	r2, [r7, #20]
 80004b8:	b292      	uxth	r2, r2
 80004ba:	68b9      	ldr	r1, [r7, #8]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fbbd 	bl	8000c3c <initPoolAllocator>
 }
 80004c2:	bf00      	nop
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 }
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <canardBroadcastObj>:

     return canardBroadcastObj(ins, &transfer_object);
 }

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d106      	bne.n	8000504 <canardBroadcastObj+0x20>
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	8c1b      	ldrh	r3, [r3, #32]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d002      	beq.n	8000504 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80004fe:	f06f 0301 	mvn.w	r3, #1
 8000502:	e070      	b.n	80005e6 <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	7e1b      	ldrb	r3, [r3, #24]
 8000508:	2b1f      	cmp	r3, #31
 800050a:	d902      	bls.n	8000512 <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800050c:	f06f 0301 	mvn.w	r3, #1
 8000510:	e069      	b.n	80005e6 <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 8000516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800051a:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ffd4 	bl	80004ca <canardGetLocalNodeID>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d138      	bne.n	800059a <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	8c1b      	ldrh	r3, [r3, #32]
 800052c:	2b07      	cmp	r3, #7
 800052e:	d902      	bls.n	8000536 <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000530:	f06f 0303 	mvn.w	r3, #3
 8000534:	e057      	b.n	80005e6 <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	8a1a      	ldrh	r2, [r3, #16]
 800053a:	4b2d      	ldr	r3, [pc, #180]	@ (80005f0 <canardBroadcastObj+0x10c>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	4013      	ands	r3, r2
 8000540:	b29a      	uxth	r2, r3
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	8a1b      	ldrh	r3, [r3, #16]
 8000546:	429a      	cmp	r2, r3
 8000548:	d002      	beq.n	8000550 <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 800054a:	f06f 0301 	mvn.w	r3, #1
 800054e:	e04a      	b.n	80005e6 <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	69d9      	ldr	r1, [r3, #28]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	8c1b      	ldrh	r3, [r3, #32]
 8000558:	461a      	mov	r2, r3
 800055a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800055e:	f000 fb50 	bl	8000c02 <crcAdd>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 800056a:	4013      	ands	r3, r2
 800056c:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	7e1b      	ldrb	r3, [r3, #24]
 8000572:	061a      	lsls	r2, r3, #24
 8000574:	8a3b      	ldrh	r3, [r7, #16]
 8000576:	025b      	lsls	r3, r3, #9
 8000578:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	8a19      	ldrh	r1, [r3, #16]
 800057e:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <canardBroadcastObj+0x10c>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	400b      	ands	r3, r1
 8000584:	b29b      	uxth	r3, r3
 8000586:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000588:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff9c 	bl	80004ca <canardGetLocalNodeID>
 8000592:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000594:	4323      	orrs	r3, r4
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e012      	b.n	80005c0 <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	7e1b      	ldrb	r3, [r3, #24]
 800059e:	061a      	lsls	r2, r3, #24
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	8a1b      	ldrh	r3, [r3, #16]
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	ea42 0403 	orr.w	r4, r2, r3
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff ff8d 	bl	80004ca <canardGetLocalNodeID>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4323      	orrs	r3, r4
 80005b4:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 80005b6:	6838      	ldr	r0, [r7, #0]
 80005b8:	f000 f81c 	bl	80005f4 <calculateCRC>
 80005bc:	4603      	mov	r3, r0
 80005be:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 80005c0:	8a7a      	ldrh	r2, [r7, #18]
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	6979      	ldr	r1, [r7, #20]
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 f8d5 	bl	8000776 <enqueueTxFrames>
 80005cc:	4603      	mov	r3, r0
 80005ce:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 80005d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dd04      	ble.n	80005e2 <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f855 	bl	800068c <incrementTransferID>
     }

     return result;
 80005e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 80005e6:	4618      	mov	r0, r3
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	bf00      	nop
 80005f0:	0800438c 	.word	0x0800438c

080005f4 <calculateCRC>:
     return (canard_buffer_idx_t)rx;
 #endif
 }

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 80005fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000600:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	8c1b      	ldrh	r3, [r3, #32]
 8000606:	2b07      	cmp	r3, #7
 8000608:	d913      	bls.n	8000632 <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000610:	89f9      	ldrh	r1, [r7, #14]
 8000612:	4608      	mov	r0, r1
 8000614:	f000 fac6 	bl	8000ba4 <crcAddSignature>
 8000618:	4603      	mov	r3, r0
 800061a:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	69d9      	ldr	r1, [r3, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	8c1b      	ldrh	r3, [r3, #32]
 8000624:	461a      	mov	r2, r3
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 faea 	bl	8000c02 <crcAdd>
 800062e:	4603      	mov	r3, r0
 8000630:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 8000632:	89fb      	ldrh	r3, [r7, #14]
 }
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <canardPeekTxQueue+0x14>
     {
         return NULL;
 800064c:	2300      	movs	r3, #0
 800064e:	e002      	b.n	8000656 <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000654:	3304      	adds	r3, #4
 }
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800066e:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	330c      	adds	r3, #12
 800067c:	68f9      	ldr	r1, [r7, #12]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fb3c 	bl	8000cfc <freeBlock>
 }
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <incrementTransferID>:
     }
     return d;
 }

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b1f      	cmp	r3, #31
 80006a6:	d902      	bls.n	80006ae <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
     }
 }
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d801      	bhi.n	80006ce <dlcToDataLength+0x14>
         return dlc;
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	e01e      	b.n	800070c <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d101      	bne.n	80006d8 <dlcToDataLength+0x1e>
         return 12;
 80006d4:	230c      	movs	r3, #12
 80006d6:	e019      	b.n	800070c <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	2b0a      	cmp	r3, #10
 80006dc:	d101      	bne.n	80006e2 <dlcToDataLength+0x28>
         return 16;
 80006de:	2310      	movs	r3, #16
 80006e0:	e014      	b.n	800070c <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b0b      	cmp	r3, #11
 80006e6:	d101      	bne.n	80006ec <dlcToDataLength+0x32>
         return 20;
 80006e8:	2314      	movs	r3, #20
 80006ea:	e00f      	b.n	800070c <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	2b0c      	cmp	r3, #12
 80006f0:	d101      	bne.n	80006f6 <dlcToDataLength+0x3c>
         return 24;
 80006f2:	2318      	movs	r3, #24
 80006f4:	e00a      	b.n	800070c <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b0d      	cmp	r3, #13
 80006fa:	d101      	bne.n	8000700 <dlcToDataLength+0x46>
         return 32;
 80006fc:	2320      	movs	r3, #32
 80006fe:	e005      	b.n	800070c <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	2b0e      	cmp	r3, #14
 8000704:	d101      	bne.n	800070a <dlcToDataLength+0x50>
         return 48;
 8000706:	2330      	movs	r3, #48	@ 0x30
 8000708:	e000      	b.n	800070c <dlcToDataLength+0x52>
     }
     return 64;
 800070a:	2340      	movs	r3, #64	@ 0x40
 }
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b08      	cmp	r3, #8
 8000726:	d801      	bhi.n	800072c <dataLengthToDlc+0x14>
         return data_length;
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	e01e      	b.n	800076a <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	2b0c      	cmp	r3, #12
 8000730:	d801      	bhi.n	8000736 <dataLengthToDlc+0x1e>
         return 9;
 8000732:	2309      	movs	r3, #9
 8000734:	e019      	b.n	800076a <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	2b10      	cmp	r3, #16
 800073a:	d801      	bhi.n	8000740 <dataLengthToDlc+0x28>
         return 10;
 800073c:	230a      	movs	r3, #10
 800073e:	e014      	b.n	800076a <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	2b14      	cmp	r3, #20
 8000744:	d801      	bhi.n	800074a <dataLengthToDlc+0x32>
         return 11;
 8000746:	230b      	movs	r3, #11
 8000748:	e00f      	b.n	800076a <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b18      	cmp	r3, #24
 800074e:	d801      	bhi.n	8000754 <dataLengthToDlc+0x3c>
         return 12;
 8000750:	230c      	movs	r3, #12
 8000752:	e00a      	b.n	800076a <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	2b20      	cmp	r3, #32
 8000758:	d801      	bhi.n	800075e <dataLengthToDlc+0x46>
         return 13;
 800075a:	230d      	movs	r3, #13
 800075c:	e005      	b.n	800076a <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2b30      	cmp	r3, #48	@ 0x30
 8000762:	d801      	bhi.n	8000768 <dataLengthToDlc+0x50>
         return 14;
 8000764:	230e      	movs	r3, #14
 8000766:	e000      	b.n	800076a <dataLengthToDlc+0x52>
     }
     return 15;
 8000768:	230f      	movs	r3, #15
 }
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 8000776:	b580      	push	{r7, lr}
 8000778:	b08c      	sub	sp, #48	@ 0x30
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4613      	mov	r3, r2
 8000784:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800078e:	f06f 0301 	mvn.w	r3, #1
 8000792:	e11c      	b.n	80009ce <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	8c1b      	ldrh	r3, [r3, #32]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d006      	beq.n	80007aa <enqueueTxFrames+0x34>
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80007a4:	f06f 0301 	mvn.w	r3, #1
 80007a8:	e111      	b.n	80009ce <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80007ae:	2308      	movs	r3, #8
 80007b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	8c1a      	ldrh	r2, [r3, #32]
 80007b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007bc:	b29b      	uxth	r3, r3
 80007be:	429a      	cmp	r2, r3
 80007c0:	d24b      	bcs.n	800085a <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	330c      	adds	r3, #12
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f94a 	bl	8000a60 <createTxItem>
 80007cc:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d102      	bne.n	80007da <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 80007d4:	f06f 0302 	mvn.w	r3, #2
 80007d8:	e0f9      	b.n	80009ce <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	f103 0008 	add.w	r0, r3, #8
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	69d9      	ldr	r1, [r3, #28]
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	8c1b      	ldrh	r3, [r3, #32]
 80007e8:	461a      	mov	r2, r3
 80007ea:	f003 fd57 	bl	800429c <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	8c1b      	ldrh	r3, [r3, #32]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff8e 	bl	8000718 <dataLengthToDlc>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff5b 	bl	80006ba <dlcToDataLength>
 8000804:	4603      	mov	r3, r0
 8000806:	3b01      	subs	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	8c1b      	ldrh	r3, [r3, #32]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3301      	adds	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	b2db      	uxtb	r3, r3
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	8c12      	ldrh	r2, [r2, #32]
 800082c:	4611      	mov	r1, r2
 800082e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000832:	b2da      	uxtb	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	440b      	add	r3, r1
 8000838:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 8000844:	6979      	ldr	r1, [r7, #20]
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f8c5 	bl	80009d6 <pushTxQueue>
         result++;
 800084c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000850:	b29b      	uxth	r3, r3
 8000852:	3301      	adds	r3, #1
 8000854:	b29b      	uxth	r3, r3
 8000856:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000858:	e0b7      	b.n	80009ca <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	8c1b      	ldrh	r3, [r3, #32]
 800086e:	3302      	adds	r3, #2
 8000870:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 8000872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000876:	3b01      	subs	r3, #1
 8000878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 800087c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800087e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000882:	3b01      	subs	r3, #1
 8000884:	441a      	add	r2, r3
 8000886:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800088a:	fb92 f3f3 	sdiv	r3, r2, r3
 800088e:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	8a9a      	ldrh	r2, [r3, #20]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	8adb      	ldrh	r3, [r3, #22]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 800089c:	8bfa      	ldrh	r2, [r7, #30]
 800089e:	8c3b      	ldrh	r3, [r7, #32]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d202      	bcs.n	80008aa <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 80008a4:	f06f 0302 	mvn.w	r3, #2
 80008a8:	e091      	b.n	80009ce <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 80008ae:	e086      	b.n	80009be <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	330c      	adds	r3, #12
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f8d3 	bl	8000a60 <createTxItem>
 80008ba:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 80008c2:	f06f 0302 	mvn.w	r3, #2
 80008c6:	e082      	b.n	80009ce <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 80008cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10c      	bne.n	80008ec <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	725a      	strb	r2, [r3, #9]
                 i = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80008ea:	e012      	b.n	8000912 <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80008f0:	e00f      	b.n	8000912 <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	69da      	ldr	r2, [r3, #28]
 80008f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008f8:	441a      	add	r2, r3
 80008fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008fc:	7811      	ldrb	r1, [r2, #0]
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4413      	add	r3, r2
 8000902:	460a      	mov	r2, r1
 8000904:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8000906:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000908:	3301      	adds	r3, #1
 800090a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800090c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800090e:	3301      	adds	r3, #1
 8000910:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000912:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000918:	3b01      	subs	r3, #1
 800091a:	429a      	cmp	r2, r3
 800091c:	da04      	bge.n	8000928 <enqueueTxFrames+0x1b2>
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	8c1b      	ldrh	r3, [r3, #32]
 8000922:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000924:	429a      	cmp	r2, r3
 8000926:	d3e4      	bcc.n	80008f2 <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	8c1b      	ldrh	r3, [r3, #32]
 800092c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800092e:	429a      	cmp	r2, r3
 8000930:	d002      	beq.n	8000938 <enqueueTxFrames+0x1c2>
 8000932:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000936:	e000      	b.n	800093a <enqueueTxFrames+0x1c4>
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 800093e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000940:	3301      	adds	r3, #1
 8000942:	b29b      	uxth	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fee7 	bl	8000718 <dataLengthToDlc>
 800094a:	4603      	mov	r3, r0
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff feb4 	bl	80006ba <dlcToDataLength>
 8000952:	4603      	mov	r3, r0
 8000954:	3b01      	subs	r3, #1
 8000956:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8000958:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800095c:	015b      	lsls	r3, r3, #5
 800095e:	b2da      	uxtb	r2, r3
 8000960:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000964:	4313      	orrs	r3, r2
 8000966:	b2d9      	uxtb	r1, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	b2da      	uxtb	r2, r3
 8000974:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000976:	430a      	orrs	r2, r1
 8000978:	b2d1      	uxtb	r1, r2
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4413      	add	r3, r2
 800097e:	460a      	mov	r2, r1
 8000980:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 800098c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800098e:	b2db      	uxtb	r3, r3
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 8000998:	69b9      	ldr	r1, [r7, #24]
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f000 f81b 	bl	80009d6 <pushTxQueue>

             result++;
 80009a0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 80009ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80009b0:	f083 0301 	eor.w	r3, r3, #1
 80009b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	8c1b      	ldrh	r3, [r3, #32]
 80009c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80009c4:	429a      	cmp	r2, r3
 80009c6:	f47f af73 	bne.w	80008b0 <enqueueTxFrames+0x13a>
         }
     }

     return result;
 80009ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 80009ce:	4618      	mov	r0, r3
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d103      	bne.n	80009f0 <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 80009ee:	e034      	b.n	8000a5a <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f4:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009fa:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 80009fc:	e02a      	b.n	8000a54 <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4610      	mov	r0, r2
 8000a0a:	f000 f840 	bl	8000a8e <isPriorityHigher>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d012      	beq.n	8000a3a <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d106      	bne.n	8000a2c <pushTxQueue+0x56>
             {
                 item->next = queue;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 8000a2a:	e016      	b.n	8000a5a <pushTxQueue+0x84>
                 previous->next = item;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
             return;
 8000a38:	e00f      	b.n	8000a5a <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <pushTxQueue+0x74>
             {
                 queue->next = item;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	601a      	str	r2, [r3, #0]
                 return;
 8000a48:	e007      	b.n	8000a5a <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1d1      	bne.n	80009fe <pushTxQueue+0x28>
             }
         }
     }
 }
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f91e 	bl	8000caa <allocateBlock>
 8000a6e:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <createTxItem+0x1a>
     {
         return NULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e005      	b.n	8000a86 <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 8000a7a:	2214      	movs	r2, #20
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f003 fbde 	bl	8004240 <memset>
     return item;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 }
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 8000a8e:	b480      	push	{r7}
 8000a90:	b089      	sub	sp, #36	@ 0x24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8000a9e:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8000aa6:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	0fdb      	lsrs	r3, r3, #31
 8000aac:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	0fdb      	lsrs	r3, r3, #31
 8000ab2:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 8000ab4:	7dfa      	ldrb	r2, [r7, #23]
 8000ab6:	7dbb      	ldrb	r3, [r7, #22]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d01d      	beq.n	8000af8 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <isPriorityHigher+0x3a>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	e000      	b.n	8000aca <isPriorityHigher+0x3c>
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8000acc:	7dbb      	ldrb	r3, [r7, #22]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <isPriorityHigher+0x4a>
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	0c9b      	lsrs	r3, r3, #18
 8000ad6:	e000      	b.n	8000ada <isPriorityHigher+0x4c>
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d007      	beq.n	8000af4 <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	bf34      	ite	cc
 8000aec:	2301      	movcc	r3, #1
 8000aee:	2300      	movcs	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	e022      	b.n	8000b3a <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 8000af4:	7dbb      	ldrb	r3, [r7, #22]
 8000af6:	e020      	b.n	8000b3a <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d105      	bne.n	8000b2c <isPriorityHigher+0x9e>
 8000b20:	7d7a      	ldrb	r2, [r7, #21]
 8000b22:	7d3b      	ldrb	r3, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d001      	beq.n	8000b2c <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 8000b28:	7d3b      	ldrb	r3, [r7, #20]
 8000b2a:	e006      	b.n	8000b3a <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	bf34      	ite	cc
 8000b34:	2301      	movcc	r3, #1
 8000b36:	2300      	movcs	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 }
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	@ 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	4613      	mov	r3, r2
 8000b54:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8000b56:	797b      	ldrb	r3, [r7, #5]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	4053      	eors	r3, r2
 8000b62:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e012      	b.n	8000b90 <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 8000b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da08      	bge.n	8000b84 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000b7c:	f083 0301 	eor.w	r3, r3, #1
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	e002      	b.n	8000b8a <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9e9      	bls.n	8000b6a <crcAddByte+0x24>
         }
     }
     return crc_val;
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 }
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4601      	mov	r1, r0
 8000bac:	e9c7 2300 	strd	r2, r3, [r7]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	82fb      	strh	r3, [r7, #22]
 8000bb8:	e01b      	b.n	8000bf2 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8000bba:	8af9      	ldrh	r1, [r7, #22]
 8000bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	f1a1 0020 	sub.w	r0, r1, #32
 8000bc8:	fa22 f401 	lsr.w	r4, r2, r1
 8000bcc:	fa03 f606 	lsl.w	r6, r3, r6
 8000bd0:	4334      	orrs	r4, r6
 8000bd2:	fa23 f000 	lsr.w	r0, r3, r0
 8000bd6:	4304      	orrs	r4, r0
 8000bd8:	fa23 f501 	lsr.w	r5, r3, r1
 8000bdc:	b2e2      	uxtb	r2, r4
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffaf 	bl	8000b46 <crcAddByte>
 8000be8:	4603      	mov	r3, r0
 8000bea:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8000bec:	8afb      	ldrh	r3, [r7, #22]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	82fb      	strh	r3, [r7, #22]
 8000bf2:	8afb      	ldrh	r3, [r7, #22]
 8000bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf6:	d9e0      	bls.n	8000bba <crcAddSignature+0x16>
     }
     return crc_val;
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 }
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c02 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8000c10:	e00a      	b.n	8000c28 <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff91 	bl	8000b46 <crcAddByte>
 8000c24:	4603      	mov	r3, r0
 8000c26:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	1e5a      	subs	r2, r3, #1
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1ef      	bne.n	8000c12 <crcAdd+0x10>
     }
     return crc_val;
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 }
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <initPoolAllocator>:
  *  Pool Allocator functions
  */
 CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                        void* buf,
                                        uint16_t buf_len)
 {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	4613      	mov	r3, r2
 8000c48:	80fb      	strh	r3, [r7, #6]
     size_t current_index = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
     CanardPoolAllocatorBlock *abuf = buf;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	617b      	str	r3, [r7, #20]
     allocator->arena = buf;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	611a      	str	r2, [r3, #16]
     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
     while (current_index < buf_len)
 8000c5e:	e00b      	b.n	8000c78 <initPoolAllocator+0x3c>
     {
         *current_block = &abuf[current_index];
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	015b      	lsls	r3, r3, #5
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	441a      	add	r2, r3
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	601a      	str	r2, [r3, #0]
         current_block = &((*current_block)->next);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	61bb      	str	r3, [r7, #24]
         current_index++;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3301      	adds	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
     while (current_index < buf_len)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3ef      	bcc.n	8000c60 <initPoolAllocator+0x24>
     }
     *current_block = NULL;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]

     allocator->statistics.capacity_blocks = buf_len;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	811a      	strh	r2, [r3, #8]
     allocator->statistics.current_usage_blocks = 0;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	815a      	strh	r2, [r3, #10]
     allocator->statistics.peak_usage_blocks = 0;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2200      	movs	r2, #0
 8000c96:	819a      	strh	r2, [r3, #12]
     // user should initialize semaphore after the canardInit
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 }
 8000c9e:	bf00      	nop
 8000ca0:	3724      	adds	r7, #36	@ 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <allocateBlock>:

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e018      	b.n	8000cf0 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	895b      	ldrh	r3, [r3, #10]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	899a      	ldrh	r2, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	895b      	ldrh	r3, [r3, #10]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d203      	bcs.n	8000cee <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	895a      	ldrh	r2, [r3, #10]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 }
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	895b      	ldrh	r3, [r3, #10]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_Z12FDCAN_Configv>:
FDCAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

FDCAN_FilterTypeDef sFilterConfig;

void FDCAN_Config(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0


    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d3a:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = NODE_ID;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x0; // receive messages from all ids
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000d5a:	4908      	ldr	r1, [pc, #32]	@ (8000d7c <_Z12FDCAN_Configv+0x4c>)
 8000d5c:	4808      	ldr	r0, [pc, #32]	@ (8000d80 <_Z12FDCAN_Configv+0x50>)
 8000d5e:	f000 fe6b 	bl	8001a38 <HAL_FDCAN_ConfigFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <_Z12FDCAN_Configv+0x46>
        Error_Handler();
 8000d72:	f000 f96f 	bl	8001054 <Error_Handler>
    }
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000530 	.word	0x20000530
 8000d80:	20000478 	.word	0x20000478

08000d84 <_Z14FDCAN_Activatev>:

void FDCAN_Activate(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4807      	ldr	r0, [pc, #28]	@ (8000dac <_Z14FDCAN_Activatev+0x28>)
 8000d8e:	f001 f833 	bl	8001df8 <HAL_FDCAN_ActivateNotification>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf14      	ite	ne
 8000d98:	2301      	movne	r3, #1
 8000d9a:	2300      	moveq	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <_Z14FDCAN_Activatev+0x22>
        Error_Handler();
 8000da2:	f000 f957 	bl	8001054 <Error_Handler>
    }
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000478 	.word	0x20000478

08000db0 <HAL_FDCAN_RxFifo0Callback>:
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
        Error_Handler();
    }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]

//    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000dba:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000dbe:	2140      	movs	r1, #64	@ 0x40
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 feff 	bl	8001bc4 <HAL_FDCAN_GetRxMessage>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_FDCAN_RxFifo0Callback+0x2a>
            // Process received data (e.g., print it)
        	Error_Handler();
 8000dd6:	f000 f93d 	bl	8001054 <Error_Handler>
        }

        FDCAN_Activate(); // test with and without this re-activation
 8000dda:	f7ff ffd3 	bl	8000d84 <_Z14FDCAN_Activatev>
//    }
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000528 	.word	0x20000528
 8000dec:	20000500 	.word	0x20000500

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b096      	sub	sp, #88	@ 0x58
 8000df4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 faff 	bl	80013f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  CAN can(&hfdcan1);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	492e      	ldr	r1, [pc, #184]	@ (8000eb8 <main+0xc8>)
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fa49 	bl	8000298 <_ZN3CANC1EP19FDCAN_HandleTypeDef>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f85f 	bl	8000ec8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f000 f90b 	bl	8001024 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8000e0e:	f000 f8bb 	bl	8000f88 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
  FDCAN_Activate();
 8000e12:	f7ff ffb7 	bl	8000d84 <_Z14FDCAN_Activatev>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000e16:	4828      	ldr	r0, [pc, #160]	@ (8000eb8 <main+0xc8>)
 8000e18:	f000 fe68 	bl	8001aec <HAL_FDCAN_Start>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <main+0x40>
	  Error_Handler();
 8000e2c:	f000 f912 	bl	8001054 <Error_Handler>
  }

  TxHeader.Identifier = NODE_ID;
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <main+0xcc>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <main+0xcc>)
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e3c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <main+0xcc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <main+0xcc>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <main+0xcc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <main+0xcc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <main+0xcc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <main+0xcc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <main+0xcc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
//
//	  FDCAN_Transmit();
//
//	  HAL_Delay(10);

	  uint8_t heartbeat_payload[7] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
 8000e68:	4a15      	ldr	r2, [pc, #84]	@ (8000ec0 <main+0xd0>)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e70:	6018      	str	r0, [r3, #0]
 8000e72:	3304      	adds	r3, #4
 8000e74:	8019      	strh	r1, [r3, #0]
 8000e76:	3302      	adds	r3, #2
 8000e78:	0c0a      	lsrs	r2, r1, #16
 8000e7a:	701a      	strb	r2, [r3, #0]

	  can.canardBroadcast(
 8000e7c:	f107 0108 	add.w	r1, r7, #8
 8000e80:	2307      	movs	r3, #7
 8000e82:	9304      	str	r3, [sp, #16]
 8000e84:	463b      	mov	r3, r7
 8000e86:	9303      	str	r3, [sp, #12]
 8000e88:	2308      	movs	r3, #8
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <main+0xd4>)
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	2301      	movs	r3, #1
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	a306      	add	r3, pc, #24	@ (adr r3, 8000eb0 <main+0xc0>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	f7ff fab7 	bl	800040e <_ZN3CAN15canardBroadcastEytPhhPKvt>
			  UAVCAN_PROTOCOL_GETNODEINFO_ID,
			  &transfer_id,
			  CANARD_TRANSFER_PRIORITY_HIGH,
			  heartbeat_payload,
			  sizeof(heartbeat_payload));
	  can.routineTasks();
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa93 	bl	80003d0 <_ZN3CAN12routineTasksEv>
//	      for (int i = 0; i < 8; i++) {
//	          printf("%02X ", RxData[i]);
//	      }
//	      printf("\n");
//	  }
  }
 8000eaa:	bf00      	nop
 8000eac:	e7dc      	b.n	8000e68 <main+0x78>
 8000eae:	bf00      	nop
 8000eb0:	21c46a9e 	.word	0x21c46a9e
 8000eb4:	ee468a81 	.word	0xee468a81
 8000eb8:	20000478 	.word	0x20000478
 8000ebc:	200004dc 	.word	0x200004dc
 8000ec0:	08004364 	.word	0x08004364
 8000ec4:	20000548 	.word	0x20000548

08000ec8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b098      	sub	sp, #96	@ 0x60
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2248      	movs	r2, #72	@ 0x48
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f9b2 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f001 fc58 	bl	80027a0 <HAL_PWREx_ControlVoltageScaling>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000f00:	f000 f8a8 	bl	8001054 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0e:	2340      	movs	r3, #64	@ 0x40
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000f1e:	2337      	movs	r3, #55	@ 0x37
 8000f20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f22:	2307      	movs	r3, #7
 8000f24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fcc4 	bl	80028c0 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8000f48:	f000 f884 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2303      	movs	r3, #3
 8000f52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2105      	movs	r1, #5
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 f981 	bl	800326c <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000f7a:	f000 f86b 	bl	8001054 <Error_Handler>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3760      	adds	r7, #96	@ 0x60
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000f8e:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <_ZL14MX_FDCAN1_Initv+0x98>)
 8000f90:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fb8:	2204      	movs	r2, #4
 8000fba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ff8:	4808      	ldr	r0, [pc, #32]	@ (800101c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000ffa:	f000 fbcb 	bl	8001794 <HAL_FDCAN_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800100e:	f000 f821 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_Config();
 8001012:	f7ff fe8d 	bl	8000d30 <_Z12FDCAN_Configv>

  /* USER CODE END FDCAN1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000478 	.word	0x20000478
 8001020:	4000a400 	.word	0x4000a400

08001024 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <_ZL12MX_GPIO_Initv+0x2c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <_ZL12MX_GPIO_Initv+0x2c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <_ZL12MX_GPIO_Initv+0x2c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <HAL_MspInit+0x44>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6613      	str	r3, [r2, #96]	@ 0x60
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <HAL_MspInit+0x44>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <HAL_MspInit+0x44>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	6593      	str	r3, [r2, #88]	@ 0x58
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_MspInit+0x44>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001096:	f001 fbdf 	bl	8002858 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ae      	sub	sp, #184	@ 0xb8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2294      	movs	r2, #148	@ 0x94
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 f8b9 	bl	8004240 <memset>
  if(hfdcan->Instance==FDCAN1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a26      	ldr	r2, [pc, #152]	@ (800116c <HAL_FDCAN_MspInit+0xc4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d145      	bne.n	8001164 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fb7b 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010f4:	f7ff ffae 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80010f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <HAL_FDCAN_MspInit+0xc8>)
 80010fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <HAL_FDCAN_MspInit+0xc8>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001102:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_FDCAN_MspInit+0xc8>)
 8001106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_FDCAN_MspInit+0xc8>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	4a16      	ldr	r2, [pc, #88]	@ (8001170 <HAL_FDCAN_MspInit+0xc8>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_FDCAN_MspInit+0xc8>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001128:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800112c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001142:	2309      	movs	r3, #9
 8001144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800114c:	4619      	mov	r1, r3
 800114e:	4809      	ldr	r0, [pc, #36]	@ (8001174 <HAL_FDCAN_MspInit+0xcc>)
 8001150:	f001 f998 	bl	8002484 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2027      	movs	r0, #39	@ 0x27
 800115a:	f000 fa9e 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800115e:	2027      	movs	r0, #39	@ 0x27
 8001160:	f000 fab5 	bl	80016ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001164:	bf00      	nop
 8001166:	37b8      	adds	r7, #184	@ 0xb8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	4000a400 	.word	0x4000a400
 8001170:	40021000 	.word	0x40021000
 8001174:	42020000 	.word	0x42020000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <NMI_Handler+0x4>

08001180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <UsageFault_Handler+0x4>

080011a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 f969 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f8f6 	bl	80013cc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80011ea:	f000 feeb 	bl	8001fc4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000478 	.word	0x20000478

080011f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001222:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e005      	b.n	800124a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800123e:	4b48      	ldr	r3, [pc, #288]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800124a:	4a46      	ldr	r2, [pc, #280]	@ (8001364 <SystemCoreClockUpdate+0x148>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001254:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d866      	bhi.n	800132e <SystemCoreClockUpdate+0x112>
 8001260:	a201      	add	r2, pc, #4	@ (adr r2, 8001268 <SystemCoreClockUpdate+0x4c>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	0800129d 	.word	0x0800129d
 800126c:	0800132f 	.word	0x0800132f
 8001270:	0800132f 	.word	0x0800132f
 8001274:	0800132f 	.word	0x0800132f
 8001278:	080012a5 	.word	0x080012a5
 800127c:	0800132f 	.word	0x0800132f
 8001280:	0800132f 	.word	0x0800132f
 8001284:	0800132f 	.word	0x0800132f
 8001288:	080012ad 	.word	0x080012ad
 800128c:	0800132f 	.word	0x0800132f
 8001290:	0800132f 	.word	0x0800132f
 8001294:	0800132f 	.word	0x0800132f
 8001298:	080012b5 	.word	0x080012b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800129c:	4a32      	ldr	r2, [pc, #200]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	6013      	str	r3, [r2, #0]
      break;
 80012a2:	e048      	b.n	8001336 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012a4:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 80012a6:	4a31      	ldr	r2, [pc, #196]	@ (800136c <SystemCoreClockUpdate+0x150>)
 80012a8:	601a      	str	r2, [r3, #0]
      break;
 80012aa:	e044      	b.n	8001336 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 80012ae:	4a30      	ldr	r2, [pc, #192]	@ (8001370 <SystemCoreClockUpdate+0x154>)
 80012b0:	601a      	str	r2, [r3, #0]
      break;
 80012b2:	e040      	b.n	8001336 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80012be:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	3301      	adds	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d003      	beq.n	80012da <SystemCoreClockUpdate+0xbe>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d006      	beq.n	80012e6 <SystemCoreClockUpdate+0xca>
 80012d8:	e00b      	b.n	80012f2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80012da:	4a24      	ldr	r2, [pc, #144]	@ (800136c <SystemCoreClockUpdate+0x150>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	613b      	str	r3, [r7, #16]
          break;
 80012e4:	e00b      	b.n	80012fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80012e6:	4a22      	ldr	r2, [pc, #136]	@ (8001370 <SystemCoreClockUpdate+0x154>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	613b      	str	r3, [r7, #16]
          break;
 80012f0:	e005      	b.n	80012fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	613b      	str	r3, [r7, #16]
          break;
 80012fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0e5b      	lsrs	r3, r3, #25
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	3301      	adds	r3, #1
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	4a0f      	ldr	r2, [pc, #60]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 800132a:	6013      	str	r3, [r2, #0]
      break;
 800132c:	e003      	b.n	8001336 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	6013      	str	r3, [r2, #0]
      break;
 8001334:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <SystemCoreClockUpdate+0x144>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <SystemCoreClockUpdate+0x158>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <SystemCoreClockUpdate+0x14c>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	080043a0 	.word	0x080043a0
 8001368:	20000000 	.word	0x20000000
 800136c:	00f42400 	.word	0x00f42400
 8001370:	007a1200 	.word	0x007a1200
 8001374:	08004390 	.word	0x08004390

08001378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff ff3c 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001380:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001382:	e003      	b.n	800138c <LoopCopyDataInit>

08001384 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001386:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001388:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800138a:	3104      	adds	r1, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800138c:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001390:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001392:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001394:	d3f6      	bcc.n	8001384 <CopyDataInit>
	ldr	r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001398:	e002      	b.n	80013a0 <LoopFillZerobss>

0800139a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800139a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800139c:	f842 3b04 	str.w	r3, [r2], #4

080013a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <LoopForever+0x16>)
	cmp	r2, r3
 80013a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013a4:	d3f9      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013a6:	f002 ff53 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013aa:	f7ff fd21 	bl	8000df0 <main>

080013ae <LoopForever>:

LoopForever:
    b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013b0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80013b4:	080043f8 	.word	0x080043f8
	ldr	r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013bc:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80013c0:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 80013c4:	2000069c 	.word	0x2000069c

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <BSP_PB_IRQHandler+0x28>)
 80013e2:	4413      	add	r3, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f98d 	bl	8001704 <HAL_EXTI_IRQHandler>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000054c 	.word	0x2000054c

080013f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001402:	2004      	movs	r0, #4
 8001404:	f000 f93e 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001408:	f7ff ff08 	bl	800121c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140c:	2000      	movs	r0, #0
 800140e:	f000 f80d 	bl	800142c <HAL_InitTick>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	e001      	b.n	8001422 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141e:	f7ff fe1f 	bl	8001060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001422:	79fb      	ldrb	r3, [r7, #7]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d023      	beq.n	8001488 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_InitTick+0x70>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f947 	bl	80016ea <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b07      	cmp	r3, #7
 8001466:	d809      	bhi.n	800147c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f913 	bl	800169a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_InitTick+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e007      	b.n	800148c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e004      	b.n	800148c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e001      	b.n	800148c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000558 	.word	0x20000558

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000558 	.word	0x20000558

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0152      	lsls	r2, r2, #5
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0152      	lsls	r2, r2, #5
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	bf28      	it	cs
 80015f6:	2303      	movcs	r3, #3
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3303      	adds	r3, #3
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b04      	subs	r3, #4
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	2107      	movs	r1, #7
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff40 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff90 	bl	80015d8 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5f 	bl	8001584 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff33 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa4 	bl	8001640 <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2201      	movs	r2, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_EXTI_IRQHandler+0x88>)
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_EXTI_IRQHandler+0x8c>)
 800175c:	4413      	add	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4798      	blx	r3
    }
  }
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	4002f40c 	.word	0x4002f40c
 8001790:	4002f410 	.word	0x4002f410

08001794 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e142      	b.n	8001a2c <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fc74 	bl	80010a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0210 	bic.w	r2, r2, #16
 80017ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d0:	f7ff fe7c 	bl	80014cc <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017d6:	e012      	b.n	80017fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017d8:	f7ff fe78 	bl	80014cc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b0a      	cmp	r3, #10
 80017e4:	d90b      	bls.n	80017fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e116      	b.n	8001a2c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b08      	cmp	r3, #8
 800180a:	d0e5      	beq.n	80017d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181c:	f7ff fe56 	bl	80014cc <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001822:	e012      	b.n	800184a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001824:	f7ff fe52 	bl	80014cc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b0a      	cmp	r3, #10
 8001830:	d90b      	bls.n	800184a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0f0      	b.n	8001a2c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0e5      	beq.n	8001824 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699a      	ldr	r2, [r3, #24]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0202 	orr.w	r2, r2, #2
 8001866:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001868:	4a72      	ldr	r2, [pc, #456]	@ (8001a34 <HAL_FDCAN_Init+0x2a0>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7c1b      	ldrb	r3, [r3, #16]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	e007      	b.n	800189a <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001898:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7c5b      	ldrb	r3, [r3, #17]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018b0:	619a      	str	r2, [r3, #24]
 80018b2:	e007      	b.n	80018c4 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7c9b      	ldrb	r3, [r3, #18]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	e007      	b.n	80018ee <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001912:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0210 	bic.w	r2, r2, #16
 8001922:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0204 	orr.w	r2, r2, #4
 800193a:	619a      	str	r2, [r3, #24]
 800193c:	e02c      	b.n	8001998 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d01c      	beq.n	8001988 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800195c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0210 	orr.w	r2, r2, #16
 800196c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d110      	bne.n	8001998 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	619a      	str	r2, [r3, #24]
 8001986:	e007      	b.n	8001998 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	3b01      	subs	r3, #1
 800199e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019a8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019b0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019c0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019c2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019cc:	d115      	bne.n	80019fa <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	3b01      	subs	r3, #1
 80019da:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019dc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	3b01      	subs	r3, #1
 80019e4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019f6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019f8:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fc65 	bl	80022e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	4000a500 	.word	0x4000a500

08001a38 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a48:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d002      	beq.n	8001a56 <HAL_FDCAN_ConfigFilter+0x1e>
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d13d      	bne.n	8001ad2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d119      	bne.n	8001a92 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a6a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001a72:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e01d      	b.n	8001ace <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	075a      	lsls	r2, r3, #29
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	079a      	lsls	r2, r3, #30
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e006      	b.n	8001ae0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
  }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d110      	bne.n	8001b22 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e006      	b.n	8001b30 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b26:	f043 0204 	orr.w	r2, r3, #4
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
  }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d12c      	bne.n	8001bae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e023      	b.n	8001bbc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fbfe 	bl	800238c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e006      	b.n	8001bbc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f043 0208 	orr.w	r2, r3, #8
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b08b      	sub	sp, #44	@ 0x2c
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bdc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001bde:	7efb      	ldrb	r3, [r7, #27]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	f040 80e8 	bne.w	8001db6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b40      	cmp	r3, #64	@ 0x40
 8001bea:	d137      	bne.n	8001c5c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0db      	b.n	8001dc4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c14:	0e1b      	lsrs	r3, r3, #24
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10a      	bne.n	8001c34 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c26:	0a5b      	lsrs	r3, r3, #9
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5a:	e036      	b.n	8001cca <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0a3      	b.n	8001dc4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c84:	0e1b      	lsrs	r3, r3, #24
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e005      	b.n	8001cfa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	3304      	adds	r3, #4
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e1b      	lsrs	r3, r3, #24
 8001d4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0fda      	lsrs	r2, r3, #31
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	3304      	adds	r3, #4
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	e00a      	b.n	8001d86 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	441a      	add	r2, r3
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	440b      	add	r3, r1
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	3301      	adds	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d3ec      	bcc.n	8001d70 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b40      	cmp	r3, #64	@ 0x40
 8001d9a:	d105      	bne.n	8001da8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001da6:	e004      	b.n	8001db2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e006      	b.n	8001dc4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dba:	f043 0208 	orr.w	r2, r3, #8
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	372c      	adds	r7, #44	@ 0x2c
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	080043e0 	.word	0x080043e0

08001dd4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e0a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d003      	beq.n	8001e1a <HAL_FDCAN_ActivateNotification+0x22>
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	f040 80c8 	bne.w	8001faa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d03b      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d031      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d027      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01d      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d013      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00c      	beq.n	8001ebe <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d107      	bne.n	8001ebe <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d13b      	bne.n	8001f4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d131      	bne.n	8001f4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d127      	bne.n	8001f4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11d      	bne.n	8001f4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d113      	bne.n	8001f4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00c      	beq.n	8001f5a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0202 	orr.w	r2, r2, #2
 8001f58:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e006      	b.n	8001fb8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002010:	4013      	ands	r3, r2
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800201e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002026:	6a3a      	ldr	r2, [r7, #32]
 8002028:	4013      	ands	r3, r2
 800202a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002032:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002036:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002052:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2240      	movs	r2, #64	@ 0x40
 800206e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f916 	bl	80022a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d019      	beq.n	80020b4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d014      	beq.n	80020b4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002092:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8d8 	bl	8002264 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80020c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8a2 	bl	800220e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80020d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fe68 	bl	8000db0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80020ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f897 	bl	8002224 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00c      	beq.n	800211a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002112:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f890 	bl	800223a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d018      	beq.n	8002156 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d013      	beq.n	8002156 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002136:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2280      	movs	r2, #128	@ 0x80
 800214c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f87c 	bl	800224e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00c      	beq.n	800217a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002172:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f880 	bl	800227a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00c      	beq.n	800219e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002196:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f878 	bl	800228e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00f      	beq.n	80021c8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80021d6:	69f9      	ldr	r1, [r7, #28]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f876 	bl	80022ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f858 	bl	80022b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	@ 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80022ea:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022fa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	041a      	lsls	r2, r3, #16
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002320:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002328:	061a      	lsls	r2, r3, #24
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e005      	b.n	800236e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3f3      	bcc.n	8002362 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	4000ac00 	.word	0x4000ac00

0800238c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80023aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e00a      	b.n	80023ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80023c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80023c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80023c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80023d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80023de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80023e4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	3304      	adds	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	3304      	adds	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e020      	b.n	8002462 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3303      	adds	r3, #3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3302      	adds	r3, #2
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	440b      	add	r3, r1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002438:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	440b      	add	r3, r1
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002446:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	440a      	add	r2, r1
 800244e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002450:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3304      	adds	r3, #4
 800245a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3304      	adds	r3, #4
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a06      	ldr	r2, [pc, #24]	@ (8002480 <FDCAN_CopyMessageToRAM+0xf4>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	461a      	mov	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	4293      	cmp	r3, r2
 8002470:	d3d6      	bcc.n	8002420 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3724      	adds	r7, #36	@ 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	080043e0 	.word	0x080043e0

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002492:	e158      	b.n	8002746 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2101      	movs	r1, #1
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	4013      	ands	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 814a 	beq.w	8002740 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d005      	beq.n	80024c4 <HAL_GPIO_Init+0x40>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d130      	bne.n	8002526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fa:	2201      	movs	r2, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 0201 	and.w	r2, r3, #1
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b03      	cmp	r3, #3
 8002530:	d017      	beq.n	8002562 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d123      	bne.n	80025b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	6939      	ldr	r1, [r7, #16]
 80025b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0203 	and.w	r2, r3, #3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80a4 	beq.w	8002740 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80025f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3318      	adds	r3, #24
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a52      	ldr	r2, [pc, #328]	@ (8002768 <HAL_GPIO_Init+0x2e4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d025      	beq.n	8002670 <HAL_GPIO_Init+0x1ec>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a51      	ldr	r2, [pc, #324]	@ (800276c <HAL_GPIO_Init+0x2e8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d01f      	beq.n	800266c <HAL_GPIO_Init+0x1e8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a50      	ldr	r2, [pc, #320]	@ (8002770 <HAL_GPIO_Init+0x2ec>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d019      	beq.n	8002668 <HAL_GPIO_Init+0x1e4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a4f      	ldr	r2, [pc, #316]	@ (8002774 <HAL_GPIO_Init+0x2f0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_GPIO_Init+0x1e0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a4e      	ldr	r2, [pc, #312]	@ (8002778 <HAL_GPIO_Init+0x2f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00d      	beq.n	8002660 <HAL_GPIO_Init+0x1dc>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a4d      	ldr	r2, [pc, #308]	@ (800277c <HAL_GPIO_Init+0x2f8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d007      	beq.n	800265c <HAL_GPIO_Init+0x1d8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a4c      	ldr	r2, [pc, #304]	@ (8002780 <HAL_GPIO_Init+0x2fc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_GPIO_Init+0x1d4>
 8002654:	2306      	movs	r3, #6
 8002656:	e00c      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002658:	2307      	movs	r3, #7
 800265a:	e00a      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 800265c:	2305      	movs	r3, #5
 800265e:	e008      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002660:	2304      	movs	r3, #4
 8002662:	e006      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002664:	2303      	movs	r3, #3
 8002666:	e004      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002668:	2302      	movs	r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002670:	2300      	movs	r3, #0
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	f002 0203 	and.w	r2, r2, #3
 8002678:	00d2      	lsls	r2, r2, #3
 800267a:	4093      	lsls	r3, r2
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002682:	4938      	ldr	r1, [pc, #224]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3318      	adds	r3, #24
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002690:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026de:	4a21      	ldr	r2, [pc, #132]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800270a:	4a16      	ldr	r2, [pc, #88]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002712:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 8002714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002738:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <HAL_GPIO_Init+0x2e0>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f ae9f 	bne.w	8002494 <HAL_GPIO_Init+0x10>
  }
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	4002f400 	.word	0x4002f400
 8002768:	42020000 	.word	0x42020000
 800276c:	42020400 	.word	0x42020400
 8002770:	42020800 	.word	0x42020800
 8002774:	42020c00 	.word	0x42020c00
 8002778:	42021000 	.word	0x42021000
 800277c:	42021400 	.word	0x42021400
 8002780:	42021800 	.word	0x42021800

08002784 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <HAL_PWREx_GetVoltageRange+0x18>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000

080027a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80027a8:	4b27      	ldr	r3, [pc, #156]	@ (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027b0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80027b2:	f000 f861 	bl	8002878 <HAL_PWREx_SMPS_GetEffectiveMode>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027bc:	d101      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03e      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80027c2:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ce:	d101      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e035      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d101      	bne.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e02f      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027e0:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80027e8:	4917      	ldr	r1, [pc, #92]	@ (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80027f0:	4b16      	ldr	r3, [pc, #88]	@ (800284c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	4a16      	ldr	r2, [pc, #88]	@ (8002850 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	09db      	lsrs	r3, r3, #7
 80027fe:	2232      	movs	r2, #50	@ 0x32
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	4a13      	ldr	r2, [pc, #76]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	3301      	adds	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002810:	e002      	b.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b01      	subs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002824:	d102      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f2      	bne.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002838:	d101      	bne.n	800283e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e000      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40007000 	.word	0x40007000
 800284c:	20000000 	.word	0x20000000
 8002850:	0a7c5ac5 	.word	0x0a7c5ac5
 8002854:	cccccccd 	.word	0xcccccccd

08002858 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002866:	6093      	str	r3, [r2, #8]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800287e:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800288e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	e00a      	b.n	80028ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80028a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	e001      	b.n	80028ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000

080028c0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 bcc2 	b.w	8003258 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d4:	4b99      	ldr	r3, [pc, #612]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028de:	4b97      	ldr	r3, [pc, #604]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80e9 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_RCC_OscConfig+0x4a>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	f040 8083 	bne.w	8002a0a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d17f      	bne.n	8002a0a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290a:	4b8c      	ldr	r3, [pc, #560]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_RCC_OscConfig+0x64>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f000 bc9a 	b.w	8003258 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002928:	4b84      	ldr	r3, [pc, #528]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCC_OscConfig+0x7e>
 8002934:	4b81      	ldr	r3, [pc, #516]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293c:	e005      	b.n	800294a <HAL_RCC_OscConfig+0x8a>
 800293e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800294a:	4293      	cmp	r3, r2
 800294c:	d224      	bcs.n	8002998 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fe74 	bl	8003640 <RCC_SetFlashLatencyFromMSIRange>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f000 bc7a 	b.w	8003258 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4b75      	ldr	r3, [pc, #468]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a74      	ldr	r2, [pc, #464]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b72      	ldr	r3, [pc, #456]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	496f      	ldr	r1, [pc, #444]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4b6e      	ldr	r3, [pc, #440]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	496a      	ldr	r1, [pc, #424]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
 8002996:	e026      	b.n	80029e6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002998:	4b68      	ldr	r3, [pc, #416]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a67      	ldr	r2, [pc, #412]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b65      	ldr	r3, [pc, #404]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	4962      	ldr	r1, [pc, #392]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b6:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	495d      	ldr	r1, [pc, #372]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fe33 	bl	8003640 <RCC_SetFlashLatencyFromMSIRange>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f000 bc39 	b.w	8003258 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029e6:	f000 fe17 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a54      	ldr	r2, [pc, #336]	@ (8002b40 <HAL_RCC_OscConfig+0x280>)
 80029ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029f0:	4b54      	ldr	r3, [pc, #336]	@ (8002b44 <HAL_RCC_OscConfig+0x284>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fd19 	bl	800142c <HAL_InitTick>
 80029fa:	4603      	mov	r3, r0
 80029fc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d060      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	f000 bc27 	b.w	8003258 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d039      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a12:	4b4a      	ldr	r3, [pc, #296]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a49      	ldr	r2, [pc, #292]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd55 	bl	80014cc <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a24:	e00f      	b.n	8002a46 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a26:	f7fe fd51 	bl	80014cc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a34:	4b41      	ldr	r3, [pc, #260]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	f000 bc09 	b.w	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a46:	4b3d      	ldr	r3, [pc, #244]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0e9      	beq.n	8002a26 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a52:	4b3a      	ldr	r3, [pc, #232]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a39      	ldr	r2, [pc, #228]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b37      	ldr	r3, [pc, #220]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	4934      	ldr	r1, [pc, #208]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a70:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	492f      	ldr	r1, [pc, #188]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
 8002a84:	e020      	b.n	8002ac8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a86:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fd1b 	bl	80014cc <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a98:	e00e      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fd17 	bl	80014cc <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d907      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa8:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e3cf      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab8:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ea      	bne.n	8002a9a <HAL_RCC_OscConfig+0x1da>
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d07e      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x226>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d10e      	bne.n	8002afe <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d10b      	bne.n	8002afe <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06e      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x310>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d16a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e3ac      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x256>
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e024      	b.n	8002b60 <HAL_RCC_OscConfig+0x2a0>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b1e:	d113      	bne.n	8002b48 <HAL_RCC_OscConfig+0x288>
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a02      	ldr	r2, [pc, #8]	@ (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e012      	b.n	8002b60 <HAL_RCC_OscConfig+0x2a0>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004
 8002b48:	4b8b      	ldr	r3, [pc, #556]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a8a      	ldr	r2, [pc, #552]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a87      	ldr	r2, [pc, #540]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d019      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fcb0 	bl	80014cc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6e:	e00e      	b.n	8002b8e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fcac 	bl	80014cc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d907      	bls.n	8002b8e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e364      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ea      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2b0>
 8002b9a:	e01a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fc96 	bl	80014cc <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba2:	e00e      	b.n	8002bc2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fc92 	bl	80014cc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	@ 0x64
 8002bb0:	d907      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb2:	4b71      	ldr	r3, [pc, #452]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e34a      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ea      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x2e4>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x330>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d119      	bne.n	8002c1e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d116      	bne.n	8002c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf0:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x348>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e327      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b5b      	ldr	r3, [pc, #364]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4958      	ldr	r1, [pc, #352]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	e04c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d029      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c26:	4b54      	ldr	r3, [pc, #336]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a53      	ldr	r2, [pc, #332]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fc4b 	bl	80014cc <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fc47 	bl	80014cc <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e2ff      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c58:	4b47      	ldr	r3, [pc, #284]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ea      	beq.n	8002c3a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c64:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	4941      	ldr	r1, [pc, #260]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
 8002c78:	e01e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe fc21 	bl	80014cc <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c8c:	e00e      	b.n	8002cac <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fc1d 	bl	80014cc <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d907      	bls.n	8002cac <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c9c:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e2d5      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ea      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d062      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d038      	beq.n	8002d3e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002cd4:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cda:	4a27      	ldr	r2, [pc, #156]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	f023 0310 	bic.w	r3, r3, #16
 8002ce0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ce4:	e007      	b.n	8002cf6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cec:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fbe1 	bl	80014cc <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0c:	e00f      	b.n	8002d2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fbdd 	bl	80014cc <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b07      	cmp	r3, #7
 8002d1a:	d908      	bls.n	8002d2e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e294      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2e:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0e8      	beq.n	8002d0e <HAL_RCC_OscConfig+0x44e>
 8002d3c:	e025      	b.n	8002d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d44:	4a0c      	ldr	r2, [pc, #48]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fbbd 	bl	80014cc <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d54:	e012      	b.n	8002d7c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fbb9 	bl	80014cc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b07      	cmp	r3, #7
 8002d62:	d90b      	bls.n	8002d7c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e270      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d7c:	4ba8      	ldr	r3, [pc, #672]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e5      	bne.n	8002d56 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 812d 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b9d      	ldr	r3, [pc, #628]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	4a9c      	ldr	r2, [pc, #624]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db4:	4b9a      	ldr	r3, [pc, #616]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc4:	4b97      	ldr	r3, [pc, #604]	@ (8003024 <HAL_RCC_OscConfig+0x764>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11e      	bne.n	8002e0e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd0:	4b94      	ldr	r3, [pc, #592]	@ (8003024 <HAL_RCC_OscConfig+0x764>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a93      	ldr	r2, [pc, #588]	@ (8003024 <HAL_RCC_OscConfig+0x764>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fb76 	bl	80014cc <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de2:	e00e      	b.n	8002e02 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fb72 	bl	80014cc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d907      	bls.n	8002e02 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	4b8c      	ldr	r3, [pc, #560]	@ (8003024 <HAL_RCC_OscConfig+0x764>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e22a      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e02:	4b88      	ldr	r3, [pc, #544]	@ (8003024 <HAL_RCC_OscConfig+0x764>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ea      	beq.n	8002de4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e26:	4b7e      	ldr	r3, [pc, #504]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	4a7c      	ldr	r2, [pc, #496]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e36:	4b7a      	ldr	r3, [pc, #488]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3c:	4a78      	ldr	r2, [pc, #480]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e46:	e018      	b.n	8002e7a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e48:	4b75      	ldr	r3, [pc, #468]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	4a74      	ldr	r2, [pc, #464]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e58:	e00f      	b.n	8002e7a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e5a:	4b71      	ldr	r3, [pc, #452]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	4a6f      	ldr	r2, [pc, #444]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	4a6b      	ldr	r2, [pc, #428]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e72:	f023 0304 	bic.w	r3, r3, #4
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d068      	beq.n	8002f54 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fb23 	bl	80014cc <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e88:	e011      	b.n	8002eae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fb1f 	bl	80014cc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d908      	bls.n	8002eae <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9c:	4b60      	ldr	r3, [pc, #384]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1d4      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eae:	4b5c      	ldr	r3, [pc, #368]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0e6      	beq.n	8002e8a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d022      	beq.n	8002f0e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ec8:	4b55      	ldr	r3, [pc, #340]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	4a54      	ldr	r2, [pc, #336]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ed8:	e011      	b.n	8002efe <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe faf7 	bl	80014cc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002eec:	4b4c      	ldr	r3, [pc, #304]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1ac      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002efe:	4b48      	ldr	r3, [pc, #288]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0e6      	beq.n	8002eda <HAL_RCC_OscConfig+0x61a>
 8002f0c:	e068      	b.n	8002fe0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f0e:	4b44      	ldr	r3, [pc, #272]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	4a42      	ldr	r2, [pc, #264]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f1e:	e011      	b.n	8002f44 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe fad4 	bl	80014cc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e189      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f44:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e6      	bne.n	8002f20 <HAL_RCC_OscConfig+0x660>
 8002f52:	e045      	b.n	8002fe0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe faba 	bl	80014cc <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5a:	e011      	b.n	8002f80 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fab6 	bl	80014cc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d908      	bls.n	8002f80 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e16b      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f80:	4b27      	ldr	r3, [pc, #156]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e6      	bne.n	8002f5c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d021      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f9c:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fac:	e011      	b.n	8002fd2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fa8d 	bl	80014cc <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d908      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fc0:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e142      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fd2:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e6      	bne.n	8002fae <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a0d      	ldr	r2, [pc, #52]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04f      	beq.n	800309e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	d028      	beq.n	8003058 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 8003008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800300c:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <HAL_RCC_OscConfig+0x760>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe fa59 	bl	80014cc <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x788>
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003028:	f7fe fa50 	bl	80014cc <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d908      	bls.n	8003048 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003036:	4b8a      	ldr	r3, [pc, #552]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e107      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003048:	4b85      	ldr	r3, [pc, #532]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 800304a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0e8      	beq.n	8003028 <HAL_RCC_OscConfig+0x768>
 8003056:	e022      	b.n	800309e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003058:	4b81      	ldr	r3, [pc, #516]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 800305a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800305e:	4a80      	ldr	r2, [pc, #512]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe fa30 	bl	80014cc <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800306e:	e00f      	b.n	8003090 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003070:	f7fe fa2c 	bl	80014cc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d908      	bls.n	8003090 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800307e:	4b78      	ldr	r3, [pc, #480]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003080:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0e3      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003090:	4b73      	ldr	r3, [pc, #460]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e8      	bne.n	8003070 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80d7 	beq.w	8003256 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	f000 8091 	beq.w	80031d8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d166      	bne.n	800318c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b68      	ldr	r3, [pc, #416]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a67      	ldr	r2, [pc, #412]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80030c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f9ff 	bl	80014cc <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	e00e      	b.n	80030f0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe f9fb 	bl	80014cc <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d907      	bls.n	80030f0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0b3      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ea      	bne.n	80030d2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fc:	4b58      	ldr	r3, [pc, #352]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b58      	ldr	r3, [pc, #352]	@ (8003264 <HAL_RCC_OscConfig+0x9a4>)
 8003102:	4013      	ands	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800310c:	3a01      	subs	r2, #1
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003116:	0212      	lsls	r2, r2, #8
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0552      	lsls	r2, r2, #21
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800312a:	0852      	lsrs	r2, r2, #1
 800312c:	3a01      	subs	r2, #1
 800312e:	0652      	lsls	r2, r2, #25
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003136:	06d2      	lsls	r2, r2, #27
 8003138:	430a      	orrs	r2, r1
 800313a:	4949      	ldr	r1, [pc, #292]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a46      	ldr	r2, [pc, #280]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	4b44      	ldr	r3, [pc, #272]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a43      	ldr	r2, [pc, #268]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f9b8 	bl	80014cc <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	e00e      	b.n	800317e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe f9b4 	bl	80014cc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d907      	bls.n	800317e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	4b3c      	ldr	r3, [pc, #240]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e06c      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4b38      	ldr	r3, [pc, #224]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ea      	beq.n	8003160 <HAL_RCC_OscConfig+0x8a0>
 800318a:	e064      	b.n	8003256 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318c:	4b34      	ldr	r3, [pc, #208]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a33      	ldr	r2, [pc, #204]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 8003192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe f998 	bl	80014cc <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319e:	e00e      	b.n	80031be <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe f994 	bl	80014cc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d907      	bls.n	80031be <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04c      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031be:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ea      	bne.n	80031a0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ca:	4b25      	ldr	r3, [pc, #148]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	4924      	ldr	r1, [pc, #144]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80031d0:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_RCC_OscConfig+0x9a8>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	60cb      	str	r3, [r1, #12]
 80031d6:	e03e      	b.n	8003256 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e039      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <HAL_RCC_OscConfig+0x9a0>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d12c      	bne.n	8003252 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003202:	3b01      	subs	r3, #1
 8003204:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d123      	bne.n	8003252 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d11b      	bne.n	8003252 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d113      	bne.n	8003252 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d109      	bne.n	8003252 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	019f800c 	.word	0x019f800c
 8003268:	feeefffc 	.word	0xfeeefffc

0800326c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e11c      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b90      	ldr	r3, [pc, #576]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d910      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b8d      	ldr	r3, [pc, #564]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	498b      	ldr	r1, [pc, #556]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b89      	ldr	r3, [pc, #548]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e104      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b81      	ldr	r3, [pc, #516]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d908      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b7e      	ldr	r3, [pc, #504]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	497b      	ldr	r1, [pc, #492]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8085 	beq.w	80033fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d11f      	bne.n	8003338 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f8:	4b74      	ldr	r3, [pc, #464]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0da      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003308:	f000 f9fe 	bl	8003708 <RCC_GetSysClockFreqFromPLLSource>
 800330c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4a6f      	ldr	r2, [pc, #444]	@ (80034d0 <HAL_RCC_ClockConfig+0x264>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d947      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003316:	4b6d      	ldr	r3, [pc, #436]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d141      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003322:	4b6a      	ldr	r3, [pc, #424]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800332a:	4a68      	ldr	r2, [pc, #416]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e036      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d107      	bne.n	8003350 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003340:	4b62      	ldr	r3, [pc, #392]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d115      	bne.n	8003378 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b6      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003358:	4b5c      	ldr	r3, [pc, #368]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0aa      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003368:	4b58      	ldr	r3, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0a2      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003378:	f000 f8b0 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800337c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4a53      	ldr	r2, [pc, #332]	@ (80034d0 <HAL_RCC_ClockConfig+0x264>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d90f      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003392:	4b4e      	ldr	r3, [pc, #312]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800339a:	4a4c      	ldr	r2, [pc, #304]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 800339c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b49      	ldr	r3, [pc, #292]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4946      	ldr	r1, [pc, #280]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe f888 	bl	80014cc <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e013      	b.n	80033e8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe f884 	bl	80014cc <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d90a      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b3e      	ldr	r3, [pc, #248]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e06a      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e8:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 020c 	and.w	r2, r3, #12
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d1e2      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b80      	cmp	r3, #128	@ 0x80
 80033fe:	d105      	bne.n	800340c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003400:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a31      	ldr	r2, [pc, #196]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800340a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003424:	429a      	cmp	r2, r3
 8003426:	d208      	bcs.n	800343a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4925      	ldr	r1, [pc, #148]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800343a:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d210      	bcs.n	800346a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003448:	4b1f      	ldr	r3, [pc, #124]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 020f 	bic.w	r2, r3, #15
 8003450:	491d      	ldr	r1, [pc, #116]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_RCC_ClockConfig+0x25c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d001      	beq.n	800346a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e029      	b.n	80034be <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4912      	ldr	r1, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	490a      	ldr	r1, [pc, #40]	@ (80034cc <HAL_RCC_ClockConfig+0x260>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034a8:	f000 f8b6 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x268>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd ffb8 	bl	800142c <HAL_InitTick>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40022000 	.word	0x40022000
 80034cc:	40021000 	.word	0x40021000
 80034d0:	04c4b400 	.word	0x04c4b400
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f4:	4b44      	ldr	r3, [pc, #272]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d121      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d11e      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003510:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800351c:	4b3a      	ldr	r3, [pc, #232]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e005      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800352c:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003538:	4a34      	ldr	r2, [pc, #208]	@ (800360c <HAL_RCC_GetSysClockFreq+0x130>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d102      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003554:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x134>)
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e004      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d101      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003560:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 8003562:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d146      	bne.n	80035f8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800356a:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3301      	adds	r3, #1
 8003580:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d003      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0xb4>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d00d      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0xce>
 800358e:	e019      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003590:	4a1f      	ldr	r2, [pc, #124]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x134>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 800359a:	68d2      	ldr	r2, [r2, #12]
 800359c:	0a12      	lsrs	r2, r2, #8
 800359e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
        break;
 80035a8:	e019      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x138>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4a15      	ldr	r2, [pc, #84]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035b4:	68d2      	ldr	r2, [r2, #12]
 80035b6:	0a12      	lsrs	r2, r2, #8
 80035b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
        break;
 80035c2:	e00c      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035ce:	68d2      	ldr	r2, [r2, #12]
 80035d0:	0a12      	lsrs	r2, r2, #8
 80035d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
        break;
 80035dc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	0e5b      	lsrs	r3, r3, #25
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	3301      	adds	r3, #1
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035f8:	69bb      	ldr	r3, [r7, #24]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	080043a0 	.word	0x080043a0
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800361c:	f7ff ff5e 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_RCC_GetHCLKFreq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	4903      	ldr	r1, [pc, #12]	@ (800363c <HAL_RCC_GetHCLKFreq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	08004390 	.word	0x08004390

08003640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800364c:	4b2c      	ldr	r3, [pc, #176]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003658:	f7ff f894 	bl	8002784 <HAL_PWREx_GetVoltageRange>
 800365c:	6138      	str	r0, [r7, #16]
 800365e:	e014      	b.n	800368a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	4a26      	ldr	r2, [pc, #152]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	@ 0x58
 800366c:	4b24      	ldr	r3, [pc, #144]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003678:	f7ff f884 	bl	8002784 <HAL_PWREx_GetVoltageRange>
 800367c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003688:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003696:	d10b      	bne.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b80      	cmp	r3, #128	@ 0x80
 800369c:	d919      	bls.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80036a2:	d902      	bls.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036a4:	2302      	movs	r3, #2
 80036a6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80036a8:	e013      	b.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036aa:	2301      	movs	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80036ae:	e010      	b.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b80      	cmp	r3, #128	@ 0x80
 80036b4:	d902      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036b6:	2303      	movs	r3, #3
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e00a      	b.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b80      	cmp	r3, #128	@ 0x80
 80036c0:	d102      	bne.n	80036c8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036c2:	2302      	movs	r3, #2
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e004      	b.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b70      	cmp	r3, #112	@ 0x70
 80036cc:	d101      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036ce:	2301      	movs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	490a      	ldr	r1, [pc, #40]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40022000 	.word	0x40022000

08003708 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800370e:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003718:	4b2e      	ldr	r3, [pc, #184]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3301      	adds	r3, #1
 8003724:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d015      	beq.n	8003758 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d839      	bhi.n	80037a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d01c      	beq.n	8003772 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d133      	bne.n	80037a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373e:	4a26      	ldr	r2, [pc, #152]	@ (80037d8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4a23      	ldr	r2, [pc, #140]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003748:	68d2      	ldr	r2, [r2, #12]
 800374a:	0a12      	lsrs	r2, r2, #8
 800374c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	613b      	str	r3, [r7, #16]
      break;
 8003756:	e029      	b.n	80037ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003758:	4a20      	ldr	r2, [pc, #128]	@ (80037dc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003762:	68d2      	ldr	r2, [r2, #12]
 8003764:	0a12      	lsrs	r2, r2, #8
 8003766:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	613b      	str	r3, [r7, #16]
      break;
 8003770:	e01c      	b.n	80037ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003772:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800377e:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e005      	b.n	800379a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800379a:	4a11      	ldr	r2, [pc, #68]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	613b      	str	r3, [r7, #16]
        break;
 80037a4:	e002      	b.n	80037ac <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
      break;
 80037aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0e5b      	lsrs	r3, r3, #25
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80037c6:	683b      	ldr	r3, [r7, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40021000 	.word	0x40021000
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200
 80037e0:	080043a0 	.word	0x080043a0

080037e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ec:	2300      	movs	r3, #0
 80037ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037f0:	2300      	movs	r3, #0
 80037f2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d040      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003804:	2b80      	cmp	r3, #128	@ 0x80
 8003806:	d02a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003808:	2b80      	cmp	r3, #128	@ 0x80
 800380a:	d825      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800380c:	2b60      	cmp	r3, #96	@ 0x60
 800380e:	d026      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003810:	2b60      	cmp	r3, #96	@ 0x60
 8003812:	d821      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d006      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003818:	2b40      	cmp	r3, #64	@ 0x40
 800381a:	d81d      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d010      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003824:	e018      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003826:	4b8f      	ldr	r3, [pc, #572]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a8e      	ldr	r2, [pc, #568]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003830:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fb56 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003844:	e00c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3320      	adds	r3, #32
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fc33 	bl	80040b8 <RCCEx_PLLSAI2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
        break;
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	7ffb      	ldrb	r3, [r7, #31]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003866:	4b7f      	ldr	r3, [pc, #508]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800386c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003874:	497b      	ldr	r1, [pc, #492]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800387c:	e001      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d047      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003896:	d030      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389c:	d82a      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800389e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a2:	d02a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a8:	d824      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b4:	d81e      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038be:	d010      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038c0:	e018      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038c2:	4b68      	ldr	r3, [pc, #416]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4a67      	ldr	r2, [pc, #412]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038ce:	e015      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fb08 	bl	8003eec <RCCEx_PLLSAI1_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038e0:	e00c      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3320      	adds	r3, #32
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fbe5 	bl	80040b8 <RCCEx_PLLSAI2_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
        break;
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80038fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003902:	4b58      	ldr	r3, [pc, #352]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003904:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	4954      	ldr	r1, [pc, #336]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003918:	e001      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	7ffb      	ldrb	r3, [r7, #31]
 800391c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80ab 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003930:	4b4c      	ldr	r3, [pc, #304]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b49      	ldr	r3, [pc, #292]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	4a48      	ldr	r2, [pc, #288]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	@ 0x58
 8003948:	4b46      	ldr	r3, [pc, #280]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4b43      	ldr	r3, [pc, #268]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a42      	ldr	r2, [pc, #264]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003964:	f7fd fdb2 	bl	80014cc <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800396a:	e00f      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fdae 	bl	80014cc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d908      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800397a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800398a:	e006      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398c:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0e9      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800399a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800399c:	7ffb      	ldrb	r3, [r7, #31]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d164      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a2:	4b30      	ldr	r3, [pc, #192]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d019      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c0:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039dc:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e2:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01f      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fd65 	bl	80014cc <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a04:	e012      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fd fd61 	bl	80014cc <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d909      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a18:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003a2a:	e007      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0e5      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003a3c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a44:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a54:	4903      	ldr	r1, [pc, #12]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a5c:	e008      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	77bb      	strb	r3, [r7, #30]
 8003a62:	e005      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a76:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	4a9b      	ldr	r2, [pc, #620]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8e:	4b96      	ldr	r3, [pc, #600]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a94:	f023 0203 	bic.w	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9c:	4992      	ldr	r1, [pc, #584]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab6:	f023 020c 	bic.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	498a      	ldr	r1, [pc, #552]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad2:	4b85      	ldr	r3, [pc, #532]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	4981      	ldr	r1, [pc, #516]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003af4:	4b7c      	ldr	r3, [pc, #496]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	4979      	ldr	r1, [pc, #484]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b16:	4b74      	ldr	r3, [pc, #464]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	4970      	ldr	r1, [pc, #448]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b38:	4b6b      	ldr	r3, [pc, #428]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	4968      	ldr	r1, [pc, #416]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	495f      	ldr	r1, [pc, #380]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8a:	4957      	ldr	r1, [pc, #348]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b9e:	4b52      	ldr	r3, [pc, #328]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bac:	494e      	ldr	r1, [pc, #312]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d031      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc8:	d00e      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003bca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bce:	d814      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd8:	d10f      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bda:	4b43      	ldr	r3, [pc, #268]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a42      	ldr	r2, [pc, #264]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003be6:	e00c      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f97c 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	77fb      	strb	r3, [r7, #31]
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c08:	4b37      	ldr	r3, [pc, #220]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c16:	4934      	ldr	r1, [pc, #208]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c1e:	e001      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
 8003c22:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3e:	492a      	ldr	r1, [pc, #168]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c52:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	4921      	ldr	r1, [pc, #132]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c74:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c82:	4919      	ldr	r1, [pc, #100]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c96:	4b14      	ldr	r3, [pc, #80]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c9c:	f023 0203 	bic.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	4910      	ldr	r1, [pc, #64]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d02b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc6:	4908      	ldr	r1, [pc, #32]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cd6:	d109      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a02      	ldr	r2, [pc, #8]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce2:	60d3      	str	r3, [r2, #12]
 8003ce4:	e014      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f8f5 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003d06:	7ffb      	ldrb	r3, [r7, #31]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d04a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d24:	d108      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003d26:	4b70      	ldr	r3, [pc, #448]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d32:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d36:	e012      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d38:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d46:	4968      	ldr	r1, [pc, #416]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d4e:	4b66      	ldr	r3, [pc, #408]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d54:	4a64      	ldr	r2, [pc, #400]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d5a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d66:	d10d      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f8bc 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d78:	7ffb      	ldrb	r3, [r7, #31]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d019      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	77bb      	strb	r3, [r7, #30]
 8003d82:	e016      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8e:	4b56      	ldr	r3, [pc, #344]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4a55      	ldr	r2, [pc, #340]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d98:	60d3      	str	r3, [r2, #12]
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da4:	d105      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003da6:	4b50      	ldr	r3, [pc, #320]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4a4f      	ldr	r2, [pc, #316]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dcc:	4946      	ldr	r1, [pc, #280]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ddc:	d106      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dde:	4b42      	ldr	r3, [pc, #264]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	4a41      	ldr	r2, [pc, #260]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003de4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de8:	60d3      	str	r3, [r2, #12]
 8003dea:	e011      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f875 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7ffb      	ldrb	r3, [r7, #31]
 8003e0e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e2c:	492e      	ldr	r1, [pc, #184]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f850 	bl	8003eec <RCCEx_PLLSAI1_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e50:	7ffb      	ldrb	r3, [r7, #31]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e6c:	f023 0204 	bic.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e76:	491c      	ldr	r1, [pc, #112]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e90:	f023 0218 	bic.w	r2, r3, #24
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	4913      	ldr	r1, [pc, #76]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d017      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003eae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebe:	490a      	ldr	r1, [pc, #40]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ed0:	d105      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed2:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003edc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003ede:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000

08003eec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d018      	beq.n	8003f34 <RCCEx_PLLSAI1_Config+0x48>
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d81f      	bhi.n	8003f46 <RCCEx_PLLSAI1_Config+0x5a>
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d002      	beq.n	8003f10 <RCCEx_PLLSAI1_Config+0x24>
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d009      	beq.n	8003f22 <RCCEx_PLLSAI1_Config+0x36>
 8003f0e:	e01a      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f10:	4b65      	ldr	r3, [pc, #404]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d117      	bne.n	8003f4c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f20:	e014      	b.n	8003f4c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f22:	4b61      	ldr	r3, [pc, #388]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d110      	bne.n	8003f50 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f32:	e00d      	b.n	8003f50 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003f34:	4b5c      	ldr	r3, [pc, #368]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f44:	e006      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4a:	e004      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003f54:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 809f 	bne.w	800409c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f5e:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a51      	ldr	r2, [pc, #324]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6a:	f7fd faaf 	bl	80014cc <HAL_GetTick>
 8003f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f70:	e00f      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f72:	f7fd faab 	bl	80014cc <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d908      	bls.n	8003f92 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f80:	4b49      	ldr	r3, [pc, #292]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f90:	e006      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f92:	4b45      	ldr	r3, [pc, #276]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e9      	bne.n	8003f72 <RCCEx_PLLSAI1_Config+0x86>
 8003f9e:	e000      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003fa0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d179      	bne.n	800409c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fae:	4b3e      	ldr	r3, [pc, #248]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80040ac <RCCEx_PLLSAI1_Config+0x1c0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6892      	ldr	r2, [r2, #8]
 8003fba:	0211      	lsls	r1, r2, #8
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68d2      	ldr	r2, [r2, #12]
 8003fc0:	06d2      	lsls	r2, r2, #27
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6852      	ldr	r2, [r2, #4]
 8003fc8:	3a01      	subs	r2, #1
 8003fca:	0112      	lsls	r2, r2, #4
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	4934      	ldr	r1, [pc, #208]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	610b      	str	r3, [r1, #16]
 8003fda:	e033      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d118      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	4b32      	ldr	r3, [pc, #200]	@ (80040b0 <RCCEx_PLLSAI1_Config+0x1c4>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6892      	ldr	r2, [r2, #8]
 8003fee:	0211      	lsls	r1, r2, #8
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6912      	ldr	r2, [r2, #16]
 8003ff4:	0852      	lsrs	r2, r2, #1
 8003ff6:	3a01      	subs	r2, #1
 8003ff8:	0552      	lsls	r2, r2, #21
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6852      	ldr	r2, [r2, #4]
 8004000:	3a01      	subs	r2, #1
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	4926      	ldr	r1, [pc, #152]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	610b      	str	r3, [r1, #16]
 8004012:	e017      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004014:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6892      	ldr	r2, [r2, #8]
 8004020:	0211      	lsls	r1, r2, #8
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6952      	ldr	r2, [r2, #20]
 8004026:	0852      	lsrs	r2, r2, #1
 8004028:	3a01      	subs	r2, #1
 800402a:	0652      	lsls	r2, r2, #25
 800402c:	4311      	orrs	r1, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6852      	ldr	r2, [r2, #4]
 8004032:	3a01      	subs	r2, #1
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	4311      	orrs	r1, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	491a      	ldr	r1, [pc, #104]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004044:	4b18      	ldr	r3, [pc, #96]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800404a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800404e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fd fa3c 	bl	80014cc <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004056:	e00f      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004058:	f7fd fa38 	bl	80014cc <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d908      	bls.n	8004078 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004066:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004076:	e006      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0e9      	beq.n	8004058 <RCCEx_PLLSAI1_Config+0x16c>
 8004084:	e000      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004086:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4904      	ldr	r1, [pc, #16]	@ (80040a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	07ff800c 	.word	0x07ff800c
 80040b0:	ff9f800c 	.word	0xff9f800c
 80040b4:	f9ff800c 	.word	0xf9ff800c

080040b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d018      	beq.n	8004100 <RCCEx_PLLSAI2_Config+0x48>
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d81f      	bhi.n	8004112 <RCCEx_PLLSAI2_Config+0x5a>
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d002      	beq.n	80040dc <RCCEx_PLLSAI2_Config+0x24>
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d009      	beq.n	80040ee <RCCEx_PLLSAI2_Config+0x36>
 80040da:	e01a      	b.n	8004112 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d117      	bne.n	8004118 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ec:	e014      	b.n	8004118 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ee:	4b46      	ldr	r3, [pc, #280]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d110      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fe:	e00d      	b.n	800411c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004100:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e006      	b.n	8004120 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
      break;
 8004116:	e004      	b.n	8004122 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004120:	bf00      	nop
  }

  if (status == HAL_OK)
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d169      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004128:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 800412e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004134:	f7fd f9ca 	bl	80014cc <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800413a:	e00f      	b.n	800415c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800413c:	f7fd f9c6 	bl	80014cc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d908      	bls.n	800415c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800414a:	4b2f      	ldr	r3, [pc, #188]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800415a:	e006      	b.n	800416a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800415c:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e9      	bne.n	800413c <RCCEx_PLLSAI2_Config+0x84>
 8004168:	e000      	b.n	800416c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800416a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d144      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d115      	bne.n	80041a4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004178:	4b23      	ldr	r3, [pc, #140]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	4b23      	ldr	r3, [pc, #140]	@ (800420c <RCCEx_PLLSAI2_Config+0x154>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	0211      	lsls	r1, r2, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	06d2      	lsls	r2, r2, #27
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6852      	ldr	r2, [r2, #4]
 8004192:	3a01      	subs	r2, #1
 8004194:	0112      	lsls	r2, r2, #4
 8004196:	4311      	orrs	r1, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	491a      	ldr	r1, [pc, #104]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041a4:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a17      	ldr	r2, [pc, #92]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd f98c 	bl	80014cc <HAL_GetTick>
 80041b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041b6:	e00f      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041b8:	f7fd f988 	bl	80014cc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d908      	bls.n	80041d8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041c6:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80041d6:	e006      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0e9      	beq.n	80041b8 <RCCEx_PLLSAI2_Config+0x100>
 80041e4:	e000      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80041e6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	4904      	ldr	r1, [pc, #16]	@ (8004208 <RCCEx_PLLSAI2_Config+0x150>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	07ff800c 	.word	0x07ff800c

08004210 <_ZdlPvj>:
 8004210:	f000 b800 	b.w	8004214 <_ZdlPv>

08004214 <_ZdlPv>:
 8004214:	f000 b800 	b.w	8004218 <free>

08004218 <free>:
 8004218:	4b02      	ldr	r3, [pc, #8]	@ (8004224 <free+0xc>)
 800421a:	4601      	mov	r1, r0
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	f000 b84b 	b.w	80042b8 <_free_r>
 8004222:	bf00      	nop
 8004224:	2000000c 	.word	0x2000000c

08004228 <__malloc_lock>:
 8004228:	4801      	ldr	r0, [pc, #4]	@ (8004230 <__malloc_lock+0x8>)
 800422a:	f000 b835 	b.w	8004298 <__retarget_lock_acquire_recursive>
 800422e:	bf00      	nop
 8004230:	20000698 	.word	0x20000698

08004234 <__malloc_unlock>:
 8004234:	4801      	ldr	r0, [pc, #4]	@ (800423c <__malloc_unlock+0x8>)
 8004236:	f000 b830 	b.w	800429a <__retarget_lock_release_recursive>
 800423a:	bf00      	nop
 800423c:	20000698 	.word	0x20000698

08004240 <memset>:
 8004240:	4402      	add	r2, r0
 8004242:	4603      	mov	r3, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	@ (8004288 <__libc_init_array+0x38>)
 8004254:	2600      	movs	r6, #0
 8004256:	4c0d      	ldr	r4, [pc, #52]	@ (800428c <__libc_init_array+0x3c>)
 8004258:	1b64      	subs	r4, r4, r5
 800425a:	10a4      	asrs	r4, r4, #2
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	@ (8004290 <__libc_init_array+0x40>)
 8004262:	2600      	movs	r6, #0
 8004264:	4c0b      	ldr	r4, [pc, #44]	@ (8004294 <__libc_init_array+0x44>)
 8004266:	f000 f871 	bl	800434c <_init>
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	3601      	adds	r6, #1
 800427a:	4798      	blx	r3
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	3601      	adds	r6, #1
 8004284:	4798      	blx	r3
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	080043f0 	.word	0x080043f0
 800428c:	080043f0 	.word	0x080043f0
 8004290:	080043f0 	.word	0x080043f0
 8004294:	080043f4 	.word	0x080043f4

08004298 <__retarget_lock_acquire_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_release_recursive>:
 800429a:	4770      	bx	lr

0800429c <memcpy>:
 800429c:	440a      	add	r2, r1
 800429e:	1e43      	subs	r3, r0, #1
 80042a0:	4291      	cmp	r1, r2
 80042a2:	d100      	bne.n	80042a6 <memcpy+0xa>
 80042a4:	4770      	bx	lr
 80042a6:	b510      	push	{r4, lr}
 80042a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ac:	4291      	cmp	r1, r2
 80042ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b2:	d1f9      	bne.n	80042a8 <memcpy+0xc>
 80042b4:	bd10      	pop	{r4, pc}
	...

080042b8 <_free_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4605      	mov	r5, r0
 80042bc:	2900      	cmp	r1, #0
 80042be:	d041      	beq.n	8004344 <_free_r+0x8c>
 80042c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c4:	1f0c      	subs	r4, r1, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb8      	it	lt
 80042ca:	18e4      	addlt	r4, r4, r3
 80042cc:	f7ff ffac 	bl	8004228 <__malloc_lock>
 80042d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004348 <_free_r+0x90>)
 80042d2:	6813      	ldr	r3, [r2, #0]
 80042d4:	b933      	cbnz	r3, 80042e4 <_free_r+0x2c>
 80042d6:	6063      	str	r3, [r4, #4]
 80042d8:	6014      	str	r4, [r2, #0]
 80042da:	4628      	mov	r0, r5
 80042dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e0:	f7ff bfa8 	b.w	8004234 <__malloc_unlock>
 80042e4:	42a3      	cmp	r3, r4
 80042e6:	d908      	bls.n	80042fa <_free_r+0x42>
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	1821      	adds	r1, r4, r0
 80042ec:	428b      	cmp	r3, r1
 80042ee:	bf01      	itttt	eq
 80042f0:	6819      	ldreq	r1, [r3, #0]
 80042f2:	685b      	ldreq	r3, [r3, #4]
 80042f4:	1809      	addeq	r1, r1, r0
 80042f6:	6021      	streq	r1, [r4, #0]
 80042f8:	e7ed      	b.n	80042d6 <_free_r+0x1e>
 80042fa:	461a      	mov	r2, r3
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	b10b      	cbz	r3, 8004304 <_free_r+0x4c>
 8004300:	42a3      	cmp	r3, r4
 8004302:	d9fa      	bls.n	80042fa <_free_r+0x42>
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	1850      	adds	r0, r2, r1
 8004308:	42a0      	cmp	r0, r4
 800430a:	d10b      	bne.n	8004324 <_free_r+0x6c>
 800430c:	6820      	ldr	r0, [r4, #0]
 800430e:	4401      	add	r1, r0
 8004310:	1850      	adds	r0, r2, r1
 8004312:	6011      	str	r1, [r2, #0]
 8004314:	4283      	cmp	r3, r0
 8004316:	d1e0      	bne.n	80042da <_free_r+0x22>
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4408      	add	r0, r1
 800431e:	6053      	str	r3, [r2, #4]
 8004320:	6010      	str	r0, [r2, #0]
 8004322:	e7da      	b.n	80042da <_free_r+0x22>
 8004324:	d902      	bls.n	800432c <_free_r+0x74>
 8004326:	230c      	movs	r3, #12
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	e7d6      	b.n	80042da <_free_r+0x22>
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	1821      	adds	r1, r4, r0
 8004330:	428b      	cmp	r3, r1
 8004332:	bf02      	ittt	eq
 8004334:	6819      	ldreq	r1, [r3, #0]
 8004336:	685b      	ldreq	r3, [r3, #4]
 8004338:	1809      	addeq	r1, r1, r0
 800433a:	6063      	str	r3, [r4, #4]
 800433c:	bf08      	it	eq
 800433e:	6021      	streq	r1, [r4, #0]
 8004340:	6054      	str	r4, [r2, #4]
 8004342:	e7ca      	b.n	80042da <_free_r+0x22>
 8004344:	bd38      	pop	{r3, r4, r5, pc}
 8004346:	bf00      	nop
 8004348:	2000055c 	.word	0x2000055c

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
